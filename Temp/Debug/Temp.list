
Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008ee8  08008ee8  00018ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800932c  0800932c  00020318  2**0
                  CONTENTS
  4 .ARM          00000008  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009334  08009334  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0800933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000318  08009654  00020318  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08009654  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ee8  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1a  00000000  00000000  00036230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00039d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028915  00000000  00000000  0003ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf6  00000000  00000000  0006346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef65e  00000000  00000000  00076063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001656c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  00165714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000318 	.word	0x20000318
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ed0 	.word	0x08008ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	08008ed0 	.word	0x08008ed0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f023 030f 	bic.w	r3, r3, #15
 8000eb6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000eb8:	7bbb      	ldrb	r3, [r7, #14]
 8000eba:	f043 030c 	orr.w	r3, r3, #12
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	723b      	strb	r3, [r7, #8]
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 030c 	orr.w	r3, r3, #12
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	72bb      	strb	r3, [r7, #10]
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <lcd16x2_i2c_sendCommand+0x60>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <lcd16x2_i2c_sendCommand+0x64>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	f107 0208 	add.w	r2, r7, #8
 8000eee:	23c8      	movs	r3, #200	; 0xc8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	f002 f964 	bl	80031c0 <HAL_I2C_Master_Transmit>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000334 	.word	0x20000334
 8000f04:	20000338 	.word	0x20000338

08000f08 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f023 030f 	bic.w	r3, r3, #15
 8000f1e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <lcd16x2_i2c_sendData+0x60>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <lcd16x2_i2c_sendData+0x64>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	23c8      	movs	r3, #200	; 0xc8
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	f002 f930 	bl	80031c0 <HAL_I2C_Master_Transmit>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000334 	.word	0x20000334
 8000f6c:	20000338 	.word	0x20000338

08000f70 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f001 fc53 	bl	8002824 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000f7e:	4a30      	ldr	r2, [pc, #192]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	214e      	movs	r1, #78	; 0x4e
 8000f90:	f002 fc38 	bl	8003804 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d010      	beq.n	8000fbc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	217e      	movs	r1, #126	; 0x7e
 8000fa6:	f002 fc2d 	bl	8003804 <HAL_I2C_IsDeviceReady>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e040      	b.n	8001036 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <lcd16x2_i2c_init+0xd4>)
 8000fb6:	227e      	movs	r2, #126	; 0x7e
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e002      	b.n	8000fc2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <lcd16x2_i2c_init+0xd4>)
 8000fbe:	224e      	movs	r2, #78	; 0x4e
 8000fc0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000fc2:	202d      	movs	r0, #45	; 0x2d
 8000fc4:	f001 fc2e 	bl	8002824 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000fc8:	2030      	movs	r0, #48	; 0x30
 8000fca:	f7ff ff69 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000fce:	2005      	movs	r0, #5
 8000fd0:	f001 fc28 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fd4:	2030      	movs	r0, #48	; 0x30
 8000fd6:	f7ff ff63 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 fc22 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fe0:	2030      	movs	r0, #48	; 0x30
 8000fe2:	f7ff ff5d 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000fe6:	2008      	movs	r0, #8
 8000fe8:	f001 fc1c 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ff57 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f001 fc16 	bl	8002824 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f7ff ff51 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 fc10 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff ff4b 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f001 fc0a 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff ff45 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001016:	2003      	movs	r0, #3
 8001018:	f001 fc04 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800101c:	2006      	movs	r0, #6
 800101e:	f7ff ff3f 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 fbfe 	bl	8002824 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001028:	200c      	movs	r0, #12
 800102a:	f7ff ff39 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800102e:	2003      	movs	r0, #3
 8001030:	f001 fbf8 	bl	8002824 <HAL_Delay>

  return true;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000334 	.word	0x20000334
 8001044:	20000338 	.word	0x20000338

08001048 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d108      	bne.n	8001078 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff15 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001076:	e007      	b.n	8001088 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800107e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff0c 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8001094:	2100      	movs	r1, #0
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffd6 	bl	8001048 <lcd16x2_i2c_setCursor>
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80010a0:	b40f      	push	{r0, r1, r2, r3}
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b089      	sub	sp, #36	; 0x24
 80010a6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80010a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ac:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 fcc4 	bl	8006a44 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
 80010c0:	e00b      	b.n	80010da <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80010c2:	7ffb      	ldrb	r3, [r7, #31]
 80010c4:	f107 0220 	add.w	r2, r7, #32
 80010c8:	4413      	add	r3, r2
 80010ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff1a 	bl	8000f08 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010d4:	7ffb      	ldrb	r3, [r7, #31]
 80010d6:	3301      	adds	r3, #1
 80010d8:	77fb      	strb	r3, [r7, #31]
 80010da:	7ffc      	ldrb	r4, [r7, #31]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f875 	bl	80001d0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	429c      	cmp	r4, r3
 80010ea:	d202      	bcs.n	80010f2 <lcd16x2_i2c_printf+0x52>
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	d9e7      	bls.n	80010c2 <lcd16x2_i2c_printf+0x22>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010fc:	b004      	add	sp, #16
 80010fe:	4770      	bx	lr

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001106:	f001 fb18 	bl	800273a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f915 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fa15 	bl	800153c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001112:	f000 f963 	bl	80013dc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001116:	f000 f9e1 	bl	80014dc <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800111a:	f000 f99f 	bl	800145c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  if(lcd16x2_i2c_init(&hi2c3))
 800111e:	4877      	ldr	r0, [pc, #476]	; (80012fc <main+0x1fc>)
 8001120:	f7ff ff26 	bl	8000f70 <lcd16x2_i2c_init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <main+0x36>
  {
  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001130:	4873      	ldr	r0, [pc, #460]	; (8001300 <main+0x200>)
 8001132:	f001 ff4b 	bl	8002fcc <HAL_GPIO_WritePin>
  //int a=10;
  //lcd16x2_i2c_printf("Hello World!");
  //lcd16x2_i2c_printf("A= %d",a);
  //lcd16x2_i2c_printf

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	4971      	ldr	r1, [pc, #452]	; (8001304 <main+0x204>)
 800113e:	4872      	ldr	r0, [pc, #456]	; (8001308 <main+0x208>)
 8001140:	f004 fb00 	bl	8005744 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	2253      	movs	r2, #83	; 0x53
 800114a:	4970      	ldr	r1, [pc, #448]	; (800130c <main+0x20c>)
 800114c:	486e      	ldr	r0, [pc, #440]	; (8001308 <main+0x208>)
 800114e:	f004 faf9 	bl	8005744 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8001152:	f001 f873 	bl	800223c <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	2230      	movs	r2, #48	; 0x30
 800115c:	496c      	ldr	r1, [pc, #432]	; (8001310 <main+0x210>)
 800115e:	486a      	ldr	r0, [pc, #424]	; (8001308 <main+0x208>)
 8001160:	f004 faf0 	bl	8005744 <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8001164:	f001 f80e 	bl	8002184 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	222d      	movs	r2, #45	; 0x2d
 800116e:	4969      	ldr	r1, [pc, #420]	; (8001314 <main+0x214>)
 8001170:	4865      	ldr	r0, [pc, #404]	; (8001308 <main+0x208>)
 8001172:	f004 fae7 	bl	8005744 <HAL_UART_Transmit>
  BSP_PSENSOR_Init();
 8001176:	f001 f833 	bl	80021e0 <BSP_PSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg5,sizeof(msg5),1000);
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	222e      	movs	r2, #46	; 0x2e
 8001180:	4965      	ldr	r1, [pc, #404]	; (8001318 <main+0x218>)
 8001182:	4861      	ldr	r0, [pc, #388]	; (8001308 <main+0x208>)
 8001184:	f004 fade 	bl	8005744 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp_value = BSP_TSENSOR_ReadTemp();
 8001188:	f001 f874 	bl	8002274 <BSP_TSENSOR_ReadTemp>
 800118c:	eef0 7a40 	vmov.f32	s15, s0
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <main+0x21c>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
	  int tmpInt1 = temp_value;
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <main+0x21c>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
	  float tmpFrac = temp_value - tmpInt1;
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <main+0x21c>)
 80011a8:	ed93 7a00 	vldr	s14, [r3]
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ba:	edc7 7a08 	vstr	s15, [r7, #32]
	  int tmpInt2 = trunc(tmpFrac * 100);
 80011be:	edd7 7a08 	vldr	s15, [r7, #32]
 80011c2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001320 <main+0x220>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	ee17 0a90 	vmov	r0, s15
 80011ce:	f7ff f9bb 	bl	8000548 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	ec43 2b10 	vmov	d0, r2, r3
 80011da:	f007 fe47 	bl	8008e6c <trunc>
 80011de:	ec53 2b10 	vmov	r2, r3, d0
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcb7 	bl	8000b58 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	61fb      	str	r3, [r7, #28]
	  lcd16x2_i2c_setCursor(0, 0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ff29 	bl	8001048 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf("T=%d.02", tmpInt2);
 80011f6:	69f9      	ldr	r1, [r7, #28]
 80011f8:	484a      	ldr	r0, [pc, #296]	; (8001324 <main+0x224>)
 80011fa:	f7ff ff51 	bl	80010a0 <lcd16x2_i2c_printf>
	  //snprintf(str_tmp,100,"\n TEMPERATURE = %d.%02d  ", tmpInt1, tmpInt2);
	  //HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
	  //HAL_Delay(1000);

	  humid_value = BSP_HSENSOR_ReadHumidity();
 80011fe:	f000 ffe1 	bl	80021c4 <BSP_HSENSOR_ReadHumidity>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b48      	ldr	r3, [pc, #288]	; (8001328 <main+0x228>)
 8001208:	edc3 7a00 	vstr	s15, [r3]
	  int humInt1 = humid_value;
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <main+0x228>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	61bb      	str	r3, [r7, #24]
	  float humFrac = humid_value - humInt1;
 800121c:	4b42      	ldr	r3, [pc, #264]	; (8001328 <main+0x228>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	edc7 7a05 	vstr	s15, [r7, #20]
	  int humInt2 = trunc(humFrac * 100);
 8001234:	edd7 7a05 	vldr	s15, [r7, #20]
 8001238:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001320 <main+0x220>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	ee17 0a90 	vmov	r0, s15
 8001244:	f7ff f980 	bl	8000548 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	ec43 2b10 	vmov	d0, r2, r3
 8001250:	f007 fe0c 	bl	8008e6c <trunc>
 8001254:	ec53 2b10 	vmov	r2, r3, d0
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc7c 	bl	8000b58 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	613b      	str	r3, [r7, #16]
	  lcd16x2_i2c_setCursor(0, 8);
 8001264:	2108      	movs	r1, #8
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff feee 	bl	8001048 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf(" H=%d.02", humInt2);
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	482f      	ldr	r0, [pc, #188]	; (800132c <main+0x22c>)
 8001270:	f7ff ff16 	bl	80010a0 <lcd16x2_i2c_printf>
	 // snprintf(str_tmp,100," HUMIDITY = %d.%02d  ", humInt1, humInt2);
	  //snprintf(str_tmp,100," HUMIDITY = %d.%02d  ", humInt1, humInt2);
	  //HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
	 // HAL_Delay(1000);

	  pur_value = BSP_PSENSOR_ReadPressure();
 8001274:	f000 ffd4 	bl	8002220 <BSP_PSENSOR_ReadPressure>
 8001278:	ee07 0a90 	vmov	s15, r0
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <main+0x230>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
	  int purInt1 = pur_value;
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <main+0x230>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	ee17 3a90 	vmov	r3, s15
 8001294:	60fb      	str	r3, [r7, #12]
	  float purFrac = pur_value - purInt1;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x230>)
 8001298:	ed93 7a00 	vldr	s14, [r3]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012aa:	edc7 7a02 	vstr	s15, [r7, #8]
	  int purInt2 = trunc(purFrac * 100);
 80012ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001320 <main+0x220>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	ee17 0a90 	vmov	r0, s15
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	ec43 2b10 	vmov	d0, r2, r3
 80012ca:	f007 fdcf 	bl	8008e6c <trunc>
 80012ce:	ec53 2b10 	vmov	r2, r3, d0
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc3f 	bl	8000b58 <__aeabi_d2iz>
 80012da:	4603      	mov	r3, r0
 80012dc:	607b      	str	r3, [r7, #4]
	  //snprintf(str_tmp,100," Pressure = %d.%02d", purInt1, purInt2);
	  lcd16x2_i2c_setCursor(1, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff feb1 	bl	8001048 <lcd16x2_i2c_setCursor>
	  lcd16x2_i2c_printf("P=%d.02", purInt1);
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	4812      	ldr	r0, [pc, #72]	; (8001334 <main+0x234>)
 80012ea:	f7ff fed9 	bl	80010a0 <lcd16x2_i2c_printf>
	  //HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
	  HAL_Delay(1000);
 80012ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f2:	f001 fa97 	bl	8002824 <HAL_Delay>
	  lcd16x2_i2c_1stLine();
 80012f6:	f7ff fecb 	bl	8001090 <lcd16x2_i2c_1stLine>
  {
 80012fa:	e745      	b.n	8001188 <main+0x88>
 80012fc:	20000360 	.word	0x20000360
 8001300:	48000400 	.word	0x48000400
 8001304:	20000000 	.word	0x20000000
 8001308:	200003f8 	.word	0x200003f8
 800130c:	20000030 	.word	0x20000030
 8001310:	20000084 	.word	0x20000084
 8001314:	200000b4 	.word	0x200000b4
 8001318:	200000e4 	.word	0x200000e4
 800131c:	2000033c 	.word	0x2000033c
 8001320:	42c80000 	.word	0x42c80000
 8001324:	08008ee8 	.word	0x08008ee8
 8001328:	20000340 	.word	0x20000340
 800132c:	08008ef0 	.word	0x08008ef0
 8001330:	20000344 	.word	0x20000344
 8001334:	08008efc 	.word	0x08008efc

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2244      	movs	r2, #68	; 0x44
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fef4 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135e:	f002 fea5 	bl	80040ac <HAL_PWREx_ControlVoltageScaling>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001368:	f000 fb00 	bl	800196c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800136c:	2310      	movs	r3, #16
 800136e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001388:	2328      	movs	r3, #40	; 0x28
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fedb 	bl	8004158 <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013a8:	f000 fae0 	bl	800196c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2303      	movs	r3, #3
 80013b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2104      	movs	r1, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 faad 	bl	8004924 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013d0:	f000 facc 	bl	800196c <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3758      	adds	r7, #88	; 0x58
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_I2C2_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <MX_I2C2_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_I2C2_Init+0x74>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <MX_I2C2_Init+0x7c>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_I2C2_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_I2C2_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_I2C2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_I2C2_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_I2C2_Init+0x74>)
 8001418:	f001 fe13 	bl	8003042 <HAL_I2C_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001422:	f000 faa3 	bl	800196c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <MX_I2C2_Init+0x74>)
 800142a:	f002 fd99 	bl	8003f60 <HAL_I2CEx_ConfigAnalogFilter>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001434:	f000 fa9a 	bl	800196c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_I2C2_Init+0x74>)
 800143c:	f002 fddb 	bl	8003ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 fa91 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200003ac 	.word	0x200003ac
 8001454:	40005800 	.word	0x40005800
 8001458:	10909cec 	.word	0x10909cec

0800145c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_I2C3_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_I2C3_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_I2C3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_I2C3_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <MX_I2C3_Init+0x74>)
 8001498:	f001 fdd3 	bl	8003042 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 fa63 	bl	800196c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_I2C3_Init+0x74>)
 80014aa:	f002 fd59 	bl	8003f60 <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 fa5a 	bl	800196c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C3_Init+0x74>)
 80014bc:	f002 fd9b 	bl	8003ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 fa51 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000360 	.word	0x20000360
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	10909cec 	.word	0x10909cec

080014dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014e2:	4a15      	ldr	r2, [pc, #84]	; (8001538 <MX_USART1_UART_Init+0x5c>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x58>)
 8001520:	f004 f8c2 	bl	80056a8 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 fa1f 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200003f8 	.word	0x200003f8
 8001538:	40013800 	.word	0x40013800

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	4bbc      	ldr	r3, [pc, #752]	; (8001844 <MX_GPIO_Init+0x308>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4abb      	ldr	r2, [pc, #748]	; (8001844 <MX_GPIO_Init+0x308>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4bb9      	ldr	r3, [pc, #740]	; (8001844 <MX_GPIO_Init+0x308>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4bb6      	ldr	r3, [pc, #728]	; (8001844 <MX_GPIO_Init+0x308>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4ab5      	ldr	r2, [pc, #724]	; (8001844 <MX_GPIO_Init+0x308>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4bb3      	ldr	r3, [pc, #716]	; (8001844 <MX_GPIO_Init+0x308>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4bb0      	ldr	r3, [pc, #704]	; (8001844 <MX_GPIO_Init+0x308>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4aaf      	ldr	r2, [pc, #700]	; (8001844 <MX_GPIO_Init+0x308>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4bad      	ldr	r3, [pc, #692]	; (8001844 <MX_GPIO_Init+0x308>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4baa      	ldr	r3, [pc, #680]	; (8001844 <MX_GPIO_Init+0x308>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	4aa9      	ldr	r2, [pc, #676]	; (8001844 <MX_GPIO_Init+0x308>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a6:	4ba7      	ldr	r3, [pc, #668]	; (8001844 <MX_GPIO_Init+0x308>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	4ba4      	ldr	r3, [pc, #656]	; (8001844 <MX_GPIO_Init+0x308>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	4aa3      	ldr	r2, [pc, #652]	; (8001844 <MX_GPIO_Init+0x308>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015be:	4ba1      	ldr	r3, [pc, #644]	; (8001844 <MX_GPIO_Init+0x308>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015d0:	489d      	ldr	r0, [pc, #628]	; (8001848 <MX_GPIO_Init+0x30c>)
 80015d2:	f001 fcfb 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f248 1124 	movw	r1, #33060	; 0x8124
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f001 fcf4 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 80015e4:	2200      	movs	r2, #0
 80015e6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80015ea:	4898      	ldr	r0, [pc, #608]	; (800184c <MX_GPIO_Init+0x310>)
 80015ec:	f001 fcee 	bl	8002fcc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f241 0181 	movw	r1, #4225	; 0x1081
 80015f6:	4896      	ldr	r0, [pc, #600]	; (8001850 <MX_GPIO_Init+0x314>)
 80015f8:	f001 fce8 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001602:	4893      	ldr	r0, [pc, #588]	; (8001850 <MX_GPIO_Init+0x314>)
 8001604:	f001 fce2 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800160e:	4891      	ldr	r0, [pc, #580]	; (8001854 <MX_GPIO_Init+0x318>)
 8001610:	f001 fcdc 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2120      	movs	r1, #32
 8001618:	488c      	ldr	r0, [pc, #560]	; (800184c <MX_GPIO_Init+0x310>)
 800161a:	f001 fcd7 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	4889      	ldr	r0, [pc, #548]	; (8001848 <MX_GPIO_Init+0x30c>)
 8001624:	f001 fcd2 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001628:	f240 1315 	movw	r3, #277	; 0x115
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4881      	ldr	r0, [pc, #516]	; (8001848 <MX_GPIO_Init+0x30c>)
 8001642:	f001 fa25 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001646:	236a      	movs	r3, #106	; 0x6a
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	487b      	ldr	r0, [pc, #492]	; (8001848 <MX_GPIO_Init+0x30c>)
 800165c:	f001 fa18 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001666:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4877      	ldr	r0, [pc, #476]	; (8001854 <MX_GPIO_Init+0x318>)
 8001678:	f001 fa0a 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A3_Pin ARD_A2_Pin ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001680:	230b      	movs	r3, #11
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4871      	ldr	r0, [pc, #452]	; (8001854 <MX_GPIO_Init+0x318>)
 8001690:	f001 f9fe 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001694:	2303      	movs	r3, #3
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016a4:	2308      	movs	r3, #8
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f001 f9ed 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016b6:	f248 1324 	movw	r3, #33060	; 0x8124
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f001 f9dd 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016d6:	2308      	movs	r3, #8
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f001 f9cc 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80016f8:	2310      	movs	r3, #16
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016fc:	230b      	movs	r3, #11
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f001 f9bf 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001712:	23c0      	movs	r3, #192	; 0xc0
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f001 f9ae 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001738:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4840      	ldr	r0, [pc, #256]	; (800184c <MX_GPIO_Init+0x310>)
 800174a:	f001 f9a1 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001752:	230b      	movs	r3, #11
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	483a      	ldr	r0, [pc, #232]	; (800184c <MX_GPIO_Init+0x310>)
 8001762:	f001 f995 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8001766:	f24f 0334 	movw	r3, #61492	; 0xf034
 800176a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4833      	ldr	r0, [pc, #204]	; (800184c <MX_GPIO_Init+0x310>)
 8001780:	f001 f986 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001784:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001796:	2306      	movs	r3, #6
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4829      	ldr	r0, [pc, #164]	; (8001848 <MX_GPIO_Init+0x30c>)
 80017a2:	f001 f975 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80017a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80017aa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017b8:	230a      	movs	r3, #10
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4821      	ldr	r0, [pc, #132]	; (8001848 <MX_GPIO_Init+0x30c>)
 80017c4:	f001 f964 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017da:	2307      	movs	r3, #7
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	481a      	ldr	r0, [pc, #104]	; (8001850 <MX_GPIO_Init+0x314>)
 80017e6:	f001 f953 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017ea:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80017ee:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <MX_GPIO_Init+0x314>)
 8001802:	f001 f945 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001806:	f243 0381 	movw	r3, #12417	; 0x3081
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <MX_GPIO_Init+0x314>)
 8001820:	f001 f936 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001824:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_GPIO_Init+0x318>)
 800183e:	f001 f927 	bl	8002a90 <HAL_GPIO_Init>
 8001842:	e009      	b.n	8001858 <MX_GPIO_Init+0x31c>
 8001844:	40021000 	.word	0x40021000
 8001848:	48001000 	.word	0x48001000
 800184c:	48000400 	.word	0x48000400
 8001850:	48000c00 	.word	0x48000c00
 8001854:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001858:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800185e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	483c      	ldr	r0, [pc, #240]	; (8001960 <MX_GPIO_Init+0x424>)
 8001870:	f001 f90e 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f001 f900 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001890:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018a2:	230a      	movs	r3, #10
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f001 f8ee 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018c6:	2306      	movs	r3, #6
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4823      	ldr	r0, [pc, #140]	; (8001960 <MX_GPIO_Init+0x424>)
 80018d2:	f001 f8dd 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018d6:	2302      	movs	r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e6:	2305      	movs	r3, #5
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	481c      	ldr	r0, [pc, #112]	; (8001964 <MX_GPIO_Init+0x428>)
 80018f2:	f001 f8cd 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018f6:	2378      	movs	r3, #120	; 0x78
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4814      	ldr	r0, [pc, #80]	; (8001964 <MX_GPIO_Init+0x428>)
 8001912:	f001 f8bd 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001928:	2304      	movs	r3, #4
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_GPIO_Init+0x42c>)
 8001934:	f001 f8ac 	bl	8002a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2017      	movs	r0, #23
 800193e:	f001 f870 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001942:	2017      	movs	r0, #23
 8001944:	f001 f889 	bl	8002a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2028      	movs	r0, #40	; 0x28
 800194e:	f001 f868 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001952:	2028      	movs	r0, #40	; 0x28
 8001954:	f001 f881 	bl	8002a5a <HAL_NVIC_EnableIRQ>

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	48000800 	.word	0x48000800
 8001964:	48000c00 	.word	0x48000c00
 8001968:	48000400 	.word	0x48000400

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_MspInit+0x44>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	; 0x60
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_MspInit+0x44>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_MspInit+0x44>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <HAL_MspInit+0x44>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_MspInit+0x44>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0ae      	sub	sp, #184	; 0xb8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	2288      	movs	r2, #136	; 0x88
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fba7 	bl	8006134 <memset>
  if(hi2c->Instance==I2C2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_I2C_MspInit+0x134>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d13c      	bne.n	8001a6a <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f997 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a08:	f7ff ffb0 	bl	800196c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a18:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	482c      	ldr	r0, [pc, #176]	; (8001afc <HAL_I2C_MspInit+0x13c>)
 8001a4c:	f001 f820 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a68:	e040      	b.n	8001aec <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_I2C_MspInit+0x140>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13b      	bne.n	8001aec <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a78:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f954 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001a8e:	f7ff ff6d 	bl	800196c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab0:	2312      	movs	r3, #18
 8001ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <HAL_I2C_MspInit+0x144>)
 8001ad0:	f000 ffde 	bl	8002a90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001ada:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_I2C_MspInit+0x138>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	bf00      	nop
 8001aee:	37b8      	adds	r7, #184	; 0xb8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40005800 	.word	0x40005800
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48000400 	.word	0x48000400
 8001b00:	40005c00 	.word	0x40005c00
 8001b04:	48000800 	.word	0x48000800

08001b08 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_I2C_MspDeInit+0x64>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d110      	bne.n	8001b3c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2a:	4812      	ldr	r0, [pc, #72]	; (8001b74 <HAL_I2C_MspDeInit+0x6c>)
 8001b2c:	f001 f95a 	bl	8002de4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b34:	480f      	ldr	r0, [pc, #60]	; (8001b74 <HAL_I2C_MspDeInit+0x6c>)
 8001b36:	f001 f955 	bl	8002de4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001b3a:	e012      	b.n	8001b62 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_I2C_MspDeInit+0x70>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_I2C_MspDeInit+0x68>)
 8001b4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001b52:	2101      	movs	r1, #1
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_I2C_MspDeInit+0x74>)
 8001b56:	f001 f945 	bl	8002de4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <HAL_I2C_MspDeInit+0x74>)
 8001b5e:	f001 f941 	bl	8002de4 <HAL_GPIO_DeInit>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	40005c00 	.word	0x40005c00
 8001b7c:	48000800 	.word	0x48000800

08001b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ac      	sub	sp, #176	; 0xb0
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2288      	movs	r2, #136	; 0x88
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fac7 	bl	8006134 <memset>
  if(huart->Instance==USART1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <HAL_UART_MspInit+0xb0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d13a      	bne.n	8001c26 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f8b7 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc8:	f7ff fed0 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_UART_MspInit+0xb4>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c14:	2307      	movs	r3, #7
 8001c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_UART_MspInit+0xb8>)
 8001c22:	f000 ff35 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	37b0      	adds	r7, #176	; 0xb0
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c88:	f000 fdac 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c94:	2020      	movs	r0, #32
 8001c96:	f001 f9b1 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c9a:	2040      	movs	r0, #64	; 0x40
 8001c9c:	f001 f9ae 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ca0:	2080      	movs	r0, #128	; 0x80
 8001ca2:	f001 f9ab 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ca6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001caa:	f001 f9a7 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001cb6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cba:	f001 f99f 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001cbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cc2:	f001 f99b 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cc6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cca:	f001 f997 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001cce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cd2:	f001 f993 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001cd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cda:	f001 f98f 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
	return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_kill>:

int _kill(int pid, int sig)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cfc:	f004 f9f0 	bl	80060e0 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2216      	movs	r2, #22
 8001d04:	601a      	str	r2, [r3, #0]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_exit>:

void _exit (int status)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffe7 	bl	8001cf2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d24:	e7fe      	b.n	8001d24 <_exit+0x12>

08001d26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e00a      	b.n	8001d4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d38:	f3af 8000 	nop.w
 8001d3c:	4601      	mov	r1, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	60ba      	str	r2, [r7, #8]
 8001d44:	b2ca      	uxtb	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbf0      	blt.n	8001d38 <_read+0x12>
	}

return len;
 8001d56:	687b      	ldr	r3, [r7, #4]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e009      	b.n	8001d86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	60ba      	str	r2, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf1      	blt.n	8001d72 <_write+0x12>
	}
	return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_close>:

int _close(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc0:	605a      	str	r2, [r3, #4]
	return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_isatty>:

int _isatty(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
	return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f004 f956 	bl	80060e0 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20018000 	.word	0x20018000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	20000348 	.word	0x20000348
 8001e68:	20000560 	.word	0x20000560

08001e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e94:	f7ff ffea 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f004 f915 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec2:	f7ff f91d 	bl	8001100 <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8001ed4:	0800933c 	.word	0x0800933c
  ldr r2, =_sbss
 8001ed8:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8001edc:	20000560 	.word	0x20000560

08001ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_2_IRQHandler>
	...

08001ee4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f0a:	2312      	movs	r3, #18
 8001f0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001f16:	2304      	movs	r3, #4
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481b      	ldr	r0, [pc, #108]	; (8001f90 <I2Cx_MspInit+0xac>)
 8001f22:	f000 fdb5 	bl	8002a90 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4818      	ldr	r0, [pc, #96]	; (8001f90 <I2Cx_MspInit+0xac>)
 8001f2e:	f000 fdaf 	bl	8002a90 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f54:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <I2Cx_MspInit+0xa8>)
 8001f5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f60:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	2021      	movs	r0, #33	; 0x21
 8001f68:	f000 fd5b 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001f6c:	2021      	movs	r0, #33	; 0x21
 8001f6e:	f000 fd74 	bl	8002a5a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	210f      	movs	r1, #15
 8001f76:	2022      	movs	r0, #34	; 0x22
 8001f78:	f000 fd53 	bl	8002a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001f7c:	2022      	movs	r0, #34	; 0x22
 8001f7e:	f000 fd6c 	bl	8002a5a <HAL_NVIC_EnableIRQ>
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400

08001f94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <I2Cx_Init+0x54>)
 8001fa0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <I2Cx_Init+0x58>)
 8001fa6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff89 	bl	8001ee4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 f835 	bl	8003042 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f001 ffc0 	bl	8003f60 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005800 	.word	0x40005800
 8001fec:	00702681 	.word	0x00702681

08001ff0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af04      	add	r7, sp, #16
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	72fb      	strb	r3, [r7, #11]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	b299      	uxth	r1, r3
 8002012:	88f8      	ldrh	r0, [r7, #6]
 8002014:	893a      	ldrh	r2, [r7, #8]
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	4603      	mov	r3, r0
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f001 fad2 	bl	80035d0 <HAL_I2C_Mem_Read>
 800202c:	4603      	mov	r3, r0
 800202e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d004      	beq.n	8002040 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	4619      	mov	r1, r3
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f832 	bl	80020a4 <I2Cx_Error>
  }
  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	; 0x28
 800204e:	af04      	add	r7, sp, #16
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	4608      	mov	r0, r1
 8002054:	4611      	mov	r1, r2
 8002056:	461a      	mov	r2, r3
 8002058:	4603      	mov	r3, r0
 800205a:	72fb      	strb	r3, [r7, #11]
 800205c:	460b      	mov	r3, r1
 800205e:	813b      	strh	r3, [r7, #8]
 8002060:	4613      	mov	r3, r2
 8002062:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	b299      	uxth	r1, r3
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	893a      	ldrh	r2, [r7, #8]
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4603      	mov	r3, r0
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f001 f991 	bl	80033a8 <HAL_I2C_Mem_Write>
 8002086:	4603      	mov	r3, r0
 8002088:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	4619      	mov	r1, r3
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f805 	bl	80020a4 <I2Cx_Error>
  }
  return status;
 800209a:	7dfb      	ldrb	r3, [r7, #23]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f001 f855 	bl	8003160 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff6c 	bl	8001f94 <I2Cx_Init>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <SENSOR_IO_Init+0x10>)
 80020ca:	f7ff ff63 	bl	8001f94 <I2Cx_Init>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000500 	.word	0x20000500

080020d8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af02      	add	r7, sp, #8
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
 80020e2:	460b      	mov	r3, r1
 80020e4:	71bb      	strb	r3, [r7, #6]
 80020e6:	4613      	mov	r3, r2
 80020e8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	79f9      	ldrb	r1, [r7, #7]
 80020f0:	2301      	movs	r3, #1
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	1d7b      	adds	r3, r7, #5
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	4803      	ldr	r0, [pc, #12]	; (8002108 <SENSOR_IO_Write+0x30>)
 80020fc:	f7ff ffa5 	bl	800204a <I2Cx_WriteMultiple>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000500 	.word	0x20000500

0800210c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	4603      	mov	r3, r0
 8002114:	460a      	mov	r2, r1
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	4613      	mov	r3, r2
 800211a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	b29a      	uxth	r2, r3
 8002124:	79f9      	ldrb	r1, [r7, #7]
 8002126:	2301      	movs	r3, #1
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	f107 030f 	add.w	r3, r7, #15
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2301      	movs	r3, #1
 8002132:	4804      	ldr	r0, [pc, #16]	; (8002144 <SENSOR_IO_Read+0x38>)
 8002134:	f7ff ff5c 	bl	8001ff0 <I2Cx_ReadMultiple>

  return read_value;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000500 	.word	0x20000500

08002148 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af02      	add	r7, sp, #8
 800214e:	603a      	str	r2, [r7, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	460b      	mov	r3, r1
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	4613      	mov	r3, r2
 800215c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	b29a      	uxth	r2, r3
 8002162:	79f9      	ldrb	r1, [r7, #7]
 8002164:	88bb      	ldrh	r3, [r7, #4]
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	4804      	ldr	r0, [pc, #16]	; (8002180 <SENSOR_IO_ReadMultiple+0x38>)
 8002170:	f7ff ff3e 	bl	8001ff0 <I2Cx_ReadMultiple>
 8002174:	4603      	mov	r3, r0
 8002176:	b29b      	uxth	r3, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000500 	.word	0x20000500

08002184 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <BSP_HSENSOR_Init+0x38>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	20be      	movs	r0, #190	; 0xbe
 8002190:	4798      	blx	r3
 8002192:	4603      	mov	r3, r0
 8002194:	2bbc      	cmp	r3, #188	; 0xbc
 8002196:	d002      	beq.n	800219e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	e009      	b.n	80021b2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <BSP_HSENSOR_Init+0x3c>)
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <BSP_HSENSOR_Init+0x38>)
 80021a2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <BSP_HSENSOR_Init+0x3c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	20be      	movs	r0, #190	; 0xbe
 80021ac:	4798      	blx	r3
    ret = HSENSOR_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80021b2:	687b      	ldr	r3, [r7, #4]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000118 	.word	0x20000118
 80021c0:	2000034c 	.word	0x2000034c

080021c4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <BSP_HSENSOR_ReadHumidity+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	20be      	movs	r0, #190	; 0xbe
 80021d0:	4798      	blx	r3
 80021d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000034c 	.word	0x2000034c

080021e0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <BSP_PSENSOR_Init+0x38>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	20ba      	movs	r0, #186	; 0xba
 80021ec:	4798      	blx	r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	2bb1      	cmp	r3, #177	; 0xb1
 80021f2:	d002      	beq.n	80021fa <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	e009      	b.n	800220e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <BSP_PSENSOR_Init+0x3c>)
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <BSP_PSENSOR_Init+0x38>)
 80021fe:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <BSP_PSENSOR_Init+0x3c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	20ba      	movs	r0, #186	; 0xba
 8002208:	4798      	blx	r3
    ret = PSENSOR_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000134 	.word	0x20000134
 800221c:	20000350 	.word	0x20000350

08002220 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <BSP_PSENSOR_ReadPressure+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	20ba      	movs	r0, #186	; 0xba
 800222c:	4798      	blx	r3
 800222e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000350 	.word	0x20000350

0800223c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <BSP_TSENSOR_Init+0x30>)
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <BSP_TSENSOR_Init+0x34>)
 800224a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800224c:	f7ff ff3a 	bl	80020c4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <BSP_TSENSOR_Init+0x30>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	20be      	movs	r0, #190	; 0xbe
 800225a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002260:	79fb      	ldrb	r3, [r7, #7]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000354 	.word	0x20000354
 8002270:	20000124 	.word	0x20000124

08002274 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <BSP_TSENSOR_ReadTemp+0x18>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	20be      	movs	r0, #190	; 0xbe
 8002280:	4798      	blx	r3
 8002282:	eef0 7a40 	vmov.f32	s15, s0
}
 8002286:	eeb0 0a67 	vmov.f32	s0, s15
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000354 	.word	0x20000354

08002290 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2120      	movs	r1, #32
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff33 	bl	800210c <SENSOR_IO_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	f023 0303 	bic.w	r3, r3, #3
 80022c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022d0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	2120      	movs	r1, #32
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fefc 	bl	80020d8 <SENSOR_IO_Write>
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80022f6:	f7ff fee5 	bl	80020c4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	210f      	movs	r1, #15
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff03 	bl	800210c <SENSOR_IO_Read>
 8002306:	4603      	mov	r3, r0
 8002308:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	b2d8      	uxtb	r0, r3
 8002322:	f107 020c 	add.w	r2, r7, #12
 8002326:	2302      	movs	r3, #2
 8002328:	21b0      	movs	r1, #176	; 0xb0
 800232a:	f7ff ff0d 	bl	8002148 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800232e:	7b3b      	ldrb	r3, [r7, #12]
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002336:	7b7b      	ldrb	r3, [r7, #13]
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	b2d8      	uxtb	r0, r3
 8002342:	f107 020c 	add.w	r2, r7, #12
 8002346:	2302      	movs	r3, #2
 8002348:	21b6      	movs	r1, #182	; 0xb6
 800234a:	f7ff fefd 	bl	8002148 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	b21a      	sxth	r2, r3
 8002354:	7b3b      	ldrb	r3, [r7, #12]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	2302      	movs	r3, #2
 8002366:	21ba      	movs	r1, #186	; 0xba
 8002368:	f7ff feee 	bl	8002148 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800236c:	7b7b      	ldrb	r3, [r7, #13]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	b21b      	sxth	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	f107 020c 	add.w	r2, r7, #12
 8002382:	2302      	movs	r3, #2
 8002384:	21a8      	movs	r1, #168	; 0xa8
 8002386:	f7ff fedf 	bl	8002148 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21a      	sxth	r2, r3
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800239c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023aa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80023ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80023c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80023ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80023fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002444 <HTS221_H_ReadHumidity+0x130>
 8002402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	dd01      	ble.n	8002410 <HTS221_H_ReadHumidity+0xfc>
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HTS221_H_ReadHumidity+0x134>)
 800240e:	e00a      	b.n	8002426 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002410:	edd7 7a04 	vldr	s15, [r7, #16]
 8002414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d502      	bpl.n	8002424 <HTS221_H_ReadHumidity+0x110>
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e000      	b.n	8002426 <HTS221_H_ReadHumidity+0x112>
 8002424:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002426:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002428:	edd7 7a04 	vldr	s15, [r7, #16]
 800242c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002430:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002434:	eef0 7a66 	vmov.f32	s15, s13
}
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	447a0000 	.word	0x447a0000
 8002448:	447a0000 	.word	0x447a0000

0800244c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2120      	movs	r1, #32
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fe54 	bl	800210c <SENSOR_IO_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	f023 0304 	bic.w	r3, r3, #4
 800246e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	2120      	movs	r1, #32
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fe1d 	bl	80020d8 <SENSOR_IO_Write>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b088      	sub	sp, #32
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	f107 0208 	add.w	r2, r7, #8
 80024b8:	2302      	movs	r3, #2
 80024ba:	21b2      	movs	r1, #178	; 0xb2
 80024bc:	f7ff fe44 	bl	8002148 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2135      	movs	r1, #53	; 0x35
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe20 	bl	800210c <SENSOR_IO_Read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024da:	b21a      	sxth	r2, r3
 80024dc:	7a3b      	ldrb	r3, [r7, #8]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80024e4:	7ffb      	ldrb	r3, [r7, #31]
 80024e6:	019b      	lsls	r3, r3, #6
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	7a7b      	ldrb	r3, [r7, #9]
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80024f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024fc:	10db      	asrs	r3, r3, #3
 80024fe:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002500:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002504:	10db      	asrs	r3, r3, #3
 8002506:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	2304      	movs	r3, #4
 8002512:	21bc      	movs	r1, #188	; 0xbc
 8002514:	f7ff fe18 	bl	8002148 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	b21a      	sxth	r2, r3
 800251e:	7a3b      	ldrb	r3, [r7, #8]
 8002520:	b21b      	sxth	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	b21a      	sxth	r2, r3
 800252c:	7abb      	ldrb	r3, [r7, #10]
 800252e:	b21b      	sxth	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	b2d8      	uxtb	r0, r3
 8002538:	f107 0208 	add.w	r2, r7, #8
 800253c:	2302      	movs	r3, #2
 800253e:	21aa      	movs	r1, #170	; 0xaa
 8002540:	f7ff fe02 	bl	8002148 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21a      	sxth	r2, r3
 800254a:	7a3b      	ldrb	r3, [r7, #8]
 800254c:	b21b      	sxth	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002552:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002556:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002568:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ee67 6a27 	vmul.f32	s13, s14, s15
 800257a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800257e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002590:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800259c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	ee07 3a90 	vmov	s15, r3
}
 80025aa:	eeb0 0a67 	vmov.f32	s0, s15
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f87b 	bl	80026bc <LPS22HB_Init>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80025dc:	f7ff fd72 	bl	80020c4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	210f      	movs	r1, #15
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fd90 	bl	800210c <SENSOR_IO_Read>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	74fb      	strb	r3, [r7, #19]
 800260e:	e013      	b.n	8002638 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	3328      	adds	r3, #40	; 0x28
 8002618:	b2db      	uxtb	r3, r3
 800261a:	7cfc      	ldrb	r4, [r7, #19]
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f7ff fd74 	bl	800210c <SENSOR_IO_Read>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	4423      	add	r3, r4
 800262e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	3301      	adds	r3, #1
 8002636:	74fb      	strb	r3, [r7, #19]
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d9e8      	bls.n	8002610 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	74fb      	strb	r3, [r7, #19]
 8002642:	e010      	b.n	8002666 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	f107 0218 	add.w	r2, r7, #24
 800264a:	4413      	add	r3, r2
 800264c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002650:	461a      	mov	r2, r3
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	3301      	adds	r3, #1
 8002664:	74fb      	strb	r3, [r7, #19]
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d9eb      	bls.n	8002644 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2264      	movs	r2, #100	; 0x64
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	da01      	bge.n	8002692 <LPS22HB_P_ReadPressure+0x96>
 800268e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002692:	131b      	asrs	r3, r3, #12
 8002694:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80026b8 <LPS22HB_P_ReadPressure+0xbc>
 80026a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026a8:	eef0 7a66 	vmov.f32	s15, s13
}
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	42c80000 	.word	0x42c80000

080026bc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	211a      	movs	r1, #26
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fd1d 	bl	800210c <SENSOR_IO_Read>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	211a      	movs	r1, #26
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fcf2 	bl	80020d8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2110      	movs	r1, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fd06 	bl	800210c <SENSOR_IO_Read>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002712:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	f023 0302 	bic.w	r3, r3, #2
 800271a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	2110      	movs	r1, #16
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fcd3 	bl	80020d8 <SENSOR_IO_Write>
}  
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f961 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f80e 	bl	800276c <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	e001      	b.n	8002760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800275c:	f7ff f90c 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002760:	79fb      	ldrb	r3, [r7, #7]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_InitTick+0x6c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d023      	beq.n	80027c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_InitTick+0x70>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_InitTick+0x6c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f96d 	bl	8002a76 <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b0f      	cmp	r3, #15
 80027a6:	d809      	bhi.n	80027bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a8:	2200      	movs	r2, #0
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f000 f937 	bl	8002a22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_InitTick+0x74>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e007      	b.n	80027cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e004      	b.n	80027cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e001      	b.n	80027cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000144 	.word	0x20000144
 80027dc:	20000114 	.word	0x20000114
 80027e0:	20000140 	.word	0x20000140

080027e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_IncTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x24>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_IncTick+0x24>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000144 	.word	0x20000144
 8002808:	2000054c 	.word	0x2000054c

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_GetTick+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000054c 	.word	0x2000054c

08002824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff ffee 	bl	800280c <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d005      	beq.n	800284a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_Delay+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284a:	bf00      	nop
 800284c:	f7ff ffde 	bl	800280c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	429a      	cmp	r2, r3
 800285a:	d8f7      	bhi.n	800284c <HAL_Delay+0x28>
  {
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000144 	.word	0x20000144

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	; (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a34:	f7ff ff3e 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff8e 	bl	8002960 <NVIC_EncodePriority>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff5d 	bl	800290c <__NVIC_SetPriority>
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff31 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ffa2 	bl	80029c8 <SysTick_Config>
 8002a84:	4603      	mov	r3, r0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9e:	e17f      	b.n	8002da0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8171 	beq.w	8002d9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d005      	beq.n	8002ad0 <HAL_GPIO_Init+0x40>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d130      	bne.n	8002b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b06:	2201      	movs	r2, #1
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 0201 	and.w	r2, r3, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d118      	bne.n	8002b70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d017      	beq.n	8002bac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d123      	bne.n	8002c00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	6939      	ldr	r1, [r7, #16]
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80ac 	beq.w	8002d9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	4a5e      	ldr	r2, [pc, #376]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c5a:	4a5a      	ldr	r2, [pc, #360]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c84:	d025      	beq.n	8002cd2 <HAL_GPIO_Init+0x242>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <HAL_GPIO_Init+0x338>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <HAL_GPIO_Init+0x23e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4e      	ldr	r2, [pc, #312]	; (8002dcc <HAL_GPIO_Init+0x33c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d019      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4d      	ldr	r2, [pc, #308]	; (8002dd0 <HAL_GPIO_Init+0x340>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0x236>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <HAL_GPIO_Init+0x344>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_GPIO_Init+0x232>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4b      	ldr	r2, [pc, #300]	; (8002dd8 <HAL_GPIO_Init+0x348>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_GPIO_Init+0x22a>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00c      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cba:	2307      	movs	r3, #7
 8002cbc:	e00a      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	e008      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	e006      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e004      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_GPIO_Init+0x244>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	f002 0203 	and.w	r2, r2, #3
 8002cda:	0092      	lsls	r2, r2, #2
 8002cdc:	4093      	lsls	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce4:	4937      	ldr	r1, [pc, #220]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3302      	adds	r3, #2
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d16:	4a32      	ldr	r2, [pc, #200]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa22 f303 	lsr.w	r3, r2, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f47f ae78 	bne.w	8002aa0 <HAL_GPIO_Init+0x10>
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	48000400 	.word	0x48000400
 8002dcc:	48000800 	.word	0x48000800
 8002dd0:	48000c00 	.word	0x48000c00
 8002dd4:	48001000 	.word	0x48001000
 8002dd8:	48001400 	.word	0x48001400
 8002ddc:	48001800 	.word	0x48001800
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002df2:	e0cd      	b.n	8002f90 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002df4:	2201      	movs	r2, #1
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80c0 	beq.w	8002f8a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e0a:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_GPIO_DeInit+0x1c8>)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e32:	d025      	beq.n	8002e80 <HAL_GPIO_DeInit+0x9c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a5e      	ldr	r2, [pc, #376]	; (8002fb0 <HAL_GPIO_DeInit+0x1cc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01f      	beq.n	8002e7c <HAL_GPIO_DeInit+0x98>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_GPIO_DeInit+0x1d0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d019      	beq.n	8002e78 <HAL_GPIO_DeInit+0x94>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a5c      	ldr	r2, [pc, #368]	; (8002fb8 <HAL_GPIO_DeInit+0x1d4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_GPIO_DeInit+0x90>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a5b      	ldr	r2, [pc, #364]	; (8002fbc <HAL_GPIO_DeInit+0x1d8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_GPIO_DeInit+0x8c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a5a      	ldr	r2, [pc, #360]	; (8002fc0 <HAL_GPIO_DeInit+0x1dc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_DeInit+0x88>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a59      	ldr	r2, [pc, #356]	; (8002fc4 <HAL_GPIO_DeInit+0x1e0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_GPIO_DeInit+0x84>
 8002e64:	2306      	movs	r3, #6
 8002e66:	e00c      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e68:	2307      	movs	r3, #7
 8002e6a:	e00a      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	e008      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e006      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e74:	2303      	movs	r3, #3
 8002e76:	e004      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e002      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_GPIO_DeInit+0x9e>
 8002e80:	2300      	movs	r3, #0
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	f002 0203 	and.w	r2, r2, #3
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	4093      	lsls	r3, r2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d132      	bne.n	8002ef8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002e92:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	494b      	ldr	r1, [pc, #300]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4947      	ldr	r1, [pc, #284]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4944      	ldr	r1, [pc, #272]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4940      	ldr	r1, [pc, #256]	; (8002fc8 <HAL_GPIO_DeInit+0x1e4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <HAL_GPIO_DeInit+0x1c8>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	4830      	ldr	r0, [pc, #192]	; (8002fac <HAL_GPIO_DeInit+0x1c8>)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2103      	movs	r1, #3
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	08d2      	lsrs	r2, r2, #3
 8002f2c:	4019      	ands	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2103      	movs	r1, #3
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	2101      	movs	r1, #1
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2103      	movs	r1, #3
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	401a      	ands	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f47f af2b 	bne.w	8002df4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	bf00      	nop
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	48000400 	.word	0x48000400
 8002fb4:	48000800 	.word	0x48000800
 8002fb8:	48000c00 	.word	0x48000c00
 8002fbc:	48001000 	.word	0x48001000
 8002fc0:	48001400 	.word	0x48001400
 8002fc4:	48001800 	.word	0x48001800
 8002fc8:	40010400 	.word	0x40010400

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe8:	e002      	b.n	8002ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f806 	bl	800302c <HAL_GPIO_EXTI_Callback>
  }
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e081      	b.n	8003158 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fe fca9 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003092:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	e006      	b.n	80030ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d104      	bne.n	80030dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69d9      	ldr	r1, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e021      	b.n	80031b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2224      	movs	r2, #36	; 0x24
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fcbc 	bl	8001b08 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	817b      	strh	r3, [r7, #10]
 80031d0:	4613      	mov	r3, r2
 80031d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	f040 80da 	bne.w	8003396 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x30>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0d3      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f8:	f7ff fb08 	bl	800280c <HAL_GetTick>
 80031fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2319      	movs	r3, #25
 8003204:	2201      	movs	r2, #1
 8003206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fcce 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0be      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	; 0x21
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2210      	movs	r2, #16
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2bff      	cmp	r3, #255	; 0xff
 800324a:	d90e      	bls.n	800326a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	22ff      	movs	r2, #255	; 0xff
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	b2da      	uxtb	r2, r3
 8003258:	8979      	ldrh	r1, [r7, #10]
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fe4a 	bl	8003efc <I2C_TransferConfig>
 8003268:	e06c      	b.n	8003344 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	b2da      	uxtb	r2, r3
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	4b48      	ldr	r3, [pc, #288]	; (80033a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fe39 	bl	8003efc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800328a:	e05b      	b.n	8003344 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	6a39      	ldr	r1, [r7, #32]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fccb 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e07b      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d034      	beq.n	8003344 <HAL_I2C_Master_Transmit+0x184>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d130      	bne.n	8003344 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fc5d 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04d      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d90e      	bls.n	8003324 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	8979      	ldrh	r1, [r7, #10]
 8003314:	2300      	movs	r3, #0
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fded 	bl	8003efc <I2C_TransferConfig>
 8003322:	e00f      	b.n	8003344 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	b2da      	uxtb	r2, r3
 8003334:	8979      	ldrh	r1, [r7, #10]
 8003336:	2300      	movs	r3, #0
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fddc 	bl	8003efc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d19e      	bne.n	800328c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	6a39      	ldr	r1, [r7, #32]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fcaa 	bl	8003cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e01a      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003376:	400b      	ands	r3, r1
 8003378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	80002000 	.word	0x80002000
 80033a4:	fe00e800 	.word	0xfe00e800

080033a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	f040 80f9 	bne.w	80035c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_I2C_Mem_Write+0x34>
 80033d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0ed      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2C_Mem_Write+0x4e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0e6      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033fe:	f7ff fa05 	bl	800280c <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2319      	movs	r3, #25
 800340a:	2201      	movs	r2, #1
 800340c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fbcb 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0d1      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2221      	movs	r2, #33	; 0x21
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	; 0x40
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003448:	88f8      	ldrh	r0, [r7, #6]
 800344a:	893a      	ldrh	r2, [r7, #8]
 800344c:	8979      	ldrh	r1, [r7, #10]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4603      	mov	r3, r0
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fadb 	bl	8003a14 <I2C_RequestMemoryWrite>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0a9      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2bff      	cmp	r3, #255	; 0xff
 8003478:	d90e      	bls.n	8003498 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	b2da      	uxtb	r2, r3
 8003486:	8979      	ldrh	r1, [r7, #10]
 8003488:	2300      	movs	r3, #0
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fd33 	bl	8003efc <I2C_TransferConfig>
 8003496:	e00f      	b.n	80034b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	2300      	movs	r3, #0
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fd22 	bl	8003efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fbb5 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e07b      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d034      	beq.n	8003570 <HAL_I2C_Mem_Write+0x1c8>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d130      	bne.n	8003570 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb47 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e04d      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d90e      	bls.n	8003550 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	b2da      	uxtb	r2, r3
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fcd7 	bl	8003efc <I2C_TransferConfig>
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	b2da      	uxtb	r2, r3
 8003560:	8979      	ldrh	r1, [r7, #10]
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fcc6 	bl	8003efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d19e      	bne.n	80034b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fb94 	bl	8003cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e01a      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2220      	movs	r2, #32
 8003594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_I2C_Mem_Write+0x224>)
 80035a2:	400b      	ands	r3, r1
 80035a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	fe00e800 	.word	0xfe00e800

080035d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	f040 80fd 	bne.w	80037f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_I2C_Mem_Read+0x34>
 80035fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0f1      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_I2C_Mem_Read+0x4e>
 800361a:	2302      	movs	r3, #2
 800361c:	e0ea      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003626:	f7ff f8f1 	bl	800280c <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2319      	movs	r3, #25
 8003632:	2201      	movs	r2, #1
 8003634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fab7 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d5      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2222      	movs	r2, #34	; 0x22
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003670:	88f8      	ldrh	r0, [r7, #6]
 8003672:	893a      	ldrh	r2, [r7, #8]
 8003674:	8979      	ldrh	r1, [r7, #10]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	4603      	mov	r3, r0
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fa1b 	bl	8003abc <I2C_RequestMemoryRead>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0ad      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d90e      	bls.n	80036c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22ff      	movs	r2, #255	; 0xff
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	8979      	ldrh	r1, [r7, #10]
 80036b0:	4b52      	ldr	r3, [pc, #328]	; (80037fc <HAL_I2C_Mem_Read+0x22c>)
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fc1f 	bl	8003efc <I2C_TransferConfig>
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	8979      	ldrh	r1, [r7, #10]
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_I2C_Mem_Read+0x22c>)
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fc0e 	bl	8003efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	2200      	movs	r2, #0
 80036e8:	2104      	movs	r1, #4
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fa5e 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07c      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d034      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x1d0>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d130      	bne.n	80037a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa2f 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e04d      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d90e      	bls.n	8003780 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fbbf 	bl	8003efc <I2C_TransferConfig>
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fbae 	bl	8003efc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d19a      	bne.n	80036e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fa7c 	bl	8003cac <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e01a      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_I2C_Mem_Read+0x230>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	80002400 	.word	0x80002400
 8003800:	fe00e800 	.word	0xfe00e800

08003804 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	; 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	460b      	mov	r3, r1
 8003812:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	f040 80f1 	bne.w	8003a08 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003834:	d101      	bne.n	800383a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	e0e7      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_I2C_IsDeviceReady+0x44>
 8003844:	2302      	movs	r3, #2
 8003846:	e0e0      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_I2C_IsDeviceReady+0x72>
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003870:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003874:	e004      	b.n	8003880 <HAL_I2C_IsDeviceReady+0x7c>
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003886:	f7fe ffc1 	bl	800280c <HAL_GetTick>
 800388a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b20      	cmp	r3, #32
 8003898:	bf0c      	ite	eq
 800389a:	2301      	moveq	r3, #1
 800389c:	2300      	movne	r3, #0
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038b8:	e034      	b.n	8003924 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d01a      	beq.n	80038f8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe ffa3 	bl	800280c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <HAL_I2C_IsDeviceReady+0xd4>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10f      	bne.n	80038f8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e088      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b10      	cmp	r3, #16
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003924:	7ffb      	ldrb	r3, [r7, #31]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_I2C_IsDeviceReady+0x12c>
 800392a:	7fbb      	ldrb	r3, [r7, #30]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0c4      	beq.n	80038ba <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b10      	cmp	r3, #16
 800393c:	d01a      	beq.n	8003974 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2120      	movs	r1, #32
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f92f 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e058      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2220      	movs	r2, #32
 800395e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e04a      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	2120      	movs	r1, #32
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f914 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e03d      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2220      	movs	r2, #32
 800399c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d118      	bne.n	80039d8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2200      	movs	r2, #0
 80039be:	2120      	movs	r1, #32
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8f3 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01c      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2220      	movs	r2, #32
 80039d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	f63f af3b 	bhi.w	800385e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <I2C_RequestMemoryWrite+0xa4>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fa5d 	bl	8003efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f8f0 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e02c      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
 8003a66:	e015      	b.n	8003a94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8d6 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e012      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8a:	893b      	ldrh	r3, [r7, #8]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f884 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	80002000 	.word	0x80002000

08003abc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	8979      	ldrh	r1, [r7, #10]
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <I2C_RequestMemoryRead+0xa4>)
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa0a 	bl	8003efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f89d 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e02c      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0c:	e015      	b.n	8003b3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f883 	bl	8003c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e012      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2140      	movs	r1, #64	; 0x40
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f831 	bl	8003bac <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	80002000 	.word	0x80002000

08003b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d103      	bne.n	8003b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d007      	beq.n	8003ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	619a      	str	r2, [r3, #24]
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bbc:	e022      	b.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d01e      	beq.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fe fe21 	bl	800280c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d113      	bne.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e00f      	b.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d0cd      	beq.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c38:	e02c      	b.n	8003c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f870 	bl	8003d24 <I2C_IsErrorOccurred>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e02a      	b.n	8003ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d01e      	beq.n	8003c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fe fdd9 	bl	800280c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d113      	bne.n	8003c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e007      	b.n	8003ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d1cb      	bne.n	8003c3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb8:	e028      	b.n	8003d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f830 	bl	8003d24 <I2C_IsErrorOccurred>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e026      	b.n	8003d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe fd9d 	bl	800280c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d113      	bne.n	8003d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e007      	b.n	8003d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d1cf      	bne.n	8003cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d075      	beq.n	8003e3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2210      	movs	r2, #16
 8003d56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d58:	e056      	b.n	8003e08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d052      	beq.n	8003e08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fe fd53 	bl	800280c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <I2C_IsErrorOccurred+0x54>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d147      	bne.n	8003e08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9a:	d12e      	bne.n	8003dfa <I2C_IsErrorOccurred+0xd6>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d02a      	beq.n	8003dfa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d027      	beq.n	8003dfa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dba:	f7fe fd27 	bl	800280c <HAL_GetTick>
 8003dbe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc0:	e01b      	b.n	8003dfa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dc2:	f7fe fd23 	bl	800280c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b19      	cmp	r3, #25
 8003dce:	d914      	bls.n	8003dfa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d1dc      	bne.n	8003dc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d003      	beq.n	8003e1e <I2C_IsErrorOccurred+0xfa>
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d09d      	beq.n	8003d5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01c      	beq.n	8003eec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff fe56 	bl	8003b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6859      	ldr	r1, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <I2C_IsErrorOccurred+0x1d4>)
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	; 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	fe00e800 	.word	0xfe00e800

08003efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f14:	7a7b      	ldrb	r3, [r7, #9]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f1c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	0d5b      	lsrs	r3, r3, #21
 8003f36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <I2C_TransferConfig+0x60>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	ea02 0103 	and.w	r1, r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	03ff63ff 	.word	0x03ff63ff

08003f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d138      	bne.n	8003fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e032      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	d139      	bne.n	8004080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004016:	2302      	movs	r3, #2
 8004018:	e033      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2224      	movs	r2, #36	; 0x24
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40007000 	.word	0x40007000

080040ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ba:	d130      	bne.n	800411e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d038      	beq.n	800413c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040da:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2232      	movs	r2, #50	; 0x32
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0c9b      	lsrs	r3, r3, #18
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f0:	e002      	b.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f8:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d102      	bne.n	800410c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f2      	bne.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d110      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d007      	beq.n	800413c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004134:	4a05      	ldr	r2, [pc, #20]	; (800414c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800413a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40007000 	.word	0x40007000
 8004150:	20000114 	.word	0x20000114
 8004154:	431bde83 	.word	0x431bde83

08004158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e3d4      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800416a:	4ba1      	ldr	r3, [pc, #644]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004174:	4b9e      	ldr	r3, [pc, #632]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80e4 	beq.w	8004354 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_RCC_OscConfig+0x4a>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	f040 808b 	bne.w	80042b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 8087 	bne.w	80042b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041a2:	4b93      	ldr	r3, [pc, #588]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e3ac      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1a      	ldr	r2, [r3, #32]
 80041be:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <HAL_RCC_OscConfig+0x7c>
 80041ca:	4b89      	ldr	r3, [pc, #548]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d2:	e005      	b.n	80041e0 <HAL_RCC_OscConfig+0x88>
 80041d4:	4b86      	ldr	r3, [pc, #536]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d223      	bcs.n	800422c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fd41 	bl	8004c70 <RCC_SetFlashLatencyFromMSIRange>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e38d      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f8:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7c      	ldr	r2, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b7a      	ldr	r3, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4977      	ldr	r1, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004216:	4b76      	ldr	r3, [pc, #472]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	4972      	ldr	r1, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]
 800422a:	e025      	b.n	8004278 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800422c:	4b70      	ldr	r3, [pc, #448]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6f      	ldr	r2, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004232:	f043 0308 	orr.w	r3, r3, #8
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b6d      	ldr	r3, [pc, #436]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	496a      	ldr	r1, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800424a:	4b69      	ldr	r3, [pc, #420]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	4965      	ldr	r1, [pc, #404]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fd01 	bl	8004c70 <RCC_SetFlashLatencyFromMSIRange>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e34d      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004278:	f000 fc36 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	495a      	ldr	r1, [pc, #360]	; (80043f4 <HAL_RCC_OscConfig+0x29c>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_RCC_OscConfig+0x2a0>)
 8004296:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004298:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_OscConfig+0x2a4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fa65 	bl	800276c <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d052      	beq.n	8004352 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	e331      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d032      	beq.n	800431e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042b8:	4b4d      	ldr	r3, [pc, #308]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042c4:	f7fe faa2 	bl	800280c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042cc:	f7fe fa9e 	bl	800280c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e31a      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042de:	4b44      	ldr	r3, [pc, #272]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ea:	4b41      	ldr	r3, [pc, #260]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	493b      	ldr	r1, [pc, #236]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004308:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4936      	ldr	r1, [pc, #216]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e01a      	b.n	8004354 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a33      	ldr	r2, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800432a:	f7fe fa6f 	bl	800280c <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004332:	f7fe fa6b 	bl	800280c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e2e7      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x1da>
 8004350:	e000      	b.n	8004354 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004352:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d074      	beq.n	800444a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b08      	cmp	r3, #8
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x21a>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d10e      	bne.n	800438a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b03      	cmp	r3, #3
 8004370:	d10b      	bne.n	800438a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d064      	beq.n	8004448 <HAL_RCC_OscConfig+0x2f0>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d160      	bne.n	8004448 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e2c4      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x24a>
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e01d      	b.n	80043de <HAL_RCC_OscConfig+0x286>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x26e>
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x286>
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x298>)
 80043d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01c      	beq.n	8004420 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fe fa11 	bl	800280c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ec:	e011      	b.n	8004412 <HAL_RCC_OscConfig+0x2ba>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	08008f04 	.word	0x08008f04
 80043f8:	20000114 	.word	0x20000114
 80043fc:	20000140 	.word	0x20000140
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fe fa04 	bl	800280c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e280      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004412:	4baf      	ldr	r3, [pc, #700]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x2a8>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f9f4 	bl	800280c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fe f9f0 	bl	800280c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e26c      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443a:	4ba5      	ldr	r3, [pc, #660]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x2d0>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d060      	beq.n	8004518 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d005      	beq.n	8004468 <HAL_RCC_OscConfig+0x310>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d119      	bne.n	8004496 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d116      	bne.n	8004496 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004468:	4b99      	ldr	r3, [pc, #612]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x328>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e249      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b93      	ldr	r3, [pc, #588]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	4990      	ldr	r1, [pc, #576]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004494:	e040      	b.n	8004518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d023      	beq.n	80044e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449e:	4b8c      	ldr	r3, [pc, #560]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a8b      	ldr	r2, [pc, #556]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fe f9af 	bl	800280c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fe f9ab 	bl	800280c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e227      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c4:	4b82      	ldr	r3, [pc, #520]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	497c      	ldr	r1, [pc, #496]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
 80044e4:	e018      	b.n	8004518 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b7a      	ldr	r3, [pc, #488]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a79      	ldr	r2, [pc, #484]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80044ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe f98b 	bl	800280c <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fa:	f7fe f987 	bl	800280c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e203      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800450c:	4b70      	ldr	r3, [pc, #448]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d03c      	beq.n	800459e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01c      	beq.n	8004566 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452c:	4b68      	ldr	r3, [pc, #416]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	4a67      	ldr	r2, [pc, #412]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fe f966 	bl	800280c <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004544:	f7fe f962 	bl	800280c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1de      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004556:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ef      	beq.n	8004544 <HAL_RCC_OscConfig+0x3ec>
 8004564:	e01b      	b.n	800459e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004566:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456c:	4a58      	ldr	r2, [pc, #352]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004576:	f7fe f949 	bl	800280c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457e:	f7fe f945 	bl	800280c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1c1      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004590:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1ef      	bne.n	800457e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80a6 	beq.w	80046f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045b0:	4b47      	ldr	r3, [pc, #284]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	4a43      	ldr	r2, [pc, #268]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	; 0x58
 80045c8:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <HAL_RCC_OscConfig+0x57c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d118      	bne.n	8004616 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e4:	4b3b      	ldr	r3, [pc, #236]	; (80046d4 <HAL_RCC_OscConfig+0x57c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a3a      	ldr	r2, [pc, #232]	; (80046d4 <HAL_RCC_OscConfig+0x57c>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f0:	f7fe f90c 	bl	800280c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f8:	f7fe f908 	bl	800280c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e184      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460a:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <HAL_RCC_OscConfig+0x57c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d108      	bne.n	8004630 <HAL_RCC_OscConfig+0x4d8>
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462e:	e024      	b.n	800467a <HAL_RCC_OscConfig+0x522>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d110      	bne.n	800465a <HAL_RCC_OscConfig+0x502>
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	4a24      	ldr	r2, [pc, #144]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004640:	f043 0304 	orr.w	r3, r3, #4
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004658:	e00f      	b.n	800467a <HAL_RCC_OscConfig+0x522>
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800466a:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 8004672:	f023 0304 	bic.w	r3, r3, #4
 8004676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fe f8c3 	bl	800280c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe f8bf 	bl	800280c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e139      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_OscConfig+0x578>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ed      	beq.n	800468a <HAL_RCC_OscConfig+0x532>
 80046ae:	e01a      	b.n	80046e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fe f8ac 	bl	800280c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b6:	e00f      	b.n	80046d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe f8a8 	bl	800280c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d906      	bls.n	80046d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e122      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d8:	4b90      	ldr	r3, [pc, #576]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e8      	bne.n	80046b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046e6:	7ffb      	ldrb	r3, [r7, #31]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4b8b      	ldr	r3, [pc, #556]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	4a8a      	ldr	r2, [pc, #552]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8108 	beq.w	8004912 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	2b02      	cmp	r3, #2
 8004708:	f040 80d0 	bne.w	80048ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800470c:	4b83      	ldr	r3, [pc, #524]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0203 	and.w	r2, r3, #3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	429a      	cmp	r2, r3
 800471e:	d130      	bne.n	8004782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	3b01      	subs	r3, #1
 800472c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d127      	bne.n	8004782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d11f      	bne.n	8004782 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800474c:	2a07      	cmp	r2, #7
 800474e:	bf14      	ite	ne
 8004750:	2201      	movne	r2, #1
 8004752:	2200      	moveq	r2, #0
 8004754:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004756:	4293      	cmp	r3, r2
 8004758:	d113      	bne.n	8004782 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d109      	bne.n	8004782 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	085b      	lsrs	r3, r3, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d06e      	beq.n	8004860 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d069      	beq.n	800485c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0b7      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047a4:	4b5d      	ldr	r3, [pc, #372]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5c      	ldr	r2, [pc, #368]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b0:	f7fe f82c 	bl	800280c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe f828 	bl	800280c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0a4      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ca:	4b54      	ldr	r3, [pc, #336]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d6:	4b51      	ldr	r3, [pc, #324]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	4b51      	ldr	r3, [pc, #324]	; (8004920 <HAL_RCC_OscConfig+0x7c8>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047e6:	3a01      	subs	r2, #1
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	4311      	orrs	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047f0:	0212      	lsls	r2, r2, #8
 80047f2:	4311      	orrs	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047f8:	0852      	lsrs	r2, r2, #1
 80047fa:	3a01      	subs	r2, #1
 80047fc:	0552      	lsls	r2, r2, #21
 80047fe:	4311      	orrs	r1, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004804:	0852      	lsrs	r2, r2, #1
 8004806:	3a01      	subs	r2, #1
 8004808:	0652      	lsls	r2, r2, #25
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004810:	0912      	lsrs	r2, r2, #4
 8004812:	0452      	lsls	r2, r2, #17
 8004814:	430a      	orrs	r2, r1
 8004816:	4941      	ldr	r1, [pc, #260]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800481c:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3e      	ldr	r2, [pc, #248]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004828:	4b3c      	ldr	r3, [pc, #240]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a3b      	ldr	r2, [pc, #236]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800482e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004834:	f7fd ffea 	bl	800280c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7fd ffe6 	bl	800280c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e062      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484e:	4b33      	ldr	r3, [pc, #204]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800485a:	e05a      	b.n	8004912 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e059      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004860:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d152      	bne.n	8004912 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004878:	4b28      	ldr	r3, [pc, #160]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 800487e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004884:	f7fd ffc2 	bl	800280c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488c:	f7fd ffbe 	bl	800280c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e03a      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489e:	4b1f      	ldr	r3, [pc, #124]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x734>
 80048aa:	e032      	b.n	8004912 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d02d      	beq.n	800490e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048d0:	f023 0303 	bic.w	r3, r3, #3
 80048d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048d6:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	4a10      	ldr	r2, [pc, #64]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 80048dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fd ff91 	bl	800280c <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fd ff8d 	bl	800280c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e009      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCC_OscConfig+0x7c4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <HAL_RCC_OscConfig+0x796>
 800490c:	e001      	b.n	8004912 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	f99d808c 	.word	0xf99d808c

08004924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0c8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004938:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d910      	bls.n	8004968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 0207 	bic.w	r2, r3, #7
 800494e:	4961      	ldr	r1, [pc, #388]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b5f      	ldr	r3, [pc, #380]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d04c      	beq.n	8004a0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d107      	bne.n	800498c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497c:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d121      	bne.n	80049cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e09e      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e092      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ac:	4b4a      	ldr	r3, [pc, #296]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e086      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049bc:	4b46      	ldr	r3, [pc, #280]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e07e      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049cc:	4b42      	ldr	r3, [pc, #264]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 0203 	bic.w	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	493f      	ldr	r1, [pc, #252]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049de:	f7fd ff15 	bl	800280c <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e6:	f7fd ff11 	bl	800280c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e066      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fc:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 020c 	and.w	r2, r3, #12
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d1eb      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	492c      	ldr	r1, [pc, #176]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4924      	ldr	r1, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1b0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e036      	b.n	8004aca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4918      	ldr	r1, [pc, #96]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4910      	ldr	r1, [pc, #64]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a9a:	f000 f825 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b4>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490c      	ldr	r1, [pc, #48]	; (8004adc <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd fe54 	bl	800276c <HAL_InitTick>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08008f04 	.word	0x08008f04
 8004ae0:	20000114 	.word	0x20000114
 8004ae4:	20000140 	.word	0x20000140

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b00:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d121      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11e      	bne.n	8004b5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b1c:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e005      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b38:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10d      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d102      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e004      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d134      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d003      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0xac>
 8004b8c:	e005      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b8e:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b90:	617b      	str	r3, [r7, #20]
      break;
 8004b92:	e005      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x114>)
 8004b96:	617b      	str	r3, [r7, #20]
      break;
 8004b98:	e002      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bae:	4b10      	ldr	r3, [pc, #64]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	fb02 f203 	mul.w	r2, r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	0e5b      	lsrs	r3, r3, #25
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004be0:	69bb      	ldr	r3, [r7, #24]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3724      	adds	r7, #36	; 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08008f1c 	.word	0x08008f1c
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000114 	.word	0x20000114

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	08008f14 	.word	0x08008f14

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c48:	f7ff ffda 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0adb      	lsrs	r3, r3, #11
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08008f14 	.word	0x08008f14

08004c70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c7c:	4b2a      	ldr	r3, [pc, #168]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c88:	f7ff fa02 	bl	8004090 <HAL_PWREx_GetVoltageRange>
 8004c8c:	6178      	str	r0, [r7, #20]
 8004c8e:	e014      	b.n	8004cba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9c:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca8:	f7ff f9f2 	bl	8004090 <HAL_PWREx_GetVoltageRange>
 8004cac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d10b      	bne.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d919      	bls.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2ba0      	cmp	r3, #160	; 0xa0
 8004ccc:	d902      	bls.n	8004cd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cce:	2302      	movs	r3, #2
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	e013      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e010      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d902      	bls.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e00a      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d102      	bne.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cec:	2302      	movs	r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e004      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b70      	cmp	r3, #112	; 0x70
 8004cf6:	d101      	bne.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 0207 	bic.w	r2, r3, #7
 8004d04:	4909      	ldr	r1, [pc, #36]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40022000 	.word	0x40022000

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d041      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d54:	d02a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d5a:	d824      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d66:	d81e      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d70:	d010      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d72:	e018      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d74:	4b86      	ldr	r3, [pc, #536]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a85      	ldr	r2, [pc, #532]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d80:	e015      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fabb 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d92:	e00c      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3320      	adds	r3, #32
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fba6 	bl	80054ec <RCCEx_PLLSAI2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da4:	e003      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	74fb      	strb	r3, [r7, #19]
      break;
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db4:	4b76      	ldr	r3, [pc, #472]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc2:	4973      	ldr	r1, [pc, #460]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dca:	e001      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d041      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de4:	d02a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004de6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dea:	d824      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df0:	d008      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df6:	d81e      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e00:	d010      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e02:	e018      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e04:	4b62      	ldr	r3, [pc, #392]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a61      	ldr	r2, [pc, #388]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e10:	e015      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fa73 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3320      	adds	r3, #32
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb5e 	bl	80054ec <RCCEx_PLLSAI2_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	74fb      	strb	r3, [r7, #19]
      break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e44:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e52:	494f      	ldr	r1, [pc, #316]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e5a:	e001      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80a0 	beq.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e88:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	4a40      	ldr	r2, [pc, #256]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	; 0x58
 8004e94:	4b3e      	ldr	r3, [pc, #248]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eb0:	f7fd fcac 	bl	800280c <HAL_GetTick>
 8004eb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb6:	e009      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fd fca8 	bl	800280c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d902      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	74fb      	strb	r3, [r7, #19]
        break;
 8004eca:	e005      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ef      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d15c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d019      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f08:	4b21      	ldr	r3, [pc, #132]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	4a20      	ldr	r2, [pc, #128]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fc67 	bl	800280c <HAL_GetTick>
 8004f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f40:	e00b      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fd fc63 	bl	800280c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d902      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	74fb      	strb	r3, [r7, #19]
            break;
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ec      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f7e:	4904      	ldr	r1, [pc, #16]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f86:	e009      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	74bb      	strb	r3, [r7, #18]
 8004f8c:	e006      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f9c:	7c7b      	ldrb	r3, [r7, #17]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d105      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b9e      	ldr	r3, [pc, #632]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	4a9d      	ldr	r2, [pc, #628]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fba:	4b98      	ldr	r3, [pc, #608]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f023 0203 	bic.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	4994      	ldr	r1, [pc, #592]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fdc:	4b8f      	ldr	r3, [pc, #572]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f023 020c 	bic.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fea:	498c      	ldr	r1, [pc, #560]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ffe:	4b87      	ldr	r3, [pc, #540]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	4983      	ldr	r1, [pc, #524]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005020:	4b7e      	ldr	r3, [pc, #504]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	497b      	ldr	r1, [pc, #492]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005042:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	4972      	ldr	r1, [pc, #456]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005064:	4b6d      	ldr	r3, [pc, #436]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	496a      	ldr	r1, [pc, #424]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005086:	4b65      	ldr	r3, [pc, #404]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	4961      	ldr	r1, [pc, #388]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a8:	4b5c      	ldr	r3, [pc, #368]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	4959      	ldr	r1, [pc, #356]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ca:	4b54      	ldr	r3, [pc, #336]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	4950      	ldr	r1, [pc, #320]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050ec:	4b4b      	ldr	r3, [pc, #300]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	4948      	ldr	r1, [pc, #288]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511c:	493f      	ldr	r1, [pc, #252]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d028      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005130:	4b3a      	ldr	r3, [pc, #232]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800513e:	4937      	ldr	r1, [pc, #220]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514e:	d106      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b32      	ldr	r3, [pc, #200]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a31      	ldr	r2, [pc, #196]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
 800515c:	e011      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005166:	d10c      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f8c8 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800517e:	7cfb      	ldrb	r3, [r7, #19]
 8005180:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d028      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800518e:	4b23      	ldr	r3, [pc, #140]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	491f      	ldr	r1, [pc, #124]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ac:	d106      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b8:	60d3      	str	r3, [r2, #12]
 80051ba:	e011      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2101      	movs	r1, #1
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 f899 	bl	8005304 <RCCEx_PLLSAI1_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02b      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fa:	4908      	ldr	r1, [pc, #32]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520a:	d109      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a02      	ldr	r2, [pc, #8]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005216:	60d3      	str	r3, [r2, #12]
 8005218:	e014      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005228:	d10c      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3304      	adds	r3, #4
 800522e:	2101      	movs	r1, #1
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f867 	bl	8005304 <RCCEx_PLLSAI1_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d02f      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005250:	4b2b      	ldr	r3, [pc, #172]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800525e:	4928      	ldr	r1, [pc, #160]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800526e:	d10d      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2102      	movs	r1, #2
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f844 	bl	8005304 <RCCEx_PLLSAI1_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d014      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	74bb      	strb	r3, [r7, #18]
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3320      	adds	r3, #32
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f925 	bl	80054ec <RCCEx_PLLSAI2_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ca:	490d      	ldr	r1, [pc, #52]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052de:	4b08      	ldr	r3, [pc, #32]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ee:	4904      	ldr	r1, [pc, #16]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000

08005304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005312:	4b75      	ldr	r3, [pc, #468]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0203 	and.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d10d      	bne.n	800534a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
       ||
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005336:	4b6c      	ldr	r3, [pc, #432]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
       ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d047      	beq.n	80053da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	e044      	b.n	80053da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d018      	beq.n	800538a <RCCEx_PLLSAI1_Config+0x86>
 8005358:	2b03      	cmp	r3, #3
 800535a:	d825      	bhi.n	80053a8 <RCCEx_PLLSAI1_Config+0xa4>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d002      	beq.n	8005366 <RCCEx_PLLSAI1_Config+0x62>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d009      	beq.n	8005378 <RCCEx_PLLSAI1_Config+0x74>
 8005364:	e020      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005366:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d11d      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005376:	e01a      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005378:	4b5b      	ldr	r3, [pc, #364]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005388:	e013      	b.n	80053b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800538a:	4b57      	ldr	r3, [pc, #348]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005396:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053a6:	e006      	b.n	80053b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e004      	b.n	80053b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ae:	bf00      	nop
 80053b0:	e002      	b.n	80053b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10d      	bne.n	80053da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053be:	4b4a      	ldr	r3, [pc, #296]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6819      	ldr	r1, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	430b      	orrs	r3, r1
 80053d4:	4944      	ldr	r1, [pc, #272]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d17d      	bne.n	80054dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053e0:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a40      	ldr	r2, [pc, #256]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ec:	f7fd fa0e 	bl	800280c <HAL_GetTick>
 80053f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f2:	e009      	b.n	8005408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f4:	f7fd fa0a 	bl	800280c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d902      	bls.n	8005408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	73fb      	strb	r3, [r7, #15]
        break;
 8005406:	e005      	b.n	8005414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005408:	4b37      	ldr	r3, [pc, #220]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1ef      	bne.n	80053f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d160      	bne.n	80054dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005420:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6892      	ldr	r2, [r2, #8]
 8005430:	0211      	lsls	r1, r2, #8
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	0912      	lsrs	r2, r2, #4
 8005438:	0452      	lsls	r2, r2, #17
 800543a:	430a      	orrs	r2, r1
 800543c:	492a      	ldr	r1, [pc, #168]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]
 8005442:	e027      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d112      	bne.n	8005470 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005452:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	0211      	lsls	r1, r2, #8
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6912      	ldr	r2, [r2, #16]
 8005460:	0852      	lsrs	r2, r2, #1
 8005462:	3a01      	subs	r2, #1
 8005464:	0552      	lsls	r2, r2, #21
 8005466:	430a      	orrs	r2, r1
 8005468:	491f      	ldr	r1, [pc, #124]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	610b      	str	r3, [r1, #16]
 800546e:	e011      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005470:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6892      	ldr	r2, [r2, #8]
 8005480:	0211      	lsls	r1, r2, #8
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6952      	ldr	r2, [r2, #20]
 8005486:	0852      	lsrs	r2, r2, #1
 8005488:	3a01      	subs	r2, #1
 800548a:	0652      	lsls	r2, r2, #25
 800548c:	430a      	orrs	r2, r1
 800548e:	4916      	ldr	r1, [pc, #88]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	4313      	orrs	r3, r2
 8005492:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800549e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fd f9b4 	bl	800280c <HAL_GetTick>
 80054a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a6:	e009      	b.n	80054bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054a8:	f7fd f9b0 	bl	800280c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d902      	bls.n	80054bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	73fb      	strb	r3, [r7, #15]
          break;
 80054ba:	e005      	b.n	80054c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ef      	beq.n	80054a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	4904      	ldr	r1, [pc, #16]	; (80054e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000

080054ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054fa:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d018      	beq.n	8005538 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005506:	4b67      	ldr	r3, [pc, #412]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0203 	and.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d10d      	bne.n	8005532 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
       ||
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800551e:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
       ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d047      	beq.n	80055c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
 8005536:	e044      	b.n	80055c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d018      	beq.n	8005572 <RCCEx_PLLSAI2_Config+0x86>
 8005540:	2b03      	cmp	r3, #3
 8005542:	d825      	bhi.n	8005590 <RCCEx_PLLSAI2_Config+0xa4>
 8005544:	2b01      	cmp	r3, #1
 8005546:	d002      	beq.n	800554e <RCCEx_PLLSAI2_Config+0x62>
 8005548:	2b02      	cmp	r3, #2
 800554a:	d009      	beq.n	8005560 <RCCEx_PLLSAI2_Config+0x74>
 800554c:	e020      	b.n	8005590 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800554e:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d11d      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555e:	e01a      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005560:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d116      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005570:	e013      	b.n	800559a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005572:	4b4c      	ldr	r3, [pc, #304]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10f      	bne.n	800559e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800557e:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800558e:	e006      	b.n	800559e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      break;
 8005594:	e004      	b.n	80055a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005596:	bf00      	nop
 8005598:	e002      	b.n	80055a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559e:	bf00      	nop
    }

    if(status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055a6:	4b3f      	ldr	r3, [pc, #252]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6819      	ldr	r1, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	430b      	orrs	r3, r1
 80055bc:	4939      	ldr	r1, [pc, #228]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d167      	bne.n	8005698 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055c8:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a35      	ldr	r2, [pc, #212]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d4:	f7fd f91a 	bl	800280c <HAL_GetTick>
 80055d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055da:	e009      	b.n	80055f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055dc:	f7fd f916 	bl	800280c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d902      	bls.n	80055f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	73fb      	strb	r3, [r7, #15]
        break;
 80055ee:	e005      	b.n	80055fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055f0:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ef      	bne.n	80055dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d14a      	bne.n	8005698 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d111      	bne.n	800562c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005608:	4b26      	ldr	r3, [pc, #152]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6892      	ldr	r2, [r2, #8]
 8005618:	0211      	lsls	r1, r2, #8
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68d2      	ldr	r2, [r2, #12]
 800561e:	0912      	lsrs	r2, r2, #4
 8005620:	0452      	lsls	r2, r2, #17
 8005622:	430a      	orrs	r2, r1
 8005624:	491f      	ldr	r1, [pc, #124]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	4313      	orrs	r3, r2
 8005628:	614b      	str	r3, [r1, #20]
 800562a:	e011      	b.n	8005650 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005634:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6892      	ldr	r2, [r2, #8]
 800563c:	0211      	lsls	r1, r2, #8
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6912      	ldr	r2, [r2, #16]
 8005642:	0852      	lsrs	r2, r2, #1
 8005644:	3a01      	subs	r2, #1
 8005646:	0652      	lsls	r2, r2, #25
 8005648:	430a      	orrs	r2, r1
 800564a:	4916      	ldr	r1, [pc, #88]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	4313      	orrs	r3, r2
 800564e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005650:	4b14      	ldr	r3, [pc, #80]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fd f8d6 	bl	800280c <HAL_GetTick>
 8005660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005662:	e009      	b.n	8005678 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005664:	f7fd f8d2 	bl	800280c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d902      	bls.n	8005678 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	73fb      	strb	r3, [r7, #15]
          break;
 8005676:	e005      	b.n	8005684 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0ef      	beq.n	8005664 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4904      	ldr	r1, [pc, #16]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	4313      	orrs	r3, r2
 8005696:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000

080056a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e040      	b.n	800573c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fc fa58 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8c0 	bl	800586c <UART_SetConfig>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e022      	b.n	800573c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb3e 	bl	8005d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fbc5 	bl	8005ec4 <UART_CheckIdleState>
 800573a:	4603      	mov	r3, r0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	; 0x28
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005758:	2b20      	cmp	r3, #32
 800575a:	f040 8082 	bne.w	8005862 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_Transmit+0x26>
 8005764:	88fb      	ldrh	r3, [r7, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e07a      	b.n	8005864 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_UART_Transmit+0x38>
 8005778:	2302      	movs	r3, #2
 800577a:	e073      	b.n	8005864 <HAL_UART_Transmit+0x120>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2221      	movs	r2, #33	; 0x21
 8005790:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005792:	f7fd f83b 	bl	800280c <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b0:	d108      	bne.n	80057c4 <HAL_UART_Transmit+0x80>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e003      	b.n	80057cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80057d4:	e02d      	b.n	8005832 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fbb8 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e039      	b.n	8005864 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005802:	b292      	uxth	r2, r2
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3302      	adds	r3, #2
 800580a:	61bb      	str	r3, [r7, #24]
 800580c:	e008      	b.n	8005820 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	b292      	uxth	r2, r2
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1cb      	bne.n	80057d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2140      	movs	r1, #64	; 0x40
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fb84 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e005      	b.n	8005864 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4313      	orrs	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4bad      	ldr	r3, [pc, #692]	; (8005b4c <UART_SetConfig+0x2e0>)
 8005898:	4013      	ands	r3, r2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4aa2      	ldr	r2, [pc, #648]	; (8005b50 <UART_SetConfig+0x2e4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a99      	ldr	r2, [pc, #612]	; (8005b54 <UART_SetConfig+0x2e8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d121      	bne.n	8005936 <UART_SetConfig+0xca>
 80058f2:	4b99      	ldr	r3, [pc, #612]	; (8005b58 <UART_SetConfig+0x2ec>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d817      	bhi.n	8005930 <UART_SetConfig+0xc4>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0x9c>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005919 	.word	0x08005919
 800590c:	08005925 	.word	0x08005925
 8005910:	0800591f 	.word	0x0800591f
 8005914:	0800592b 	.word	0x0800592b
 8005918:	2301      	movs	r3, #1
 800591a:	76fb      	strb	r3, [r7, #27]
 800591c:	e0e7      	b.n	8005aee <UART_SetConfig+0x282>
 800591e:	2302      	movs	r3, #2
 8005920:	76fb      	strb	r3, [r7, #27]
 8005922:	e0e4      	b.n	8005aee <UART_SetConfig+0x282>
 8005924:	2304      	movs	r3, #4
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e0e1      	b.n	8005aee <UART_SetConfig+0x282>
 800592a:	2308      	movs	r3, #8
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e0de      	b.n	8005aee <UART_SetConfig+0x282>
 8005930:	2310      	movs	r3, #16
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	e0db      	b.n	8005aee <UART_SetConfig+0x282>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a88      	ldr	r2, [pc, #544]	; (8005b5c <UART_SetConfig+0x2f0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d132      	bne.n	80059a6 <UART_SetConfig+0x13a>
 8005940:	4b85      	ldr	r3, [pc, #532]	; (8005b58 <UART_SetConfig+0x2ec>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d828      	bhi.n	80059a0 <UART_SetConfig+0x134>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0xe8>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005989 	.word	0x08005989
 8005958:	080059a1 	.word	0x080059a1
 800595c:	080059a1 	.word	0x080059a1
 8005960:	080059a1 	.word	0x080059a1
 8005964:	08005995 	.word	0x08005995
 8005968:	080059a1 	.word	0x080059a1
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059a1 	.word	0x080059a1
 8005974:	0800598f 	.word	0x0800598f
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a1 	.word	0x080059a1
 8005984:	0800599b 	.word	0x0800599b
 8005988:	2300      	movs	r3, #0
 800598a:	76fb      	strb	r3, [r7, #27]
 800598c:	e0af      	b.n	8005aee <UART_SetConfig+0x282>
 800598e:	2302      	movs	r3, #2
 8005990:	76fb      	strb	r3, [r7, #27]
 8005992:	e0ac      	b.n	8005aee <UART_SetConfig+0x282>
 8005994:	2304      	movs	r3, #4
 8005996:	76fb      	strb	r3, [r7, #27]
 8005998:	e0a9      	b.n	8005aee <UART_SetConfig+0x282>
 800599a:	2308      	movs	r3, #8
 800599c:	76fb      	strb	r3, [r7, #27]
 800599e:	e0a6      	b.n	8005aee <UART_SetConfig+0x282>
 80059a0:	2310      	movs	r3, #16
 80059a2:	76fb      	strb	r3, [r7, #27]
 80059a4:	e0a3      	b.n	8005aee <UART_SetConfig+0x282>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6d      	ldr	r2, [pc, #436]	; (8005b60 <UART_SetConfig+0x2f4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d120      	bne.n	80059f2 <UART_SetConfig+0x186>
 80059b0:	4b69      	ldr	r3, [pc, #420]	; (8005b58 <UART_SetConfig+0x2ec>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ba:	2b30      	cmp	r3, #48	; 0x30
 80059bc:	d013      	beq.n	80059e6 <UART_SetConfig+0x17a>
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	d814      	bhi.n	80059ec <UART_SetConfig+0x180>
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d009      	beq.n	80059da <UART_SetConfig+0x16e>
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d810      	bhi.n	80059ec <UART_SetConfig+0x180>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <UART_SetConfig+0x168>
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d006      	beq.n	80059e0 <UART_SetConfig+0x174>
 80059d2:	e00b      	b.n	80059ec <UART_SetConfig+0x180>
 80059d4:	2300      	movs	r3, #0
 80059d6:	76fb      	strb	r3, [r7, #27]
 80059d8:	e089      	b.n	8005aee <UART_SetConfig+0x282>
 80059da:	2302      	movs	r3, #2
 80059dc:	76fb      	strb	r3, [r7, #27]
 80059de:	e086      	b.n	8005aee <UART_SetConfig+0x282>
 80059e0:	2304      	movs	r3, #4
 80059e2:	76fb      	strb	r3, [r7, #27]
 80059e4:	e083      	b.n	8005aee <UART_SetConfig+0x282>
 80059e6:	2308      	movs	r3, #8
 80059e8:	76fb      	strb	r3, [r7, #27]
 80059ea:	e080      	b.n	8005aee <UART_SetConfig+0x282>
 80059ec:	2310      	movs	r3, #16
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	e07d      	b.n	8005aee <UART_SetConfig+0x282>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a5b      	ldr	r2, [pc, #364]	; (8005b64 <UART_SetConfig+0x2f8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d120      	bne.n	8005a3e <UART_SetConfig+0x1d2>
 80059fc:	4b56      	ldr	r3, [pc, #344]	; (8005b58 <UART_SetConfig+0x2ec>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a06:	2bc0      	cmp	r3, #192	; 0xc0
 8005a08:	d013      	beq.n	8005a32 <UART_SetConfig+0x1c6>
 8005a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a0c:	d814      	bhi.n	8005a38 <UART_SetConfig+0x1cc>
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d009      	beq.n	8005a26 <UART_SetConfig+0x1ba>
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d810      	bhi.n	8005a38 <UART_SetConfig+0x1cc>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <UART_SetConfig+0x1b4>
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d006      	beq.n	8005a2c <UART_SetConfig+0x1c0>
 8005a1e:	e00b      	b.n	8005a38 <UART_SetConfig+0x1cc>
 8005a20:	2300      	movs	r3, #0
 8005a22:	76fb      	strb	r3, [r7, #27]
 8005a24:	e063      	b.n	8005aee <UART_SetConfig+0x282>
 8005a26:	2302      	movs	r3, #2
 8005a28:	76fb      	strb	r3, [r7, #27]
 8005a2a:	e060      	b.n	8005aee <UART_SetConfig+0x282>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	76fb      	strb	r3, [r7, #27]
 8005a30:	e05d      	b.n	8005aee <UART_SetConfig+0x282>
 8005a32:	2308      	movs	r3, #8
 8005a34:	76fb      	strb	r3, [r7, #27]
 8005a36:	e05a      	b.n	8005aee <UART_SetConfig+0x282>
 8005a38:	2310      	movs	r3, #16
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e057      	b.n	8005aee <UART_SetConfig+0x282>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a49      	ldr	r2, [pc, #292]	; (8005b68 <UART_SetConfig+0x2fc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d125      	bne.n	8005a94 <UART_SetConfig+0x228>
 8005a48:	4b43      	ldr	r3, [pc, #268]	; (8005b58 <UART_SetConfig+0x2ec>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a56:	d017      	beq.n	8005a88 <UART_SetConfig+0x21c>
 8005a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5c:	d817      	bhi.n	8005a8e <UART_SetConfig+0x222>
 8005a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a62:	d00b      	beq.n	8005a7c <UART_SetConfig+0x210>
 8005a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a68:	d811      	bhi.n	8005a8e <UART_SetConfig+0x222>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <UART_SetConfig+0x20a>
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d006      	beq.n	8005a82 <UART_SetConfig+0x216>
 8005a74:	e00b      	b.n	8005a8e <UART_SetConfig+0x222>
 8005a76:	2300      	movs	r3, #0
 8005a78:	76fb      	strb	r3, [r7, #27]
 8005a7a:	e038      	b.n	8005aee <UART_SetConfig+0x282>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	76fb      	strb	r3, [r7, #27]
 8005a80:	e035      	b.n	8005aee <UART_SetConfig+0x282>
 8005a82:	2304      	movs	r3, #4
 8005a84:	76fb      	strb	r3, [r7, #27]
 8005a86:	e032      	b.n	8005aee <UART_SetConfig+0x282>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	76fb      	strb	r3, [r7, #27]
 8005a8c:	e02f      	b.n	8005aee <UART_SetConfig+0x282>
 8005a8e:	2310      	movs	r3, #16
 8005a90:	76fb      	strb	r3, [r7, #27]
 8005a92:	e02c      	b.n	8005aee <UART_SetConfig+0x282>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2d      	ldr	r2, [pc, #180]	; (8005b50 <UART_SetConfig+0x2e4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d125      	bne.n	8005aea <UART_SetConfig+0x27e>
 8005a9e:	4b2e      	ldr	r3, [pc, #184]	; (8005b58 <UART_SetConfig+0x2ec>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005aa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aac:	d017      	beq.n	8005ade <UART_SetConfig+0x272>
 8005aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ab2:	d817      	bhi.n	8005ae4 <UART_SetConfig+0x278>
 8005ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ab8:	d00b      	beq.n	8005ad2 <UART_SetConfig+0x266>
 8005aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005abe:	d811      	bhi.n	8005ae4 <UART_SetConfig+0x278>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <UART_SetConfig+0x260>
 8005ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac8:	d006      	beq.n	8005ad8 <UART_SetConfig+0x26c>
 8005aca:	e00b      	b.n	8005ae4 <UART_SetConfig+0x278>
 8005acc:	2300      	movs	r3, #0
 8005ace:	76fb      	strb	r3, [r7, #27]
 8005ad0:	e00d      	b.n	8005aee <UART_SetConfig+0x282>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	76fb      	strb	r3, [r7, #27]
 8005ad6:	e00a      	b.n	8005aee <UART_SetConfig+0x282>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	76fb      	strb	r3, [r7, #27]
 8005adc:	e007      	b.n	8005aee <UART_SetConfig+0x282>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	76fb      	strb	r3, [r7, #27]
 8005ae2:	e004      	b.n	8005aee <UART_SetConfig+0x282>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	e001      	b.n	8005aee <UART_SetConfig+0x282>
 8005aea:	2310      	movs	r3, #16
 8005aec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <UART_SetConfig+0x2e4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f040 8087 	bne.w	8005c08 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005afa:	7efb      	ldrb	r3, [r7, #27]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d837      	bhi.n	8005b70 <UART_SetConfig+0x304>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x29c>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b3b 	.word	0x08005b3b
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b43 	.word	0x08005b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7ff f874 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005b30:	6178      	str	r0, [r7, #20]
        break;
 8005b32:	e022      	b.n	8005b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <UART_SetConfig+0x300>)
 8005b36:	617b      	str	r3, [r7, #20]
        break;
 8005b38:	e01f      	b.n	8005b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b3a:	f7fe ffd5 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005b3e:	6178      	str	r0, [r7, #20]
        break;
 8005b40:	e01b      	b.n	8005b7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	617b      	str	r3, [r7, #20]
        break;
 8005b48:	e017      	b.n	8005b7a <UART_SetConfig+0x30e>
 8005b4a:	bf00      	nop
 8005b4c:	efff69f3 	.word	0xefff69f3
 8005b50:	40008000 	.word	0x40008000
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40004400 	.word	0x40004400
 8005b60:	40004800 	.word	0x40004800
 8005b64:	40004c00 	.word	0x40004c00
 8005b68:	40005000 	.word	0x40005000
 8005b6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	76bb      	strb	r3, [r7, #26]
        break;
 8005b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80f1 	beq.w	8005d64 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d305      	bcc.n	8005b9e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d902      	bls.n	8005ba4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	76bb      	strb	r3, [r7, #26]
 8005ba2:	e0df      	b.n	8005d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	020b      	lsls	r3, r1, #8
 8005bb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bba:	0202      	lsls	r2, r0, #8
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	6849      	ldr	r1, [r1, #4]
 8005bc0:	0849      	lsrs	r1, r1, #1
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	f04f 0100 	mov.w	r1, #0
 8005bc8:	1814      	adds	r4, r2, r0
 8005bca:	eb43 0501 	adc.w	r5, r3, r1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	4620      	mov	r0, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	f7fa ffe4 	bl	8000ba8 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4613      	mov	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bee:	d308      	bcc.n	8005c02 <UART_SetConfig+0x396>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d204      	bcs.n	8005c02 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	e0b0      	b.n	8005d64 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	76bb      	strb	r3, [r7, #26]
 8005c06:	e0ad      	b.n	8005d64 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c10:	d15b      	bne.n	8005cca <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005c12:	7efb      	ldrb	r3, [r7, #27]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x3fe>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x3b4>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fe ffe8 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005c48:	6178      	str	r0, [r7, #20]
        break;
 8005c4a:	e013      	b.n	8005c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fffa 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8005c50:	6178      	str	r0, [r7, #20]
        break;
 8005c52:	e00f      	b.n	8005c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b49      	ldr	r3, [pc, #292]	; (8005d7c <UART_SetConfig+0x510>)
 8005c56:	617b      	str	r3, [r7, #20]
        break;
 8005c58:	e00c      	b.n	8005c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe ff45 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005c5e:	6178      	str	r0, [r7, #20]
        break;
 8005c60:	e008      	b.n	8005c74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	617b      	str	r3, [r7, #20]
        break;
 8005c68:	e004      	b.n	8005c74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	76bb      	strb	r3, [r7, #26]
        break;
 8005c72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d074      	beq.n	8005d64 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	005a      	lsls	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d916      	bls.n	8005cc4 <UART_SetConfig+0x458>
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d212      	bcs.n	8005cc4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	f023 030f 	bic.w	r3, r3, #15
 8005ca6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	89fb      	ldrh	r3, [r7, #14]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	89fa      	ldrh	r2, [r7, #14]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e04f      	b.n	8005d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	76bb      	strb	r3, [r7, #26]
 8005cc8:	e04c      	b.n	8005d64 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cca:	7efb      	ldrb	r3, [r7, #27]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d828      	bhi.n	8005d22 <UART_SetConfig+0x4b6>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x46c>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d23 	.word	0x08005d23
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fe ff8c 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005d00:	6178      	str	r0, [r7, #20]
        break;
 8005d02:	e013      	b.n	8005d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fe ff9e 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8005d08:	6178      	str	r0, [r7, #20]
        break;
 8005d0a:	e00f      	b.n	8005d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <UART_SetConfig+0x510>)
 8005d0e:	617b      	str	r3, [r7, #20]
        break;
 8005d10:	e00c      	b.n	8005d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe fee9 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8005d16:	6178      	str	r0, [r7, #20]
        break;
 8005d18:	e008      	b.n	8005d2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	617b      	str	r3, [r7, #20]
        break;
 8005d20:	e004      	b.n	8005d2c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	76bb      	strb	r3, [r7, #26]
        break;
 8005d2a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d018      	beq.n	8005d64 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	085a      	lsrs	r2, r3, #1
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b0f      	cmp	r3, #15
 8005d4a:	d909      	bls.n	8005d60 <UART_SetConfig+0x4f4>
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d52:	d205      	bcs.n	8005d60 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	e001      	b.n	8005d64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d70:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bdb0      	pop	{r4, r5, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	00f42400 	.word	0x00f42400

08005d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01a      	beq.n	8005e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7e:	d10a      	bne.n	8005e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]
  }
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed4:	f7fc fc9a 	bl	800280c <HAL_GetTick>
 8005ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d10e      	bne.n	8005f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f82d 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e023      	b.n	8005f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d10e      	bne.n	8005f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f817 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e00d      	b.n	8005f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b09c      	sub	sp, #112	; 0x70
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f66:	e0a5      	b.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	f000 80a1 	beq.w	80060b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fc fc4b 	bl	800280c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d13e      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e067      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d04f      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006022:	d147      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800602c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
 800604e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e6      	bne.n	800602e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	613b      	str	r3, [r7, #16]
   return(result);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	66bb      	str	r3, [r7, #104]	; 0x68
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006080:	623a      	str	r2, [r7, #32]
 8006082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	69f9      	ldr	r1, [r7, #28]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	61bb      	str	r3, [r7, #24]
   return(result);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e010      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4013      	ands	r3, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	f43f af4a 	beq.w	8005f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3770      	adds	r7, #112	; 0x70
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000148 	.word	0x20000148

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f002 fee6 	bl	8008ed0 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	08009334 	.word	0x08009334
 8006128:	08009334 	.word	0x08009334
 800612c:	08009334 	.word	0x08009334
 8006130:	08009338 	.word	0x08009338

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <__cvt>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	ec55 4b10 	vmov	r4, r5, d0
 800614c:	2d00      	cmp	r5, #0
 800614e:	460e      	mov	r6, r1
 8006150:	4619      	mov	r1, r3
 8006152:	462b      	mov	r3, r5
 8006154:	bfbb      	ittet	lt
 8006156:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800615a:	461d      	movlt	r5, r3
 800615c:	2300      	movge	r3, #0
 800615e:	232d      	movlt	r3, #45	; 0x2d
 8006160:	700b      	strb	r3, [r1, #0]
 8006162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006164:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006168:	4691      	mov	r9, r2
 800616a:	f023 0820 	bic.w	r8, r3, #32
 800616e:	bfbc      	itt	lt
 8006170:	4622      	movlt	r2, r4
 8006172:	4614      	movlt	r4, r2
 8006174:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006178:	d005      	beq.n	8006186 <__cvt+0x42>
 800617a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800617e:	d100      	bne.n	8006182 <__cvt+0x3e>
 8006180:	3601      	adds	r6, #1
 8006182:	2102      	movs	r1, #2
 8006184:	e000      	b.n	8006188 <__cvt+0x44>
 8006186:	2103      	movs	r1, #3
 8006188:	ab03      	add	r3, sp, #12
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	ab02      	add	r3, sp, #8
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	ec45 4b10 	vmov	d0, r4, r5
 8006194:	4653      	mov	r3, sl
 8006196:	4632      	mov	r2, r6
 8006198:	f000 fcea 	bl	8006b70 <_dtoa_r>
 800619c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061a0:	4607      	mov	r7, r0
 80061a2:	d102      	bne.n	80061aa <__cvt+0x66>
 80061a4:	f019 0f01 	tst.w	r9, #1
 80061a8:	d022      	beq.n	80061f0 <__cvt+0xac>
 80061aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061ae:	eb07 0906 	add.w	r9, r7, r6
 80061b2:	d110      	bne.n	80061d6 <__cvt+0x92>
 80061b4:	783b      	ldrb	r3, [r7, #0]
 80061b6:	2b30      	cmp	r3, #48	; 0x30
 80061b8:	d10a      	bne.n	80061d0 <__cvt+0x8c>
 80061ba:	2200      	movs	r2, #0
 80061bc:	2300      	movs	r3, #0
 80061be:	4620      	mov	r0, r4
 80061c0:	4629      	mov	r1, r5
 80061c2:	f7fa fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80061c6:	b918      	cbnz	r0, 80061d0 <__cvt+0x8c>
 80061c8:	f1c6 0601 	rsb	r6, r6, #1
 80061cc:	f8ca 6000 	str.w	r6, [sl]
 80061d0:	f8da 3000 	ldr.w	r3, [sl]
 80061d4:	4499      	add	r9, r3
 80061d6:	2200      	movs	r2, #0
 80061d8:	2300      	movs	r3, #0
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 80061e2:	b108      	cbz	r0, 80061e8 <__cvt+0xa4>
 80061e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061e8:	2230      	movs	r2, #48	; 0x30
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	454b      	cmp	r3, r9
 80061ee:	d307      	bcc.n	8006200 <__cvt+0xbc>
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f4:	1bdb      	subs	r3, r3, r7
 80061f6:	4638      	mov	r0, r7
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	b004      	add	sp, #16
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006200:	1c59      	adds	r1, r3, #1
 8006202:	9103      	str	r1, [sp, #12]
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e7f0      	b.n	80061ea <__cvt+0xa6>

08006208 <__exponent>:
 8006208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620a:	4603      	mov	r3, r0
 800620c:	2900      	cmp	r1, #0
 800620e:	bfb8      	it	lt
 8006210:	4249      	neglt	r1, r1
 8006212:	f803 2b02 	strb.w	r2, [r3], #2
 8006216:	bfb4      	ite	lt
 8006218:	222d      	movlt	r2, #45	; 0x2d
 800621a:	222b      	movge	r2, #43	; 0x2b
 800621c:	2909      	cmp	r1, #9
 800621e:	7042      	strb	r2, [r0, #1]
 8006220:	dd2a      	ble.n	8006278 <__exponent+0x70>
 8006222:	f10d 0407 	add.w	r4, sp, #7
 8006226:	46a4      	mov	ip, r4
 8006228:	270a      	movs	r7, #10
 800622a:	46a6      	mov	lr, r4
 800622c:	460a      	mov	r2, r1
 800622e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006232:	fb07 1516 	mls	r5, r7, r6, r1
 8006236:	3530      	adds	r5, #48	; 0x30
 8006238:	2a63      	cmp	r2, #99	; 0x63
 800623a:	f104 34ff 	add.w	r4, r4, #4294967295
 800623e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006242:	4631      	mov	r1, r6
 8006244:	dcf1      	bgt.n	800622a <__exponent+0x22>
 8006246:	3130      	adds	r1, #48	; 0x30
 8006248:	f1ae 0502 	sub.w	r5, lr, #2
 800624c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006250:	1c44      	adds	r4, r0, #1
 8006252:	4629      	mov	r1, r5
 8006254:	4561      	cmp	r1, ip
 8006256:	d30a      	bcc.n	800626e <__exponent+0x66>
 8006258:	f10d 0209 	add.w	r2, sp, #9
 800625c:	eba2 020e 	sub.w	r2, r2, lr
 8006260:	4565      	cmp	r5, ip
 8006262:	bf88      	it	hi
 8006264:	2200      	movhi	r2, #0
 8006266:	4413      	add	r3, r2
 8006268:	1a18      	subs	r0, r3, r0
 800626a:	b003      	add	sp, #12
 800626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006272:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006276:	e7ed      	b.n	8006254 <__exponent+0x4c>
 8006278:	2330      	movs	r3, #48	; 0x30
 800627a:	3130      	adds	r1, #48	; 0x30
 800627c:	7083      	strb	r3, [r0, #2]
 800627e:	70c1      	strb	r1, [r0, #3]
 8006280:	1d03      	adds	r3, r0, #4
 8006282:	e7f1      	b.n	8006268 <__exponent+0x60>

08006284 <_printf_float>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	ed2d 8b02 	vpush	{d8}
 800628c:	b08d      	sub	sp, #52	; 0x34
 800628e:	460c      	mov	r4, r1
 8006290:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006294:	4616      	mov	r6, r2
 8006296:	461f      	mov	r7, r3
 8006298:	4605      	mov	r5, r0
 800629a:	f001 fa55 	bl	8007748 <_localeconv_r>
 800629e:	f8d0 a000 	ldr.w	sl, [r0]
 80062a2:	4650      	mov	r0, sl
 80062a4:	f7f9 ff94 	bl	80001d0 <strlen>
 80062a8:	2300      	movs	r3, #0
 80062aa:	930a      	str	r3, [sp, #40]	; 0x28
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	9305      	str	r3, [sp, #20]
 80062b0:	f8d8 3000 	ldr.w	r3, [r8]
 80062b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062b8:	3307      	adds	r3, #7
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	f103 0208 	add.w	r2, r3, #8
 80062c2:	f8c8 2000 	str.w	r2, [r8]
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80062dc:	ee08 0a10 	vmov	s16, r0
 80062e0:	4b9f      	ldr	r3, [pc, #636]	; (8006560 <_printf_float+0x2dc>)
 80062e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	f7fa fc1f 	bl	8000b2c <__aeabi_dcmpun>
 80062ee:	bb88      	cbnz	r0, 8006354 <_printf_float+0xd0>
 80062f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f4:	4b9a      	ldr	r3, [pc, #616]	; (8006560 <_printf_float+0x2dc>)
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	f7fa fbf9 	bl	8000af0 <__aeabi_dcmple>
 80062fe:	bb48      	cbnz	r0, 8006354 <_printf_float+0xd0>
 8006300:	2200      	movs	r2, #0
 8006302:	2300      	movs	r3, #0
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa fbe8 	bl	8000adc <__aeabi_dcmplt>
 800630c:	b110      	cbz	r0, 8006314 <_printf_float+0x90>
 800630e:	232d      	movs	r3, #45	; 0x2d
 8006310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006314:	4b93      	ldr	r3, [pc, #588]	; (8006564 <_printf_float+0x2e0>)
 8006316:	4894      	ldr	r0, [pc, #592]	; (8006568 <_printf_float+0x2e4>)
 8006318:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800631c:	bf94      	ite	ls
 800631e:	4698      	movls	r8, r3
 8006320:	4680      	movhi	r8, r0
 8006322:	2303      	movs	r3, #3
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	f023 0204 	bic.w	r2, r3, #4
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	f04f 0900 	mov.w	r9, #0
 8006332:	9700      	str	r7, [sp, #0]
 8006334:	4633      	mov	r3, r6
 8006336:	aa0b      	add	r2, sp, #44	; 0x2c
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f9d8 	bl	80066f0 <_printf_common>
 8006340:	3001      	adds	r0, #1
 8006342:	f040 8090 	bne.w	8006466 <_printf_float+0x1e2>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	b00d      	add	sp, #52	; 0x34
 800634c:	ecbd 8b02 	vpop	{d8}
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa fbe6 	bl	8000b2c <__aeabi_dcmpun>
 8006360:	b140      	cbz	r0, 8006374 <_printf_float+0xf0>
 8006362:	464b      	mov	r3, r9
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfbc      	itt	lt
 8006368:	232d      	movlt	r3, #45	; 0x2d
 800636a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800636e:	487f      	ldr	r0, [pc, #508]	; (800656c <_printf_float+0x2e8>)
 8006370:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <_printf_float+0x2ec>)
 8006372:	e7d1      	b.n	8006318 <_printf_float+0x94>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800637a:	9206      	str	r2, [sp, #24]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	d13f      	bne.n	8006400 <_printf_float+0x17c>
 8006380:	2306      	movs	r3, #6
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	6861      	ldr	r1, [r4, #4]
 8006388:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800638c:	2300      	movs	r3, #0
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	ab0a      	add	r3, sp, #40	; 0x28
 8006392:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006396:	ab09      	add	r3, sp, #36	; 0x24
 8006398:	ec49 8b10 	vmov	d0, r8, r9
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7ff fecd 	bl	8006144 <__cvt>
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ae:	2b47      	cmp	r3, #71	; 0x47
 80063b0:	4680      	mov	r8, r0
 80063b2:	d108      	bne.n	80063c6 <_printf_float+0x142>
 80063b4:	1cc8      	adds	r0, r1, #3
 80063b6:	db02      	blt.n	80063be <_printf_float+0x13a>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	4299      	cmp	r1, r3
 80063bc:	dd41      	ble.n	8006442 <_printf_float+0x1be>
 80063be:	f1ab 0b02 	sub.w	fp, fp, #2
 80063c2:	fa5f fb8b 	uxtb.w	fp, fp
 80063c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ca:	d820      	bhi.n	800640e <_printf_float+0x18a>
 80063cc:	3901      	subs	r1, #1
 80063ce:	465a      	mov	r2, fp
 80063d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063d4:	9109      	str	r1, [sp, #36]	; 0x24
 80063d6:	f7ff ff17 	bl	8006208 <__exponent>
 80063da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063dc:	1813      	adds	r3, r2, r0
 80063de:	2a01      	cmp	r2, #1
 80063e0:	4681      	mov	r9, r0
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	dc02      	bgt.n	80063ec <_printf_float+0x168>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	07d2      	lsls	r2, r2, #31
 80063ea:	d501      	bpl.n	80063f0 <_printf_float+0x16c>
 80063ec:	3301      	adds	r3, #1
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d09c      	beq.n	8006332 <_printf_float+0xae>
 80063f8:	232d      	movs	r3, #45	; 0x2d
 80063fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fe:	e798      	b.n	8006332 <_printf_float+0xae>
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	2a47      	cmp	r2, #71	; 0x47
 8006404:	d1be      	bne.n	8006384 <_printf_float+0x100>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1bc      	bne.n	8006384 <_printf_float+0x100>
 800640a:	2301      	movs	r3, #1
 800640c:	e7b9      	b.n	8006382 <_printf_float+0xfe>
 800640e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006412:	d118      	bne.n	8006446 <_printf_float+0x1c2>
 8006414:	2900      	cmp	r1, #0
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	dd0b      	ble.n	8006432 <_printf_float+0x1ae>
 800641a:	6121      	str	r1, [r4, #16]
 800641c:	b913      	cbnz	r3, 8006424 <_printf_float+0x1a0>
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	07d0      	lsls	r0, r2, #31
 8006422:	d502      	bpl.n	800642a <_printf_float+0x1a6>
 8006424:	3301      	adds	r3, #1
 8006426:	440b      	add	r3, r1
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	65a1      	str	r1, [r4, #88]	; 0x58
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	e7de      	b.n	80063f0 <_printf_float+0x16c>
 8006432:	b913      	cbnz	r3, 800643a <_printf_float+0x1b6>
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	07d2      	lsls	r2, r2, #31
 8006438:	d501      	bpl.n	800643e <_printf_float+0x1ba>
 800643a:	3302      	adds	r3, #2
 800643c:	e7f4      	b.n	8006428 <_printf_float+0x1a4>
 800643e:	2301      	movs	r3, #1
 8006440:	e7f2      	b.n	8006428 <_printf_float+0x1a4>
 8006442:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006448:	4299      	cmp	r1, r3
 800644a:	db05      	blt.n	8006458 <_printf_float+0x1d4>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	6121      	str	r1, [r4, #16]
 8006450:	07d8      	lsls	r0, r3, #31
 8006452:	d5ea      	bpl.n	800642a <_printf_float+0x1a6>
 8006454:	1c4b      	adds	r3, r1, #1
 8006456:	e7e7      	b.n	8006428 <_printf_float+0x1a4>
 8006458:	2900      	cmp	r1, #0
 800645a:	bfd4      	ite	le
 800645c:	f1c1 0202 	rsble	r2, r1, #2
 8006460:	2201      	movgt	r2, #1
 8006462:	4413      	add	r3, r2
 8006464:	e7e0      	b.n	8006428 <_printf_float+0x1a4>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	055a      	lsls	r2, r3, #21
 800646a:	d407      	bmi.n	800647c <_printf_float+0x1f8>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	4642      	mov	r2, r8
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	d12c      	bne.n	80064d4 <_printf_float+0x250>
 800647a:	e764      	b.n	8006346 <_printf_float+0xc2>
 800647c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006480:	f240 80e0 	bls.w	8006644 <_printf_float+0x3c0>
 8006484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	f7fa fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006490:	2800      	cmp	r0, #0
 8006492:	d034      	beq.n	80064fe <_printf_float+0x27a>
 8006494:	4a37      	ldr	r2, [pc, #220]	; (8006574 <_printf_float+0x2f0>)
 8006496:	2301      	movs	r3, #1
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f af51 	beq.w	8006346 <_printf_float+0xc2>
 80064a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a8:	429a      	cmp	r2, r3
 80064aa:	db02      	blt.n	80064b2 <_printf_float+0x22e>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	07d8      	lsls	r0, r3, #31
 80064b0:	d510      	bpl.n	80064d4 <_printf_float+0x250>
 80064b2:	ee18 3a10 	vmov	r3, s16
 80064b6:	4652      	mov	r2, sl
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f af41 	beq.w	8006346 <_printf_float+0xc2>
 80064c4:	f04f 0800 	mov.w	r8, #0
 80064c8:	f104 091a 	add.w	r9, r4, #26
 80064cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4543      	cmp	r3, r8
 80064d2:	dc09      	bgt.n	80064e8 <_printf_float+0x264>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	f100 8105 	bmi.w	80066e6 <_printf_float+0x462>
 80064dc:	68e0      	ldr	r0, [r4, #12]
 80064de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e0:	4298      	cmp	r0, r3
 80064e2:	bfb8      	it	lt
 80064e4:	4618      	movlt	r0, r3
 80064e6:	e730      	b.n	800634a <_printf_float+0xc6>
 80064e8:	2301      	movs	r3, #1
 80064ea:	464a      	mov	r2, r9
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af27 	beq.w	8006346 <_printf_float+0xc2>
 80064f8:	f108 0801 	add.w	r8, r8, #1
 80064fc:	e7e6      	b.n	80064cc <_printf_float+0x248>
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc39      	bgt.n	8006578 <_printf_float+0x2f4>
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <_printf_float+0x2f0>)
 8006506:	2301      	movs	r3, #1
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f af19 	beq.w	8006346 <_printf_float+0xc2>
 8006514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006518:	4313      	orrs	r3, r2
 800651a:	d102      	bne.n	8006522 <_printf_float+0x29e>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07d9      	lsls	r1, r3, #31
 8006520:	d5d8      	bpl.n	80064d4 <_printf_float+0x250>
 8006522:	ee18 3a10 	vmov	r3, s16
 8006526:	4652      	mov	r2, sl
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af09 	beq.w	8006346 <_printf_float+0xc2>
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	f104 0a1a 	add.w	sl, r4, #26
 800653c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653e:	425b      	negs	r3, r3
 8006540:	454b      	cmp	r3, r9
 8006542:	dc01      	bgt.n	8006548 <_printf_float+0x2c4>
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	e792      	b.n	800646e <_printf_float+0x1ea>
 8006548:	2301      	movs	r3, #1
 800654a:	4652      	mov	r2, sl
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f aef7 	beq.w	8006346 <_printf_float+0xc2>
 8006558:	f109 0901 	add.w	r9, r9, #1
 800655c:	e7ee      	b.n	800653c <_printf_float+0x2b8>
 800655e:	bf00      	nop
 8006560:	7fefffff 	.word	0x7fefffff
 8006564:	08008f50 	.word	0x08008f50
 8006568:	08008f54 	.word	0x08008f54
 800656c:	08008f5c 	.word	0x08008f5c
 8006570:	08008f58 	.word	0x08008f58
 8006574:	08008f60 	.word	0x08008f60
 8006578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800657a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657c:	429a      	cmp	r2, r3
 800657e:	bfa8      	it	ge
 8006580:	461a      	movge	r2, r3
 8006582:	2a00      	cmp	r2, #0
 8006584:	4691      	mov	r9, r2
 8006586:	dc37      	bgt.n	80065f8 <_printf_float+0x374>
 8006588:	f04f 0b00 	mov.w	fp, #0
 800658c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006590:	f104 021a 	add.w	r2, r4, #26
 8006594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	eba3 0309 	sub.w	r3, r3, r9
 800659c:	455b      	cmp	r3, fp
 800659e:	dc33      	bgt.n	8006608 <_printf_float+0x384>
 80065a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a4:	429a      	cmp	r2, r3
 80065a6:	db3b      	blt.n	8006620 <_printf_float+0x39c>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d438      	bmi.n	8006620 <_printf_float+0x39c>
 80065ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	eba2 0901 	sub.w	r9, r2, r1
 80065ba:	4599      	cmp	r9, r3
 80065bc:	bfa8      	it	ge
 80065be:	4699      	movge	r9, r3
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	dc35      	bgt.n	8006632 <_printf_float+0x3ae>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ce:	f104 0a1a 	add.w	sl, r4, #26
 80065d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	eba3 0309 	sub.w	r3, r3, r9
 80065dc:	4543      	cmp	r3, r8
 80065de:	f77f af79 	ble.w	80064d4 <_printf_float+0x250>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f aeaa 	beq.w	8006346 <_printf_float+0xc2>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	e7ec      	b.n	80065d2 <_printf_float+0x34e>
 80065f8:	4613      	mov	r3, r2
 80065fa:	4631      	mov	r1, r6
 80065fc:	4642      	mov	r2, r8
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	d1c0      	bne.n	8006588 <_printf_float+0x304>
 8006606:	e69e      	b.n	8006346 <_printf_float+0xc2>
 8006608:	2301      	movs	r3, #1
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	9205      	str	r2, [sp, #20]
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f ae97 	beq.w	8006346 <_printf_float+0xc2>
 8006618:	9a05      	ldr	r2, [sp, #20]
 800661a:	f10b 0b01 	add.w	fp, fp, #1
 800661e:	e7b9      	b.n	8006594 <_printf_float+0x310>
 8006620:	ee18 3a10 	vmov	r3, s16
 8006624:	4652      	mov	r2, sl
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	47b8      	blx	r7
 800662c:	3001      	adds	r0, #1
 800662e:	d1be      	bne.n	80065ae <_printf_float+0x32a>
 8006630:	e689      	b.n	8006346 <_printf_float+0xc2>
 8006632:	9a05      	ldr	r2, [sp, #20]
 8006634:	464b      	mov	r3, r9
 8006636:	4442      	add	r2, r8
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	d1c1      	bne.n	80065c6 <_printf_float+0x342>
 8006642:	e680      	b.n	8006346 <_printf_float+0xc2>
 8006644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006646:	2a01      	cmp	r2, #1
 8006648:	dc01      	bgt.n	800664e <_printf_float+0x3ca>
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d538      	bpl.n	80066c0 <_printf_float+0x43c>
 800664e:	2301      	movs	r3, #1
 8006650:	4642      	mov	r2, r8
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae74 	beq.w	8006346 <_printf_float+0xc2>
 800665e:	ee18 3a10 	vmov	r3, s16
 8006662:	4652      	mov	r2, sl
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f ae6b 	beq.w	8006346 <_printf_float+0xc2>
 8006670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	f7fa fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800667c:	b9d8      	cbnz	r0, 80066b6 <_printf_float+0x432>
 800667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006680:	f108 0201 	add.w	r2, r8, #1
 8006684:	3b01      	subs	r3, #1
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d10e      	bne.n	80066ae <_printf_float+0x42a>
 8006690:	e659      	b.n	8006346 <_printf_float+0xc2>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae52 	beq.w	8006346 <_printf_float+0xc2>
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4543      	cmp	r3, r8
 80066ac:	dcf1      	bgt.n	8006692 <_printf_float+0x40e>
 80066ae:	464b      	mov	r3, r9
 80066b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066b4:	e6dc      	b.n	8006470 <_printf_float+0x1ec>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0a1a 	add.w	sl, r4, #26
 80066be:	e7f2      	b.n	80066a6 <_printf_float+0x422>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4642      	mov	r2, r8
 80066c4:	e7df      	b.n	8006686 <_printf_float+0x402>
 80066c6:	2301      	movs	r3, #1
 80066c8:	464a      	mov	r2, r9
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f ae38 	beq.w	8006346 <_printf_float+0xc2>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066de:	1a5b      	subs	r3, r3, r1
 80066e0:	4543      	cmp	r3, r8
 80066e2:	dcf0      	bgt.n	80066c6 <_printf_float+0x442>
 80066e4:	e6fa      	b.n	80064dc <_printf_float+0x258>
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	f104 0919 	add.w	r9, r4, #25
 80066ee:	e7f4      	b.n	80066da <_printf_float+0x456>

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	4699      	mov	r9, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006700:	4293      	cmp	r3, r2
 8006702:	bfb8      	it	lt
 8006704:	4613      	movlt	r3, r2
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670c:	4607      	mov	r7, r0
 800670e:	460c      	mov	r4, r1
 8006710:	b10a      	cbz	r2, 8006716 <_printf_common+0x26>
 8006712:	3301      	adds	r3, #1
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0699      	lsls	r1, r3, #26
 800671a:	bf42      	ittt	mi
 800671c:	6833      	ldrmi	r3, [r6, #0]
 800671e:	3302      	addmi	r3, #2
 8006720:	6033      	strmi	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d106      	bne.n	8006738 <_printf_common+0x48>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	42ab      	cmp	r3, r5
 8006736:	dc26      	bgt.n	8006786 <_printf_common+0x96>
 8006738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800673c:	1e13      	subs	r3, r2, #0
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	2301      	movne	r3, #1
 8006744:	0692      	lsls	r2, r2, #26
 8006746:	d42b      	bmi.n	80067a0 <_printf_common+0xb0>
 8006748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d01e      	beq.n	8006794 <_printf_common+0xa4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	68e5      	ldr	r5, [r4, #12]
 800675a:	6832      	ldr	r2, [r6, #0]
 800675c:	f003 0306 	and.w	r3, r3, #6
 8006760:	2b04      	cmp	r3, #4
 8006762:	bf08      	it	eq
 8006764:	1aad      	subeq	r5, r5, r2
 8006766:	68a3      	ldr	r3, [r4, #8]
 8006768:	6922      	ldr	r2, [r4, #16]
 800676a:	bf0c      	ite	eq
 800676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006770:	2500      	movne	r5, #0
 8006772:	4293      	cmp	r3, r2
 8006774:	bfc4      	itt	gt
 8006776:	1a9b      	subgt	r3, r3, r2
 8006778:	18ed      	addgt	r5, r5, r3
 800677a:	2600      	movs	r6, #0
 800677c:	341a      	adds	r4, #26
 800677e:	42b5      	cmp	r5, r6
 8006780:	d11a      	bne.n	80067b8 <_printf_common+0xc8>
 8006782:	2000      	movs	r0, #0
 8006784:	e008      	b.n	8006798 <_printf_common+0xa8>
 8006786:	2301      	movs	r3, #1
 8006788:	4652      	mov	r2, sl
 800678a:	4649      	mov	r1, r9
 800678c:	4638      	mov	r0, r7
 800678e:	47c0      	blx	r8
 8006790:	3001      	adds	r0, #1
 8006792:	d103      	bne.n	800679c <_printf_common+0xac>
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	3501      	adds	r5, #1
 800679e:	e7c6      	b.n	800672e <_printf_common+0x3e>
 80067a0:	18e1      	adds	r1, r4, r3
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	2030      	movs	r0, #48	; 0x30
 80067a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067aa:	4422      	add	r2, r4
 80067ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b4:	3302      	adds	r3, #2
 80067b6:	e7c7      	b.n	8006748 <_printf_common+0x58>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4622      	mov	r2, r4
 80067bc:	4649      	mov	r1, r9
 80067be:	4638      	mov	r0, r7
 80067c0:	47c0      	blx	r8
 80067c2:	3001      	adds	r0, #1
 80067c4:	d0e6      	beq.n	8006794 <_printf_common+0xa4>
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7d9      	b.n	800677e <_printf_common+0x8e>
	...

080067cc <_printf_i>:
 80067cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d0:	460c      	mov	r4, r1
 80067d2:	4691      	mov	r9, r2
 80067d4:	7e27      	ldrb	r7, [r4, #24]
 80067d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067d8:	2f78      	cmp	r7, #120	; 0x78
 80067da:	4680      	mov	r8, r0
 80067dc:	469a      	mov	sl, r3
 80067de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067e2:	d807      	bhi.n	80067f4 <_printf_i+0x28>
 80067e4:	2f62      	cmp	r7, #98	; 0x62
 80067e6:	d80a      	bhi.n	80067fe <_printf_i+0x32>
 80067e8:	2f00      	cmp	r7, #0
 80067ea:	f000 80d8 	beq.w	800699e <_printf_i+0x1d2>
 80067ee:	2f58      	cmp	r7, #88	; 0x58
 80067f0:	f000 80a3 	beq.w	800693a <_printf_i+0x16e>
 80067f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067fc:	e03a      	b.n	8006874 <_printf_i+0xa8>
 80067fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006802:	2b15      	cmp	r3, #21
 8006804:	d8f6      	bhi.n	80067f4 <_printf_i+0x28>
 8006806:	a001      	add	r0, pc, #4	; (adr r0, 800680c <_printf_i+0x40>)
 8006808:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800680c:	08006865 	.word	0x08006865
 8006810:	08006879 	.word	0x08006879
 8006814:	080067f5 	.word	0x080067f5
 8006818:	080067f5 	.word	0x080067f5
 800681c:	080067f5 	.word	0x080067f5
 8006820:	080067f5 	.word	0x080067f5
 8006824:	08006879 	.word	0x08006879
 8006828:	080067f5 	.word	0x080067f5
 800682c:	080067f5 	.word	0x080067f5
 8006830:	080067f5 	.word	0x080067f5
 8006834:	080067f5 	.word	0x080067f5
 8006838:	08006985 	.word	0x08006985
 800683c:	080068a9 	.word	0x080068a9
 8006840:	08006967 	.word	0x08006967
 8006844:	080067f5 	.word	0x080067f5
 8006848:	080067f5 	.word	0x080067f5
 800684c:	080069a7 	.word	0x080069a7
 8006850:	080067f5 	.word	0x080067f5
 8006854:	080068a9 	.word	0x080068a9
 8006858:	080067f5 	.word	0x080067f5
 800685c:	080067f5 	.word	0x080067f5
 8006860:	0800696f 	.word	0x0800696f
 8006864:	680b      	ldr	r3, [r1, #0]
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	600a      	str	r2, [r1, #0]
 800686c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006874:	2301      	movs	r3, #1
 8006876:	e0a3      	b.n	80069c0 <_printf_i+0x1f4>
 8006878:	6825      	ldr	r5, [r4, #0]
 800687a:	6808      	ldr	r0, [r1, #0]
 800687c:	062e      	lsls	r6, r5, #24
 800687e:	f100 0304 	add.w	r3, r0, #4
 8006882:	d50a      	bpl.n	800689a <_printf_i+0xce>
 8006884:	6805      	ldr	r5, [r0, #0]
 8006886:	600b      	str	r3, [r1, #0]
 8006888:	2d00      	cmp	r5, #0
 800688a:	da03      	bge.n	8006894 <_printf_i+0xc8>
 800688c:	232d      	movs	r3, #45	; 0x2d
 800688e:	426d      	negs	r5, r5
 8006890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006894:	485e      	ldr	r0, [pc, #376]	; (8006a10 <_printf_i+0x244>)
 8006896:	230a      	movs	r3, #10
 8006898:	e019      	b.n	80068ce <_printf_i+0x102>
 800689a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800689e:	6805      	ldr	r5, [r0, #0]
 80068a0:	600b      	str	r3, [r1, #0]
 80068a2:	bf18      	it	ne
 80068a4:	b22d      	sxthne	r5, r5
 80068a6:	e7ef      	b.n	8006888 <_printf_i+0xbc>
 80068a8:	680b      	ldr	r3, [r1, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	1d18      	adds	r0, r3, #4
 80068ae:	6008      	str	r0, [r1, #0]
 80068b0:	0628      	lsls	r0, r5, #24
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0xec>
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0xf2>
 80068b8:	0669      	lsls	r1, r5, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0xe8>
 80068bc:	881d      	ldrh	r5, [r3, #0]
 80068be:	4854      	ldr	r0, [pc, #336]	; (8006a10 <_printf_i+0x244>)
 80068c0:	2f6f      	cmp	r7, #111	; 0x6f
 80068c2:	bf0c      	ite	eq
 80068c4:	2308      	moveq	r3, #8
 80068c6:	230a      	movne	r3, #10
 80068c8:	2100      	movs	r1, #0
 80068ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ce:	6866      	ldr	r6, [r4, #4]
 80068d0:	60a6      	str	r6, [r4, #8]
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	bfa2      	ittt	ge
 80068d6:	6821      	ldrge	r1, [r4, #0]
 80068d8:	f021 0104 	bicge.w	r1, r1, #4
 80068dc:	6021      	strge	r1, [r4, #0]
 80068de:	b90d      	cbnz	r5, 80068e4 <_printf_i+0x118>
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	d04d      	beq.n	8006980 <_printf_i+0x1b4>
 80068e4:	4616      	mov	r6, r2
 80068e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ea:	fb03 5711 	mls	r7, r3, r1, r5
 80068ee:	5dc7      	ldrb	r7, [r0, r7]
 80068f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068f4:	462f      	mov	r7, r5
 80068f6:	42bb      	cmp	r3, r7
 80068f8:	460d      	mov	r5, r1
 80068fa:	d9f4      	bls.n	80068e6 <_printf_i+0x11a>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d10b      	bne.n	8006918 <_printf_i+0x14c>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	d508      	bpl.n	8006918 <_printf_i+0x14c>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6861      	ldr	r1, [r4, #4]
 800690a:	4299      	cmp	r1, r3
 800690c:	bfde      	ittt	le
 800690e:	2330      	movle	r3, #48	; 0x30
 8006910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006918:	1b92      	subs	r2, r2, r6
 800691a:	6122      	str	r2, [r4, #16]
 800691c:	f8cd a000 	str.w	sl, [sp]
 8006920:	464b      	mov	r3, r9
 8006922:	aa03      	add	r2, sp, #12
 8006924:	4621      	mov	r1, r4
 8006926:	4640      	mov	r0, r8
 8006928:	f7ff fee2 	bl	80066f0 <_printf_common>
 800692c:	3001      	adds	r0, #1
 800692e:	d14c      	bne.n	80069ca <_printf_i+0x1fe>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	b004      	add	sp, #16
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	4835      	ldr	r0, [pc, #212]	; (8006a10 <_printf_i+0x244>)
 800693c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	680e      	ldr	r6, [r1, #0]
 8006944:	061f      	lsls	r7, r3, #24
 8006946:	f856 5b04 	ldr.w	r5, [r6], #4
 800694a:	600e      	str	r6, [r1, #0]
 800694c:	d514      	bpl.n	8006978 <_printf_i+0x1ac>
 800694e:	07d9      	lsls	r1, r3, #31
 8006950:	bf44      	itt	mi
 8006952:	f043 0320 	orrmi.w	r3, r3, #32
 8006956:	6023      	strmi	r3, [r4, #0]
 8006958:	b91d      	cbnz	r5, 8006962 <_printf_i+0x196>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	f023 0320 	bic.w	r3, r3, #32
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	2310      	movs	r3, #16
 8006964:	e7b0      	b.n	80068c8 <_printf_i+0xfc>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	f043 0320 	orr.w	r3, r3, #32
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	2378      	movs	r3, #120	; 0x78
 8006970:	4828      	ldr	r0, [pc, #160]	; (8006a14 <_printf_i+0x248>)
 8006972:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006976:	e7e3      	b.n	8006940 <_printf_i+0x174>
 8006978:	065e      	lsls	r6, r3, #25
 800697a:	bf48      	it	mi
 800697c:	b2ad      	uxthmi	r5, r5
 800697e:	e7e6      	b.n	800694e <_printf_i+0x182>
 8006980:	4616      	mov	r6, r2
 8006982:	e7bb      	b.n	80068fc <_printf_i+0x130>
 8006984:	680b      	ldr	r3, [r1, #0]
 8006986:	6826      	ldr	r6, [r4, #0]
 8006988:	6960      	ldr	r0, [r4, #20]
 800698a:	1d1d      	adds	r5, r3, #4
 800698c:	600d      	str	r5, [r1, #0]
 800698e:	0635      	lsls	r5, r6, #24
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	d501      	bpl.n	8006998 <_printf_i+0x1cc>
 8006994:	6018      	str	r0, [r3, #0]
 8006996:	e002      	b.n	800699e <_printf_i+0x1d2>
 8006998:	0671      	lsls	r1, r6, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0x1c8>
 800699c:	8018      	strh	r0, [r3, #0]
 800699e:	2300      	movs	r3, #0
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	4616      	mov	r6, r2
 80069a4:	e7ba      	b.n	800691c <_printf_i+0x150>
 80069a6:	680b      	ldr	r3, [r1, #0]
 80069a8:	1d1a      	adds	r2, r3, #4
 80069aa:	600a      	str	r2, [r1, #0]
 80069ac:	681e      	ldr	r6, [r3, #0]
 80069ae:	6862      	ldr	r2, [r4, #4]
 80069b0:	2100      	movs	r1, #0
 80069b2:	4630      	mov	r0, r6
 80069b4:	f7f9 fc14 	bl	80001e0 <memchr>
 80069b8:	b108      	cbz	r0, 80069be <_printf_i+0x1f2>
 80069ba:	1b80      	subs	r0, r0, r6
 80069bc:	6060      	str	r0, [r4, #4]
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	2300      	movs	r3, #0
 80069c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c8:	e7a8      	b.n	800691c <_printf_i+0x150>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	4632      	mov	r2, r6
 80069ce:	4649      	mov	r1, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	47d0      	blx	sl
 80069d4:	3001      	adds	r0, #1
 80069d6:	d0ab      	beq.n	8006930 <_printf_i+0x164>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	079b      	lsls	r3, r3, #30
 80069dc:	d413      	bmi.n	8006a06 <_printf_i+0x23a>
 80069de:	68e0      	ldr	r0, [r4, #12]
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	4298      	cmp	r0, r3
 80069e4:	bfb8      	it	lt
 80069e6:	4618      	movlt	r0, r3
 80069e8:	e7a4      	b.n	8006934 <_printf_i+0x168>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4632      	mov	r2, r6
 80069ee:	4649      	mov	r1, r9
 80069f0:	4640      	mov	r0, r8
 80069f2:	47d0      	blx	sl
 80069f4:	3001      	adds	r0, #1
 80069f6:	d09b      	beq.n	8006930 <_printf_i+0x164>
 80069f8:	3501      	adds	r5, #1
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	9903      	ldr	r1, [sp, #12]
 80069fe:	1a5b      	subs	r3, r3, r1
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	dcf2      	bgt.n	80069ea <_printf_i+0x21e>
 8006a04:	e7eb      	b.n	80069de <_printf_i+0x212>
 8006a06:	2500      	movs	r5, #0
 8006a08:	f104 0619 	add.w	r6, r4, #25
 8006a0c:	e7f5      	b.n	80069fa <_printf_i+0x22e>
 8006a0e:	bf00      	nop
 8006a10:	08008f62 	.word	0x08008f62
 8006a14:	08008f73 	.word	0x08008f73

08006a18 <_vsiprintf_r>:
 8006a18:	b500      	push	{lr}
 8006a1a:	b09b      	sub	sp, #108	; 0x6c
 8006a1c:	9100      	str	r1, [sp, #0]
 8006a1e:	9104      	str	r1, [sp, #16]
 8006a20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a24:	9105      	str	r1, [sp, #20]
 8006a26:	9102      	str	r1, [sp, #8]
 8006a28:	4905      	ldr	r1, [pc, #20]	; (8006a40 <_vsiprintf_r+0x28>)
 8006a2a:	9103      	str	r1, [sp, #12]
 8006a2c:	4669      	mov	r1, sp
 8006a2e:	f001 fb39 	bl	80080a4 <_svfiprintf_r>
 8006a32:	9b00      	ldr	r3, [sp, #0]
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	b01b      	add	sp, #108	; 0x6c
 8006a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a3e:	bf00      	nop
 8006a40:	ffff0208 	.word	0xffff0208

08006a44 <vsiprintf>:
 8006a44:	4613      	mov	r3, r2
 8006a46:	460a      	mov	r2, r1
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4802      	ldr	r0, [pc, #8]	; (8006a54 <vsiprintf+0x10>)
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f7ff bfe3 	b.w	8006a18 <_vsiprintf_r>
 8006a52:	bf00      	nop
 8006a54:	20000148 	.word	0x20000148

08006a58 <quorem>:
 8006a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	6903      	ldr	r3, [r0, #16]
 8006a5e:	690c      	ldr	r4, [r1, #16]
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	4607      	mov	r7, r0
 8006a64:	f2c0 8081 	blt.w	8006b6a <quorem+0x112>
 8006a68:	3c01      	subs	r4, #1
 8006a6a:	f101 0814 	add.w	r8, r1, #20
 8006a6e:	f100 0514 	add.w	r5, r0, #20
 8006a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a80:	3301      	adds	r3, #1
 8006a82:	429a      	cmp	r2, r3
 8006a84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a90:	d331      	bcc.n	8006af6 <quorem+0x9e>
 8006a92:	f04f 0e00 	mov.w	lr, #0
 8006a96:	4640      	mov	r0, r8
 8006a98:	46ac      	mov	ip, r5
 8006a9a:	46f2      	mov	sl, lr
 8006a9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006aa0:	b293      	uxth	r3, r2
 8006aa2:	fb06 e303 	mla	r3, r6, r3, lr
 8006aa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	ebaa 0303 	sub.w	r3, sl, r3
 8006ab0:	0c12      	lsrs	r2, r2, #16
 8006ab2:	f8dc a000 	ldr.w	sl, [ip]
 8006ab6:	fb06 e202 	mla	r2, r6, r2, lr
 8006aba:	fa13 f38a 	uxtah	r3, r3, sl
 8006abe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ac2:	fa1f fa82 	uxth.w	sl, r2
 8006ac6:	f8dc 2000 	ldr.w	r2, [ip]
 8006aca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ace:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ad8:	4581      	cmp	r9, r0
 8006ada:	f84c 3b04 	str.w	r3, [ip], #4
 8006ade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ae2:	d2db      	bcs.n	8006a9c <quorem+0x44>
 8006ae4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ae8:	b92b      	cbnz	r3, 8006af6 <quorem+0x9e>
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	429d      	cmp	r5, r3
 8006af0:	461a      	mov	r2, r3
 8006af2:	d32e      	bcc.n	8006b52 <quorem+0xfa>
 8006af4:	613c      	str	r4, [r7, #16]
 8006af6:	4638      	mov	r0, r7
 8006af8:	f001 f8be 	bl	8007c78 <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	db24      	blt.n	8006b4a <quorem+0xf2>
 8006b00:	3601      	adds	r6, #1
 8006b02:	4628      	mov	r0, r5
 8006b04:	f04f 0c00 	mov.w	ip, #0
 8006b08:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b0c:	f8d0 e000 	ldr.w	lr, [r0]
 8006b10:	b293      	uxth	r3, r2
 8006b12:	ebac 0303 	sub.w	r3, ip, r3
 8006b16:	0c12      	lsrs	r2, r2, #16
 8006b18:	fa13 f38e 	uxtah	r3, r3, lr
 8006b1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b2a:	45c1      	cmp	r9, r8
 8006b2c:	f840 3b04 	str.w	r3, [r0], #4
 8006b30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b34:	d2e8      	bcs.n	8006b08 <quorem+0xb0>
 8006b36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b3e:	b922      	cbnz	r2, 8006b4a <quorem+0xf2>
 8006b40:	3b04      	subs	r3, #4
 8006b42:	429d      	cmp	r5, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	d30a      	bcc.n	8006b5e <quorem+0x106>
 8006b48:	613c      	str	r4, [r7, #16]
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	b003      	add	sp, #12
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	3b04      	subs	r3, #4
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d1cc      	bne.n	8006af4 <quorem+0x9c>
 8006b5a:	3c01      	subs	r4, #1
 8006b5c:	e7c7      	b.n	8006aee <quorem+0x96>
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	3b04      	subs	r3, #4
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	d1f0      	bne.n	8006b48 <quorem+0xf0>
 8006b66:	3c01      	subs	r4, #1
 8006b68:	e7eb      	b.n	8006b42 <quorem+0xea>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7ee      	b.n	8006b4c <quorem+0xf4>
	...

08006b70 <_dtoa_r>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	ed2d 8b02 	vpush	{d8}
 8006b78:	ec57 6b10 	vmov	r6, r7, d0
 8006b7c:	b095      	sub	sp, #84	; 0x54
 8006b7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b84:	9105      	str	r1, [sp, #20]
 8006b86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b90:	b975      	cbnz	r5, 8006bb0 <_dtoa_r+0x40>
 8006b92:	2010      	movs	r0, #16
 8006b94:	f000 fddc 	bl	8007750 <malloc>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b9c:	b920      	cbnz	r0, 8006ba8 <_dtoa_r+0x38>
 8006b9e:	4bb2      	ldr	r3, [pc, #712]	; (8006e68 <_dtoa_r+0x2f8>)
 8006ba0:	21ea      	movs	r1, #234	; 0xea
 8006ba2:	48b2      	ldr	r0, [pc, #712]	; (8006e6c <_dtoa_r+0x2fc>)
 8006ba4:	f001 fb8e 	bl	80082c4 <__assert_func>
 8006ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006bac:	6005      	str	r5, [r0, #0]
 8006bae:	60c5      	str	r5, [r0, #12]
 8006bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb2:	6819      	ldr	r1, [r3, #0]
 8006bb4:	b151      	cbz	r1, 8006bcc <_dtoa_r+0x5c>
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	604a      	str	r2, [r1, #4]
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4093      	lsls	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fe1b 	bl	80077fc <_Bfree>
 8006bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	1e3b      	subs	r3, r7, #0
 8006bce:	bfb9      	ittee	lt
 8006bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	9303      	strlt	r3, [sp, #12]
 8006bd6:	2300      	movge	r3, #0
 8006bd8:	f8c8 3000 	strge.w	r3, [r8]
 8006bdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006be0:	4ba3      	ldr	r3, [pc, #652]	; (8006e70 <_dtoa_r+0x300>)
 8006be2:	bfbc      	itt	lt
 8006be4:	2201      	movlt	r2, #1
 8006be6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bea:	ea33 0309 	bics.w	r3, r3, r9
 8006bee:	d11b      	bne.n	8006c28 <_dtoa_r+0xb8>
 8006bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bfc:	4333      	orrs	r3, r6
 8006bfe:	f000 857a 	beq.w	80076f6 <_dtoa_r+0xb86>
 8006c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c04:	b963      	cbnz	r3, 8006c20 <_dtoa_r+0xb0>
 8006c06:	4b9b      	ldr	r3, [pc, #620]	; (8006e74 <_dtoa_r+0x304>)
 8006c08:	e024      	b.n	8006c54 <_dtoa_r+0xe4>
 8006c0a:	4b9b      	ldr	r3, [pc, #620]	; (8006e78 <_dtoa_r+0x308>)
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	9800      	ldr	r0, [sp, #0]
 8006c16:	b015      	add	sp, #84	; 0x54
 8006c18:	ecbd 8b02 	vpop	{d8}
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	4b94      	ldr	r3, [pc, #592]	; (8006e74 <_dtoa_r+0x304>)
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	3303      	adds	r3, #3
 8006c26:	e7f3      	b.n	8006c10 <_dtoa_r+0xa0>
 8006c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	ec51 0b17 	vmov	r0, r1, d7
 8006c32:	2300      	movs	r3, #0
 8006c34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c38:	f7f9 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	b158      	cbz	r0, 8006c58 <_dtoa_r+0xe8>
 8006c40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c42:	2301      	movs	r3, #1
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8551 	beq.w	80076f0 <_dtoa_r+0xb80>
 8006c4e:	488b      	ldr	r0, [pc, #556]	; (8006e7c <_dtoa_r+0x30c>)
 8006c50:	6018      	str	r0, [r3, #0]
 8006c52:	1e43      	subs	r3, r0, #1
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	e7dd      	b.n	8006c14 <_dtoa_r+0xa4>
 8006c58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c5c:	aa12      	add	r2, sp, #72	; 0x48
 8006c5e:	a913      	add	r1, sp, #76	; 0x4c
 8006c60:	4620      	mov	r0, r4
 8006c62:	f001 f8ad 	bl	8007dc0 <__d2b>
 8006c66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c6a:	4683      	mov	fp, r0
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	d07c      	beq.n	8006d6a <_dtoa_r+0x1fa>
 8006c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c8a:	4b7d      	ldr	r3, [pc, #500]	; (8006e80 <_dtoa_r+0x310>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4630      	mov	r0, r6
 8006c90:	4639      	mov	r1, r7
 8006c92:	f7f9 faf9 	bl	8000288 <__aeabi_dsub>
 8006c96:	a36e      	add	r3, pc, #440	; (adr r3, 8006e50 <_dtoa_r+0x2e0>)
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fcac 	bl	80005f8 <__aeabi_dmul>
 8006ca0:	a36d      	add	r3, pc, #436	; (adr r3, 8006e58 <_dtoa_r+0x2e8>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 faf1 	bl	800028c <__adddf3>
 8006caa:	4606      	mov	r6, r0
 8006cac:	4628      	mov	r0, r5
 8006cae:	460f      	mov	r7, r1
 8006cb0:	f7f9 fc38 	bl	8000524 <__aeabi_i2d>
 8006cb4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e60 <_dtoa_r+0x2f0>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fc9d 	bl	80005f8 <__aeabi_dmul>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	f7f9 fae1 	bl	800028c <__adddf3>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	f7f9 ff43 	bl	8000b58 <__aeabi_d2iz>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4630      	mov	r0, r6
 8006cda:	4639      	mov	r1, r7
 8006cdc:	f7f9 fefe 	bl	8000adc <__aeabi_dcmplt>
 8006ce0:	b148      	cbz	r0, 8006cf6 <_dtoa_r+0x186>
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f7f9 fc1e 	bl	8000524 <__aeabi_i2d>
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	f7f9 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cf0:	b908      	cbnz	r0, 8006cf6 <_dtoa_r+0x186>
 8006cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf6:	f1ba 0f16 	cmp.w	sl, #22
 8006cfa:	d854      	bhi.n	8006da6 <_dtoa_r+0x236>
 8006cfc:	4b61      	ldr	r3, [pc, #388]	; (8006e84 <_dtoa_r+0x314>)
 8006cfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d0a:	f7f9 fee7 	bl	8000adc <__aeabi_dcmplt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d04b      	beq.n	8006daa <_dtoa_r+0x23a>
 8006d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d16:	2300      	movs	r3, #0
 8006d18:	930e      	str	r3, [sp, #56]	; 0x38
 8006d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d1c:	1b5d      	subs	r5, r3, r5
 8006d1e:	1e6b      	subs	r3, r5, #1
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	bf43      	ittte	mi
 8006d24:	2300      	movmi	r3, #0
 8006d26:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d2a:	9304      	strmi	r3, [sp, #16]
 8006d2c:	f04f 0800 	movpl.w	r8, #0
 8006d30:	f1ba 0f00 	cmp.w	sl, #0
 8006d34:	db3b      	blt.n	8006dae <_dtoa_r+0x23e>
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d3c:	4453      	add	r3, sl
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	2300      	movs	r3, #0
 8006d42:	9306      	str	r3, [sp, #24]
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	2b09      	cmp	r3, #9
 8006d48:	d869      	bhi.n	8006e1e <_dtoa_r+0x2ae>
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	bfc4      	itt	gt
 8006d4e:	3b04      	subgt	r3, #4
 8006d50:	9305      	strgt	r3, [sp, #20]
 8006d52:	9b05      	ldr	r3, [sp, #20]
 8006d54:	f1a3 0302 	sub.w	r3, r3, #2
 8006d58:	bfcc      	ite	gt
 8006d5a:	2500      	movgt	r5, #0
 8006d5c:	2501      	movle	r5, #1
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d869      	bhi.n	8006e36 <_dtoa_r+0x2c6>
 8006d62:	e8df f003 	tbb	[pc, r3]
 8006d66:	4e2c      	.short	0x4e2c
 8006d68:	5a4c      	.short	0x5a4c
 8006d6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d6e:	441d      	add	r5, r3
 8006d70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	bfc1      	itttt	gt
 8006d78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d80:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d88:	bfda      	itte	le
 8006d8a:	f1c3 0320 	rsble	r3, r3, #32
 8006d8e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d92:	4318      	orrgt	r0, r3
 8006d94:	f7f9 fbb6 	bl	8000504 <__aeabi_ui2d>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006da0:	3d01      	subs	r5, #1
 8006da2:	9310      	str	r3, [sp, #64]	; 0x40
 8006da4:	e771      	b.n	8006c8a <_dtoa_r+0x11a>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e7b6      	b.n	8006d18 <_dtoa_r+0x1a8>
 8006daa:	900e      	str	r0, [sp, #56]	; 0x38
 8006dac:	e7b5      	b.n	8006d1a <_dtoa_r+0x1aa>
 8006dae:	f1ca 0300 	rsb	r3, sl, #0
 8006db2:	9306      	str	r3, [sp, #24]
 8006db4:	2300      	movs	r3, #0
 8006db6:	eba8 080a 	sub.w	r8, r8, sl
 8006dba:	930d      	str	r3, [sp, #52]	; 0x34
 8006dbc:	e7c2      	b.n	8006d44 <_dtoa_r+0x1d4>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9308      	str	r3, [sp, #32]
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc39      	bgt.n	8006e3c <_dtoa_r+0x2cc>
 8006dc8:	f04f 0901 	mov.w	r9, #1
 8006dcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006dd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dd8:	2200      	movs	r2, #0
 8006dda:	6042      	str	r2, [r0, #4]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	f102 0614 	add.w	r6, r2, #20
 8006de2:	429e      	cmp	r6, r3
 8006de4:	6841      	ldr	r1, [r0, #4]
 8006de6:	d92f      	bls.n	8006e48 <_dtoa_r+0x2d8>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fcc7 	bl	800777c <_Balloc>
 8006dee:	9000      	str	r0, [sp, #0]
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d14b      	bne.n	8006e8c <_dtoa_r+0x31c>
 8006df4:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <_dtoa_r+0x318>)
 8006df6:	4602      	mov	r2, r0
 8006df8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dfc:	e6d1      	b.n	8006ba2 <_dtoa_r+0x32>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7de      	b.n	8006dc0 <_dtoa_r+0x250>
 8006e02:	2300      	movs	r3, #0
 8006e04:	9308      	str	r3, [sp, #32]
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	eb0a 0903 	add.w	r9, sl, r3
 8006e0c:	f109 0301 	add.w	r3, r9, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	bfb8      	it	lt
 8006e16:	2301      	movlt	r3, #1
 8006e18:	e7dd      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e7f2      	b.n	8006e04 <_dtoa_r+0x294>
 8006e1e:	2501      	movs	r5, #1
 8006e20:	2300      	movs	r3, #0
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	9508      	str	r5, [sp, #32]
 8006e26:	f04f 39ff 	mov.w	r9, #4294967295
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e30:	2312      	movs	r3, #18
 8006e32:	9209      	str	r2, [sp, #36]	; 0x24
 8006e34:	e7cf      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e36:	2301      	movs	r3, #1
 8006e38:	9308      	str	r3, [sp, #32]
 8006e3a:	e7f4      	b.n	8006e26 <_dtoa_r+0x2b6>
 8006e3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e44:	464b      	mov	r3, r9
 8006e46:	e7c6      	b.n	8006dd6 <_dtoa_r+0x266>
 8006e48:	3101      	adds	r1, #1
 8006e4a:	6041      	str	r1, [r0, #4]
 8006e4c:	0052      	lsls	r2, r2, #1
 8006e4e:	e7c6      	b.n	8006dde <_dtoa_r+0x26e>
 8006e50:	636f4361 	.word	0x636f4361
 8006e54:	3fd287a7 	.word	0x3fd287a7
 8006e58:	8b60c8b3 	.word	0x8b60c8b3
 8006e5c:	3fc68a28 	.word	0x3fc68a28
 8006e60:	509f79fb 	.word	0x509f79fb
 8006e64:	3fd34413 	.word	0x3fd34413
 8006e68:	08008f91 	.word	0x08008f91
 8006e6c:	08008fa8 	.word	0x08008fa8
 8006e70:	7ff00000 	.word	0x7ff00000
 8006e74:	08008f8d 	.word	0x08008f8d
 8006e78:	08008f84 	.word	0x08008f84
 8006e7c:	08008f61 	.word	0x08008f61
 8006e80:	3ff80000 	.word	0x3ff80000
 8006e84:	080090a0 	.word	0x080090a0
 8006e88:	08009007 	.word	0x08009007
 8006e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e8e:	9a00      	ldr	r2, [sp, #0]
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	9b01      	ldr	r3, [sp, #4]
 8006e94:	2b0e      	cmp	r3, #14
 8006e96:	f200 80ad 	bhi.w	8006ff4 <_dtoa_r+0x484>
 8006e9a:	2d00      	cmp	r5, #0
 8006e9c:	f000 80aa 	beq.w	8006ff4 <_dtoa_r+0x484>
 8006ea0:	f1ba 0f00 	cmp.w	sl, #0
 8006ea4:	dd36      	ble.n	8006f14 <_dtoa_r+0x3a4>
 8006ea6:	4ac3      	ldr	r2, [pc, #780]	; (80071b4 <_dtoa_r+0x644>)
 8006ea8:	f00a 030f 	and.w	r3, sl, #15
 8006eac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006eb0:	ed93 7b00 	vldr	d7, [r3]
 8006eb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006eb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006ebc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ec0:	eef0 8a67 	vmov.f32	s17, s15
 8006ec4:	d016      	beq.n	8006ef4 <_dtoa_r+0x384>
 8006ec6:	4bbc      	ldr	r3, [pc, #752]	; (80071b8 <_dtoa_r+0x648>)
 8006ec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ed0:	f7f9 fcbc 	bl	800084c <__aeabi_ddiv>
 8006ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed8:	f007 070f 	and.w	r7, r7, #15
 8006edc:	2503      	movs	r5, #3
 8006ede:	4eb6      	ldr	r6, [pc, #728]	; (80071b8 <_dtoa_r+0x648>)
 8006ee0:	b957      	cbnz	r7, 8006ef8 <_dtoa_r+0x388>
 8006ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee6:	ec53 2b18 	vmov	r2, r3, d8
 8006eea:	f7f9 fcaf 	bl	800084c <__aeabi_ddiv>
 8006eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef2:	e029      	b.n	8006f48 <_dtoa_r+0x3d8>
 8006ef4:	2502      	movs	r5, #2
 8006ef6:	e7f2      	b.n	8006ede <_dtoa_r+0x36e>
 8006ef8:	07f9      	lsls	r1, r7, #31
 8006efa:	d508      	bpl.n	8006f0e <_dtoa_r+0x39e>
 8006efc:	ec51 0b18 	vmov	r0, r1, d8
 8006f00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f04:	f7f9 fb78 	bl	80005f8 <__aeabi_dmul>
 8006f08:	ec41 0b18 	vmov	d8, r0, r1
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	107f      	asrs	r7, r7, #1
 8006f10:	3608      	adds	r6, #8
 8006f12:	e7e5      	b.n	8006ee0 <_dtoa_r+0x370>
 8006f14:	f000 80a6 	beq.w	8007064 <_dtoa_r+0x4f4>
 8006f18:	f1ca 0600 	rsb	r6, sl, #0
 8006f1c:	4ba5      	ldr	r3, [pc, #660]	; (80071b4 <_dtoa_r+0x644>)
 8006f1e:	4fa6      	ldr	r7, [pc, #664]	; (80071b8 <_dtoa_r+0x648>)
 8006f20:	f006 020f 	and.w	r2, r6, #15
 8006f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f30:	f7f9 fb62 	bl	80005f8 <__aeabi_dmul>
 8006f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f38:	1136      	asrs	r6, r6, #4
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2502      	movs	r5, #2
 8006f3e:	2e00      	cmp	r6, #0
 8006f40:	f040 8085 	bne.w	800704e <_dtoa_r+0x4de>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1d2      	bne.n	8006eee <_dtoa_r+0x37e>
 8006f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 808c 	beq.w	8007068 <_dtoa_r+0x4f8>
 8006f50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f54:	4b99      	ldr	r3, [pc, #612]	; (80071bc <_dtoa_r+0x64c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	f000 8081 	beq.w	8007068 <_dtoa_r+0x4f8>
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d07d      	beq.n	8007068 <_dtoa_r+0x4f8>
 8006f6c:	f1b9 0f00 	cmp.w	r9, #0
 8006f70:	dd3c      	ble.n	8006fec <_dtoa_r+0x47c>
 8006f72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4b91      	ldr	r3, [pc, #580]	; (80071c0 <_dtoa_r+0x650>)
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	4639      	mov	r1, r7
 8006f80:	f7f9 fb3a 	bl	80005f8 <__aeabi_dmul>
 8006f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f88:	3501      	adds	r5, #1
 8006f8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 fac6 	bl	8000524 <__aeabi_i2d>
 8006f98:	4632      	mov	r2, r6
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	4b88      	ldr	r3, [pc, #544]	; (80071c4 <_dtoa_r+0x654>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f7f9 f972 	bl	800028c <__adddf3>
 8006fa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d15c      	bne.n	8007072 <_dtoa_r+0x502>
 8006fb8:	4b83      	ldr	r3, [pc, #524]	; (80071c8 <_dtoa_r+0x658>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	f7f9 f962 	bl	8000288 <__aeabi_dsub>
 8006fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc8:	4606      	mov	r6, r0
 8006fca:	460f      	mov	r7, r1
 8006fcc:	f7f9 fda4 	bl	8000b18 <__aeabi_dcmpgt>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f040 8296 	bne.w	8007502 <_dtoa_r+0x992>
 8006fd6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	f7f9 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f040 8288 	bne.w	80074fc <_dtoa_r+0x98c>
 8006fec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f2c0 8158 	blt.w	80072ac <_dtoa_r+0x73c>
 8006ffc:	f1ba 0f0e 	cmp.w	sl, #14
 8007000:	f300 8154 	bgt.w	80072ac <_dtoa_r+0x73c>
 8007004:	4b6b      	ldr	r3, [pc, #428]	; (80071b4 <_dtoa_r+0x644>)
 8007006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800700a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	f280 80e3 	bge.w	80071dc <_dtoa_r+0x66c>
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f300 80df 	bgt.w	80071dc <_dtoa_r+0x66c>
 800701e:	f040 826d 	bne.w	80074fc <_dtoa_r+0x98c>
 8007022:	4b69      	ldr	r3, [pc, #420]	; (80071c8 <_dtoa_r+0x658>)
 8007024:	2200      	movs	r2, #0
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 fae5 	bl	80005f8 <__aeabi_dmul>
 800702e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007032:	f7f9 fd67 	bl	8000b04 <__aeabi_dcmpge>
 8007036:	9e01      	ldr	r6, [sp, #4]
 8007038:	4637      	mov	r7, r6
 800703a:	2800      	cmp	r0, #0
 800703c:	f040 8243 	bne.w	80074c6 <_dtoa_r+0x956>
 8007040:	9d00      	ldr	r5, [sp, #0]
 8007042:	2331      	movs	r3, #49	; 0x31
 8007044:	f805 3b01 	strb.w	r3, [r5], #1
 8007048:	f10a 0a01 	add.w	sl, sl, #1
 800704c:	e23f      	b.n	80074ce <_dtoa_r+0x95e>
 800704e:	07f2      	lsls	r2, r6, #31
 8007050:	d505      	bpl.n	800705e <_dtoa_r+0x4ee>
 8007052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	3501      	adds	r5, #1
 800705c:	2301      	movs	r3, #1
 800705e:	1076      	asrs	r6, r6, #1
 8007060:	3708      	adds	r7, #8
 8007062:	e76c      	b.n	8006f3e <_dtoa_r+0x3ce>
 8007064:	2502      	movs	r5, #2
 8007066:	e76f      	b.n	8006f48 <_dtoa_r+0x3d8>
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	f8cd a01c 	str.w	sl, [sp, #28]
 800706e:	930c      	str	r3, [sp, #48]	; 0x30
 8007070:	e78d      	b.n	8006f8e <_dtoa_r+0x41e>
 8007072:	9900      	ldr	r1, [sp, #0]
 8007074:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007078:	4b4e      	ldr	r3, [pc, #312]	; (80071b4 <_dtoa_r+0x644>)
 800707a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800707e:	4401      	add	r1, r0
 8007080:	9102      	str	r1, [sp, #8]
 8007082:	9908      	ldr	r1, [sp, #32]
 8007084:	eeb0 8a47 	vmov.f32	s16, s14
 8007088:	eef0 8a67 	vmov.f32	s17, s15
 800708c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007094:	2900      	cmp	r1, #0
 8007096:	d045      	beq.n	8007124 <_dtoa_r+0x5b4>
 8007098:	494c      	ldr	r1, [pc, #304]	; (80071cc <_dtoa_r+0x65c>)
 800709a:	2000      	movs	r0, #0
 800709c:	f7f9 fbd6 	bl	800084c <__aeabi_ddiv>
 80070a0:	ec53 2b18 	vmov	r2, r3, d8
 80070a4:	f7f9 f8f0 	bl	8000288 <__aeabi_dsub>
 80070a8:	9d00      	ldr	r5, [sp, #0]
 80070aa:	ec41 0b18 	vmov	d8, r0, r1
 80070ae:	4639      	mov	r1, r7
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7f9 fd51 	bl	8000b58 <__aeabi_d2iz>
 80070b6:	900c      	str	r0, [sp, #48]	; 0x30
 80070b8:	f7f9 fa34 	bl	8000524 <__aeabi_i2d>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	f7f9 f8e0 	bl	8000288 <__aeabi_dsub>
 80070c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070ca:	3330      	adds	r3, #48	; 0x30
 80070cc:	f805 3b01 	strb.w	r3, [r5], #1
 80070d0:	ec53 2b18 	vmov	r2, r3, d8
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	f7f9 fd00 	bl	8000adc <__aeabi_dcmplt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d165      	bne.n	80071ac <_dtoa_r+0x63c>
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	4935      	ldr	r1, [pc, #212]	; (80071bc <_dtoa_r+0x64c>)
 80070e6:	2000      	movs	r0, #0
 80070e8:	f7f9 f8ce 	bl	8000288 <__aeabi_dsub>
 80070ec:	ec53 2b18 	vmov	r2, r3, d8
 80070f0:	f7f9 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f040 80b9 	bne.w	800726c <_dtoa_r+0x6fc>
 80070fa:	9b02      	ldr	r3, [sp, #8]
 80070fc:	429d      	cmp	r5, r3
 80070fe:	f43f af75 	beq.w	8006fec <_dtoa_r+0x47c>
 8007102:	4b2f      	ldr	r3, [pc, #188]	; (80071c0 <_dtoa_r+0x650>)
 8007104:	ec51 0b18 	vmov	r0, r1, d8
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fa75 	bl	80005f8 <__aeabi_dmul>
 800710e:	4b2c      	ldr	r3, [pc, #176]	; (80071c0 <_dtoa_r+0x650>)
 8007110:	ec41 0b18 	vmov	d8, r0, r1
 8007114:	2200      	movs	r2, #0
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fa6d 	bl	80005f8 <__aeabi_dmul>
 800711e:	4606      	mov	r6, r0
 8007120:	460f      	mov	r7, r1
 8007122:	e7c4      	b.n	80070ae <_dtoa_r+0x53e>
 8007124:	ec51 0b17 	vmov	r0, r1, d7
 8007128:	f7f9 fa66 	bl	80005f8 <__aeabi_dmul>
 800712c:	9b02      	ldr	r3, [sp, #8]
 800712e:	9d00      	ldr	r5, [sp, #0]
 8007130:	930c      	str	r3, [sp, #48]	; 0x30
 8007132:	ec41 0b18 	vmov	d8, r0, r1
 8007136:	4639      	mov	r1, r7
 8007138:	4630      	mov	r0, r6
 800713a:	f7f9 fd0d 	bl	8000b58 <__aeabi_d2iz>
 800713e:	9011      	str	r0, [sp, #68]	; 0x44
 8007140:	f7f9 f9f0 	bl	8000524 <__aeabi_i2d>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	4630      	mov	r0, r6
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 f89c 	bl	8000288 <__aeabi_dsub>
 8007150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007152:	3330      	adds	r3, #48	; 0x30
 8007154:	f805 3b01 	strb.w	r3, [r5], #1
 8007158:	9b02      	ldr	r3, [sp, #8]
 800715a:	429d      	cmp	r5, r3
 800715c:	4606      	mov	r6, r0
 800715e:	460f      	mov	r7, r1
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	d134      	bne.n	80071d0 <_dtoa_r+0x660>
 8007166:	4b19      	ldr	r3, [pc, #100]	; (80071cc <_dtoa_r+0x65c>)
 8007168:	ec51 0b18 	vmov	r0, r1, d8
 800716c:	f7f9 f88e 	bl	800028c <__adddf3>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800717c:	2800      	cmp	r0, #0
 800717e:	d175      	bne.n	800726c <_dtoa_r+0x6fc>
 8007180:	ec53 2b18 	vmov	r2, r3, d8
 8007184:	4911      	ldr	r1, [pc, #68]	; (80071cc <_dtoa_r+0x65c>)
 8007186:	2000      	movs	r0, #0
 8007188:	f7f9 f87e 	bl	8000288 <__aeabi_dsub>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 fca2 	bl	8000adc <__aeabi_dcmplt>
 8007198:	2800      	cmp	r0, #0
 800719a:	f43f af27 	beq.w	8006fec <_dtoa_r+0x47c>
 800719e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071a0:	1e6b      	subs	r3, r5, #1
 80071a2:	930c      	str	r3, [sp, #48]	; 0x30
 80071a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071a8:	2b30      	cmp	r3, #48	; 0x30
 80071aa:	d0f8      	beq.n	800719e <_dtoa_r+0x62e>
 80071ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071b0:	e04a      	b.n	8007248 <_dtoa_r+0x6d8>
 80071b2:	bf00      	nop
 80071b4:	080090a0 	.word	0x080090a0
 80071b8:	08009078 	.word	0x08009078
 80071bc:	3ff00000 	.word	0x3ff00000
 80071c0:	40240000 	.word	0x40240000
 80071c4:	401c0000 	.word	0x401c0000
 80071c8:	40140000 	.word	0x40140000
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	4baf      	ldr	r3, [pc, #700]	; (8007490 <_dtoa_r+0x920>)
 80071d2:	f7f9 fa11 	bl	80005f8 <__aeabi_dmul>
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	e7ac      	b.n	8007136 <_dtoa_r+0x5c6>
 80071dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071e0:	9d00      	ldr	r5, [sp, #0]
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fb2f 	bl	800084c <__aeabi_ddiv>
 80071ee:	f7f9 fcb3 	bl	8000b58 <__aeabi_d2iz>
 80071f2:	9002      	str	r0, [sp, #8]
 80071f4:	f7f9 f996 	bl	8000524 <__aeabi_i2d>
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	f7f9 f9fc 	bl	80005f8 <__aeabi_dmul>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4630      	mov	r0, r6
 8007206:	4639      	mov	r1, r7
 8007208:	f7f9 f83e 	bl	8000288 <__aeabi_dsub>
 800720c:	9e02      	ldr	r6, [sp, #8]
 800720e:	9f01      	ldr	r7, [sp, #4]
 8007210:	3630      	adds	r6, #48	; 0x30
 8007212:	f805 6b01 	strb.w	r6, [r5], #1
 8007216:	9e00      	ldr	r6, [sp, #0]
 8007218:	1bae      	subs	r6, r5, r6
 800721a:	42b7      	cmp	r7, r6
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	d137      	bne.n	8007292 <_dtoa_r+0x722>
 8007222:	f7f9 f833 	bl	800028c <__adddf3>
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	f7f9 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 8007232:	b9c8      	cbnz	r0, 8007268 <_dtoa_r+0x6f8>
 8007234:	4642      	mov	r2, r8
 8007236:	464b      	mov	r3, r9
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007240:	b110      	cbz	r0, 8007248 <_dtoa_r+0x6d8>
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d40f      	bmi.n	8007268 <_dtoa_r+0x6f8>
 8007248:	4620      	mov	r0, r4
 800724a:	4659      	mov	r1, fp
 800724c:	f000 fad6 	bl	80077fc <_Bfree>
 8007250:	2300      	movs	r3, #0
 8007252:	702b      	strb	r3, [r5, #0]
 8007254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007256:	f10a 0001 	add.w	r0, sl, #1
 800725a:	6018      	str	r0, [r3, #0]
 800725c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800725e:	2b00      	cmp	r3, #0
 8007260:	f43f acd8 	beq.w	8006c14 <_dtoa_r+0xa4>
 8007264:	601d      	str	r5, [r3, #0]
 8007266:	e4d5      	b.n	8006c14 <_dtoa_r+0xa4>
 8007268:	f8cd a01c 	str.w	sl, [sp, #28]
 800726c:	462b      	mov	r3, r5
 800726e:	461d      	mov	r5, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a39      	cmp	r2, #57	; 0x39
 8007276:	d108      	bne.n	800728a <_dtoa_r+0x71a>
 8007278:	9a00      	ldr	r2, [sp, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d1f7      	bne.n	800726e <_dtoa_r+0x6fe>
 800727e:	9a07      	ldr	r2, [sp, #28]
 8007280:	9900      	ldr	r1, [sp, #0]
 8007282:	3201      	adds	r2, #1
 8007284:	9207      	str	r2, [sp, #28]
 8007286:	2230      	movs	r2, #48	; 0x30
 8007288:	700a      	strb	r2, [r1, #0]
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	3201      	adds	r2, #1
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	e78c      	b.n	80071ac <_dtoa_r+0x63c>
 8007292:	4b7f      	ldr	r3, [pc, #508]	; (8007490 <_dtoa_r+0x920>)
 8007294:	2200      	movs	r2, #0
 8007296:	f7f9 f9af 	bl	80005f8 <__aeabi_dmul>
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	4606      	mov	r6, r0
 80072a0:	460f      	mov	r7, r1
 80072a2:	f7f9 fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d09b      	beq.n	80071e2 <_dtoa_r+0x672>
 80072aa:	e7cd      	b.n	8007248 <_dtoa_r+0x6d8>
 80072ac:	9a08      	ldr	r2, [sp, #32]
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	f000 80c4 	beq.w	800743c <_dtoa_r+0x8cc>
 80072b4:	9a05      	ldr	r2, [sp, #20]
 80072b6:	2a01      	cmp	r2, #1
 80072b8:	f300 80a8 	bgt.w	800740c <_dtoa_r+0x89c>
 80072bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072be:	2a00      	cmp	r2, #0
 80072c0:	f000 80a0 	beq.w	8007404 <_dtoa_r+0x894>
 80072c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072c8:	9e06      	ldr	r6, [sp, #24]
 80072ca:	4645      	mov	r5, r8
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	2101      	movs	r1, #1
 80072d0:	441a      	add	r2, r3
 80072d2:	4620      	mov	r0, r4
 80072d4:	4498      	add	r8, r3
 80072d6:	9204      	str	r2, [sp, #16]
 80072d8:	f000 fb4c 	bl	8007974 <__i2b>
 80072dc:	4607      	mov	r7, r0
 80072de:	2d00      	cmp	r5, #0
 80072e0:	dd0b      	ble.n	80072fa <_dtoa_r+0x78a>
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd08      	ble.n	80072fa <_dtoa_r+0x78a>
 80072e8:	42ab      	cmp	r3, r5
 80072ea:	9a04      	ldr	r2, [sp, #16]
 80072ec:	bfa8      	it	ge
 80072ee:	462b      	movge	r3, r5
 80072f0:	eba8 0803 	sub.w	r8, r8, r3
 80072f4:	1aed      	subs	r5, r5, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	9b06      	ldr	r3, [sp, #24]
 80072fc:	b1fb      	cbz	r3, 800733e <_dtoa_r+0x7ce>
 80072fe:	9b08      	ldr	r3, [sp, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 809f 	beq.w	8007444 <_dtoa_r+0x8d4>
 8007306:	2e00      	cmp	r6, #0
 8007308:	dd11      	ble.n	800732e <_dtoa_r+0x7be>
 800730a:	4639      	mov	r1, r7
 800730c:	4632      	mov	r2, r6
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fbec 	bl	8007aec <__pow5mult>
 8007314:	465a      	mov	r2, fp
 8007316:	4601      	mov	r1, r0
 8007318:	4607      	mov	r7, r0
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fb40 	bl	80079a0 <__multiply>
 8007320:	4659      	mov	r1, fp
 8007322:	9007      	str	r0, [sp, #28]
 8007324:	4620      	mov	r0, r4
 8007326:	f000 fa69 	bl	80077fc <_Bfree>
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	469b      	mov	fp, r3
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	1b9a      	subs	r2, r3, r6
 8007332:	d004      	beq.n	800733e <_dtoa_r+0x7ce>
 8007334:	4659      	mov	r1, fp
 8007336:	4620      	mov	r0, r4
 8007338:	f000 fbd8 	bl	8007aec <__pow5mult>
 800733c:	4683      	mov	fp, r0
 800733e:	2101      	movs	r1, #1
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fb17 	bl	8007974 <__i2b>
 8007346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007348:	2b00      	cmp	r3, #0
 800734a:	4606      	mov	r6, r0
 800734c:	dd7c      	ble.n	8007448 <_dtoa_r+0x8d8>
 800734e:	461a      	mov	r2, r3
 8007350:	4601      	mov	r1, r0
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fbca 	bl	8007aec <__pow5mult>
 8007358:	9b05      	ldr	r3, [sp, #20]
 800735a:	2b01      	cmp	r3, #1
 800735c:	4606      	mov	r6, r0
 800735e:	dd76      	ble.n	800744e <_dtoa_r+0x8de>
 8007360:	2300      	movs	r3, #0
 8007362:	9306      	str	r3, [sp, #24]
 8007364:	6933      	ldr	r3, [r6, #16]
 8007366:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800736a:	6918      	ldr	r0, [r3, #16]
 800736c:	f000 fab2 	bl	80078d4 <__hi0bits>
 8007370:	f1c0 0020 	rsb	r0, r0, #32
 8007374:	9b04      	ldr	r3, [sp, #16]
 8007376:	4418      	add	r0, r3
 8007378:	f010 001f 	ands.w	r0, r0, #31
 800737c:	f000 8086 	beq.w	800748c <_dtoa_r+0x91c>
 8007380:	f1c0 0320 	rsb	r3, r0, #32
 8007384:	2b04      	cmp	r3, #4
 8007386:	dd7f      	ble.n	8007488 <_dtoa_r+0x918>
 8007388:	f1c0 001c 	rsb	r0, r0, #28
 800738c:	9b04      	ldr	r3, [sp, #16]
 800738e:	4403      	add	r3, r0
 8007390:	4480      	add	r8, r0
 8007392:	4405      	add	r5, r0
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	dd05      	ble.n	80073a8 <_dtoa_r+0x838>
 800739c:	4659      	mov	r1, fp
 800739e:	4642      	mov	r2, r8
 80073a0:	4620      	mov	r0, r4
 80073a2:	f000 fbfd 	bl	8007ba0 <__lshift>
 80073a6:	4683      	mov	fp, r0
 80073a8:	9b04      	ldr	r3, [sp, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	dd05      	ble.n	80073ba <_dtoa_r+0x84a>
 80073ae:	4631      	mov	r1, r6
 80073b0:	461a      	mov	r2, r3
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fbf4 	bl	8007ba0 <__lshift>
 80073b8:	4606      	mov	r6, r0
 80073ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d069      	beq.n	8007494 <_dtoa_r+0x924>
 80073c0:	4631      	mov	r1, r6
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 fc58 	bl	8007c78 <__mcmp>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	da63      	bge.n	8007494 <_dtoa_r+0x924>
 80073cc:	2300      	movs	r3, #0
 80073ce:	4659      	mov	r1, fp
 80073d0:	220a      	movs	r2, #10
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 fa34 	bl	8007840 <__multadd>
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073de:	4683      	mov	fp, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 818f 	beq.w	8007704 <_dtoa_r+0xb94>
 80073e6:	4639      	mov	r1, r7
 80073e8:	2300      	movs	r3, #0
 80073ea:	220a      	movs	r2, #10
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fa27 	bl	8007840 <__multadd>
 80073f2:	f1b9 0f00 	cmp.w	r9, #0
 80073f6:	4607      	mov	r7, r0
 80073f8:	f300 808e 	bgt.w	8007518 <_dtoa_r+0x9a8>
 80073fc:	9b05      	ldr	r3, [sp, #20]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	dc50      	bgt.n	80074a4 <_dtoa_r+0x934>
 8007402:	e089      	b.n	8007518 <_dtoa_r+0x9a8>
 8007404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800740a:	e75d      	b.n	80072c8 <_dtoa_r+0x758>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	1e5e      	subs	r6, r3, #1
 8007410:	9b06      	ldr	r3, [sp, #24]
 8007412:	42b3      	cmp	r3, r6
 8007414:	bfbf      	itttt	lt
 8007416:	9b06      	ldrlt	r3, [sp, #24]
 8007418:	9606      	strlt	r6, [sp, #24]
 800741a:	1af2      	sublt	r2, r6, r3
 800741c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800741e:	bfb6      	itet	lt
 8007420:	189b      	addlt	r3, r3, r2
 8007422:	1b9e      	subge	r6, r3, r6
 8007424:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	bfb8      	it	lt
 800742a:	2600      	movlt	r6, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfb5      	itete	lt
 8007430:	eba8 0503 	sublt.w	r5, r8, r3
 8007434:	9b01      	ldrge	r3, [sp, #4]
 8007436:	2300      	movlt	r3, #0
 8007438:	4645      	movge	r5, r8
 800743a:	e747      	b.n	80072cc <_dtoa_r+0x75c>
 800743c:	9e06      	ldr	r6, [sp, #24]
 800743e:	9f08      	ldr	r7, [sp, #32]
 8007440:	4645      	mov	r5, r8
 8007442:	e74c      	b.n	80072de <_dtoa_r+0x76e>
 8007444:	9a06      	ldr	r2, [sp, #24]
 8007446:	e775      	b.n	8007334 <_dtoa_r+0x7c4>
 8007448:	9b05      	ldr	r3, [sp, #20]
 800744a:	2b01      	cmp	r3, #1
 800744c:	dc18      	bgt.n	8007480 <_dtoa_r+0x910>
 800744e:	9b02      	ldr	r3, [sp, #8]
 8007450:	b9b3      	cbnz	r3, 8007480 <_dtoa_r+0x910>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007458:	b9a3      	cbnz	r3, 8007484 <_dtoa_r+0x914>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007460:	0d1b      	lsrs	r3, r3, #20
 8007462:	051b      	lsls	r3, r3, #20
 8007464:	b12b      	cbz	r3, 8007472 <_dtoa_r+0x902>
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	3301      	adds	r3, #1
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	2301      	movs	r3, #1
 8007472:	9306      	str	r3, [sp, #24]
 8007474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f af74 	bne.w	8007364 <_dtoa_r+0x7f4>
 800747c:	2001      	movs	r0, #1
 800747e:	e779      	b.n	8007374 <_dtoa_r+0x804>
 8007480:	2300      	movs	r3, #0
 8007482:	e7f6      	b.n	8007472 <_dtoa_r+0x902>
 8007484:	9b02      	ldr	r3, [sp, #8]
 8007486:	e7f4      	b.n	8007472 <_dtoa_r+0x902>
 8007488:	d085      	beq.n	8007396 <_dtoa_r+0x826>
 800748a:	4618      	mov	r0, r3
 800748c:	301c      	adds	r0, #28
 800748e:	e77d      	b.n	800738c <_dtoa_r+0x81c>
 8007490:	40240000 	.word	0x40240000
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dc38      	bgt.n	800750c <_dtoa_r+0x99c>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b02      	cmp	r3, #2
 800749e:	dd35      	ble.n	800750c <_dtoa_r+0x99c>
 80074a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074a4:	f1b9 0f00 	cmp.w	r9, #0
 80074a8:	d10d      	bne.n	80074c6 <_dtoa_r+0x956>
 80074aa:	4631      	mov	r1, r6
 80074ac:	464b      	mov	r3, r9
 80074ae:	2205      	movs	r2, #5
 80074b0:	4620      	mov	r0, r4
 80074b2:	f000 f9c5 	bl	8007840 <__multadd>
 80074b6:	4601      	mov	r1, r0
 80074b8:	4606      	mov	r6, r0
 80074ba:	4658      	mov	r0, fp
 80074bc:	f000 fbdc 	bl	8007c78 <__mcmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f73f adbd 	bgt.w	8007040 <_dtoa_r+0x4d0>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	9d00      	ldr	r5, [sp, #0]
 80074ca:	ea6f 0a03 	mvn.w	sl, r3
 80074ce:	f04f 0800 	mov.w	r8, #0
 80074d2:	4631      	mov	r1, r6
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 f991 	bl	80077fc <_Bfree>
 80074da:	2f00      	cmp	r7, #0
 80074dc:	f43f aeb4 	beq.w	8007248 <_dtoa_r+0x6d8>
 80074e0:	f1b8 0f00 	cmp.w	r8, #0
 80074e4:	d005      	beq.n	80074f2 <_dtoa_r+0x982>
 80074e6:	45b8      	cmp	r8, r7
 80074e8:	d003      	beq.n	80074f2 <_dtoa_r+0x982>
 80074ea:	4641      	mov	r1, r8
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 f985 	bl	80077fc <_Bfree>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 f981 	bl	80077fc <_Bfree>
 80074fa:	e6a5      	b.n	8007248 <_dtoa_r+0x6d8>
 80074fc:	2600      	movs	r6, #0
 80074fe:	4637      	mov	r7, r6
 8007500:	e7e1      	b.n	80074c6 <_dtoa_r+0x956>
 8007502:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007504:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007508:	4637      	mov	r7, r6
 800750a:	e599      	b.n	8007040 <_dtoa_r+0x4d0>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80fd 	beq.w	8007712 <_dtoa_r+0xba2>
 8007518:	2d00      	cmp	r5, #0
 800751a:	dd05      	ble.n	8007528 <_dtoa_r+0x9b8>
 800751c:	4639      	mov	r1, r7
 800751e:	462a      	mov	r2, r5
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fb3d 	bl	8007ba0 <__lshift>
 8007526:	4607      	mov	r7, r0
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d05c      	beq.n	80075e8 <_dtoa_r+0xa78>
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4620      	mov	r0, r4
 8007532:	f000 f923 	bl	800777c <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b928      	cbnz	r0, 8007546 <_dtoa_r+0x9d6>
 800753a:	4b80      	ldr	r3, [pc, #512]	; (800773c <_dtoa_r+0xbcc>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007542:	f7ff bb2e 	b.w	8006ba2 <_dtoa_r+0x32>
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	3202      	adds	r2, #2
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	f107 010c 	add.w	r1, r7, #12
 8007550:	300c      	adds	r0, #12
 8007552:	f000 f905 	bl	8007760 <memcpy>
 8007556:	2201      	movs	r2, #1
 8007558:	4629      	mov	r1, r5
 800755a:	4620      	mov	r0, r4
 800755c:	f000 fb20 	bl	8007ba0 <__lshift>
 8007560:	9b00      	ldr	r3, [sp, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	444b      	add	r3, r9
 800756a:	9307      	str	r3, [sp, #28]
 800756c:	9b02      	ldr	r3, [sp, #8]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	46b8      	mov	r8, r7
 8007574:	9306      	str	r3, [sp, #24]
 8007576:	4607      	mov	r7, r0
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	4631      	mov	r1, r6
 800757c:	3b01      	subs	r3, #1
 800757e:	4658      	mov	r0, fp
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	f7ff fa69 	bl	8006a58 <quorem>
 8007586:	4603      	mov	r3, r0
 8007588:	3330      	adds	r3, #48	; 0x30
 800758a:	9004      	str	r0, [sp, #16]
 800758c:	4641      	mov	r1, r8
 800758e:	4658      	mov	r0, fp
 8007590:	9308      	str	r3, [sp, #32]
 8007592:	f000 fb71 	bl	8007c78 <__mcmp>
 8007596:	463a      	mov	r2, r7
 8007598:	4681      	mov	r9, r0
 800759a:	4631      	mov	r1, r6
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fb87 	bl	8007cb0 <__mdiff>
 80075a2:	68c2      	ldr	r2, [r0, #12]
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	4605      	mov	r5, r0
 80075a8:	bb02      	cbnz	r2, 80075ec <_dtoa_r+0xa7c>
 80075aa:	4601      	mov	r1, r0
 80075ac:	4658      	mov	r0, fp
 80075ae:	f000 fb63 	bl	8007c78 <__mcmp>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	4602      	mov	r2, r0
 80075b6:	4629      	mov	r1, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80075be:	f000 f91d 	bl	80077fc <_Bfree>
 80075c2:	9b05      	ldr	r3, [sp, #20]
 80075c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c6:	9d01      	ldr	r5, [sp, #4]
 80075c8:	ea43 0102 	orr.w	r1, r3, r2
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	430b      	orrs	r3, r1
 80075d0:	9b08      	ldr	r3, [sp, #32]
 80075d2:	d10d      	bne.n	80075f0 <_dtoa_r+0xa80>
 80075d4:	2b39      	cmp	r3, #57	; 0x39
 80075d6:	d029      	beq.n	800762c <_dtoa_r+0xabc>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	dd01      	ble.n	80075e2 <_dtoa_r+0xa72>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	3331      	adds	r3, #49	; 0x31
 80075e2:	9a02      	ldr	r2, [sp, #8]
 80075e4:	7013      	strb	r3, [r2, #0]
 80075e6:	e774      	b.n	80074d2 <_dtoa_r+0x962>
 80075e8:	4638      	mov	r0, r7
 80075ea:	e7b9      	b.n	8007560 <_dtoa_r+0x9f0>
 80075ec:	2201      	movs	r2, #1
 80075ee:	e7e2      	b.n	80075b6 <_dtoa_r+0xa46>
 80075f0:	f1b9 0f00 	cmp.w	r9, #0
 80075f4:	db06      	blt.n	8007604 <_dtoa_r+0xa94>
 80075f6:	9905      	ldr	r1, [sp, #20]
 80075f8:	ea41 0909 	orr.w	r9, r1, r9
 80075fc:	9906      	ldr	r1, [sp, #24]
 80075fe:	ea59 0101 	orrs.w	r1, r9, r1
 8007602:	d120      	bne.n	8007646 <_dtoa_r+0xad6>
 8007604:	2a00      	cmp	r2, #0
 8007606:	ddec      	ble.n	80075e2 <_dtoa_r+0xa72>
 8007608:	4659      	mov	r1, fp
 800760a:	2201      	movs	r2, #1
 800760c:	4620      	mov	r0, r4
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	f000 fac6 	bl	8007ba0 <__lshift>
 8007614:	4631      	mov	r1, r6
 8007616:	4683      	mov	fp, r0
 8007618:	f000 fb2e 	bl	8007c78 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	dc02      	bgt.n	8007628 <_dtoa_r+0xab8>
 8007622:	d1de      	bne.n	80075e2 <_dtoa_r+0xa72>
 8007624:	07da      	lsls	r2, r3, #31
 8007626:	d5dc      	bpl.n	80075e2 <_dtoa_r+0xa72>
 8007628:	2b39      	cmp	r3, #57	; 0x39
 800762a:	d1d8      	bne.n	80075de <_dtoa_r+0xa6e>
 800762c:	9a02      	ldr	r2, [sp, #8]
 800762e:	2339      	movs	r3, #57	; 0x39
 8007630:	7013      	strb	r3, [r2, #0]
 8007632:	462b      	mov	r3, r5
 8007634:	461d      	mov	r5, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800763c:	2a39      	cmp	r2, #57	; 0x39
 800763e:	d050      	beq.n	80076e2 <_dtoa_r+0xb72>
 8007640:	3201      	adds	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	e745      	b.n	80074d2 <_dtoa_r+0x962>
 8007646:	2a00      	cmp	r2, #0
 8007648:	dd03      	ble.n	8007652 <_dtoa_r+0xae2>
 800764a:	2b39      	cmp	r3, #57	; 0x39
 800764c:	d0ee      	beq.n	800762c <_dtoa_r+0xabc>
 800764e:	3301      	adds	r3, #1
 8007650:	e7c7      	b.n	80075e2 <_dtoa_r+0xa72>
 8007652:	9a01      	ldr	r2, [sp, #4]
 8007654:	9907      	ldr	r1, [sp, #28]
 8007656:	f802 3c01 	strb.w	r3, [r2, #-1]
 800765a:	428a      	cmp	r2, r1
 800765c:	d02a      	beq.n	80076b4 <_dtoa_r+0xb44>
 800765e:	4659      	mov	r1, fp
 8007660:	2300      	movs	r3, #0
 8007662:	220a      	movs	r2, #10
 8007664:	4620      	mov	r0, r4
 8007666:	f000 f8eb 	bl	8007840 <__multadd>
 800766a:	45b8      	cmp	r8, r7
 800766c:	4683      	mov	fp, r0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	f04f 020a 	mov.w	r2, #10
 8007676:	4641      	mov	r1, r8
 8007678:	4620      	mov	r0, r4
 800767a:	d107      	bne.n	800768c <_dtoa_r+0xb1c>
 800767c:	f000 f8e0 	bl	8007840 <__multadd>
 8007680:	4680      	mov	r8, r0
 8007682:	4607      	mov	r7, r0
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	3301      	adds	r3, #1
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	e775      	b.n	8007578 <_dtoa_r+0xa08>
 800768c:	f000 f8d8 	bl	8007840 <__multadd>
 8007690:	4639      	mov	r1, r7
 8007692:	4680      	mov	r8, r0
 8007694:	2300      	movs	r3, #0
 8007696:	220a      	movs	r2, #10
 8007698:	4620      	mov	r0, r4
 800769a:	f000 f8d1 	bl	8007840 <__multadd>
 800769e:	4607      	mov	r7, r0
 80076a0:	e7f0      	b.n	8007684 <_dtoa_r+0xb14>
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	9a00      	ldr	r2, [sp, #0]
 80076a8:	bfcc      	ite	gt
 80076aa:	464d      	movgt	r5, r9
 80076ac:	2501      	movle	r5, #1
 80076ae:	4415      	add	r5, r2
 80076b0:	f04f 0800 	mov.w	r8, #0
 80076b4:	4659      	mov	r1, fp
 80076b6:	2201      	movs	r2, #1
 80076b8:	4620      	mov	r0, r4
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	f000 fa70 	bl	8007ba0 <__lshift>
 80076c0:	4631      	mov	r1, r6
 80076c2:	4683      	mov	fp, r0
 80076c4:	f000 fad8 	bl	8007c78 <__mcmp>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	dcb2      	bgt.n	8007632 <_dtoa_r+0xac2>
 80076cc:	d102      	bne.n	80076d4 <_dtoa_r+0xb64>
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	07db      	lsls	r3, r3, #31
 80076d2:	d4ae      	bmi.n	8007632 <_dtoa_r+0xac2>
 80076d4:	462b      	mov	r3, r5
 80076d6:	461d      	mov	r5, r3
 80076d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076dc:	2a30      	cmp	r2, #48	; 0x30
 80076de:	d0fa      	beq.n	80076d6 <_dtoa_r+0xb66>
 80076e0:	e6f7      	b.n	80074d2 <_dtoa_r+0x962>
 80076e2:	9a00      	ldr	r2, [sp, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d1a5      	bne.n	8007634 <_dtoa_r+0xac4>
 80076e8:	f10a 0a01 	add.w	sl, sl, #1
 80076ec:	2331      	movs	r3, #49	; 0x31
 80076ee:	e779      	b.n	80075e4 <_dtoa_r+0xa74>
 80076f0:	4b13      	ldr	r3, [pc, #76]	; (8007740 <_dtoa_r+0xbd0>)
 80076f2:	f7ff baaf 	b.w	8006c54 <_dtoa_r+0xe4>
 80076f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f47f aa86 	bne.w	8006c0a <_dtoa_r+0x9a>
 80076fe:	4b11      	ldr	r3, [pc, #68]	; (8007744 <_dtoa_r+0xbd4>)
 8007700:	f7ff baa8 	b.w	8006c54 <_dtoa_r+0xe4>
 8007704:	f1b9 0f00 	cmp.w	r9, #0
 8007708:	dc03      	bgt.n	8007712 <_dtoa_r+0xba2>
 800770a:	9b05      	ldr	r3, [sp, #20]
 800770c:	2b02      	cmp	r3, #2
 800770e:	f73f aec9 	bgt.w	80074a4 <_dtoa_r+0x934>
 8007712:	9d00      	ldr	r5, [sp, #0]
 8007714:	4631      	mov	r1, r6
 8007716:	4658      	mov	r0, fp
 8007718:	f7ff f99e 	bl	8006a58 <quorem>
 800771c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007720:	f805 3b01 	strb.w	r3, [r5], #1
 8007724:	9a00      	ldr	r2, [sp, #0]
 8007726:	1aaa      	subs	r2, r5, r2
 8007728:	4591      	cmp	r9, r2
 800772a:	ddba      	ble.n	80076a2 <_dtoa_r+0xb32>
 800772c:	4659      	mov	r1, fp
 800772e:	2300      	movs	r3, #0
 8007730:	220a      	movs	r2, #10
 8007732:	4620      	mov	r0, r4
 8007734:	f000 f884 	bl	8007840 <__multadd>
 8007738:	4683      	mov	fp, r0
 800773a:	e7eb      	b.n	8007714 <_dtoa_r+0xba4>
 800773c:	08009007 	.word	0x08009007
 8007740:	08008f60 	.word	0x08008f60
 8007744:	08008f84 	.word	0x08008f84

08007748 <_localeconv_r>:
 8007748:	4800      	ldr	r0, [pc, #0]	; (800774c <_localeconv_r+0x4>)
 800774a:	4770      	bx	lr
 800774c:	2000029c 	.word	0x2000029c

08007750 <malloc>:
 8007750:	4b02      	ldr	r3, [pc, #8]	; (800775c <malloc+0xc>)
 8007752:	4601      	mov	r1, r0
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f000 bbef 	b.w	8007f38 <_malloc_r>
 800775a:	bf00      	nop
 800775c:	20000148 	.word	0x20000148

08007760 <memcpy>:
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	f100 33ff 	add.w	r3, r0, #4294967295
 8007768:	d100      	bne.n	800776c <memcpy+0xc>
 800776a:	4770      	bx	lr
 800776c:	b510      	push	{r4, lr}
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007776:	4291      	cmp	r1, r2
 8007778:	d1f9      	bne.n	800776e <memcpy+0xe>
 800777a:	bd10      	pop	{r4, pc}

0800777c <_Balloc>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	b976      	cbnz	r6, 80077a4 <_Balloc+0x28>
 8007786:	2010      	movs	r0, #16
 8007788:	f7ff ffe2 	bl	8007750 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	6260      	str	r0, [r4, #36]	; 0x24
 8007790:	b920      	cbnz	r0, 800779c <_Balloc+0x20>
 8007792:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <_Balloc+0x78>)
 8007794:	4818      	ldr	r0, [pc, #96]	; (80077f8 <_Balloc+0x7c>)
 8007796:	2166      	movs	r1, #102	; 0x66
 8007798:	f000 fd94 	bl	80082c4 <__assert_func>
 800779c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a0:	6006      	str	r6, [r0, #0]
 80077a2:	60c6      	str	r6, [r0, #12]
 80077a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077a6:	68f3      	ldr	r3, [r6, #12]
 80077a8:	b183      	cbz	r3, 80077cc <_Balloc+0x50>
 80077aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b2:	b9b8      	cbnz	r0, 80077e4 <_Balloc+0x68>
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f605 	lsl.w	r6, r1, r5
 80077ba:	1d72      	adds	r2, r6, #5
 80077bc:	0092      	lsls	r2, r2, #2
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fb5a 	bl	8007e78 <_calloc_r>
 80077c4:	b160      	cbz	r0, 80077e0 <_Balloc+0x64>
 80077c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ca:	e00e      	b.n	80077ea <_Balloc+0x6e>
 80077cc:	2221      	movs	r2, #33	; 0x21
 80077ce:	2104      	movs	r1, #4
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fb51 	bl	8007e78 <_calloc_r>
 80077d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d8:	60f0      	str	r0, [r6, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <_Balloc+0x2e>
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	6802      	ldr	r2, [r0, #0]
 80077e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ea:	2300      	movs	r3, #0
 80077ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f0:	e7f7      	b.n	80077e2 <_Balloc+0x66>
 80077f2:	bf00      	nop
 80077f4:	08008f91 	.word	0x08008f91
 80077f8:	08009018 	.word	0x08009018

080077fc <_Bfree>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007800:	4605      	mov	r5, r0
 8007802:	460c      	mov	r4, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Bfree+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ffa2 	bl	8007750 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	6268      	str	r0, [r5, #36]	; 0x24
 8007810:	b920      	cbnz	r0, 800781c <_Bfree+0x20>
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <_Bfree+0x3c>)
 8007814:	4809      	ldr	r0, [pc, #36]	; (800783c <_Bfree+0x40>)
 8007816:	218a      	movs	r1, #138	; 0x8a
 8007818:	f000 fd54 	bl	80082c4 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	b13c      	cbz	r4, 8007836 <_Bfree+0x3a>
 8007826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007828:	6862      	ldr	r2, [r4, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007830:	6021      	str	r1, [r4, #0]
 8007832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	08008f91 	.word	0x08008f91
 800783c:	08009018 	.word	0x08009018

08007840 <__multadd>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	690e      	ldr	r6, [r1, #16]
 8007846:	4607      	mov	r7, r0
 8007848:	4698      	mov	r8, r3
 800784a:	460c      	mov	r4, r1
 800784c:	f101 0014 	add.w	r0, r1, #20
 8007850:	2300      	movs	r3, #0
 8007852:	6805      	ldr	r5, [r0, #0]
 8007854:	b2a9      	uxth	r1, r5
 8007856:	fb02 8101 	mla	r1, r2, r1, r8
 800785a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800785e:	0c2d      	lsrs	r5, r5, #16
 8007860:	fb02 c505 	mla	r5, r2, r5, ip
 8007864:	b289      	uxth	r1, r1
 8007866:	3301      	adds	r3, #1
 8007868:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800786c:	429e      	cmp	r6, r3
 800786e:	f840 1b04 	str.w	r1, [r0], #4
 8007872:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007876:	dcec      	bgt.n	8007852 <__multadd+0x12>
 8007878:	f1b8 0f00 	cmp.w	r8, #0
 800787c:	d022      	beq.n	80078c4 <__multadd+0x84>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	42b3      	cmp	r3, r6
 8007882:	dc19      	bgt.n	80078b8 <__multadd+0x78>
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	4638      	mov	r0, r7
 8007888:	3101      	adds	r1, #1
 800788a:	f7ff ff77 	bl	800777c <_Balloc>
 800788e:	4605      	mov	r5, r0
 8007890:	b928      	cbnz	r0, 800789e <__multadd+0x5e>
 8007892:	4602      	mov	r2, r0
 8007894:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <__multadd+0x8c>)
 8007896:	480e      	ldr	r0, [pc, #56]	; (80078d0 <__multadd+0x90>)
 8007898:	21b5      	movs	r1, #181	; 0xb5
 800789a:	f000 fd13 	bl	80082c4 <__assert_func>
 800789e:	6922      	ldr	r2, [r4, #16]
 80078a0:	3202      	adds	r2, #2
 80078a2:	f104 010c 	add.w	r1, r4, #12
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	300c      	adds	r0, #12
 80078aa:	f7ff ff59 	bl	8007760 <memcpy>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ffa3 	bl	80077fc <_Bfree>
 80078b6:	462c      	mov	r4, r5
 80078b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80078bc:	3601      	adds	r6, #1
 80078be:	f8c3 8014 	str.w	r8, [r3, #20]
 80078c2:	6126      	str	r6, [r4, #16]
 80078c4:	4620      	mov	r0, r4
 80078c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ca:	bf00      	nop
 80078cc:	08009007 	.word	0x08009007
 80078d0:	08009018 	.word	0x08009018

080078d4 <__hi0bits>:
 80078d4:	0c03      	lsrs	r3, r0, #16
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	b9d3      	cbnz	r3, 8007910 <__hi0bits+0x3c>
 80078da:	0400      	lsls	r0, r0, #16
 80078dc:	2310      	movs	r3, #16
 80078de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078e2:	bf04      	itt	eq
 80078e4:	0200      	lsleq	r0, r0, #8
 80078e6:	3308      	addeq	r3, #8
 80078e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078ec:	bf04      	itt	eq
 80078ee:	0100      	lsleq	r0, r0, #4
 80078f0:	3304      	addeq	r3, #4
 80078f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078f6:	bf04      	itt	eq
 80078f8:	0080      	lsleq	r0, r0, #2
 80078fa:	3302      	addeq	r3, #2
 80078fc:	2800      	cmp	r0, #0
 80078fe:	db05      	blt.n	800790c <__hi0bits+0x38>
 8007900:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007904:	f103 0301 	add.w	r3, r3, #1
 8007908:	bf08      	it	eq
 800790a:	2320      	moveq	r3, #32
 800790c:	4618      	mov	r0, r3
 800790e:	4770      	bx	lr
 8007910:	2300      	movs	r3, #0
 8007912:	e7e4      	b.n	80078de <__hi0bits+0xa>

08007914 <__lo0bits>:
 8007914:	6803      	ldr	r3, [r0, #0]
 8007916:	f013 0207 	ands.w	r2, r3, #7
 800791a:	4601      	mov	r1, r0
 800791c:	d00b      	beq.n	8007936 <__lo0bits+0x22>
 800791e:	07da      	lsls	r2, r3, #31
 8007920:	d424      	bmi.n	800796c <__lo0bits+0x58>
 8007922:	0798      	lsls	r0, r3, #30
 8007924:	bf49      	itett	mi
 8007926:	085b      	lsrmi	r3, r3, #1
 8007928:	089b      	lsrpl	r3, r3, #2
 800792a:	2001      	movmi	r0, #1
 800792c:	600b      	strmi	r3, [r1, #0]
 800792e:	bf5c      	itt	pl
 8007930:	600b      	strpl	r3, [r1, #0]
 8007932:	2002      	movpl	r0, #2
 8007934:	4770      	bx	lr
 8007936:	b298      	uxth	r0, r3
 8007938:	b9b0      	cbnz	r0, 8007968 <__lo0bits+0x54>
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	2010      	movs	r0, #16
 800793e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007942:	bf04      	itt	eq
 8007944:	0a1b      	lsreq	r3, r3, #8
 8007946:	3008      	addeq	r0, #8
 8007948:	071a      	lsls	r2, r3, #28
 800794a:	bf04      	itt	eq
 800794c:	091b      	lsreq	r3, r3, #4
 800794e:	3004      	addeq	r0, #4
 8007950:	079a      	lsls	r2, r3, #30
 8007952:	bf04      	itt	eq
 8007954:	089b      	lsreq	r3, r3, #2
 8007956:	3002      	addeq	r0, #2
 8007958:	07da      	lsls	r2, r3, #31
 800795a:	d403      	bmi.n	8007964 <__lo0bits+0x50>
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	f100 0001 	add.w	r0, r0, #1
 8007962:	d005      	beq.n	8007970 <__lo0bits+0x5c>
 8007964:	600b      	str	r3, [r1, #0]
 8007966:	4770      	bx	lr
 8007968:	4610      	mov	r0, r2
 800796a:	e7e8      	b.n	800793e <__lo0bits+0x2a>
 800796c:	2000      	movs	r0, #0
 800796e:	4770      	bx	lr
 8007970:	2020      	movs	r0, #32
 8007972:	4770      	bx	lr

08007974 <__i2b>:
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	2101      	movs	r1, #1
 800797a:	f7ff feff 	bl	800777c <_Balloc>
 800797e:	4602      	mov	r2, r0
 8007980:	b928      	cbnz	r0, 800798e <__i2b+0x1a>
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <__i2b+0x24>)
 8007984:	4805      	ldr	r0, [pc, #20]	; (800799c <__i2b+0x28>)
 8007986:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800798a:	f000 fc9b 	bl	80082c4 <__assert_func>
 800798e:	2301      	movs	r3, #1
 8007990:	6144      	str	r4, [r0, #20]
 8007992:	6103      	str	r3, [r0, #16]
 8007994:	bd10      	pop	{r4, pc}
 8007996:	bf00      	nop
 8007998:	08009007 	.word	0x08009007
 800799c:	08009018 	.word	0x08009018

080079a0 <__multiply>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4614      	mov	r4, r2
 80079a6:	690a      	ldr	r2, [r1, #16]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	bfb8      	it	lt
 80079ae:	460b      	movlt	r3, r1
 80079b0:	460d      	mov	r5, r1
 80079b2:	bfbc      	itt	lt
 80079b4:	4625      	movlt	r5, r4
 80079b6:	461c      	movlt	r4, r3
 80079b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80079bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80079c0:	68ab      	ldr	r3, [r5, #8]
 80079c2:	6869      	ldr	r1, [r5, #4]
 80079c4:	eb0a 0709 	add.w	r7, sl, r9
 80079c8:	42bb      	cmp	r3, r7
 80079ca:	b085      	sub	sp, #20
 80079cc:	bfb8      	it	lt
 80079ce:	3101      	addlt	r1, #1
 80079d0:	f7ff fed4 	bl	800777c <_Balloc>
 80079d4:	b930      	cbnz	r0, 80079e4 <__multiply+0x44>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b42      	ldr	r3, [pc, #264]	; (8007ae4 <__multiply+0x144>)
 80079da:	4843      	ldr	r0, [pc, #268]	; (8007ae8 <__multiply+0x148>)
 80079dc:	f240 115d 	movw	r1, #349	; 0x15d
 80079e0:	f000 fc70 	bl	80082c4 <__assert_func>
 80079e4:	f100 0614 	add.w	r6, r0, #20
 80079e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80079ec:	4633      	mov	r3, r6
 80079ee:	2200      	movs	r2, #0
 80079f0:	4543      	cmp	r3, r8
 80079f2:	d31e      	bcc.n	8007a32 <__multiply+0x92>
 80079f4:	f105 0c14 	add.w	ip, r5, #20
 80079f8:	f104 0314 	add.w	r3, r4, #20
 80079fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007a00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	ebac 0205 	sub.w	r2, ip, r5
 8007a0a:	3a15      	subs	r2, #21
 8007a0c:	f022 0203 	bic.w	r2, r2, #3
 8007a10:	3204      	adds	r2, #4
 8007a12:	f105 0115 	add.w	r1, r5, #21
 8007a16:	458c      	cmp	ip, r1
 8007a18:	bf38      	it	cc
 8007a1a:	2204      	movcc	r2, #4
 8007a1c:	9201      	str	r2, [sp, #4]
 8007a1e:	9a02      	ldr	r2, [sp, #8]
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d808      	bhi.n	8007a38 <__multiply+0x98>
 8007a26:	2f00      	cmp	r7, #0
 8007a28:	dc55      	bgt.n	8007ad6 <__multiply+0x136>
 8007a2a:	6107      	str	r7, [r0, #16]
 8007a2c:	b005      	add	sp, #20
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	f843 2b04 	str.w	r2, [r3], #4
 8007a36:	e7db      	b.n	80079f0 <__multiply+0x50>
 8007a38:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a3c:	f1ba 0f00 	cmp.w	sl, #0
 8007a40:	d020      	beq.n	8007a84 <__multiply+0xe4>
 8007a42:	f105 0e14 	add.w	lr, r5, #20
 8007a46:	46b1      	mov	r9, r6
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007a4e:	f8d9 b000 	ldr.w	fp, [r9]
 8007a52:	b2a1      	uxth	r1, r4
 8007a54:	fa1f fb8b 	uxth.w	fp, fp
 8007a58:	fb0a b101 	mla	r1, sl, r1, fp
 8007a5c:	4411      	add	r1, r2
 8007a5e:	f8d9 2000 	ldr.w	r2, [r9]
 8007a62:	0c24      	lsrs	r4, r4, #16
 8007a64:	0c12      	lsrs	r2, r2, #16
 8007a66:	fb0a 2404 	mla	r4, sl, r4, r2
 8007a6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007a6e:	b289      	uxth	r1, r1
 8007a70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a74:	45f4      	cmp	ip, lr
 8007a76:	f849 1b04 	str.w	r1, [r9], #4
 8007a7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007a7e:	d8e4      	bhi.n	8007a4a <__multiply+0xaa>
 8007a80:	9901      	ldr	r1, [sp, #4]
 8007a82:	5072      	str	r2, [r6, r1]
 8007a84:	9a03      	ldr	r2, [sp, #12]
 8007a86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	f1b9 0f00 	cmp.w	r9, #0
 8007a90:	d01f      	beq.n	8007ad2 <__multiply+0x132>
 8007a92:	6834      	ldr	r4, [r6, #0]
 8007a94:	f105 0114 	add.w	r1, r5, #20
 8007a98:	46b6      	mov	lr, r6
 8007a9a:	f04f 0a00 	mov.w	sl, #0
 8007a9e:	880a      	ldrh	r2, [r1, #0]
 8007aa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007aa4:	fb09 b202 	mla	r2, r9, r2, fp
 8007aa8:	4492      	add	sl, r2
 8007aaa:	b2a4      	uxth	r4, r4
 8007aac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ab0:	f84e 4b04 	str.w	r4, [lr], #4
 8007ab4:	f851 4b04 	ldr.w	r4, [r1], #4
 8007ab8:	f8be 2000 	ldrh.w	r2, [lr]
 8007abc:	0c24      	lsrs	r4, r4, #16
 8007abe:	fb09 2404 	mla	r4, r9, r4, r2
 8007ac2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007ac6:	458c      	cmp	ip, r1
 8007ac8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007acc:	d8e7      	bhi.n	8007a9e <__multiply+0xfe>
 8007ace:	9a01      	ldr	r2, [sp, #4]
 8007ad0:	50b4      	str	r4, [r6, r2]
 8007ad2:	3604      	adds	r6, #4
 8007ad4:	e7a3      	b.n	8007a1e <__multiply+0x7e>
 8007ad6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1a5      	bne.n	8007a2a <__multiply+0x8a>
 8007ade:	3f01      	subs	r7, #1
 8007ae0:	e7a1      	b.n	8007a26 <__multiply+0x86>
 8007ae2:	bf00      	nop
 8007ae4:	08009007 	.word	0x08009007
 8007ae8:	08009018 	.word	0x08009018

08007aec <__pow5mult>:
 8007aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af0:	4615      	mov	r5, r2
 8007af2:	f012 0203 	ands.w	r2, r2, #3
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	d007      	beq.n	8007b0c <__pow5mult+0x20>
 8007afc:	4c25      	ldr	r4, [pc, #148]	; (8007b94 <__pow5mult+0xa8>)
 8007afe:	3a01      	subs	r2, #1
 8007b00:	2300      	movs	r3, #0
 8007b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b06:	f7ff fe9b 	bl	8007840 <__multadd>
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	10ad      	asrs	r5, r5, #2
 8007b0e:	d03d      	beq.n	8007b8c <__pow5mult+0xa0>
 8007b10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b12:	b97c      	cbnz	r4, 8007b34 <__pow5mult+0x48>
 8007b14:	2010      	movs	r0, #16
 8007b16:	f7ff fe1b 	bl	8007750 <malloc>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007b1e:	b928      	cbnz	r0, 8007b2c <__pow5mult+0x40>
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <__pow5mult+0xac>)
 8007b22:	481e      	ldr	r0, [pc, #120]	; (8007b9c <__pow5mult+0xb0>)
 8007b24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b28:	f000 fbcc 	bl	80082c4 <__assert_func>
 8007b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b30:	6004      	str	r4, [r0, #0]
 8007b32:	60c4      	str	r4, [r0, #12]
 8007b34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b3c:	b94c      	cbnz	r4, 8007b52 <__pow5mult+0x66>
 8007b3e:	f240 2171 	movw	r1, #625	; 0x271
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff16 	bl	8007974 <__i2b>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b4e:	4604      	mov	r4, r0
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	07eb      	lsls	r3, r5, #31
 8007b58:	d50a      	bpl.n	8007b70 <__pow5mult+0x84>
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff1e 	bl	80079a0 <__multiply>
 8007b64:	4639      	mov	r1, r7
 8007b66:	4680      	mov	r8, r0
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff fe47 	bl	80077fc <_Bfree>
 8007b6e:	4647      	mov	r7, r8
 8007b70:	106d      	asrs	r5, r5, #1
 8007b72:	d00b      	beq.n	8007b8c <__pow5mult+0xa0>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	b938      	cbnz	r0, 8007b88 <__pow5mult+0x9c>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff ff0f 	bl	80079a0 <__multiply>
 8007b82:	6020      	str	r0, [r4, #0]
 8007b84:	f8c0 9000 	str.w	r9, [r0]
 8007b88:	4604      	mov	r4, r0
 8007b8a:	e7e4      	b.n	8007b56 <__pow5mult+0x6a>
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b92:	bf00      	nop
 8007b94:	08009168 	.word	0x08009168
 8007b98:	08008f91 	.word	0x08008f91
 8007b9c:	08009018 	.word	0x08009018

08007ba0 <__lshift>:
 8007ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	6849      	ldr	r1, [r1, #4]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	4691      	mov	r9, r2
 8007bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb8:	f108 0601 	add.w	r6, r8, #1
 8007bbc:	42b3      	cmp	r3, r6
 8007bbe:	db0b      	blt.n	8007bd8 <__lshift+0x38>
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff fddb 	bl	800777c <_Balloc>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b948      	cbnz	r0, 8007bde <__lshift+0x3e>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b28      	ldr	r3, [pc, #160]	; (8007c70 <__lshift+0xd0>)
 8007bce:	4829      	ldr	r0, [pc, #164]	; (8007c74 <__lshift+0xd4>)
 8007bd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bd4:	f000 fb76 	bl	80082c4 <__assert_func>
 8007bd8:	3101      	adds	r1, #1
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	e7ee      	b.n	8007bbc <__lshift+0x1c>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f100 0114 	add.w	r1, r0, #20
 8007be4:	f100 0210 	add.w	r2, r0, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	4553      	cmp	r3, sl
 8007bec:	db33      	blt.n	8007c56 <__lshift+0xb6>
 8007bee:	6920      	ldr	r0, [r4, #16]
 8007bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf4:	f104 0314 	add.w	r3, r4, #20
 8007bf8:	f019 091f 	ands.w	r9, r9, #31
 8007bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c04:	d02b      	beq.n	8007c5e <__lshift+0xbe>
 8007c06:	f1c9 0e20 	rsb	lr, r9, #32
 8007c0a:	468a      	mov	sl, r1
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	fa00 f009 	lsl.w	r0, r0, r9
 8007c14:	4302      	orrs	r2, r0
 8007c16:	f84a 2b04 	str.w	r2, [sl], #4
 8007c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1e:	459c      	cmp	ip, r3
 8007c20:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c24:	d8f3      	bhi.n	8007c0e <__lshift+0x6e>
 8007c26:	ebac 0304 	sub.w	r3, ip, r4
 8007c2a:	3b15      	subs	r3, #21
 8007c2c:	f023 0303 	bic.w	r3, r3, #3
 8007c30:	3304      	adds	r3, #4
 8007c32:	f104 0015 	add.w	r0, r4, #21
 8007c36:	4584      	cmp	ip, r0
 8007c38:	bf38      	it	cc
 8007c3a:	2304      	movcc	r3, #4
 8007c3c:	50ca      	str	r2, [r1, r3]
 8007c3e:	b10a      	cbz	r2, 8007c44 <__lshift+0xa4>
 8007c40:	f108 0602 	add.w	r6, r8, #2
 8007c44:	3e01      	subs	r6, #1
 8007c46:	4638      	mov	r0, r7
 8007c48:	612e      	str	r6, [r5, #16]
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f7ff fdd6 	bl	80077fc <_Bfree>
 8007c50:	4628      	mov	r0, r5
 8007c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	e7c5      	b.n	8007bea <__lshift+0x4a>
 8007c5e:	3904      	subs	r1, #4
 8007c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c68:	459c      	cmp	ip, r3
 8007c6a:	d8f9      	bhi.n	8007c60 <__lshift+0xc0>
 8007c6c:	e7ea      	b.n	8007c44 <__lshift+0xa4>
 8007c6e:	bf00      	nop
 8007c70:	08009007 	.word	0x08009007
 8007c74:	08009018 	.word	0x08009018

08007c78 <__mcmp>:
 8007c78:	b530      	push	{r4, r5, lr}
 8007c7a:	6902      	ldr	r2, [r0, #16]
 8007c7c:	690c      	ldr	r4, [r1, #16]
 8007c7e:	1b12      	subs	r2, r2, r4
 8007c80:	d10e      	bne.n	8007ca0 <__mcmp+0x28>
 8007c82:	f100 0314 	add.w	r3, r0, #20
 8007c86:	3114      	adds	r1, #20
 8007c88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c98:	42a5      	cmp	r5, r4
 8007c9a:	d003      	beq.n	8007ca4 <__mcmp+0x2c>
 8007c9c:	d305      	bcc.n	8007caa <__mcmp+0x32>
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	bd30      	pop	{r4, r5, pc}
 8007ca4:	4283      	cmp	r3, r0
 8007ca6:	d3f3      	bcc.n	8007c90 <__mcmp+0x18>
 8007ca8:	e7fa      	b.n	8007ca0 <__mcmp+0x28>
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cae:	e7f7      	b.n	8007ca0 <__mcmp+0x28>

08007cb0 <__mdiff>:
 8007cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4617      	mov	r7, r2
 8007cbe:	f7ff ffdb 	bl	8007c78 <__mcmp>
 8007cc2:	1e05      	subs	r5, r0, #0
 8007cc4:	d110      	bne.n	8007ce8 <__mdiff+0x38>
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff fd57 	bl	800777c <_Balloc>
 8007cce:	b930      	cbnz	r0, 8007cde <__mdiff+0x2e>
 8007cd0:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <__mdiff+0x108>)
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f240 2132 	movw	r1, #562	; 0x232
 8007cd8:	4838      	ldr	r0, [pc, #224]	; (8007dbc <__mdiff+0x10c>)
 8007cda:	f000 faf3 	bl	80082c4 <__assert_func>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce8:	bfa4      	itt	ge
 8007cea:	463b      	movge	r3, r7
 8007cec:	4627      	movge	r7, r4
 8007cee:	4630      	mov	r0, r6
 8007cf0:	6879      	ldr	r1, [r7, #4]
 8007cf2:	bfa6      	itte	ge
 8007cf4:	461c      	movge	r4, r3
 8007cf6:	2500      	movge	r5, #0
 8007cf8:	2501      	movlt	r5, #1
 8007cfa:	f7ff fd3f 	bl	800777c <_Balloc>
 8007cfe:	b920      	cbnz	r0, 8007d0a <__mdiff+0x5a>
 8007d00:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <__mdiff+0x108>)
 8007d02:	4602      	mov	r2, r0
 8007d04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d08:	e7e6      	b.n	8007cd8 <__mdiff+0x28>
 8007d0a:	693e      	ldr	r6, [r7, #16]
 8007d0c:	60c5      	str	r5, [r0, #12]
 8007d0e:	6925      	ldr	r5, [r4, #16]
 8007d10:	f107 0114 	add.w	r1, r7, #20
 8007d14:	f104 0914 	add.w	r9, r4, #20
 8007d18:	f100 0e14 	add.w	lr, r0, #20
 8007d1c:	f107 0210 	add.w	r2, r7, #16
 8007d20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007d24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007d28:	46f2      	mov	sl, lr
 8007d2a:	2700      	movs	r7, #0
 8007d2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d34:	fa1f f883 	uxth.w	r8, r3
 8007d38:	fa17 f78b 	uxtah	r7, r7, fp
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	eba7 0808 	sub.w	r8, r7, r8
 8007d42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d4a:	fa1f f888 	uxth.w	r8, r8
 8007d4e:	141f      	asrs	r7, r3, #16
 8007d50:	454d      	cmp	r5, r9
 8007d52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d56:	f84a 3b04 	str.w	r3, [sl], #4
 8007d5a:	d8e7      	bhi.n	8007d2c <__mdiff+0x7c>
 8007d5c:	1b2b      	subs	r3, r5, r4
 8007d5e:	3b15      	subs	r3, #21
 8007d60:	f023 0303 	bic.w	r3, r3, #3
 8007d64:	3304      	adds	r3, #4
 8007d66:	3415      	adds	r4, #21
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	bf38      	it	cc
 8007d6c:	2304      	movcc	r3, #4
 8007d6e:	4419      	add	r1, r3
 8007d70:	4473      	add	r3, lr
 8007d72:	469e      	mov	lr, r3
 8007d74:	460d      	mov	r5, r1
 8007d76:	4565      	cmp	r5, ip
 8007d78:	d30e      	bcc.n	8007d98 <__mdiff+0xe8>
 8007d7a:	f10c 0203 	add.w	r2, ip, #3
 8007d7e:	1a52      	subs	r2, r2, r1
 8007d80:	f022 0203 	bic.w	r2, r2, #3
 8007d84:	3903      	subs	r1, #3
 8007d86:	458c      	cmp	ip, r1
 8007d88:	bf38      	it	cc
 8007d8a:	2200      	movcc	r2, #0
 8007d8c:	441a      	add	r2, r3
 8007d8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d92:	b17b      	cbz	r3, 8007db4 <__mdiff+0x104>
 8007d94:	6106      	str	r6, [r0, #16]
 8007d96:	e7a5      	b.n	8007ce4 <__mdiff+0x34>
 8007d98:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d9c:	fa17 f488 	uxtah	r4, r7, r8
 8007da0:	1422      	asrs	r2, r4, #16
 8007da2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007da6:	b2a4      	uxth	r4, r4
 8007da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007dac:	f84e 4b04 	str.w	r4, [lr], #4
 8007db0:	1417      	asrs	r7, r2, #16
 8007db2:	e7e0      	b.n	8007d76 <__mdiff+0xc6>
 8007db4:	3e01      	subs	r6, #1
 8007db6:	e7ea      	b.n	8007d8e <__mdiff+0xde>
 8007db8:	08009007 	.word	0x08009007
 8007dbc:	08009018 	.word	0x08009018

08007dc0 <__d2b>:
 8007dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	ec57 6b10 	vmov	r6, r7, d0
 8007dcc:	4690      	mov	r8, r2
 8007dce:	f7ff fcd5 	bl	800777c <_Balloc>
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	b930      	cbnz	r0, 8007de4 <__d2b+0x24>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	4b25      	ldr	r3, [pc, #148]	; (8007e70 <__d2b+0xb0>)
 8007dda:	4826      	ldr	r0, [pc, #152]	; (8007e74 <__d2b+0xb4>)
 8007ddc:	f240 310a 	movw	r1, #778	; 0x30a
 8007de0:	f000 fa70 	bl	80082c4 <__assert_func>
 8007de4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dec:	bb35      	cbnz	r5, 8007e3c <__d2b+0x7c>
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	d028      	beq.n	8007e46 <__d2b+0x86>
 8007df4:	4668      	mov	r0, sp
 8007df6:	9600      	str	r6, [sp, #0]
 8007df8:	f7ff fd8c 	bl	8007914 <__lo0bits>
 8007dfc:	9900      	ldr	r1, [sp, #0]
 8007dfe:	b300      	cbz	r0, 8007e42 <__d2b+0x82>
 8007e00:	9a01      	ldr	r2, [sp, #4]
 8007e02:	f1c0 0320 	rsb	r3, r0, #32
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	40c2      	lsrs	r2, r0
 8007e0e:	6163      	str	r3, [r4, #20]
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	61a3      	str	r3, [r4, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bf14      	ite	ne
 8007e1a:	2202      	movne	r2, #2
 8007e1c:	2201      	moveq	r2, #1
 8007e1e:	6122      	str	r2, [r4, #16]
 8007e20:	b1d5      	cbz	r5, 8007e58 <__d2b+0x98>
 8007e22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e26:	4405      	add	r5, r0
 8007e28:	f8c9 5000 	str.w	r5, [r9]
 8007e2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e30:	f8c8 0000 	str.w	r0, [r8]
 8007e34:	4620      	mov	r0, r4
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e40:	e7d5      	b.n	8007dee <__d2b+0x2e>
 8007e42:	6161      	str	r1, [r4, #20]
 8007e44:	e7e5      	b.n	8007e12 <__d2b+0x52>
 8007e46:	a801      	add	r0, sp, #4
 8007e48:	f7ff fd64 	bl	8007914 <__lo0bits>
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	6163      	str	r3, [r4, #20]
 8007e50:	2201      	movs	r2, #1
 8007e52:	6122      	str	r2, [r4, #16]
 8007e54:	3020      	adds	r0, #32
 8007e56:	e7e3      	b.n	8007e20 <__d2b+0x60>
 8007e58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e60:	f8c9 0000 	str.w	r0, [r9]
 8007e64:	6918      	ldr	r0, [r3, #16]
 8007e66:	f7ff fd35 	bl	80078d4 <__hi0bits>
 8007e6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e6e:	e7df      	b.n	8007e30 <__d2b+0x70>
 8007e70:	08009007 	.word	0x08009007
 8007e74:	08009018 	.word	0x08009018

08007e78 <_calloc_r>:
 8007e78:	b513      	push	{r0, r1, r4, lr}
 8007e7a:	434a      	muls	r2, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	9201      	str	r2, [sp, #4]
 8007e80:	f000 f85a 	bl	8007f38 <_malloc_r>
 8007e84:	4604      	mov	r4, r0
 8007e86:	b118      	cbz	r0, 8007e90 <_calloc_r+0x18>
 8007e88:	9a01      	ldr	r2, [sp, #4]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	f7fe f952 	bl	8006134 <memset>
 8007e90:	4620      	mov	r0, r4
 8007e92:	b002      	add	sp, #8
 8007e94:	bd10      	pop	{r4, pc}
	...

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d048      	beq.n	8007f30 <_free_r+0x98>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f000 fa65 	bl	800837c <__malloc_lock>
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <_free_r+0x9c>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4615      	mov	r5, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x32>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec6:	f000 ba5f 	b.w	8008388 <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90b      	bls.n	8007ee6 <_free_r+0x4e>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	602c      	str	r4, [r5, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x28>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x58>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4e>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x78>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x28>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4421      	add	r1, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x28>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x80>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x28>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x28>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	20000358 	.word	0x20000358

08007f38 <_malloc_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	1ccd      	adds	r5, r1, #3
 8007f3c:	f025 0503 	bic.w	r5, r5, #3
 8007f40:	3508      	adds	r5, #8
 8007f42:	2d0c      	cmp	r5, #12
 8007f44:	bf38      	it	cc
 8007f46:	250c      	movcc	r5, #12
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	db01      	blt.n	8007f52 <_malloc_r+0x1a>
 8007f4e:	42a9      	cmp	r1, r5
 8007f50:	d903      	bls.n	8007f5a <_malloc_r+0x22>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5a:	f000 fa0f 	bl	800837c <__malloc_lock>
 8007f5e:	4921      	ldr	r1, [pc, #132]	; (8007fe4 <_malloc_r+0xac>)
 8007f60:	680a      	ldr	r2, [r1, #0]
 8007f62:	4614      	mov	r4, r2
 8007f64:	b99c      	cbnz	r4, 8007f8e <_malloc_r+0x56>
 8007f66:	4f20      	ldr	r7, [pc, #128]	; (8007fe8 <_malloc_r+0xb0>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	b923      	cbnz	r3, 8007f76 <_malloc_r+0x3e>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f000 f998 	bl	80082a4 <_sbrk_r>
 8007f74:	6038      	str	r0, [r7, #0]
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f993 	bl	80082a4 <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d123      	bne.n	8007fca <_malloc_r+0x92>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6033      	str	r3, [r6, #0]
 8007f86:	4630      	mov	r0, r6
 8007f88:	f000 f9fe 	bl	8008388 <__malloc_unlock>
 8007f8c:	e7e3      	b.n	8007f56 <_malloc_r+0x1e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	1b5b      	subs	r3, r3, r5
 8007f92:	d417      	bmi.n	8007fc4 <_malloc_r+0x8c>
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d903      	bls.n	8007fa0 <_malloc_r+0x68>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	441c      	add	r4, r3
 8007f9c:	6025      	str	r5, [r4, #0]
 8007f9e:	e004      	b.n	8007faa <_malloc_r+0x72>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	42a2      	cmp	r2, r4
 8007fa4:	bf0c      	ite	eq
 8007fa6:	600b      	streq	r3, [r1, #0]
 8007fa8:	6053      	strne	r3, [r2, #4]
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f9ec 	bl	8008388 <__malloc_unlock>
 8007fb0:	f104 000b 	add.w	r0, r4, #11
 8007fb4:	1d23      	adds	r3, r4, #4
 8007fb6:	f020 0007 	bic.w	r0, r0, #7
 8007fba:	1ac2      	subs	r2, r0, r3
 8007fbc:	d0cc      	beq.n	8007f58 <_malloc_r+0x20>
 8007fbe:	1a1b      	subs	r3, r3, r0
 8007fc0:	50a3      	str	r3, [r4, r2]
 8007fc2:	e7c9      	b.n	8007f58 <_malloc_r+0x20>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	6864      	ldr	r4, [r4, #4]
 8007fc8:	e7cc      	b.n	8007f64 <_malloc_r+0x2c>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d0e3      	beq.n	8007f9c <_malloc_r+0x64>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f964 	bl	80082a4 <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1dd      	bne.n	8007f9c <_malloc_r+0x64>
 8007fe0:	e7cf      	b.n	8007f82 <_malloc_r+0x4a>
 8007fe2:	bf00      	nop
 8007fe4:	20000358 	.word	0x20000358
 8007fe8:	2000035c 	.word	0x2000035c

08007fec <__ssputs_r>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	688e      	ldr	r6, [r1, #8]
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	d838      	bhi.n	8008070 <__ssputs_r+0x84>
 8007ffe:	898a      	ldrh	r2, [r1, #12]
 8008000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008004:	d032      	beq.n	800806c <__ssputs_r+0x80>
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	6909      	ldr	r1, [r1, #16]
 800800a:	eba5 0901 	sub.w	r9, r5, r1
 800800e:	6965      	ldr	r5, [r4, #20]
 8008010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008018:	3301      	adds	r3, #1
 800801a:	444b      	add	r3, r9
 800801c:	106d      	asrs	r5, r5, #1
 800801e:	429d      	cmp	r5, r3
 8008020:	bf38      	it	cc
 8008022:	461d      	movcc	r5, r3
 8008024:	0553      	lsls	r3, r2, #21
 8008026:	d531      	bpl.n	800808c <__ssputs_r+0xa0>
 8008028:	4629      	mov	r1, r5
 800802a:	f7ff ff85 	bl	8007f38 <_malloc_r>
 800802e:	4606      	mov	r6, r0
 8008030:	b950      	cbnz	r0, 8008048 <__ssputs_r+0x5c>
 8008032:	230c      	movs	r3, #12
 8008034:	f8ca 3000 	str.w	r3, [sl]
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	464a      	mov	r2, r9
 800804c:	f7ff fb88 	bl	8007760 <memcpy>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	6165      	str	r5, [r4, #20]
 8008060:	444e      	add	r6, r9
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	6026      	str	r6, [r4, #0]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	463e      	mov	r6, r7
 800806c:	42be      	cmp	r6, r7
 800806e:	d900      	bls.n	8008072 <__ssputs_r+0x86>
 8008070:	463e      	mov	r6, r7
 8008072:	4632      	mov	r2, r6
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	4641      	mov	r1, r8
 8008078:	f000 f966 	bl	8008348 <memmove>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	1b9b      	subs	r3, r3, r6
 8008082:	4432      	add	r2, r6
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	2000      	movs	r0, #0
 800808a:	e7db      	b.n	8008044 <__ssputs_r+0x58>
 800808c:	462a      	mov	r2, r5
 800808e:	f000 f981 	bl	8008394 <_realloc_r>
 8008092:	4606      	mov	r6, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d1e1      	bne.n	800805c <__ssputs_r+0x70>
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	4650      	mov	r0, sl
 800809c:	f7ff fefc 	bl	8007e98 <_free_r>
 80080a0:	e7c7      	b.n	8008032 <__ssputs_r+0x46>
	...

080080a4 <_svfiprintf_r>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	4698      	mov	r8, r3
 80080aa:	898b      	ldrh	r3, [r1, #12]
 80080ac:	061b      	lsls	r3, r3, #24
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	4607      	mov	r7, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	d50e      	bpl.n	80080d6 <_svfiprintf_r+0x32>
 80080b8:	690b      	ldr	r3, [r1, #16]
 80080ba:	b963      	cbnz	r3, 80080d6 <_svfiprintf_r+0x32>
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	f7ff ff3b 	bl	8007f38 <_malloc_r>
 80080c2:	6028      	str	r0, [r5, #0]
 80080c4:	6128      	str	r0, [r5, #16]
 80080c6:	b920      	cbnz	r0, 80080d2 <_svfiprintf_r+0x2e>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e0d1      	b.n	8008276 <_svfiprintf_r+0x1d2>
 80080d2:	2340      	movs	r3, #64	; 0x40
 80080d4:	616b      	str	r3, [r5, #20]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9309      	str	r3, [sp, #36]	; 0x24
 80080da:	2320      	movs	r3, #32
 80080dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e4:	2330      	movs	r3, #48	; 0x30
 80080e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008290 <_svfiprintf_r+0x1ec>
 80080ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ee:	f04f 0901 	mov.w	r9, #1
 80080f2:	4623      	mov	r3, r4
 80080f4:	469a      	mov	sl, r3
 80080f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fa:	b10a      	cbz	r2, 8008100 <_svfiprintf_r+0x5c>
 80080fc:	2a25      	cmp	r2, #37	; 0x25
 80080fe:	d1f9      	bne.n	80080f4 <_svfiprintf_r+0x50>
 8008100:	ebba 0b04 	subs.w	fp, sl, r4
 8008104:	d00b      	beq.n	800811e <_svfiprintf_r+0x7a>
 8008106:	465b      	mov	r3, fp
 8008108:	4622      	mov	r2, r4
 800810a:	4629      	mov	r1, r5
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ff6d 	bl	8007fec <__ssputs_r>
 8008112:	3001      	adds	r0, #1
 8008114:	f000 80aa 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811a:	445a      	add	r2, fp
 800811c:	9209      	str	r2, [sp, #36]	; 0x24
 800811e:	f89a 3000 	ldrb.w	r3, [sl]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80a2 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008128:	2300      	movs	r3, #0
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008132:	f10a 0a01 	add.w	sl, sl, #1
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	9307      	str	r3, [sp, #28]
 800813a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813e:	931a      	str	r3, [sp, #104]	; 0x68
 8008140:	4654      	mov	r4, sl
 8008142:	2205      	movs	r2, #5
 8008144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008148:	4851      	ldr	r0, [pc, #324]	; (8008290 <_svfiprintf_r+0x1ec>)
 800814a:	f7f8 f849 	bl	80001e0 <memchr>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	b9d8      	cbnz	r0, 800818a <_svfiprintf_r+0xe6>
 8008152:	06d0      	lsls	r0, r2, #27
 8008154:	bf44      	itt	mi
 8008156:	2320      	movmi	r3, #32
 8008158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815c:	0711      	lsls	r1, r2, #28
 800815e:	bf44      	itt	mi
 8008160:	232b      	movmi	r3, #43	; 0x2b
 8008162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008166:	f89a 3000 	ldrb.w	r3, [sl]
 800816a:	2b2a      	cmp	r3, #42	; 0x2a
 800816c:	d015      	beq.n	800819a <_svfiprintf_r+0xf6>
 800816e:	9a07      	ldr	r2, [sp, #28]
 8008170:	4654      	mov	r4, sl
 8008172:	2000      	movs	r0, #0
 8008174:	f04f 0c0a 	mov.w	ip, #10
 8008178:	4621      	mov	r1, r4
 800817a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817e:	3b30      	subs	r3, #48	; 0x30
 8008180:	2b09      	cmp	r3, #9
 8008182:	d94e      	bls.n	8008222 <_svfiprintf_r+0x17e>
 8008184:	b1b0      	cbz	r0, 80081b4 <_svfiprintf_r+0x110>
 8008186:	9207      	str	r2, [sp, #28]
 8008188:	e014      	b.n	80081b4 <_svfiprintf_r+0x110>
 800818a:	eba0 0308 	sub.w	r3, r0, r8
 800818e:	fa09 f303 	lsl.w	r3, r9, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	46a2      	mov	sl, r4
 8008198:	e7d2      	b.n	8008140 <_svfiprintf_r+0x9c>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	1d19      	adds	r1, r3, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfbb      	ittet	lt
 80081a6:	425b      	neglt	r3, r3
 80081a8:	f042 0202 	orrlt.w	r2, r2, #2
 80081ac:	9307      	strge	r3, [sp, #28]
 80081ae:	9307      	strlt	r3, [sp, #28]
 80081b0:	bfb8      	it	lt
 80081b2:	9204      	strlt	r2, [sp, #16]
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	2b2e      	cmp	r3, #46	; 0x2e
 80081b8:	d10c      	bne.n	80081d4 <_svfiprintf_r+0x130>
 80081ba:	7863      	ldrb	r3, [r4, #1]
 80081bc:	2b2a      	cmp	r3, #42	; 0x2a
 80081be:	d135      	bne.n	800822c <_svfiprintf_r+0x188>
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	9203      	str	r2, [sp, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bfb8      	it	lt
 80081cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d0:	3402      	adds	r4, #2
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082a0 <_svfiprintf_r+0x1fc>
 80081d8:	7821      	ldrb	r1, [r4, #0]
 80081da:	2203      	movs	r2, #3
 80081dc:	4650      	mov	r0, sl
 80081de:	f7f7 ffff 	bl	80001e0 <memchr>
 80081e2:	b140      	cbz	r0, 80081f6 <_svfiprintf_r+0x152>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	eba0 000a 	sub.w	r0, r0, sl
 80081ea:	fa03 f000 	lsl.w	r0, r3, r0
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	4303      	orrs	r3, r0
 80081f2:	3401      	adds	r4, #1
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4826      	ldr	r0, [pc, #152]	; (8008294 <_svfiprintf_r+0x1f0>)
 80081fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008200:	2206      	movs	r2, #6
 8008202:	f7f7 ffed 	bl	80001e0 <memchr>
 8008206:	2800      	cmp	r0, #0
 8008208:	d038      	beq.n	800827c <_svfiprintf_r+0x1d8>
 800820a:	4b23      	ldr	r3, [pc, #140]	; (8008298 <_svfiprintf_r+0x1f4>)
 800820c:	bb1b      	cbnz	r3, 8008256 <_svfiprintf_r+0x1b2>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	f023 0307 	bic.w	r3, r3, #7
 8008216:	3308      	adds	r3, #8
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	4433      	add	r3, r6
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	e767      	b.n	80080f2 <_svfiprintf_r+0x4e>
 8008222:	fb0c 3202 	mla	r2, ip, r2, r3
 8008226:	460c      	mov	r4, r1
 8008228:	2001      	movs	r0, #1
 800822a:	e7a5      	b.n	8008178 <_svfiprintf_r+0xd4>
 800822c:	2300      	movs	r3, #0
 800822e:	3401      	adds	r4, #1
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	4619      	mov	r1, r3
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4620      	mov	r0, r4
 800823a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823e:	3a30      	subs	r2, #48	; 0x30
 8008240:	2a09      	cmp	r2, #9
 8008242:	d903      	bls.n	800824c <_svfiprintf_r+0x1a8>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0c5      	beq.n	80081d4 <_svfiprintf_r+0x130>
 8008248:	9105      	str	r1, [sp, #20]
 800824a:	e7c3      	b.n	80081d4 <_svfiprintf_r+0x130>
 800824c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008250:	4604      	mov	r4, r0
 8008252:	2301      	movs	r3, #1
 8008254:	e7f0      	b.n	8008238 <_svfiprintf_r+0x194>
 8008256:	ab03      	add	r3, sp, #12
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	462a      	mov	r2, r5
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <_svfiprintf_r+0x1f8>)
 800825e:	a904      	add	r1, sp, #16
 8008260:	4638      	mov	r0, r7
 8008262:	f7fe f80f 	bl	8006284 <_printf_float>
 8008266:	1c42      	adds	r2, r0, #1
 8008268:	4606      	mov	r6, r0
 800826a:	d1d6      	bne.n	800821a <_svfiprintf_r+0x176>
 800826c:	89ab      	ldrh	r3, [r5, #12]
 800826e:	065b      	lsls	r3, r3, #25
 8008270:	f53f af2c 	bmi.w	80080cc <_svfiprintf_r+0x28>
 8008274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008276:	b01d      	add	sp, #116	; 0x74
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	ab03      	add	r3, sp, #12
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462a      	mov	r2, r5
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <_svfiprintf_r+0x1f8>)
 8008284:	a904      	add	r1, sp, #16
 8008286:	4638      	mov	r0, r7
 8008288:	f7fe faa0 	bl	80067cc <_printf_i>
 800828c:	e7eb      	b.n	8008266 <_svfiprintf_r+0x1c2>
 800828e:	bf00      	nop
 8008290:	08009174 	.word	0x08009174
 8008294:	0800917e 	.word	0x0800917e
 8008298:	08006285 	.word	0x08006285
 800829c:	08007fed 	.word	0x08007fed
 80082a0:	0800917a 	.word	0x0800917a

080082a4 <_sbrk_r>:
 80082a4:	b538      	push	{r3, r4, r5, lr}
 80082a6:	4d06      	ldr	r5, [pc, #24]	; (80082c0 <_sbrk_r+0x1c>)
 80082a8:	2300      	movs	r3, #0
 80082aa:	4604      	mov	r4, r0
 80082ac:	4608      	mov	r0, r1
 80082ae:	602b      	str	r3, [r5, #0]
 80082b0:	f7f9 fda6 	bl	8001e00 <_sbrk>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_sbrk_r+0x1a>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_sbrk_r+0x1a>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20000550 	.word	0x20000550

080082c4 <__assert_func>:
 80082c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082c6:	4614      	mov	r4, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <__assert_func+0x2c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4605      	mov	r5, r0
 80082d0:	68d8      	ldr	r0, [r3, #12]
 80082d2:	b14c      	cbz	r4, 80082e8 <__assert_func+0x24>
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <__assert_func+0x30>)
 80082d6:	9100      	str	r1, [sp, #0]
 80082d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082dc:	4906      	ldr	r1, [pc, #24]	; (80082f8 <__assert_func+0x34>)
 80082de:	462b      	mov	r3, r5
 80082e0:	f000 f80e 	bl	8008300 <fiprintf>
 80082e4:	f000 faa4 	bl	8008830 <abort>
 80082e8:	4b04      	ldr	r3, [pc, #16]	; (80082fc <__assert_func+0x38>)
 80082ea:	461c      	mov	r4, r3
 80082ec:	e7f3      	b.n	80082d6 <__assert_func+0x12>
 80082ee:	bf00      	nop
 80082f0:	20000148 	.word	0x20000148
 80082f4:	08009185 	.word	0x08009185
 80082f8:	08009192 	.word	0x08009192
 80082fc:	080091c0 	.word	0x080091c0

08008300 <fiprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b503      	push	{r0, r1, lr}
 8008304:	4601      	mov	r1, r0
 8008306:	ab03      	add	r3, sp, #12
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <fiprintf+0x20>)
 800830a:	f853 2b04 	ldr.w	r2, [r3], #4
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f000 f88f 	bl	8008434 <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	20000148 	.word	0x20000148

08008324 <__ascii_mbtowc>:
 8008324:	b082      	sub	sp, #8
 8008326:	b901      	cbnz	r1, 800832a <__ascii_mbtowc+0x6>
 8008328:	a901      	add	r1, sp, #4
 800832a:	b142      	cbz	r2, 800833e <__ascii_mbtowc+0x1a>
 800832c:	b14b      	cbz	r3, 8008342 <__ascii_mbtowc+0x1e>
 800832e:	7813      	ldrb	r3, [r2, #0]
 8008330:	600b      	str	r3, [r1, #0]
 8008332:	7812      	ldrb	r2, [r2, #0]
 8008334:	1e10      	subs	r0, r2, #0
 8008336:	bf18      	it	ne
 8008338:	2001      	movne	r0, #1
 800833a:	b002      	add	sp, #8
 800833c:	4770      	bx	lr
 800833e:	4610      	mov	r0, r2
 8008340:	e7fb      	b.n	800833a <__ascii_mbtowc+0x16>
 8008342:	f06f 0001 	mvn.w	r0, #1
 8008346:	e7f8      	b.n	800833a <__ascii_mbtowc+0x16>

08008348 <memmove>:
 8008348:	4288      	cmp	r0, r1
 800834a:	b510      	push	{r4, lr}
 800834c:	eb01 0402 	add.w	r4, r1, r2
 8008350:	d902      	bls.n	8008358 <memmove+0x10>
 8008352:	4284      	cmp	r4, r0
 8008354:	4623      	mov	r3, r4
 8008356:	d807      	bhi.n	8008368 <memmove+0x20>
 8008358:	1e43      	subs	r3, r0, #1
 800835a:	42a1      	cmp	r1, r4
 800835c:	d008      	beq.n	8008370 <memmove+0x28>
 800835e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008366:	e7f8      	b.n	800835a <memmove+0x12>
 8008368:	4402      	add	r2, r0
 800836a:	4601      	mov	r1, r0
 800836c:	428a      	cmp	r2, r1
 800836e:	d100      	bne.n	8008372 <memmove+0x2a>
 8008370:	bd10      	pop	{r4, pc}
 8008372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800837a:	e7f7      	b.n	800836c <memmove+0x24>

0800837c <__malloc_lock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_lock+0x8>)
 800837e:	f000 bc17 	b.w	8008bb0 <__retarget_lock_acquire_recursive>
 8008382:	bf00      	nop
 8008384:	20000558 	.word	0x20000558

08008388 <__malloc_unlock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_unlock+0x8>)
 800838a:	f000 bc12 	b.w	8008bb2 <__retarget_lock_release_recursive>
 800838e:	bf00      	nop
 8008390:	20000558 	.word	0x20000558

08008394 <_realloc_r>:
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008396:	4607      	mov	r7, r0
 8008398:	4614      	mov	r4, r2
 800839a:	460e      	mov	r6, r1
 800839c:	b921      	cbnz	r1, 80083a8 <_realloc_r+0x14>
 800839e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083a2:	4611      	mov	r1, r2
 80083a4:	f7ff bdc8 	b.w	8007f38 <_malloc_r>
 80083a8:	b922      	cbnz	r2, 80083b4 <_realloc_r+0x20>
 80083aa:	f7ff fd75 	bl	8007e98 <_free_r>
 80083ae:	4625      	mov	r5, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b4:	f000 fc62 	bl	8008c7c <_malloc_usable_size_r>
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d20f      	bcs.n	80083dc <_realloc_r+0x48>
 80083bc:	4621      	mov	r1, r4
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff fdba 	bl	8007f38 <_malloc_r>
 80083c4:	4605      	mov	r5, r0
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d0f2      	beq.n	80083b0 <_realloc_r+0x1c>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4622      	mov	r2, r4
 80083ce:	f7ff f9c7 	bl	8007760 <memcpy>
 80083d2:	4631      	mov	r1, r6
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff fd5f 	bl	8007e98 <_free_r>
 80083da:	e7e9      	b.n	80083b0 <_realloc_r+0x1c>
 80083dc:	4635      	mov	r5, r6
 80083de:	e7e7      	b.n	80083b0 <_realloc_r+0x1c>

080083e0 <__sfputc_r>:
 80083e0:	6893      	ldr	r3, [r2, #8]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	b410      	push	{r4}
 80083e8:	6093      	str	r3, [r2, #8]
 80083ea:	da08      	bge.n	80083fe <__sfputc_r+0x1e>
 80083ec:	6994      	ldr	r4, [r2, #24]
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	db01      	blt.n	80083f6 <__sfputc_r+0x16>
 80083f2:	290a      	cmp	r1, #10
 80083f4:	d103      	bne.n	80083fe <__sfputc_r+0x1e>
 80083f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fa:	f000 b94b 	b.w	8008694 <__swbuf_r>
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	1c58      	adds	r0, r3, #1
 8008402:	6010      	str	r0, [r2, #0]
 8008404:	7019      	strb	r1, [r3, #0]
 8008406:	4608      	mov	r0, r1
 8008408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840c:	4770      	bx	lr

0800840e <__sfputs_r>:
 800840e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008410:	4606      	mov	r6, r0
 8008412:	460f      	mov	r7, r1
 8008414:	4614      	mov	r4, r2
 8008416:	18d5      	adds	r5, r2, r3
 8008418:	42ac      	cmp	r4, r5
 800841a:	d101      	bne.n	8008420 <__sfputs_r+0x12>
 800841c:	2000      	movs	r0, #0
 800841e:	e007      	b.n	8008430 <__sfputs_r+0x22>
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	463a      	mov	r2, r7
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffda 	bl	80083e0 <__sfputc_r>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d1f3      	bne.n	8008418 <__sfputs_r+0xa>
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460d      	mov	r5, r1
 800843a:	b09d      	sub	sp, #116	; 0x74
 800843c:	4614      	mov	r4, r2
 800843e:	4698      	mov	r8, r3
 8008440:	4606      	mov	r6, r0
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6983      	ldr	r3, [r0, #24]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f000 fb14 	bl	8008a74 <__sinit>
 800844c:	4b89      	ldr	r3, [pc, #548]	; (8008674 <_vfiprintf_r+0x240>)
 800844e:	429d      	cmp	r5, r3
 8008450:	d11b      	bne.n	800848a <_vfiprintf_r+0x56>
 8008452:	6875      	ldr	r5, [r6, #4]
 8008454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	d405      	bmi.n	8008466 <_vfiprintf_r+0x32>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	059a      	lsls	r2, r3, #22
 800845e:	d402      	bmi.n	8008466 <_vfiprintf_r+0x32>
 8008460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008462:	f000 fba5 	bl	8008bb0 <__retarget_lock_acquire_recursive>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	071b      	lsls	r3, r3, #28
 800846a:	d501      	bpl.n	8008470 <_vfiprintf_r+0x3c>
 800846c:	692b      	ldr	r3, [r5, #16]
 800846e:	b9eb      	cbnz	r3, 80084ac <_vfiprintf_r+0x78>
 8008470:	4629      	mov	r1, r5
 8008472:	4630      	mov	r0, r6
 8008474:	f000 f96e 	bl	8008754 <__swsetup_r>
 8008478:	b1c0      	cbz	r0, 80084ac <_vfiprintf_r+0x78>
 800847a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800847c:	07dc      	lsls	r4, r3, #31
 800847e:	d50e      	bpl.n	800849e <_vfiprintf_r+0x6a>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	b01d      	add	sp, #116	; 0x74
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	4b7b      	ldr	r3, [pc, #492]	; (8008678 <_vfiprintf_r+0x244>)
 800848c:	429d      	cmp	r5, r3
 800848e:	d101      	bne.n	8008494 <_vfiprintf_r+0x60>
 8008490:	68b5      	ldr	r5, [r6, #8]
 8008492:	e7df      	b.n	8008454 <_vfiprintf_r+0x20>
 8008494:	4b79      	ldr	r3, [pc, #484]	; (800867c <_vfiprintf_r+0x248>)
 8008496:	429d      	cmp	r5, r3
 8008498:	bf08      	it	eq
 800849a:	68f5      	ldreq	r5, [r6, #12]
 800849c:	e7da      	b.n	8008454 <_vfiprintf_r+0x20>
 800849e:	89ab      	ldrh	r3, [r5, #12]
 80084a0:	0598      	lsls	r0, r3, #22
 80084a2:	d4ed      	bmi.n	8008480 <_vfiprintf_r+0x4c>
 80084a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084a6:	f000 fb84 	bl	8008bb2 <__retarget_lock_release_recursive>
 80084aa:	e7e9      	b.n	8008480 <_vfiprintf_r+0x4c>
 80084ac:	2300      	movs	r3, #0
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	2320      	movs	r3, #32
 80084b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ba:	2330      	movs	r3, #48	; 0x30
 80084bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008680 <_vfiprintf_r+0x24c>
 80084c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c4:	f04f 0901 	mov.w	r9, #1
 80084c8:	4623      	mov	r3, r4
 80084ca:	469a      	mov	sl, r3
 80084cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d0:	b10a      	cbz	r2, 80084d6 <_vfiprintf_r+0xa2>
 80084d2:	2a25      	cmp	r2, #37	; 0x25
 80084d4:	d1f9      	bne.n	80084ca <_vfiprintf_r+0x96>
 80084d6:	ebba 0b04 	subs.w	fp, sl, r4
 80084da:	d00b      	beq.n	80084f4 <_vfiprintf_r+0xc0>
 80084dc:	465b      	mov	r3, fp
 80084de:	4622      	mov	r2, r4
 80084e0:	4629      	mov	r1, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ff93 	bl	800840e <__sfputs_r>
 80084e8:	3001      	adds	r0, #1
 80084ea:	f000 80aa 	beq.w	8008642 <_vfiprintf_r+0x20e>
 80084ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f0:	445a      	add	r2, fp
 80084f2:	9209      	str	r2, [sp, #36]	; 0x24
 80084f4:	f89a 3000 	ldrb.w	r3, [sl]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80a2 	beq.w	8008642 <_vfiprintf_r+0x20e>
 80084fe:	2300      	movs	r3, #0
 8008500:	f04f 32ff 	mov.w	r2, #4294967295
 8008504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008508:	f10a 0a01 	add.w	sl, sl, #1
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008514:	931a      	str	r3, [sp, #104]	; 0x68
 8008516:	4654      	mov	r4, sl
 8008518:	2205      	movs	r2, #5
 800851a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851e:	4858      	ldr	r0, [pc, #352]	; (8008680 <_vfiprintf_r+0x24c>)
 8008520:	f7f7 fe5e 	bl	80001e0 <memchr>
 8008524:	9a04      	ldr	r2, [sp, #16]
 8008526:	b9d8      	cbnz	r0, 8008560 <_vfiprintf_r+0x12c>
 8008528:	06d1      	lsls	r1, r2, #27
 800852a:	bf44      	itt	mi
 800852c:	2320      	movmi	r3, #32
 800852e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008532:	0713      	lsls	r3, r2, #28
 8008534:	bf44      	itt	mi
 8008536:	232b      	movmi	r3, #43	; 0x2b
 8008538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800853c:	f89a 3000 	ldrb.w	r3, [sl]
 8008540:	2b2a      	cmp	r3, #42	; 0x2a
 8008542:	d015      	beq.n	8008570 <_vfiprintf_r+0x13c>
 8008544:	9a07      	ldr	r2, [sp, #28]
 8008546:	4654      	mov	r4, sl
 8008548:	2000      	movs	r0, #0
 800854a:	f04f 0c0a 	mov.w	ip, #10
 800854e:	4621      	mov	r1, r4
 8008550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008554:	3b30      	subs	r3, #48	; 0x30
 8008556:	2b09      	cmp	r3, #9
 8008558:	d94e      	bls.n	80085f8 <_vfiprintf_r+0x1c4>
 800855a:	b1b0      	cbz	r0, 800858a <_vfiprintf_r+0x156>
 800855c:	9207      	str	r2, [sp, #28]
 800855e:	e014      	b.n	800858a <_vfiprintf_r+0x156>
 8008560:	eba0 0308 	sub.w	r3, r0, r8
 8008564:	fa09 f303 	lsl.w	r3, r9, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	46a2      	mov	sl, r4
 800856e:	e7d2      	b.n	8008516 <_vfiprintf_r+0xe2>
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	1d19      	adds	r1, r3, #4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	9103      	str	r1, [sp, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	bfbb      	ittet	lt
 800857c:	425b      	neglt	r3, r3
 800857e:	f042 0202 	orrlt.w	r2, r2, #2
 8008582:	9307      	strge	r3, [sp, #28]
 8008584:	9307      	strlt	r3, [sp, #28]
 8008586:	bfb8      	it	lt
 8008588:	9204      	strlt	r2, [sp, #16]
 800858a:	7823      	ldrb	r3, [r4, #0]
 800858c:	2b2e      	cmp	r3, #46	; 0x2e
 800858e:	d10c      	bne.n	80085aa <_vfiprintf_r+0x176>
 8008590:	7863      	ldrb	r3, [r4, #1]
 8008592:	2b2a      	cmp	r3, #42	; 0x2a
 8008594:	d135      	bne.n	8008602 <_vfiprintf_r+0x1ce>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	1d1a      	adds	r2, r3, #4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	9203      	str	r2, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfb8      	it	lt
 80085a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80085a6:	3402      	adds	r4, #2
 80085a8:	9305      	str	r3, [sp, #20]
 80085aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008690 <_vfiprintf_r+0x25c>
 80085ae:	7821      	ldrb	r1, [r4, #0]
 80085b0:	2203      	movs	r2, #3
 80085b2:	4650      	mov	r0, sl
 80085b4:	f7f7 fe14 	bl	80001e0 <memchr>
 80085b8:	b140      	cbz	r0, 80085cc <_vfiprintf_r+0x198>
 80085ba:	2340      	movs	r3, #64	; 0x40
 80085bc:	eba0 000a 	sub.w	r0, r0, sl
 80085c0:	fa03 f000 	lsl.w	r0, r3, r0
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	4303      	orrs	r3, r0
 80085c8:	3401      	adds	r4, #1
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d0:	482c      	ldr	r0, [pc, #176]	; (8008684 <_vfiprintf_r+0x250>)
 80085d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085d6:	2206      	movs	r2, #6
 80085d8:	f7f7 fe02 	bl	80001e0 <memchr>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d03f      	beq.n	8008660 <_vfiprintf_r+0x22c>
 80085e0:	4b29      	ldr	r3, [pc, #164]	; (8008688 <_vfiprintf_r+0x254>)
 80085e2:	bb1b      	cbnz	r3, 800862c <_vfiprintf_r+0x1f8>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	3307      	adds	r3, #7
 80085e8:	f023 0307 	bic.w	r3, r3, #7
 80085ec:	3308      	adds	r3, #8
 80085ee:	9303      	str	r3, [sp, #12]
 80085f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f2:	443b      	add	r3, r7
 80085f4:	9309      	str	r3, [sp, #36]	; 0x24
 80085f6:	e767      	b.n	80084c8 <_vfiprintf_r+0x94>
 80085f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085fc:	460c      	mov	r4, r1
 80085fe:	2001      	movs	r0, #1
 8008600:	e7a5      	b.n	800854e <_vfiprintf_r+0x11a>
 8008602:	2300      	movs	r3, #0
 8008604:	3401      	adds	r4, #1
 8008606:	9305      	str	r3, [sp, #20]
 8008608:	4619      	mov	r1, r3
 800860a:	f04f 0c0a 	mov.w	ip, #10
 800860e:	4620      	mov	r0, r4
 8008610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008614:	3a30      	subs	r2, #48	; 0x30
 8008616:	2a09      	cmp	r2, #9
 8008618:	d903      	bls.n	8008622 <_vfiprintf_r+0x1ee>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0c5      	beq.n	80085aa <_vfiprintf_r+0x176>
 800861e:	9105      	str	r1, [sp, #20]
 8008620:	e7c3      	b.n	80085aa <_vfiprintf_r+0x176>
 8008622:	fb0c 2101 	mla	r1, ip, r1, r2
 8008626:	4604      	mov	r4, r0
 8008628:	2301      	movs	r3, #1
 800862a:	e7f0      	b.n	800860e <_vfiprintf_r+0x1da>
 800862c:	ab03      	add	r3, sp, #12
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	462a      	mov	r2, r5
 8008632:	4b16      	ldr	r3, [pc, #88]	; (800868c <_vfiprintf_r+0x258>)
 8008634:	a904      	add	r1, sp, #16
 8008636:	4630      	mov	r0, r6
 8008638:	f7fd fe24 	bl	8006284 <_printf_float>
 800863c:	4607      	mov	r7, r0
 800863e:	1c78      	adds	r0, r7, #1
 8008640:	d1d6      	bne.n	80085f0 <_vfiprintf_r+0x1bc>
 8008642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008644:	07d9      	lsls	r1, r3, #31
 8008646:	d405      	bmi.n	8008654 <_vfiprintf_r+0x220>
 8008648:	89ab      	ldrh	r3, [r5, #12]
 800864a:	059a      	lsls	r2, r3, #22
 800864c:	d402      	bmi.n	8008654 <_vfiprintf_r+0x220>
 800864e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008650:	f000 faaf 	bl	8008bb2 <__retarget_lock_release_recursive>
 8008654:	89ab      	ldrh	r3, [r5, #12]
 8008656:	065b      	lsls	r3, r3, #25
 8008658:	f53f af12 	bmi.w	8008480 <_vfiprintf_r+0x4c>
 800865c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800865e:	e711      	b.n	8008484 <_vfiprintf_r+0x50>
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <_vfiprintf_r+0x258>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4630      	mov	r0, r6
 800866c:	f7fe f8ae 	bl	80067cc <_printf_i>
 8008670:	e7e4      	b.n	800863c <_vfiprintf_r+0x208>
 8008672:	bf00      	nop
 8008674:	080092ec 	.word	0x080092ec
 8008678:	0800930c 	.word	0x0800930c
 800867c:	080092cc 	.word	0x080092cc
 8008680:	08009174 	.word	0x08009174
 8008684:	0800917e 	.word	0x0800917e
 8008688:	08006285 	.word	0x08006285
 800868c:	0800840f 	.word	0x0800840f
 8008690:	0800917a 	.word	0x0800917a

08008694 <__swbuf_r>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	460e      	mov	r6, r1
 8008698:	4614      	mov	r4, r2
 800869a:	4605      	mov	r5, r0
 800869c:	b118      	cbz	r0, 80086a6 <__swbuf_r+0x12>
 800869e:	6983      	ldr	r3, [r0, #24]
 80086a0:	b90b      	cbnz	r3, 80086a6 <__swbuf_r+0x12>
 80086a2:	f000 f9e7 	bl	8008a74 <__sinit>
 80086a6:	4b21      	ldr	r3, [pc, #132]	; (800872c <__swbuf_r+0x98>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d12b      	bne.n	8008704 <__swbuf_r+0x70>
 80086ac:	686c      	ldr	r4, [r5, #4]
 80086ae:	69a3      	ldr	r3, [r4, #24]
 80086b0:	60a3      	str	r3, [r4, #8]
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	071a      	lsls	r2, r3, #28
 80086b6:	d52f      	bpl.n	8008718 <__swbuf_r+0x84>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	b36b      	cbz	r3, 8008718 <__swbuf_r+0x84>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	6820      	ldr	r0, [r4, #0]
 80086c0:	1ac0      	subs	r0, r0, r3
 80086c2:	6963      	ldr	r3, [r4, #20]
 80086c4:	b2f6      	uxtb	r6, r6
 80086c6:	4283      	cmp	r3, r0
 80086c8:	4637      	mov	r7, r6
 80086ca:	dc04      	bgt.n	80086d6 <__swbuf_r+0x42>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f93c 	bl	800894c <_fflush_r>
 80086d4:	bb30      	cbnz	r0, 8008724 <__swbuf_r+0x90>
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	3b01      	subs	r3, #1
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	6022      	str	r2, [r4, #0]
 80086e2:	701e      	strb	r6, [r3, #0]
 80086e4:	6963      	ldr	r3, [r4, #20]
 80086e6:	3001      	adds	r0, #1
 80086e8:	4283      	cmp	r3, r0
 80086ea:	d004      	beq.n	80086f6 <__swbuf_r+0x62>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d506      	bpl.n	8008700 <__swbuf_r+0x6c>
 80086f2:	2e0a      	cmp	r6, #10
 80086f4:	d104      	bne.n	8008700 <__swbuf_r+0x6c>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 f927 	bl	800894c <_fflush_r>
 80086fe:	b988      	cbnz	r0, 8008724 <__swbuf_r+0x90>
 8008700:	4638      	mov	r0, r7
 8008702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <__swbuf_r+0x9c>)
 8008706:	429c      	cmp	r4, r3
 8008708:	d101      	bne.n	800870e <__swbuf_r+0x7a>
 800870a:	68ac      	ldr	r4, [r5, #8]
 800870c:	e7cf      	b.n	80086ae <__swbuf_r+0x1a>
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <__swbuf_r+0xa0>)
 8008710:	429c      	cmp	r4, r3
 8008712:	bf08      	it	eq
 8008714:	68ec      	ldreq	r4, [r5, #12]
 8008716:	e7ca      	b.n	80086ae <__swbuf_r+0x1a>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f81a 	bl	8008754 <__swsetup_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	d0cb      	beq.n	80086bc <__swbuf_r+0x28>
 8008724:	f04f 37ff 	mov.w	r7, #4294967295
 8008728:	e7ea      	b.n	8008700 <__swbuf_r+0x6c>
 800872a:	bf00      	nop
 800872c:	080092ec 	.word	0x080092ec
 8008730:	0800930c 	.word	0x0800930c
 8008734:	080092cc 	.word	0x080092cc

08008738 <__ascii_wctomb>:
 8008738:	b149      	cbz	r1, 800874e <__ascii_wctomb+0x16>
 800873a:	2aff      	cmp	r2, #255	; 0xff
 800873c:	bf85      	ittet	hi
 800873e:	238a      	movhi	r3, #138	; 0x8a
 8008740:	6003      	strhi	r3, [r0, #0]
 8008742:	700a      	strbls	r2, [r1, #0]
 8008744:	f04f 30ff 	movhi.w	r0, #4294967295
 8008748:	bf98      	it	ls
 800874a:	2001      	movls	r0, #1
 800874c:	4770      	bx	lr
 800874e:	4608      	mov	r0, r1
 8008750:	4770      	bx	lr
	...

08008754 <__swsetup_r>:
 8008754:	4b32      	ldr	r3, [pc, #200]	; (8008820 <__swsetup_r+0xcc>)
 8008756:	b570      	push	{r4, r5, r6, lr}
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	4606      	mov	r6, r0
 800875c:	460c      	mov	r4, r1
 800875e:	b125      	cbz	r5, 800876a <__swsetup_r+0x16>
 8008760:	69ab      	ldr	r3, [r5, #24]
 8008762:	b913      	cbnz	r3, 800876a <__swsetup_r+0x16>
 8008764:	4628      	mov	r0, r5
 8008766:	f000 f985 	bl	8008a74 <__sinit>
 800876a:	4b2e      	ldr	r3, [pc, #184]	; (8008824 <__swsetup_r+0xd0>)
 800876c:	429c      	cmp	r4, r3
 800876e:	d10f      	bne.n	8008790 <__swsetup_r+0x3c>
 8008770:	686c      	ldr	r4, [r5, #4]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008778:	0719      	lsls	r1, r3, #28
 800877a:	d42c      	bmi.n	80087d6 <__swsetup_r+0x82>
 800877c:	06dd      	lsls	r5, r3, #27
 800877e:	d411      	bmi.n	80087a4 <__swsetup_r+0x50>
 8008780:	2309      	movs	r3, #9
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	f04f 30ff 	mov.w	r0, #4294967295
 800878e:	e03e      	b.n	800880e <__swsetup_r+0xba>
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <__swsetup_r+0xd4>)
 8008792:	429c      	cmp	r4, r3
 8008794:	d101      	bne.n	800879a <__swsetup_r+0x46>
 8008796:	68ac      	ldr	r4, [r5, #8]
 8008798:	e7eb      	b.n	8008772 <__swsetup_r+0x1e>
 800879a:	4b24      	ldr	r3, [pc, #144]	; (800882c <__swsetup_r+0xd8>)
 800879c:	429c      	cmp	r4, r3
 800879e:	bf08      	it	eq
 80087a0:	68ec      	ldreq	r4, [r5, #12]
 80087a2:	e7e6      	b.n	8008772 <__swsetup_r+0x1e>
 80087a4:	0758      	lsls	r0, r3, #29
 80087a6:	d512      	bpl.n	80087ce <__swsetup_r+0x7a>
 80087a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087aa:	b141      	cbz	r1, 80087be <__swsetup_r+0x6a>
 80087ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <__swsetup_r+0x66>
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7ff fb6f 	bl	8007e98 <_free_r>
 80087ba:	2300      	movs	r3, #0
 80087bc:	6363      	str	r3, [r4, #52]	; 0x34
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	2300      	movs	r3, #0
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f043 0308 	orr.w	r3, r3, #8
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	b94b      	cbnz	r3, 80087ee <__swsetup_r+0x9a>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e4:	d003      	beq.n	80087ee <__swsetup_r+0x9a>
 80087e6:	4621      	mov	r1, r4
 80087e8:	4630      	mov	r0, r6
 80087ea:	f000 fa07 	bl	8008bfc <__smakebuf_r>
 80087ee:	89a0      	ldrh	r0, [r4, #12]
 80087f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f4:	f010 0301 	ands.w	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <__swsetup_r+0xbc>
 80087fa:	2300      	movs	r3, #0
 80087fc:	60a3      	str	r3, [r4, #8]
 80087fe:	6963      	ldr	r3, [r4, #20]
 8008800:	425b      	negs	r3, r3
 8008802:	61a3      	str	r3, [r4, #24]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	b943      	cbnz	r3, 800881a <__swsetup_r+0xc6>
 8008808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800880c:	d1ba      	bne.n	8008784 <__swsetup_r+0x30>
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	0781      	lsls	r1, r0, #30
 8008812:	bf58      	it	pl
 8008814:	6963      	ldrpl	r3, [r4, #20]
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	e7f4      	b.n	8008804 <__swsetup_r+0xb0>
 800881a:	2000      	movs	r0, #0
 800881c:	e7f7      	b.n	800880e <__swsetup_r+0xba>
 800881e:	bf00      	nop
 8008820:	20000148 	.word	0x20000148
 8008824:	080092ec 	.word	0x080092ec
 8008828:	0800930c 	.word	0x0800930c
 800882c:	080092cc 	.word	0x080092cc

08008830 <abort>:
 8008830:	b508      	push	{r3, lr}
 8008832:	2006      	movs	r0, #6
 8008834:	f000 fa52 	bl	8008cdc <raise>
 8008838:	2001      	movs	r0, #1
 800883a:	f7f9 fa6a 	bl	8001d12 <_exit>
	...

08008840 <__sflush_r>:
 8008840:	898a      	ldrh	r2, [r1, #12]
 8008842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008846:	4605      	mov	r5, r0
 8008848:	0710      	lsls	r0, r2, #28
 800884a:	460c      	mov	r4, r1
 800884c:	d458      	bmi.n	8008900 <__sflush_r+0xc0>
 800884e:	684b      	ldr	r3, [r1, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	dc05      	bgt.n	8008860 <__sflush_r+0x20>
 8008854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	dc02      	bgt.n	8008860 <__sflush_r+0x20>
 800885a:	2000      	movs	r0, #0
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008862:	2e00      	cmp	r6, #0
 8008864:	d0f9      	beq.n	800885a <__sflush_r+0x1a>
 8008866:	2300      	movs	r3, #0
 8008868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800886c:	682f      	ldr	r7, [r5, #0]
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	d032      	beq.n	80088d8 <__sflush_r+0x98>
 8008872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	075a      	lsls	r2, r3, #29
 8008878:	d505      	bpl.n	8008886 <__sflush_r+0x46>
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	1ac0      	subs	r0, r0, r3
 800887e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008880:	b10b      	cbz	r3, 8008886 <__sflush_r+0x46>
 8008882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008884:	1ac0      	subs	r0, r0, r3
 8008886:	2300      	movs	r3, #0
 8008888:	4602      	mov	r2, r0
 800888a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800888c:	6a21      	ldr	r1, [r4, #32]
 800888e:	4628      	mov	r0, r5
 8008890:	47b0      	blx	r6
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	d106      	bne.n	80088a6 <__sflush_r+0x66>
 8008898:	6829      	ldr	r1, [r5, #0]
 800889a:	291d      	cmp	r1, #29
 800889c:	d82c      	bhi.n	80088f8 <__sflush_r+0xb8>
 800889e:	4a2a      	ldr	r2, [pc, #168]	; (8008948 <__sflush_r+0x108>)
 80088a0:	40ca      	lsrs	r2, r1
 80088a2:	07d6      	lsls	r6, r2, #31
 80088a4:	d528      	bpl.n	80088f8 <__sflush_r+0xb8>
 80088a6:	2200      	movs	r2, #0
 80088a8:	6062      	str	r2, [r4, #4]
 80088aa:	04d9      	lsls	r1, r3, #19
 80088ac:	6922      	ldr	r2, [r4, #16]
 80088ae:	6022      	str	r2, [r4, #0]
 80088b0:	d504      	bpl.n	80088bc <__sflush_r+0x7c>
 80088b2:	1c42      	adds	r2, r0, #1
 80088b4:	d101      	bne.n	80088ba <__sflush_r+0x7a>
 80088b6:	682b      	ldr	r3, [r5, #0]
 80088b8:	b903      	cbnz	r3, 80088bc <__sflush_r+0x7c>
 80088ba:	6560      	str	r0, [r4, #84]	; 0x54
 80088bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088be:	602f      	str	r7, [r5, #0]
 80088c0:	2900      	cmp	r1, #0
 80088c2:	d0ca      	beq.n	800885a <__sflush_r+0x1a>
 80088c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <__sflush_r+0x92>
 80088cc:	4628      	mov	r0, r5
 80088ce:	f7ff fae3 	bl	8007e98 <_free_r>
 80088d2:	2000      	movs	r0, #0
 80088d4:	6360      	str	r0, [r4, #52]	; 0x34
 80088d6:	e7c1      	b.n	800885c <__sflush_r+0x1c>
 80088d8:	6a21      	ldr	r1, [r4, #32]
 80088da:	2301      	movs	r3, #1
 80088dc:	4628      	mov	r0, r5
 80088de:	47b0      	blx	r6
 80088e0:	1c41      	adds	r1, r0, #1
 80088e2:	d1c7      	bne.n	8008874 <__sflush_r+0x34>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0c4      	beq.n	8008874 <__sflush_r+0x34>
 80088ea:	2b1d      	cmp	r3, #29
 80088ec:	d001      	beq.n	80088f2 <__sflush_r+0xb2>
 80088ee:	2b16      	cmp	r3, #22
 80088f0:	d101      	bne.n	80088f6 <__sflush_r+0xb6>
 80088f2:	602f      	str	r7, [r5, #0]
 80088f4:	e7b1      	b.n	800885a <__sflush_r+0x1a>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e7ad      	b.n	800885c <__sflush_r+0x1c>
 8008900:	690f      	ldr	r7, [r1, #16]
 8008902:	2f00      	cmp	r7, #0
 8008904:	d0a9      	beq.n	800885a <__sflush_r+0x1a>
 8008906:	0793      	lsls	r3, r2, #30
 8008908:	680e      	ldr	r6, [r1, #0]
 800890a:	bf08      	it	eq
 800890c:	694b      	ldreq	r3, [r1, #20]
 800890e:	600f      	str	r7, [r1, #0]
 8008910:	bf18      	it	ne
 8008912:	2300      	movne	r3, #0
 8008914:	eba6 0807 	sub.w	r8, r6, r7
 8008918:	608b      	str	r3, [r1, #8]
 800891a:	f1b8 0f00 	cmp.w	r8, #0
 800891e:	dd9c      	ble.n	800885a <__sflush_r+0x1a>
 8008920:	6a21      	ldr	r1, [r4, #32]
 8008922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008924:	4643      	mov	r3, r8
 8008926:	463a      	mov	r2, r7
 8008928:	4628      	mov	r0, r5
 800892a:	47b0      	blx	r6
 800892c:	2800      	cmp	r0, #0
 800892e:	dc06      	bgt.n	800893e <__sflush_r+0xfe>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e78e      	b.n	800885c <__sflush_r+0x1c>
 800893e:	4407      	add	r7, r0
 8008940:	eba8 0800 	sub.w	r8, r8, r0
 8008944:	e7e9      	b.n	800891a <__sflush_r+0xda>
 8008946:	bf00      	nop
 8008948:	20400001 	.word	0x20400001

0800894c <_fflush_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	690b      	ldr	r3, [r1, #16]
 8008950:	4605      	mov	r5, r0
 8008952:	460c      	mov	r4, r1
 8008954:	b913      	cbnz	r3, 800895c <_fflush_r+0x10>
 8008956:	2500      	movs	r5, #0
 8008958:	4628      	mov	r0, r5
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	b118      	cbz	r0, 8008966 <_fflush_r+0x1a>
 800895e:	6983      	ldr	r3, [r0, #24]
 8008960:	b90b      	cbnz	r3, 8008966 <_fflush_r+0x1a>
 8008962:	f000 f887 	bl	8008a74 <__sinit>
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <_fflush_r+0x6c>)
 8008968:	429c      	cmp	r4, r3
 800896a:	d11b      	bne.n	80089a4 <_fflush_r+0x58>
 800896c:	686c      	ldr	r4, [r5, #4]
 800896e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0ef      	beq.n	8008956 <_fflush_r+0xa>
 8008976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008978:	07d0      	lsls	r0, r2, #31
 800897a:	d404      	bmi.n	8008986 <_fflush_r+0x3a>
 800897c:	0599      	lsls	r1, r3, #22
 800897e:	d402      	bmi.n	8008986 <_fflush_r+0x3a>
 8008980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008982:	f000 f915 	bl	8008bb0 <__retarget_lock_acquire_recursive>
 8008986:	4628      	mov	r0, r5
 8008988:	4621      	mov	r1, r4
 800898a:	f7ff ff59 	bl	8008840 <__sflush_r>
 800898e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008990:	07da      	lsls	r2, r3, #31
 8008992:	4605      	mov	r5, r0
 8008994:	d4e0      	bmi.n	8008958 <_fflush_r+0xc>
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	059b      	lsls	r3, r3, #22
 800899a:	d4dd      	bmi.n	8008958 <_fflush_r+0xc>
 800899c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899e:	f000 f908 	bl	8008bb2 <__retarget_lock_release_recursive>
 80089a2:	e7d9      	b.n	8008958 <_fflush_r+0xc>
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <_fflush_r+0x70>)
 80089a6:	429c      	cmp	r4, r3
 80089a8:	d101      	bne.n	80089ae <_fflush_r+0x62>
 80089aa:	68ac      	ldr	r4, [r5, #8]
 80089ac:	e7df      	b.n	800896e <_fflush_r+0x22>
 80089ae:	4b04      	ldr	r3, [pc, #16]	; (80089c0 <_fflush_r+0x74>)
 80089b0:	429c      	cmp	r4, r3
 80089b2:	bf08      	it	eq
 80089b4:	68ec      	ldreq	r4, [r5, #12]
 80089b6:	e7da      	b.n	800896e <_fflush_r+0x22>
 80089b8:	080092ec 	.word	0x080092ec
 80089bc:	0800930c 	.word	0x0800930c
 80089c0:	080092cc 	.word	0x080092cc

080089c4 <std>:
 80089c4:	2300      	movs	r3, #0
 80089c6:	b510      	push	{r4, lr}
 80089c8:	4604      	mov	r4, r0
 80089ca:	e9c0 3300 	strd	r3, r3, [r0]
 80089ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089d2:	6083      	str	r3, [r0, #8]
 80089d4:	8181      	strh	r1, [r0, #12]
 80089d6:	6643      	str	r3, [r0, #100]	; 0x64
 80089d8:	81c2      	strh	r2, [r0, #14]
 80089da:	6183      	str	r3, [r0, #24]
 80089dc:	4619      	mov	r1, r3
 80089de:	2208      	movs	r2, #8
 80089e0:	305c      	adds	r0, #92	; 0x5c
 80089e2:	f7fd fba7 	bl	8006134 <memset>
 80089e6:	4b05      	ldr	r3, [pc, #20]	; (80089fc <std+0x38>)
 80089e8:	6263      	str	r3, [r4, #36]	; 0x24
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <std+0x3c>)
 80089ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <std+0x40>)
 80089f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <std+0x44>)
 80089f4:	6224      	str	r4, [r4, #32]
 80089f6:	6323      	str	r3, [r4, #48]	; 0x30
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	08008d15 	.word	0x08008d15
 8008a00:	08008d37 	.word	0x08008d37
 8008a04:	08008d6f 	.word	0x08008d6f
 8008a08:	08008d93 	.word	0x08008d93

08008a0c <_cleanup_r>:
 8008a0c:	4901      	ldr	r1, [pc, #4]	; (8008a14 <_cleanup_r+0x8>)
 8008a0e:	f000 b8af 	b.w	8008b70 <_fwalk_reent>
 8008a12:	bf00      	nop
 8008a14:	0800894d 	.word	0x0800894d

08008a18 <__sfmoreglue>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	1e4a      	subs	r2, r1, #1
 8008a1c:	2568      	movs	r5, #104	; 0x68
 8008a1e:	4355      	muls	r5, r2
 8008a20:	460e      	mov	r6, r1
 8008a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a26:	f7ff fa87 	bl	8007f38 <_malloc_r>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	b140      	cbz	r0, 8008a40 <__sfmoreglue+0x28>
 8008a2e:	2100      	movs	r1, #0
 8008a30:	e9c0 1600 	strd	r1, r6, [r0]
 8008a34:	300c      	adds	r0, #12
 8008a36:	60a0      	str	r0, [r4, #8]
 8008a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a3c:	f7fd fb7a 	bl	8006134 <memset>
 8008a40:	4620      	mov	r0, r4
 8008a42:	bd70      	pop	{r4, r5, r6, pc}

08008a44 <__sfp_lock_acquire>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__sfp_lock_acquire+0x8>)
 8008a46:	f000 b8b3 	b.w	8008bb0 <__retarget_lock_acquire_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	2000055c 	.word	0x2000055c

08008a50 <__sfp_lock_release>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__sfp_lock_release+0x8>)
 8008a52:	f000 b8ae 	b.w	8008bb2 <__retarget_lock_release_recursive>
 8008a56:	bf00      	nop
 8008a58:	2000055c 	.word	0x2000055c

08008a5c <__sinit_lock_acquire>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sinit_lock_acquire+0x8>)
 8008a5e:	f000 b8a7 	b.w	8008bb0 <__retarget_lock_acquire_recursive>
 8008a62:	bf00      	nop
 8008a64:	20000557 	.word	0x20000557

08008a68 <__sinit_lock_release>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__sinit_lock_release+0x8>)
 8008a6a:	f000 b8a2 	b.w	8008bb2 <__retarget_lock_release_recursive>
 8008a6e:	bf00      	nop
 8008a70:	20000557 	.word	0x20000557

08008a74 <__sinit>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	4604      	mov	r4, r0
 8008a78:	f7ff fff0 	bl	8008a5c <__sinit_lock_acquire>
 8008a7c:	69a3      	ldr	r3, [r4, #24]
 8008a7e:	b11b      	cbz	r3, 8008a88 <__sinit+0x14>
 8008a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a84:	f7ff bff0 	b.w	8008a68 <__sinit_lock_release>
 8008a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <__sinit+0x68>)
 8008a90:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <__sinit+0x6c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	bf04      	itt	eq
 8008a9a:	2301      	moveq	r3, #1
 8008a9c:	61a3      	streq	r3, [r4, #24]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f820 	bl	8008ae4 <__sfp>
 8008aa4:	6060      	str	r0, [r4, #4]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 f81c 	bl	8008ae4 <__sfp>
 8008aac:	60a0      	str	r0, [r4, #8]
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 f818 	bl	8008ae4 <__sfp>
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	60e0      	str	r0, [r4, #12]
 8008ab8:	2104      	movs	r1, #4
 8008aba:	6860      	ldr	r0, [r4, #4]
 8008abc:	f7ff ff82 	bl	80089c4 <std>
 8008ac0:	68a0      	ldr	r0, [r4, #8]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	2109      	movs	r1, #9
 8008ac6:	f7ff ff7d 	bl	80089c4 <std>
 8008aca:	68e0      	ldr	r0, [r4, #12]
 8008acc:	2202      	movs	r2, #2
 8008ace:	2112      	movs	r1, #18
 8008ad0:	f7ff ff78 	bl	80089c4 <std>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	61a3      	str	r3, [r4, #24]
 8008ad8:	e7d2      	b.n	8008a80 <__sinit+0xc>
 8008ada:	bf00      	nop
 8008adc:	08008f4c 	.word	0x08008f4c
 8008ae0:	08008a0d 	.word	0x08008a0d

08008ae4 <__sfp>:
 8008ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	f7ff ffac 	bl	8008a44 <__sfp_lock_acquire>
 8008aec:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <__sfp+0x84>)
 8008aee:	681e      	ldr	r6, [r3, #0]
 8008af0:	69b3      	ldr	r3, [r6, #24]
 8008af2:	b913      	cbnz	r3, 8008afa <__sfp+0x16>
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7ff ffbd 	bl	8008a74 <__sinit>
 8008afa:	3648      	adds	r6, #72	; 0x48
 8008afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	d503      	bpl.n	8008b0c <__sfp+0x28>
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	b30b      	cbz	r3, 8008b4c <__sfp+0x68>
 8008b08:	6836      	ldr	r6, [r6, #0]
 8008b0a:	e7f7      	b.n	8008afc <__sfp+0x18>
 8008b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b10:	b9d5      	cbnz	r5, 8008b48 <__sfp+0x64>
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <__sfp+0x88>)
 8008b14:	60e3      	str	r3, [r4, #12]
 8008b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b1c:	f000 f847 	bl	8008bae <__retarget_lock_init_recursive>
 8008b20:	f7ff ff96 	bl	8008a50 <__sfp_lock_release>
 8008b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b2c:	6025      	str	r5, [r4, #0]
 8008b2e:	61a5      	str	r5, [r4, #24]
 8008b30:	2208      	movs	r2, #8
 8008b32:	4629      	mov	r1, r5
 8008b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b38:	f7fd fafc 	bl	8006134 <memset>
 8008b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b44:	4620      	mov	r0, r4
 8008b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b48:	3468      	adds	r4, #104	; 0x68
 8008b4a:	e7d9      	b.n	8008b00 <__sfp+0x1c>
 8008b4c:	2104      	movs	r1, #4
 8008b4e:	4638      	mov	r0, r7
 8008b50:	f7ff ff62 	bl	8008a18 <__sfmoreglue>
 8008b54:	4604      	mov	r4, r0
 8008b56:	6030      	str	r0, [r6, #0]
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d1d5      	bne.n	8008b08 <__sfp+0x24>
 8008b5c:	f7ff ff78 	bl	8008a50 <__sfp_lock_release>
 8008b60:	230c      	movs	r3, #12
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	e7ee      	b.n	8008b44 <__sfp+0x60>
 8008b66:	bf00      	nop
 8008b68:	08008f4c 	.word	0x08008f4c
 8008b6c:	ffff0001 	.word	0xffff0001

08008b70 <_fwalk_reent>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	4606      	mov	r6, r0
 8008b76:	4688      	mov	r8, r1
 8008b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b82:	f1b9 0901 	subs.w	r9, r9, #1
 8008b86:	d505      	bpl.n	8008b94 <_fwalk_reent+0x24>
 8008b88:	6824      	ldr	r4, [r4, #0]
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	d1f7      	bne.n	8008b7e <_fwalk_reent+0xe>
 8008b8e:	4638      	mov	r0, r7
 8008b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b94:	89ab      	ldrh	r3, [r5, #12]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d907      	bls.n	8008baa <_fwalk_reent+0x3a>
 8008b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	d003      	beq.n	8008baa <_fwalk_reent+0x3a>
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	47c0      	blx	r8
 8008ba8:	4307      	orrs	r7, r0
 8008baa:	3568      	adds	r5, #104	; 0x68
 8008bac:	e7e9      	b.n	8008b82 <_fwalk_reent+0x12>

08008bae <__retarget_lock_init_recursive>:
 8008bae:	4770      	bx	lr

08008bb0 <__retarget_lock_acquire_recursive>:
 8008bb0:	4770      	bx	lr

08008bb2 <__retarget_lock_release_recursive>:
 8008bb2:	4770      	bx	lr

08008bb4 <__swhatbuf_r>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	460e      	mov	r6, r1
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	b096      	sub	sp, #88	; 0x58
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	461d      	mov	r5, r3
 8008bc4:	da07      	bge.n	8008bd6 <__swhatbuf_r+0x22>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	89b3      	ldrh	r3, [r6, #12]
 8008bcc:	061a      	lsls	r2, r3, #24
 8008bce:	d410      	bmi.n	8008bf2 <__swhatbuf_r+0x3e>
 8008bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd4:	e00e      	b.n	8008bf4 <__swhatbuf_r+0x40>
 8008bd6:	466a      	mov	r2, sp
 8008bd8:	f000 f902 	bl	8008de0 <_fstat_r>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dbf2      	blt.n	8008bc6 <__swhatbuf_r+0x12>
 8008be0:	9a01      	ldr	r2, [sp, #4]
 8008be2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008be6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bea:	425a      	negs	r2, r3
 8008bec:	415a      	adcs	r2, r3
 8008bee:	602a      	str	r2, [r5, #0]
 8008bf0:	e7ee      	b.n	8008bd0 <__swhatbuf_r+0x1c>
 8008bf2:	2340      	movs	r3, #64	; 0x40
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	b016      	add	sp, #88	; 0x58
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__smakebuf_r>:
 8008bfc:	898b      	ldrh	r3, [r1, #12]
 8008bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c00:	079d      	lsls	r5, r3, #30
 8008c02:	4606      	mov	r6, r0
 8008c04:	460c      	mov	r4, r1
 8008c06:	d507      	bpl.n	8008c18 <__smakebuf_r+0x1c>
 8008c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	6123      	str	r3, [r4, #16]
 8008c10:	2301      	movs	r3, #1
 8008c12:	6163      	str	r3, [r4, #20]
 8008c14:	b002      	add	sp, #8
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	ab01      	add	r3, sp, #4
 8008c1a:	466a      	mov	r2, sp
 8008c1c:	f7ff ffca 	bl	8008bb4 <__swhatbuf_r>
 8008c20:	9900      	ldr	r1, [sp, #0]
 8008c22:	4605      	mov	r5, r0
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff f987 	bl	8007f38 <_malloc_r>
 8008c2a:	b948      	cbnz	r0, 8008c40 <__smakebuf_r+0x44>
 8008c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c30:	059a      	lsls	r2, r3, #22
 8008c32:	d4ef      	bmi.n	8008c14 <__smakebuf_r+0x18>
 8008c34:	f023 0303 	bic.w	r3, r3, #3
 8008c38:	f043 0302 	orr.w	r3, r3, #2
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	e7e3      	b.n	8008c08 <__smakebuf_r+0xc>
 8008c40:	4b0d      	ldr	r3, [pc, #52]	; (8008c78 <__smakebuf_r+0x7c>)
 8008c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	6020      	str	r0, [r4, #0]
 8008c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	9b00      	ldr	r3, [sp, #0]
 8008c50:	6163      	str	r3, [r4, #20]
 8008c52:	9b01      	ldr	r3, [sp, #4]
 8008c54:	6120      	str	r0, [r4, #16]
 8008c56:	b15b      	cbz	r3, 8008c70 <__smakebuf_r+0x74>
 8008c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f8d1 	bl	8008e04 <_isatty_r>
 8008c62:	b128      	cbz	r0, 8008c70 <__smakebuf_r+0x74>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f023 0303 	bic.w	r3, r3, #3
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	89a0      	ldrh	r0, [r4, #12]
 8008c72:	4305      	orrs	r5, r0
 8008c74:	81a5      	strh	r5, [r4, #12]
 8008c76:	e7cd      	b.n	8008c14 <__smakebuf_r+0x18>
 8008c78:	08008a0d 	.word	0x08008a0d

08008c7c <_malloc_usable_size_r>:
 8008c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c80:	1f18      	subs	r0, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfbc      	itt	lt
 8008c86:	580b      	ldrlt	r3, [r1, r0]
 8008c88:	18c0      	addlt	r0, r0, r3
 8008c8a:	4770      	bx	lr

08008c8c <_raise_r>:
 8008c8c:	291f      	cmp	r1, #31
 8008c8e:	b538      	push	{r3, r4, r5, lr}
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	d904      	bls.n	8008ca0 <_raise_r+0x14>
 8008c96:	2316      	movs	r3, #22
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ca2:	b112      	cbz	r2, 8008caa <_raise_r+0x1e>
 8008ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca8:	b94b      	cbnz	r3, 8008cbe <_raise_r+0x32>
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 f830 	bl	8008d10 <_getpid_r>
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cba:	f000 b817 	b.w	8008cec <_kill_r>
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d00a      	beq.n	8008cd8 <_raise_r+0x4c>
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	d103      	bne.n	8008cce <_raise_r+0x42>
 8008cc6:	2316      	movs	r3, #22
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7e7      	b.n	8008c9e <_raise_r+0x12>
 8008cce:	2400      	movs	r4, #0
 8008cd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	4798      	blx	r3
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e7e0      	b.n	8008c9e <_raise_r+0x12>

08008cdc <raise>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <raise+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f7ff bfd3 	b.w	8008c8c <_raise_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000148 	.word	0x20000148

08008cec <_kill_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d07      	ldr	r5, [pc, #28]	; (8008d0c <_kill_r+0x20>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f7f8 fffa 	bl	8001cf2 <_kill>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d102      	bne.n	8008d08 <_kill_r+0x1c>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	b103      	cbz	r3, 8008d08 <_kill_r+0x1c>
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000550 	.word	0x20000550

08008d10 <_getpid_r>:
 8008d10:	f7f8 bfe7 	b.w	8001ce2 <_getpid>

08008d14 <__sread>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	460c      	mov	r4, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	f000 f894 	bl	8008e48 <_read_r>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	bfab      	itete	ge
 8008d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d26:	89a3      	ldrhlt	r3, [r4, #12]
 8008d28:	181b      	addge	r3, r3, r0
 8008d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d2e:	bfac      	ite	ge
 8008d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d32:	81a3      	strhlt	r3, [r4, #12]
 8008d34:	bd10      	pop	{r4, pc}

08008d36 <__swrite>:
 8008d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	898b      	ldrh	r3, [r1, #12]
 8008d3e:	05db      	lsls	r3, r3, #23
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4616      	mov	r6, r2
 8008d46:	d505      	bpl.n	8008d54 <__swrite+0x1e>
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f000 f868 	bl	8008e24 <_lseek_r>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	f000 b817 	b.w	8008d9c <_write_r>

08008d6e <__sseek>:
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 f855 	bl	8008e24 <_lseek_r>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	bf15      	itete	ne
 8008d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d8a:	81a3      	strheq	r3, [r4, #12]
 8008d8c:	bf18      	it	ne
 8008d8e:	81a3      	strhne	r3, [r4, #12]
 8008d90:	bd10      	pop	{r4, pc}

08008d92 <__sclose>:
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 b813 	b.w	8008dc0 <_close_r>
	...

08008d9c <_write_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d07      	ldr	r5, [pc, #28]	; (8008dbc <_write_r+0x20>)
 8008da0:	4604      	mov	r4, r0
 8008da2:	4608      	mov	r0, r1
 8008da4:	4611      	mov	r1, r2
 8008da6:	2200      	movs	r2, #0
 8008da8:	602a      	str	r2, [r5, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f7f8 ffd8 	bl	8001d60 <_write>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_write_r+0x1e>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_write_r+0x1e>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000550 	.word	0x20000550

08008dc0 <_close_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d06      	ldr	r5, [pc, #24]	; (8008ddc <_close_r+0x1c>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	f7f8 ffe4 	bl	8001d98 <_close>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_close_r+0x1a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_close_r+0x1a>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000550 	.word	0x20000550

08008de0 <_fstat_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d07      	ldr	r5, [pc, #28]	; (8008e00 <_fstat_r+0x20>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	f7f8 ffdf 	bl	8001db0 <_fstat>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d102      	bne.n	8008dfc <_fstat_r+0x1c>
 8008df6:	682b      	ldr	r3, [r5, #0]
 8008df8:	b103      	cbz	r3, 8008dfc <_fstat_r+0x1c>
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000550 	.word	0x20000550

08008e04 <_isatty_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d06      	ldr	r5, [pc, #24]	; (8008e20 <_isatty_r+0x1c>)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7f8 ffde 	bl	8001dd0 <_isatty>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_isatty_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_isatty_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	20000550 	.word	0x20000550

08008e24 <_lseek_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d07      	ldr	r5, [pc, #28]	; (8008e44 <_lseek_r+0x20>)
 8008e28:	4604      	mov	r4, r0
 8008e2a:	4608      	mov	r0, r1
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7f8 ffd7 	bl	8001de6 <_lseek>
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	d102      	bne.n	8008e42 <_lseek_r+0x1e>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	b103      	cbz	r3, 8008e42 <_lseek_r+0x1e>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
 8008e44:	20000550 	.word	0x20000550

08008e48 <_read_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_read_r+0x20>)
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	602a      	str	r2, [r5, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f7f8 ff65 	bl	8001d26 <_read>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_read_r+0x1e>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_read_r+0x1e>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000550 	.word	0x20000550

08008e6c <trunc>:
 8008e6c:	ec51 0b10 	vmov	r0, r1, d0
 8008e70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e74:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008e78:	2b13      	cmp	r3, #19
 8008e7a:	b5d0      	push	{r4, r6, r7, lr}
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	dc10      	bgt.n	8008ea2 <trunc+0x36>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfa5      	ittet	ge
 8008e84:	4a11      	ldrge	r2, [pc, #68]	; (8008ecc <trunc+0x60>)
 8008e86:	fa42 f303 	asrge.w	r3, r2, r3
 8008e8a:	2100      	movlt	r1, #0
 8008e8c:	2100      	movge	r1, #0
 8008e8e:	bfb9      	ittee	lt
 8008e90:	2000      	movlt	r0, #0
 8008e92:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008e96:	2000      	movge	r0, #0
 8008e98:	ea24 0103 	bicge.w	r1, r4, r3
 8008e9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ea0:	bdd0      	pop	{r4, r6, r7, pc}
 8008ea2:	2b33      	cmp	r3, #51	; 0x33
 8008ea4:	dd08      	ble.n	8008eb8 <trunc+0x4c>
 8008ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eaa:	d1f7      	bne.n	8008e9c <trunc+0x30>
 8008eac:	ee10 2a10 	vmov	r2, s0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	f7f7 f9eb 	bl	800028c <__adddf3>
 8008eb6:	e7f1      	b.n	8008e9c <trunc+0x30>
 8008eb8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec0:	fa23 f202 	lsr.w	r2, r3, r2
 8008ec4:	ea20 0602 	bic.w	r6, r0, r2
 8008ec8:	4630      	mov	r0, r6
 8008eca:	e7e7      	b.n	8008e9c <trunc+0x30>
 8008ecc:	000fffff 	.word	0x000fffff

08008ed0 <_init>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr

08008edc <_fini>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

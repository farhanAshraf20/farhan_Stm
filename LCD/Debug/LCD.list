
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008c70  08008c70  00018c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ac  080090ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080090ac  080090ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b4  080090b4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080090bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  200001dc  08009298  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  08009298  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d44b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a2  00000000  00000000  0003d657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00040a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  00042098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294b5  00000000  00000000  000435e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019950  00000000  00000000  0006ca9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f55ba  00000000  00000000  000863ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017b9a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a4  00000000  00000000  0017b9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c54 	.word	0x08008c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008c54 	.word	0x08008c54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f023 030f 	bic.w	r3, r3, #15
 8000eb6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000eb8:	7bbb      	ldrb	r3, [r7, #14]
 8000eba:	f043 030c 	orr.w	r3, r3, #12
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	723b      	strb	r3, [r7, #8]
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f043 030c 	orr.w	r3, r3, #12
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	72bb      	strb	r3, [r7, #10]
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <lcd16x2_i2c_sendCommand+0x60>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <lcd16x2_i2c_sendCommand+0x64>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	f107 0208 	add.w	r2, r7, #8
 8000eee:	23c8      	movs	r3, #200	; 0xc8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	f001 fe3c 	bl	8002b70 <HAL_I2C_Master_Transmit>
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001f8 	.word	0x200001f8
 8000f04:	200001fc 	.word	0x200001fc

08000f08 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f023 030f 	bic.w	r3, r3, #15
 8000f1e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <lcd16x2_i2c_sendData+0x60>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <lcd16x2_i2c_sendData+0x64>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	23c8      	movs	r3, #200	; 0xc8
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	f001 fe08 	bl	8002b70 <HAL_I2C_Master_Transmit>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200001f8 	.word	0x200001f8
 8000f6c:	200001fc 	.word	0x200001fc

08000f70 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f001 f943 	bl	8002204 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000f7e:	4a30      	ldr	r2, [pc, #192]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	214e      	movs	r1, #78	; 0x4e
 8000f90:	f001 fee2 	bl	8002d58 <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d010      	beq.n	8000fbc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <lcd16x2_i2c_init+0xd0>)
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	217e      	movs	r1, #126	; 0x7e
 8000fa6:	f001 fed7 	bl	8002d58 <HAL_I2C_IsDeviceReady>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e040      	b.n	8001036 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <lcd16x2_i2c_init+0xd4>)
 8000fb6:	227e      	movs	r2, #126	; 0x7e
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e002      	b.n	8000fc2 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <lcd16x2_i2c_init+0xd4>)
 8000fbe:	224e      	movs	r2, #78	; 0x4e
 8000fc0:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000fc2:	202d      	movs	r0, #45	; 0x2d
 8000fc4:	f001 f91e 	bl	8002204 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000fc8:	2030      	movs	r0, #48	; 0x30
 8000fca:	f7ff ff69 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000fce:	2005      	movs	r0, #5
 8000fd0:	f001 f918 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fd4:	2030      	movs	r0, #48	; 0x30
 8000fd6:	f7ff ff63 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 f912 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000fe0:	2030      	movs	r0, #48	; 0x30
 8000fe2:	f7ff ff5d 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000fe6:	2008      	movs	r0, #8
 8000fe8:	f001 f90c 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000fec:	2020      	movs	r0, #32
 8000fee:	f7ff ff57 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f001 f906 	bl	8002204 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f7ff ff51 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f900 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff ff4b 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f001 f8fa 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff ff45 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001016:	2003      	movs	r0, #3
 8001018:	f001 f8f4 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800101c:	2006      	movs	r0, #6
 800101e:	f7ff ff3f 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 f8ee 	bl	8002204 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001028:	200c      	movs	r0, #12
 800102a:	f7ff ff39 	bl	8000ea0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800102e:	2003      	movs	r0, #3
 8001030:	f001 f8e8 	bl	8002204 <HAL_Delay>

  return true;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001f8 	.word	0x200001f8
 8001044:	200001fc 	.word	0x200001fc

08001048 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8001048:	b40f      	push	{r0, r1, r2, r3}
 800104a:	b590      	push	{r4, r7, lr}
 800104c:	b089      	sub	sp, #36	; 0x24
 800104e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001050:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001054:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fbe4 	bl	800682c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	77fb      	strb	r3, [r7, #31]
 8001068:	e00b      	b.n	8001082 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800106a:	7ffb      	ldrb	r3, [r7, #31]
 800106c:	f107 0220 	add.w	r2, r7, #32
 8001070:	4413      	add	r3, r2
 8001072:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff46 	bl	8000f08 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800107c:	7ffb      	ldrb	r3, [r7, #31]
 800107e:	3301      	adds	r3, #1
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	7ffc      	ldrb	r4, [r7, #31]
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8a1 	bl	80001d0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	429c      	cmp	r4, r3
 8001092:	d202      	bcs.n	800109a <lcd16x2_i2c_printf+0x52>
 8001094:	7ffb      	ldrb	r3, [r7, #31]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	d9e7      	bls.n	800106a <lcd16x2_i2c_printf+0x22>
  }
}
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010a4:	b004      	add	sp, #16
 80010a6:	4770      	bx	lr

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f001 f835 	bl	800211a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f828 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 fa32 	bl	800151c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80010b8:	f000 f886 	bl	80011c8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80010bc:	f000 f8bc 	bl	8001238 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80010c0:	f000 f93a 	bl	8001338 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80010c4:	f000 f95e 	bl	8001384 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80010c8:	f000 f99a 	bl	8001400 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80010cc:	f000 f9c8 	bl	8001460 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010d0:	f000 f9f6 	bl	80014c0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C3_Init();
 80010d4:	f000 f8f0 	bl	80012b8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c3))
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <main+0x50>)
 80010da:	f7ff ff49 	bl	8000f70 <lcd16x2_i2c_init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <main+0x48>
  {
	  HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <main+0x54>)
 80010ec:	f001 fc76 	bl	80029dc <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_printf("Hello World!");
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <main+0x58>)
 80010f2:	f7ff ffa9 	bl	8001048 <lcd16x2_i2c_printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <main+0x4e>
 80010f8:	2000026c 	.word	0x2000026c
 80010fc:	48000400 	.word	0x48000400
 8001100:	08008c70 	.word	0x08008c70

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b096      	sub	sp, #88	; 0x58
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2244      	movs	r2, #68	; 0x44
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f004 ff02 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001126:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112a:	f002 fb19 	bl	8003760 <HAL_PWREx_ControlVoltageScaling>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001134:	f000 fba4 	bl	8001880 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001138:	f002 faf4 	bl	8003724 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <SystemClock_Config+0xc0>)
 800113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <SystemClock_Config+0xc0>)
 8001144:	f023 0318 	bic.w	r3, r3, #24
 8001148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800114c:	2314      	movs	r3, #20
 800114e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001164:	2301      	movs	r3, #1
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800116c:	2328      	movs	r3, #40	; 0x28
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001170:	2307      	movs	r3, #7
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fc0f 	bl	80039a4 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800118c:	f000 fb78 	bl	8001880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2303      	movs	r3, #3
 8001196:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	2104      	movs	r1, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 ffe1 	bl	8004170 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011b4:	f000 fb64 	bl	8001880 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011b8:	f003 fcca 	bl	8004b50 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011bc:	bf00      	nop
 80011be:	3758      	adds	r7, #88	; 0x58
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000

080011c8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <MX_DFSDM1_Init+0x6c>)
 80011d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001200:	2204      	movs	r2, #4
 8001202:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DFSDM1_Init+0x68>)
 800120c:	2201      	movs	r2, #1
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_DFSDM1_Init+0x68>)
 800121e:	f001 f927 	bl	8002470 <HAL_DFSDM_ChannelInit>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001228:	f000 fb2a 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000234 	.word	0x20000234
 8001234:	40016020 	.word	0x40016020

08001238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C2_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C2_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C2_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C2_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C2_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_I2C2_Init+0x74>)
 8001274:	f001 fbed 	bl	8002a52 <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 faff 	bl	8001880 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C2_Init+0x74>)
 8001286:	f002 f86d 	bl	8003364 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 faf6 	bl	8001880 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2C2_Init+0x74>)
 8001298:	f002 f8af 	bl	80033fa <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 faed 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000744 	.word	0x20000744
 80012b0:	40005800 	.word	0x40005800
 80012b4:	10909cec 	.word	0x10909cec

080012b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_I2C3_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MX_I2C3_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_I2C3_Init+0x74>)
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <MX_I2C3_Init+0x7c>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_I2C3_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_I2C3_Init+0x74>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_I2C3_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_I2C3_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MX_I2C3_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_I2C3_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_I2C3_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <MX_I2C3_Init+0x74>)
 80012f4:	f001 fbad 	bl	8002a52 <HAL_I2C_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012fe:	f000 fabf 	bl	8001880 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <MX_I2C3_Init+0x74>)
 8001306:	f002 f82d 	bl	8003364 <HAL_I2CEx_ConfigAnalogFilter>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001310:	f000 fab6 	bl	8001880 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_I2C3_Init+0x74>)
 8001318:	f002 f86f 	bl	80033fa <HAL_I2CEx_ConfigDigitalFilter>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001322:	f000 faad 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000026c 	.word	0x2000026c
 8001330:	40005c00 	.word	0x40005c00
 8001334:	10909cec 	.word	0x10909cec

08001338 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_QUADSPI_Init+0x44>)
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <MX_QUADSPI_Init+0x48>)
 8001340:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_QUADSPI_Init+0x44>)
 8001344:	2202      	movs	r2, #2
 8001346:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_QUADSPI_Init+0x44>)
 800134a:	2204      	movs	r2, #4
 800134c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_QUADSPI_Init+0x44>)
 8001350:	2210      	movs	r2, #16
 8001352:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_QUADSPI_Init+0x44>)
 8001356:	2217      	movs	r2, #23
 8001358:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_QUADSPI_Init+0x44>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_QUADSPI_Init+0x44>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_QUADSPI_Init+0x44>)
 8001368:	f002 fa60 	bl	800382c <HAL_QSPI_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001372:	f000 fa85 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000878 	.word	0x20000878
 8001380:	a0001000 	.word	0xa0001000

08001384 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_SPI3_Init+0x74>)
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <MX_SPI3_Init+0x78>)
 800138c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_SPI3_Init+0x74>)
 8001390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001394:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_SPI3_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI3_Init+0x74>)
 800139e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013d2:	2207      	movs	r2, #7
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013de:	2208      	movs	r2, #8
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_SPI3_Init+0x74>)
 80013e4:	f003 fd96 	bl	8004f14 <HAL_SPI_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 fa47 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000790 	.word	0x20000790
 80013fc:	40003c00 	.word	0x40003c00

08001400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001406:	4a15      	ldr	r2, [pc, #84]	; (800145c <MX_USART1_UART_Init+0x5c>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_USART1_UART_Init+0x58>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART1_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART1_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART1_UART_Init+0x58>)
 8001444:	f003 fe09 	bl	800505a <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 fa17 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200007f4 	.word	0x200007f4
 800145c:	40013800 	.word	0x40013800

08001460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <MX_USART3_UART_Init+0x5c>)
 8001468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800146c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART3_UART_Init+0x58>)
 80014a4:	f003 fdd9 	bl	800505a <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014ae:	f000 f9e7 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002b8 	.word	0x200002b8
 80014bc:	40004800 	.word	0x40004800

080014c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2206      	movs	r2, #6
 80014d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2202      	movs	r2, #2
 80014dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001504:	f001 ffc5 	bl	8003492 <HAL_PCD_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f9b7 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000033c 	.word	0x2000033c

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	4bbd      	ldr	r3, [pc, #756]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	4abc      	ldr	r2, [pc, #752]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153e:	4bba      	ldr	r3, [pc, #744]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4bb7      	ldr	r3, [pc, #732]	; (8001828 <MX_GPIO_Init+0x30c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4ab6      	ldr	r2, [pc, #728]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4bb4      	ldr	r3, [pc, #720]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4bb1      	ldr	r3, [pc, #708]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4ab0      	ldr	r2, [pc, #704]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4bae      	ldr	r3, [pc, #696]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4bab      	ldr	r3, [pc, #684]	; (8001828 <MX_GPIO_Init+0x30c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4aaa      	ldr	r2, [pc, #680]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4ba8      	ldr	r3, [pc, #672]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	4ba5      	ldr	r3, [pc, #660]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4aa4      	ldr	r2, [pc, #656]	; (8001828 <MX_GPIO_Init+0x30c>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4ba2      	ldr	r3, [pc, #648]	; (8001828 <MX_GPIO_Init+0x30c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015b0:	489e      	ldr	r0, [pc, #632]	; (800182c <MX_GPIO_Init+0x310>)
 80015b2:	f001 fa13 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f248 1104 	movw	r1, #33028	; 0x8104
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f001 fa0c 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 80015c4:	2200      	movs	r2, #0
 80015c6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80015ca:	4899      	ldr	r0, [pc, #612]	; (8001830 <MX_GPIO_Init+0x314>)
 80015cc:	f001 fa06 	bl	80029dc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f241 0181 	movw	r1, #4225	; 0x1081
 80015d6:	4897      	ldr	r0, [pc, #604]	; (8001834 <MX_GPIO_Init+0x318>)
 80015d8:	f001 fa00 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	4894      	ldr	r0, [pc, #592]	; (8001834 <MX_GPIO_Init+0x318>)
 80015e4:	f001 f9fa 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80015ee:	4892      	ldr	r0, [pc, #584]	; (8001838 <MX_GPIO_Init+0x31c>)
 80015f0:	f001 f9f4 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2120      	movs	r1, #32
 80015f8:	488d      	ldr	r0, [pc, #564]	; (8001830 <MX_GPIO_Init+0x314>)
 80015fa:	f001 f9ef 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2101      	movs	r1, #1
 8001602:	488a      	ldr	r0, [pc, #552]	; (800182c <MX_GPIO_Init+0x310>)
 8001604:	f001 f9ea 	bl	80029dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001608:	f240 1315 	movw	r3, #277	; 0x115
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4882      	ldr	r0, [pc, #520]	; (800182c <MX_GPIO_Init+0x310>)
 8001622:	f001 f831 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001626:	236a      	movs	r3, #106	; 0x6a
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	487c      	ldr	r0, [pc, #496]	; (800182c <MX_GPIO_Init+0x310>)
 800163c:	f001 f824 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001646:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4878      	ldr	r0, [pc, #480]	; (8001838 <MX_GPIO_Init+0x31c>)
 8001658:	f001 f816 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A3_Pin ARD_A2_Pin ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin|ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 800165c:	233c      	movs	r3, #60	; 0x3c
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001660:	230b      	movs	r3, #11
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4872      	ldr	r0, [pc, #456]	; (8001838 <MX_GPIO_Init+0x31c>)
 8001670:	f001 f80a 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001674:	2303      	movs	r3, #3
 8001676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001684:	2308      	movs	r3, #8
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f000 fff9 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001696:	f248 1304 	movw	r3, #33028	; 0x8104
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f000 ffe9 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016b6:	2308      	movs	r3, #8
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f000 ffd8 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80016d8:	2310      	movs	r3, #16
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016dc:	230b      	movs	r3, #11
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f000 ffcb 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80016f2:	23e0      	movs	r3, #224	; 0xe0
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001702:	2305      	movs	r3, #5
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f000 ffba 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001718:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4841      	ldr	r0, [pc, #260]	; (8001830 <MX_GPIO_Init+0x314>)
 800172a:	f000 ffad 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800172e:	2302      	movs	r3, #2
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001732:	230b      	movs	r3, #11
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	483b      	ldr	r0, [pc, #236]	; (8001830 <MX_GPIO_Init+0x314>)
 8001742:	f000 ffa1 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8001746:	f24f 0334 	movw	r3, #61492	; 0xf034
 800174a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4834      	ldr	r0, [pc, #208]	; (8001830 <MX_GPIO_Init+0x314>)
 8001760:	f000 ff92 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001764:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001768:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	482e      	ldr	r0, [pc, #184]	; (8001834 <MX_GPIO_Init+0x318>)
 800177c:	f000 ff84 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001780:	f243 0381 	movw	r3, #12417	; 0x3081
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4826      	ldr	r0, [pc, #152]	; (8001834 <MX_GPIO_Init+0x318>)
 800179a:	f000 ff75 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800179e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	4820      	ldr	r0, [pc, #128]	; (8001838 <MX_GPIO_Init+0x31c>)
 80017b8:	f000 ff66 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80017bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4819      	ldr	r0, [pc, #100]	; (8001838 <MX_GPIO_Init+0x31c>)
 80017d4:	f000 ff58 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80017d8:	2302      	movs	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e8:	2305      	movs	r3, #5
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4619      	mov	r1, r3
 80017f2:	4810      	ldr	r0, [pc, #64]	; (8001834 <MX_GPIO_Init+0x318>)
 80017f4:	f000 ff48 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017f8:	2378      	movs	r3, #120	; 0x78
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	2307      	movs	r3, #7
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_GPIO_Init+0x318>)
 8001814:	f000 ff38 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001818:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181e:	2312      	movs	r3, #18
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	e00a      	b.n	800183c <MX_GPIO_Init+0x320>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	48001000 	.word	0x48001000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000c00 	.word	0x48000c00
 8001838:	48000800 	.word	0x48000800
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001842:	2304      	movs	r3, #4
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <MX_GPIO_Init+0x360>)
 800184e:	f000 ff1b 	bl	8002688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2017      	movs	r0, #23
 8001858:	f000 fdd3 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800185c:	2017      	movs	r0, #23
 800185e:	f000 fdec 	bl	800243a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2028      	movs	r0, #40	; 0x28
 8001868:	f000 fdcb 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186c:	2028      	movs	r0, #40	; 0x28
 800186e:	f000 fde4 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	48000400 	.word	0x48000400

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	e7fe      	b.n	8001888 <Error_Handler+0x8>
	...

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_MspInit+0x44>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_MspInit+0x44>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_MspInit+0x44>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_MspInit+0x44>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ac      	sub	sp, #176	; 0xb0
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2288      	movs	r2, #136	; 0x88
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fb11 	bl	8005f1c <memset>
  if(DFSDM1_Init == 0)
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d142      	bne.n	8001988 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001906:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fe32 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800191e:	f7ff ffaf 	bl	8001880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001928:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a15      	ldr	r2, [pc, #84]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001952:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800196c:	2306      	movs	r3, #6
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001972:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001976:	4619      	mov	r1, r3
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800197a:	f000 fe85 	bl	8002688 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a02      	ldr	r2, [pc, #8]	; (8001990 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001986:	6013      	str	r3, [r2, #0]
  }

}
 8001988:	bf00      	nop
 800198a:	37b0      	adds	r7, #176	; 0xb0
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000200 	.word	0x20000200
 8001994:	40021000 	.word	0x40021000
 8001998:	48001000 	.word	0x48001000

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ae      	sub	sp, #184	; 0xb8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2288      	movs	r2, #136	; 0x88
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 faad 	bl	8005f1c <memset>
  if(hi2c->Instance==I2C2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_I2C_MspInit+0x134>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d13c      	bne.n	8001a46 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fdcf 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019e4:	f7ff ff4c 	bl	8001880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a24:	4619      	mov	r1, r3
 8001a26:	482c      	ldr	r0, [pc, #176]	; (8001ad8 <HAL_I2C_MspInit+0x13c>)
 8001a28:	f000 fe2e 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a36:	6593      	str	r3, [r2, #88]	; 0x58
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a44:	e040      	b.n	8001ac8 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_I2C_MspInit+0x140>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d13b      	bne.n	8001ac8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fd8c 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001a6a:	f7ff ff09 	bl	8001880 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a86:	2303      	movs	r3, #3
 8001a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8c:	2312      	movs	r3, #18
 8001a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <HAL_I2C_MspInit+0x144>)
 8001aac:	f000 fdec 	bl	8002688 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001ab6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_I2C_MspInit+0x138>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	37b8      	adds	r7, #184	; 0xb8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	40005c00 	.word	0x40005c00
 8001ae0:	48000800 	.word	0x48000800

08001ae4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_QSPI_MspInit+0x7c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d128      	bne.n	8001b58 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6513      	str	r3, [r2, #80]	; 0x50
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_QSPI_MspInit+0x80>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b36:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b3a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b48:	230a      	movs	r3, #10
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <HAL_QSPI_MspInit+0x84>)
 8001b54:	f000 fd98 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	a0001000 	.word	0xa0001000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48001000 	.word	0x48001000

08001b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0x7c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d128      	bne.n	8001be0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b98:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_SPI_MspInit+0x80>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001bbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_SPI_MspInit+0x84>)
 8001bdc:	f000 fd54 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40003c00 	.word	0x40003c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	48000800 	.word	0x48000800

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0ae      	sub	sp, #184	; 0xb8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	2288      	movs	r2, #136	; 0x88
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 f981 	bl	8005f1c <memset>
  if(huart->Instance==USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a42      	ldr	r2, [pc, #264]	; (8001d28 <HAL_UART_MspInit+0x134>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d13b      	bne.n	8001c9c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fca3 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c3c:	f7ff fe20 	bl	8001880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c40:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c44:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4826      	ldr	r0, [pc, #152]	; (8001d30 <HAL_UART_MspInit+0x13c>)
 8001c96:	f000 fcf7 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c9a:	e040      	b.n	8001d1e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <HAL_UART_MspInit+0x140>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d13b      	bne.n	8001d1e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fc62 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001cbe:	f7ff fddf 	bl	8001880 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_UART_MspInit+0x138>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <HAL_UART_MspInit+0x144>)
 8001d1a:	f000 fcb5 	bl	8002688 <HAL_GPIO_Init>
}
 8001d1e:	bf00      	nop
 8001d20:	37b8      	adds	r7, #184	; 0xb8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	40004800 	.word	0x40004800
 8001d38:	48000c00 	.word	0x48000c00

08001d3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0ac      	sub	sp, #176	; 0xb0
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2288      	movs	r2, #136	; 0x88
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 f8dd 	bl	8005f1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d6a:	d17c      	bne.n	8001e66 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d82:	2318      	movs	r3, #24
 8001d84:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d86:	2307      	movs	r3, #7
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fbed 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001da8:	f7ff fd6a 	bl	8001880 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f000 fc51 	bl	8002688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001de6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e00:	230a      	movs	r3, #10
 8001e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f000 fc3a 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d114      	bne.n	8001e62 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	; 0x58
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e50:	f001 fcdc 	bl	800380c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <HAL_PCD_MspInit+0x134>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e60:	e001      	b.n	8001e66 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e62:	f001 fcd3 	bl	800380c <HAL_PWREx_EnableVddUSB>
}
 8001e66:	bf00      	nop
 8001e68:	37b0      	adds	r7, #176	; 0xb0
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f980 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ecc:	2020      	movs	r0, #32
 8001ece:	f000 fd9d 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ed2:	2040      	movs	r0, #64	; 0x40
 8001ed4:	f000 fd9a 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ed8:	2080      	movs	r0, #128	; 0x80
 8001eda:	f000 fd97 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ede:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ee2:	f000 fd93 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001eee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ef2:	f000 fd8b 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ef6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001efa:	f000 fd87 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001efe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f02:	f000 fd83 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f0a:	f000 fd7f 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f12:	f000 fd7b 	bl	8002a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
	return 1;
 8001f1e:	2301      	movs	r3, #1
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_kill>:

int _kill(int pid, int sig)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f34:	f003 ffc8 	bl	8005ec8 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2216      	movs	r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
	return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_exit>:

void _exit (int status)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f52:	f04f 31ff 	mov.w	r1, #4294967295
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffe7 	bl	8001f2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f5c:	e7fe      	b.n	8001f5c <_exit+0x12>

08001f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00a      	b.n	8001f86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f70:	f3af 8000 	nop.w
 8001f74:	4601      	mov	r1, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <_read+0x12>
	}

return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e009      	b.n	8001fbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbf1      	blt.n	8001faa <_write+0x12>
	}
	return len;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_close>:

int _close(int file)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff8:	605a      	str	r2, [r3, #4]
	return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_isatty>:

int _isatty(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
	return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f003 ff2e 	bl	8005ec8 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20018000 	.word	0x20018000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000204 	.word	0x20000204
 80020a0:	200008d0 	.word	0x200008d0

080020a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f003 feed 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7fe ffd5 	bl	80010a8 <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800210c:	080090bc 	.word	0x080090bc
  ldr r2, =_sbss
 8002110:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002114:	200008d0 	.word	0x200008d0

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>

0800211a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 f961 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f80e 	bl	800214c <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e001      	b.n	8002140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213c:	f7ff fba6 	bl	800188c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002140:	79fb      	ldrb	r3, [r7, #7]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_InitTick+0x6c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_InitTick+0x70>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_InitTick+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f96d 	bl	8002456 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d809      	bhi.n	800219c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f937 	bl	8002402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_InitTick+0x74>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e007      	b.n	80021ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e004      	b.n	80021ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e001      	b.n	80021ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000008 	.word	0x20000008
 80021e8:	200008bc 	.word	0x200008bc

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200008bc 	.word	0x200008bc

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0ac      	b.n	80025dc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8b2 	bl	80025f0 <DFSDM_GetChannelFromInstance>
 800248c:	4603      	mov	r3, r0
 800248e:	4a55      	ldr	r2, [pc, #340]	; (80025e4 <HAL_DFSDM_ChannelInit+0x174>)
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e09f      	b.n	80025dc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff fa19 	bl	80018d4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80024a2:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a4f      	ldr	r2, [pc, #316]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024aa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_DFSDM_ChannelInit+0x178>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d125      	bne.n	8002500 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024be:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80024c0:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4948      	ldr	r1, [pc, #288]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a46      	ldr	r2, [pc, #280]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024d4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80024d8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	493f      	ldr	r1, [pc, #252]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <HAL_DFSDM_ChannelInit+0x17c>)
 80024fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800250e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800251e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002524:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 020f 	bic.w	r2, r2, #15
 800253c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002564:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 0207 	and.w	r2, r2, #7
 8002590:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f810 	bl	80025f0 <DFSDM_GetChannelFromInstance>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_DFSDM_ChannelInit+0x174>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000020c 	.word	0x2000020c
 80025e8:	20000208 	.word	0x20000208
 80025ec:	40016000 	.word	0x40016000

080025f0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a1c      	ldr	r2, [pc, #112]	; (800266c <DFSDM_GetChannelFromInstance+0x7c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d102      	bne.n	8002606 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e02b      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <DFSDM_GetChannelFromInstance+0x80>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d102      	bne.n	8002614 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800260e:	2301      	movs	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e024      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <DFSDM_GetChannelFromInstance+0x84>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800261c:	2302      	movs	r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e01d      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <DFSDM_GetChannelFromInstance+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d102      	bne.n	8002630 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800262a:	2304      	movs	r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e016      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <DFSDM_GetChannelFromInstance+0x8c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002638:	2305      	movs	r3, #5
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e00f      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <DFSDM_GetChannelFromInstance+0x90>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d102      	bne.n	800264c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002646:	2306      	movs	r3, #6
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e008      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <DFSDM_GetChannelFromInstance+0x94>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d102      	bne.n	800265a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002654:	2307      	movs	r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e001      	b.n	800265e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800265a:	2303      	movs	r3, #3
 800265c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40016000 	.word	0x40016000
 8002670:	40016020 	.word	0x40016020
 8002674:	40016040 	.word	0x40016040
 8002678:	40016080 	.word	0x40016080
 800267c:	400160a0 	.word	0x400160a0
 8002680:	400160c0 	.word	0x400160c0
 8002684:	400160e0 	.word	0x400160e0

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002696:	e17f      	b.n	8002998 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8171 	beq.w	8002992 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d005      	beq.n	80026c8 <HAL_GPIO_Init+0x40>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d130      	bne.n	800272a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fe:	2201      	movs	r2, #1
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	f003 0201 	and.w	r2, r3, #1
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b03      	cmp	r3, #3
 8002734:	d118      	bne.n	8002768 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800273c:	2201      	movs	r2, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f003 0201 	and.w	r2, r3, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b03      	cmp	r3, #3
 8002772:	d017      	beq.n	80027a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2203      	movs	r2, #3
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d123      	bne.n	80027f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	08da      	lsrs	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3208      	adds	r2, #8
 80027f2:	6939      	ldr	r1, [r7, #16]
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80ac 	beq.w	8002992 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_GPIO_Init+0x330>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <HAL_GPIO_Init+0x330>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6613      	str	r3, [r2, #96]	; 0x60
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_GPIO_Init+0x330>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002852:	4a5a      	ldr	r2, [pc, #360]	; (80029bc <HAL_GPIO_Init+0x334>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800287c:	d025      	beq.n	80028ca <HAL_GPIO_Init+0x242>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4f      	ldr	r2, [pc, #316]	; (80029c0 <HAL_GPIO_Init+0x338>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01f      	beq.n	80028c6 <HAL_GPIO_Init+0x23e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4e      	ldr	r2, [pc, #312]	; (80029c4 <HAL_GPIO_Init+0x33c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x23a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4d      	ldr	r2, [pc, #308]	; (80029c8 <HAL_GPIO_Init+0x340>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x236>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a4c      	ldr	r2, [pc, #304]	; (80029cc <HAL_GPIO_Init+0x344>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x232>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a4b      	ldr	r2, [pc, #300]	; (80029d0 <HAL_GPIO_Init+0x348>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x22e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a4a      	ldr	r2, [pc, #296]	; (80029d4 <HAL_GPIO_Init+0x34c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x22a>
 80028ae:	2306      	movs	r3, #6
 80028b0:	e00c      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00a      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028b6:	2305      	movs	r3, #5
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028ba:	2304      	movs	r3, #4
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x244>
 80028ca:	2300      	movs	r3, #0
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_GPIO_Init+0x334>)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_GPIO_Init+0x350>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800293e:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_GPIO_Init+0x350>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_GPIO_Init+0x350>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f ae78 	bne.w	8002698 <HAL_GPIO_Init+0x10>
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	48000400 	.word	0x48000400
 80029c4:	48000800 	.word	0x48000800
 80029c8:	48000c00 	.word	0x48000c00
 80029cc:	48001000 	.word	0x48001000
 80029d0:	48001400 	.word	0x48001400
 80029d4:	48001800 	.word	0x48001800
 80029d8:	40010400 	.word	0x40010400

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a22:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f806 	bl	8002a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40010400 	.word	0x40010400

08002a3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e081      	b.n	8002b68 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe ff8f 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e006      	b.n	8002ada <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ad8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d104      	bne.n	8002aec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69d9      	ldr	r1, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	817b      	strh	r3, [r7, #10]
 8002b80:	4613      	mov	r3, r2
 8002b82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	f040 80da 	bne.w	8002d46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2C_Master_Transmit+0x30>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0d3      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba8:	f7ff fb20 	bl	80021ec <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2319      	movs	r3, #25
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9f7 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0be      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2221      	movs	r2, #33	; 0x21
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2bff      	cmp	r3, #255	; 0xff
 8002bfa:	d90e      	bls.n	8002c1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	8979      	ldrh	r1, [r7, #10]
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fb74 	bl	8003300 <I2C_TransferConfig>
 8002c18:	e06c      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fb63 	bl	8003300 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c3a:	e05b      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f9f4 	bl	800302e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e07b      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d034      	beq.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d130      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f986 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04d      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2bff      	cmp	r3, #255	; 0xff
 8002cb4:	d90e      	bls.n	8002cd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fb17 	bl	8003300 <I2C_TransferConfig>
 8002cd2:	e00f      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb06 	bl	8003300 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d19e      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f9d3 	bl	80030ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e01a      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2220      	movs	r2, #32
 8002d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d26:	400b      	ands	r3, r1
 8002d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	80002000 	.word	0x80002000
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 80f1 	bne.w	8002f5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	d101      	bne.n	8002d8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e0e7      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_I2C_IsDeviceReady+0x44>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0e0      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_IsDeviceReady+0x72>
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dc8:	e004      	b.n	8002dd4 <HAL_I2C_IsDeviceReady+0x7c>
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002dda:	f7ff fa07 	bl	80021ec <HAL_GetTick>
 8002dde:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e0c:	e034      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d01a      	beq.n	8002e4c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7ff f9e9 	bl	80021ec <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <HAL_I2C_IsDeviceReady+0xd4>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10f      	bne.n	8002e4c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e088      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_I2C_IsDeviceReady+0x12c>
 8002e7e:	7fbb      	ldrb	r3, [r7, #30]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0c4      	beq.n	8002e0e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d01a      	beq.n	8002ec8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2120      	movs	r1, #32
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f886 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e058      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e04a      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f86b 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e03d      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d118      	bne.n	8002f2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2120      	movs	r1, #32
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f84a 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e01c      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	f63f af3b 	bhi.w	8002db2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d103      	bne.n	8002f84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2200      	movs	r2, #0
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d007      	beq.n	8002fa2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	619a      	str	r2, [r3, #24]
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbe:	e022      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d01e      	beq.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7ff f910 	bl	80021ec <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d302      	bcc.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d113      	bne.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	429a      	cmp	r2, r3
 8003022:	d0cd      	beq.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800303a:	e02c      	b.n	8003096 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f871 	bl	8003128 <I2C_IsErrorOccurred>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02a      	b.n	80030a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d01e      	beq.n	8003096 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7ff f8c8 	bl	80021ec <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d113      	bne.n	8003096 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d1cb      	bne.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ba:	e028      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f831 	bl	8003128 <I2C_IsErrorOccurred>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e026      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d0:	f7ff f88c 	bl	80021ec <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d113      	bne.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e007      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d1cf      	bne.n	80030bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d075      	beq.n	8003240 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2210      	movs	r2, #16
 800315a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800315c:	e056      	b.n	800320c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d052      	beq.n	800320c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7ff f841 	bl	80021ec <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_IsErrorOccurred+0x54>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d147      	bne.n	800320c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800318e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319e:	d12e      	bne.n	80031fe <I2C_IsErrorOccurred+0xd6>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a6:	d02a      	beq.n	80031fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d027      	beq.n	80031fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031be:	f7ff f815 	bl	80021ec <HAL_GetTick>
 80031c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c4:	e01b      	b.n	80031fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031c6:	f7ff f811 	bl	80021ec <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b19      	cmp	r3, #25
 80031d2:	d914      	bls.n	80031fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d1dc      	bne.n	80031c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b20      	cmp	r3, #32
 8003218:	d003      	beq.n	8003222 <I2C_IsErrorOccurred+0xfa>
 800321a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800321e:	2b00      	cmp	r3, #0
 8003220:	d09d      	beq.n	800315e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2220      	movs	r2, #32
 8003230:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80032ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01c      	beq.n	80032f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7ff fe55 	bl	8002f66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <I2C_IsErrorOccurred+0x1d4>)
 80032c8:	400b      	ands	r3, r1
 80032ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	fe00e800 	.word	0xfe00e800

08003300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	817b      	strh	r3, [r7, #10]
 800330e:	4613      	mov	r3, r2
 8003310:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003318:	7a7b      	ldrb	r3, [r7, #9]
 800331a:	041b      	lsls	r3, r3, #16
 800331c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003320:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	4313      	orrs	r3, r2
 800332a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800332e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	0d5b      	lsrs	r3, r3, #21
 800333a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <I2C_TransferConfig+0x60>)
 8003340:	430b      	orrs	r3, r1
 8003342:	43db      	mvns	r3, r3
 8003344:	ea02 0103 	and.w	r1, r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	03ff63ff 	.word	0x03ff63ff

08003364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	d138      	bne.n	80033ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003384:	2302      	movs	r3, #2
 8003386:	e032      	b.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e000      	b.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d139      	bne.n	8003484 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800341a:	2302      	movs	r3, #2
 800341c:	e033      	b.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2224      	movs	r2, #36	; 0x24
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800344c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003494:	b08f      	sub	sp, #60	; 0x3c
 8003496:	af0a      	add	r7, sp, #40	; 0x28
 8003498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e116      	b.n	80036d2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fe fc3c 	bl	8001d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2203      	movs	r2, #3
 80034c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 fa6d 	bl	80059c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	687e      	ldr	r6, [r7, #4]
 80034f0:	466d      	mov	r5, sp
 80034f2:	f106 0410 	add.w	r4, r6, #16
 80034f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003502:	e885 0003 	stmia.w	r5, {r0, r1}
 8003506:	1d33      	adds	r3, r6, #4
 8003508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f002 fa2d 	bl	800596a <USB_CoreInit>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0d7      	b.n	80036d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f002 fa5b 	bl	80059e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	e04a      	b.n	80035ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	333d      	adds	r3, #61	; 0x3d
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	333c      	adds	r3, #60	; 0x3c
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	b298      	uxth	r0, r3
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3342      	adds	r3, #66	; 0x42
 8003570:	4602      	mov	r2, r0
 8003572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003574:	7bfa      	ldrb	r2, [r7, #15]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	333f      	adds	r3, #63	; 0x3f
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	; 0x44
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3348      	adds	r3, #72	; 0x48
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3350      	adds	r3, #80	; 0x50
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	3301      	adds	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3af      	bcc.n	8003534 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e044      	b.n	8003664 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	3301      	adds	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d3b5      	bcc.n	80035da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	687e      	ldr	r6, [r7, #4]
 8003676:	466d      	mov	r5, sp
 8003678:	f106 0410 	add.w	r4, r6, #16
 800367c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003688:	e885 0003 	stmia.w	r5, {r0, r1}
 800368c:	1d33      	adds	r3, r6, #4
 800368e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f002 f9f3 	bl	8005a7c <USB_DevInit>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e014      	b.n	80036d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f80a 	bl	80036da <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 fb9b 	bl	8005e06 <USB_DevDisconnect>

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370c:	f043 0303 	orr.w	r3, r3, #3
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000

08003744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <HAL_PWREx_GetVoltageRange+0x18>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000

08003760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376e:	d130      	bne.n	80037d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003770:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d038      	beq.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2232      	movs	r2, #50	; 0x32
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	3301      	adds	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a4:	e002      	b.n	80037ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d102      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f2      	bne.n	80037a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037cc:	d110      	bne.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e00f      	b.n	80037f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037de:	d007      	beq.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007000 	.word	0x40007000
 8003804:	20000000 	.word	0x20000000
 8003808:	431bde83 	.word	0x431bde83

0800380c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381a:	6053      	str	r3, [r2, #4]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40007000 	.word	0x40007000

0800382c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003834:	f7fe fcda 	bl	80021ec <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e063      	b.n	800390c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe f943 	bl	8001ae4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800385e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f858 	bl	8003918 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	021a      	lsls	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	2120      	movs	r1, #32
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f850 	bl	8003934 <QSPI_WaitFlagStateUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003898:	7afb      	ldrb	r3, [r7, #11]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d131      	bne.n	8003902 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038a8:	f023 0310 	bic.w	r3, r3, #16
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6852      	ldr	r2, [r2, #4]
 80038b0:	0611      	lsls	r1, r2, #24
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68d2      	ldr	r2, [r2, #12]
 80038b6:	4311      	orrs	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_QSPI_Init+0xe8>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6912      	ldr	r2, [r2, #16]
 80038ce:	0411      	lsls	r1, r2, #16
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6952      	ldr	r2, [r2, #20]
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6992      	ldr	r2, [r2, #24]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800390a:	7afb      	ldrb	r3, [r7, #11]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	ffe0f8fe 	.word	0xffe0f8fe

08003918 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003944:	e01a      	b.n	800397c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d016      	beq.n	800397c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe fc4d 	bl	80021ec <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2204      	movs	r2, #4
 8003968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e00e      	b.n	800399a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d1d6      	bne.n	8003946 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e3d4      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b6:	4ba1      	ldr	r3, [pc, #644]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c0:	4b9e      	ldr	r3, [pc, #632]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80e4 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_RCC_OscConfig+0x4a>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	f040 808b 	bne.w	8003afc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f040 8087 	bne.w	8003afc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ee:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x62>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e3ac      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	4b8c      	ldr	r3, [pc, #560]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <HAL_RCC_OscConfig+0x7c>
 8003a16:	4b89      	ldr	r3, [pc, #548]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1e:	e005      	b.n	8003a2c <HAL_RCC_OscConfig+0x88>
 8003a20:	4b86      	ldr	r3, [pc, #536]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d223      	bcs.n	8003a78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fd41 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e38d      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a44:	4b7d      	ldr	r3, [pc, #500]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7c      	ldr	r2, [pc, #496]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a4a:	f043 0308 	orr.w	r3, r3, #8
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b7a      	ldr	r3, [pc, #488]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4977      	ldr	r1, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a62:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4972      	ldr	r1, [pc, #456]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
 8003a76:	e025      	b.n	8003ac4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a78:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6f      	ldr	r2, [pc, #444]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	496a      	ldr	r1, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a96:	4b69      	ldr	r3, [pc, #420]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	4965      	ldr	r1, [pc, #404]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fd01 	bl	80044bc <RCC_SetFlashLatencyFromMSIRange>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e34d      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac4:	f000 fc36 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b5c      	ldr	r3, [pc, #368]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	495a      	ldr	r1, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x29c>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	4a58      	ldr	r2, [pc, #352]	; (8003c44 <HAL_RCC_OscConfig+0x2a0>)
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ae4:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_OscConfig+0x2a4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fb2f 	bl	800214c <HAL_InitTick>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d052      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	e331      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d032      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b04:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a4c      	ldr	r2, [pc, #304]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fb6c 	bl	80021ec <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b18:	f7fe fb68 	bl	80021ec <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e31a      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b2a:	4b44      	ldr	r3, [pc, #272]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	493b      	ldr	r1, [pc, #236]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	4936      	ldr	r1, [pc, #216]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
 8003b68:	e01a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b76:	f7fe fb39 	bl	80021ec <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7e:	f7fe fb35 	bl	80021ec <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e2e7      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b90:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x1da>
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d074      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x21a>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d10e      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d064      	beq.n	8003c94 <HAL_RCC_OscConfig+0x2f0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d160      	bne.n	8003c94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e2c4      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x24a>
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e01d      	b.n	8003c2a <HAL_RCC_OscConfig+0x286>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x26e>
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x286>
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x298>)
 8003c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fadb 	bl	80021ec <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c38:	e011      	b.n	8003c5e <HAL_RCC_OscConfig+0x2ba>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	08008c80 	.word	0x08008c80
 8003c44:	20000000 	.word	0x20000000
 8003c48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe face 	bl	80021ec <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e280      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5e:	4baf      	ldr	r3, [pc, #700]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x2a8>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fabe 	bl	80021ec <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe faba 	bl	80021ec <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e26c      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c86:	4ba5      	ldr	r3, [pc, #660]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2d0>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d060      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x310>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d119      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d116      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	4b99      	ldr	r3, [pc, #612]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_OscConfig+0x328>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e249      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b93      	ldr	r3, [pc, #588]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	4990      	ldr	r1, [pc, #576]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce0:	e040      	b.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d023      	beq.n	8003d32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cea:	4b8c      	ldr	r3, [pc, #560]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a8b      	ldr	r2, [pc, #556]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fa79 	bl	80021ec <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe fa75 	bl	80021ec <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e227      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d10:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	497c      	ldr	r1, [pc, #496]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
 8003d30:	e018      	b.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d32:	4b7a      	ldr	r3, [pc, #488]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a79      	ldr	r2, [pc, #484]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fa55 	bl	80021ec <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe fa51 	bl	80021ec <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e203      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d58:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03c      	beq.n	8003dea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d78:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7e:	4a67      	ldr	r2, [pc, #412]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe fa30 	bl	80021ec <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe fa2c 	bl	80021ec <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1de      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da2:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <HAL_RCC_OscConfig+0x3ec>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db2:	4b5a      	ldr	r3, [pc, #360]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fa13 	bl	80021ec <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dca:	f7fe fa0f 	bl	80021ec <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1c1      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ddc:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ef      	bne.n	8003dca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80a6 	beq.w	8003f44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dfc:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10d      	bne.n	8003e24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e08:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	4a43      	ldr	r2, [pc, #268]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e12:	6593      	str	r3, [r2, #88]	; 0x58
 8003e14:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e24:	4b3e      	ldr	r3, [pc, #248]	; (8003f20 <HAL_RCC_OscConfig+0x57c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d118      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e30:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCC_OscConfig+0x57c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3a      	ldr	r2, [pc, #232]	; (8003f20 <HAL_RCC_OscConfig+0x57c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe f9d6 	bl	80021ec <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e44:	f7fe f9d2 	bl	80021ec <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e184      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e56:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <HAL_RCC_OscConfig+0x57c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4d8>
 8003e6a:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7a:	e024      	b.n	8003ec6 <HAL_RCC_OscConfig+0x522>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d110      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x502>
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea4:	e00f      	b.n	8003ec6 <HAL_RCC_OscConfig+0x522>
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003ebe:	f023 0304 	bic.w	r3, r3, #4
 8003ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe f98d 	bl	80021ec <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fe f989 	bl	80021ec <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e139      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x578>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ed      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x532>
 8003efa:	e01a      	b.n	8003f32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe f976 	bl	80021ec <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f02:	e00f      	b.n	8003f24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe f972 	bl	80021ec <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d906      	bls.n	8003f24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e122      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f24:	4b90      	ldr	r3, [pc, #576]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e8      	bne.n	8003f04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f32:	7ffb      	ldrb	r3, [r7, #31]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	4a8a      	ldr	r2, [pc, #552]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8108 	beq.w	800415e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	f040 80d0 	bne.w	80040f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f58:	4b83      	ldr	r3, [pc, #524]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0203 	and.w	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d130      	bne.n	8003fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	3b01      	subs	r3, #1
 8003f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d127      	bne.n	8003fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d11f      	bne.n	8003fce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f98:	2a07      	cmp	r2, #7
 8003f9a:	bf14      	ite	ne
 8003f9c:	2201      	movne	r2, #1
 8003f9e:	2200      	moveq	r2, #0
 8003fa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d113      	bne.n	8003fce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d109      	bne.n	8003fce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d06e      	beq.n	80040ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d069      	beq.n	80040a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd4:	4b64      	ldr	r3, [pc, #400]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fe0:	4b61      	ldr	r3, [pc, #388]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b7      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b5d      	ldr	r3, [pc, #372]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5c      	ldr	r2, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8003ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ffc:	f7fe f8f6 	bl	80021ec <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7fe f8f2 	bl	80021ec <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0a4      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004016:	4b54      	ldr	r3, [pc, #336]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004022:	4b51      	ldr	r3, [pc, #324]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_RCC_OscConfig+0x7c8>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004032:	3a01      	subs	r2, #1
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	4311      	orrs	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800403c:	0212      	lsls	r2, r2, #8
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004044:	0852      	lsrs	r2, r2, #1
 8004046:	3a01      	subs	r2, #1
 8004048:	0552      	lsls	r2, r2, #21
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004050:	0852      	lsrs	r2, r2, #1
 8004052:	3a01      	subs	r2, #1
 8004054:	0652      	lsls	r2, r2, #25
 8004056:	4311      	orrs	r1, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800405c:	0912      	lsrs	r2, r2, #4
 800405e:	0452      	lsls	r2, r2, #17
 8004060:	430a      	orrs	r2, r1
 8004062:	4941      	ldr	r1, [pc, #260]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004068:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3e      	ldr	r2, [pc, #248]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004074:	4b3c      	ldr	r3, [pc, #240]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004080:	f7fe f8b4 	bl	80021ec <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe f8b0 	bl	80021ec <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e062      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409a:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a6:	e05a      	b.n	800415e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e059      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ac:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d152      	bne.n	800415e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c4:	4b28      	ldr	r3, [pc, #160]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a27      	ldr	r2, [pc, #156]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d0:	f7fe f88c 	bl	80021ec <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe f888 	bl	80021ec <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e03a      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x734>
 80040f6:	e032      	b.n	800415e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d02d      	beq.n	800415a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004108:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a13      	ldr	r2, [pc, #76]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800411c:	f023 0303 	bic.w	r3, r3, #3
 8004120:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 8004128:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800412c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004130:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe f85b 	bl	80021ec <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe f857 	bl	80021ec <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e009      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x7c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x796>
 8004158:	e001      	b.n	800415e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	f99d808c 	.word	0xf99d808c

08004170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0c8      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004184:	4b66      	ldr	r3, [pc, #408]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d910      	bls.n	80041b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 0207 	bic.w	r2, r3, #7
 800419a:	4961      	ldr	r1, [pc, #388]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0b0      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d04c      	beq.n	800425a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c8:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d121      	bne.n	8004218 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e09e      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e0:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d115      	bne.n	8004218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e092      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f8:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e086      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e07e      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 0203 	bic.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	493f      	ldr	r1, [pc, #252]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fd ffdf 	bl	80021ec <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	e00a      	b.n	8004248 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004232:	f7fd ffdb 	bl	80021ec <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e066      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 020c 	and.w	r2, r3, #12
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	429a      	cmp	r2, r3
 8004258:	d1eb      	bne.n	8004232 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004266:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	492c      	ldr	r1, [pc, #176]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004278:	4b29      	ldr	r3, [pc, #164]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d210      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b26      	ldr	r3, [pc, #152]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	4924      	ldr	r1, [pc, #144]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <HAL_RCC_ClockConfig+0x1b0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e036      	b.n	8004316 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4918      	ldr	r1, [pc, #96]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4910      	ldr	r1, [pc, #64]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e6:	f000 f825 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCC_ClockConfig+0x1b4>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490c      	ldr	r1, [pc, #48]	; (8004328 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd ff1e 	bl	800214c <HAL_InitTick>
 8004310:	4603      	mov	r3, r0
 8004312:	72fb      	strb	r3, [r7, #11]

  return status;
 8004314:	7afb      	ldrb	r3, [r7, #11]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40022000 	.word	0x40022000
 8004324:	40021000 	.word	0x40021000
 8004328:	08008c80 	.word	0x08008c80
 800432c:	20000000 	.word	0x20000000
 8004330:	20000004 	.word	0x20000004

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x34>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d121      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11e      	bne.n	80043a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004368:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d107      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004374:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e005      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	e004      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d134      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0xa6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0xac>
 80043d8:	e005      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_RCC_GetSysClockFreq+0x110>)
 80043dc:	617b      	str	r3, [r7, #20]
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	617b      	str	r3, [r7, #20]
      break;
 80043ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	3301      	adds	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	fb02 f203 	mul.w	r2, r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0e5b      	lsrs	r3, r3, #25
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	3301      	adds	r3, #1
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800442c:	69bb      	ldr	r3, [r7, #24]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	08008c98 	.word	0x08008c98
 8004444:	00f42400 	.word	0x00f42400
 8004448:	007a1200 	.word	0x007a1200

0800444c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCC_GetHCLKFreq+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000

08004464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004468:	f7ff fff0 	bl	800444c <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCC_GetPCLK1Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	08008c90 	.word	0x08008c90

08004490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004494:	f7ff ffda 	bl	800444c <HAL_RCC_GetHCLKFreq>
 8004498:	4602      	mov	r2, r0
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	0adb      	lsrs	r3, r3, #11
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	4904      	ldr	r1, [pc, #16]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044a6:	5ccb      	ldrb	r3, [r1, r3]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	08008c90 	.word	0x08008c90

080044bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044c8:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d4:	f7ff f936 	bl	8003744 <HAL_PWREx_GetVoltageRange>
 80044d8:	6178      	str	r0, [r7, #20]
 80044da:	e014      	b.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	4a24      	ldr	r2, [pc, #144]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	; 0x58
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044f4:	f7ff f926 	bl	8003744 <HAL_PWREx_GetVoltageRange>
 80044f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d10b      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b80      	cmp	r3, #128	; 0x80
 8004512:	d919      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2ba0      	cmp	r3, #160	; 0xa0
 8004518:	d902      	bls.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e013      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004520:	2301      	movs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e010      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d902      	bls.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800452c:	2303      	movs	r3, #3
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e00a      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d102      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004538:	2302      	movs	r3, #2
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e004      	b.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b70      	cmp	r3, #112	; 0x70
 8004542:	d101      	bne.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 0207 	bic.w	r2, r3, #7
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	40022000 	.word	0x40022000

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004584:	2300      	movs	r3, #0
 8004586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004588:	2300      	movs	r3, #0
 800458a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004594:	2b00      	cmp	r3, #0
 8004596:	d041      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a0:	d02a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045a6:	d824      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ac:	d008      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045b2:	d81e      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045bc:	d010      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045be:	e018      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c0:	4b86      	ldr	r3, [pc, #536]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a85      	ldr	r2, [pc, #532]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045cc:	e015      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 facb 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045de:	e00c      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3320      	adds	r3, #32
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fbb6 	bl	8004d58 <RCCEx_PLLSAI2_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	74fb      	strb	r3, [r7, #19]
      break;
 80045f6:	e000      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004600:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800460e:	4973      	ldr	r1, [pc, #460]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004616:	e001      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d041      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004630:	d02a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004636:	d824      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800463c:	d008      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800463e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004642:	d81e      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800464c:	d010      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800464e:	e018      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a61      	ldr	r2, [pc, #388]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465c:	e015      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3304      	adds	r3, #4
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fa83 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800466e:	e00c      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3320      	adds	r3, #32
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb6e 	bl	8004d58 <RCCEx_PLLSAI2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	74fb      	strb	r3, [r7, #19]
      break;
 8004686:	e000      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004690:	4b52      	ldr	r3, [pc, #328]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800469e:	494f      	ldr	r1, [pc, #316]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046a6:	e001      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a0 	beq.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046be:	4b47      	ldr	r3, [pc, #284]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	4a40      	ldr	r2, [pc, #256]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046de:	6593      	str	r3, [r2, #88]	; 0x58
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ec:	2301      	movs	r3, #1
 80046ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f0:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046fc:	f7fd fd76 	bl	80021ec <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004702:	e009      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004704:	f7fd fd72 	bl	80021ec <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	74fb      	strb	r3, [r7, #19]
        break;
 8004716:	e005      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ef      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d15c      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01f      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d019      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004748:	4b24      	ldr	r3, [pc, #144]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	4a20      	ldr	r2, [pc, #128]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fd fd31 	bl	80021ec <HAL_GetTick>
 800478a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478c:	e00b      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd fd2d 	bl	80021ec <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d902      	bls.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	74fb      	strb	r3, [r7, #19]
            break;
 80047a4:	e006      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ec      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ca:	4904      	ldr	r1, [pc, #16]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047d2:	e009      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
 80047d8:	e006      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e8:	7c7b      	ldrb	r3, [r7, #17]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ee:	4b9e      	ldr	r3, [pc, #632]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a9d      	ldr	r2, [pc, #628]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004806:	4b98      	ldr	r3, [pc, #608]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f023 0203 	bic.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	4994      	ldr	r1, [pc, #592]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004828:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f023 020c 	bic.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	498c      	ldr	r1, [pc, #560]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800484a:	4b87      	ldr	r3, [pc, #540]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	4983      	ldr	r1, [pc, #524]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486c:	4b7e      	ldr	r3, [pc, #504]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	497b      	ldr	r1, [pc, #492]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800488e:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489c:	4972      	ldr	r1, [pc, #456]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048b0:	4b6d      	ldr	r3, [pc, #436]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	496a      	ldr	r1, [pc, #424]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048d2:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	4961      	ldr	r1, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048f4:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004902:	4959      	ldr	r1, [pc, #356]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004916:	4b54      	ldr	r3, [pc, #336]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004924:	4950      	ldr	r1, [pc, #320]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	4948      	ldr	r1, [pc, #288]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800495a:	4b43      	ldr	r3, [pc, #268]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	493f      	ldr	r1, [pc, #252]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d028      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800497c:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498a:	4937      	ldr	r1, [pc, #220]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800499a:	d106      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a31      	ldr	r2, [pc, #196]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
 80049a8:	e011      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b2:	d10c      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	2101      	movs	r1, #1
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f8d8 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d028      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	491f      	ldr	r1, [pc, #124]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f8:	d106      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a04:	60d3      	str	r3, [r2, #12]
 8004a06:	e011      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	2101      	movs	r1, #1
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f8a9 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02b      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	4908      	ldr	r1, [pc, #32]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a56:	d109      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	4a02      	ldr	r2, [pc, #8]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a62:	60d3      	str	r3, [r2, #12]
 8004a64:	e014      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f877 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d02f      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aaa:	4928      	ldr	r1, [pc, #160]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aba:	d10d      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f854 	bl	8004b70 <RCCEx_PLLSAI1_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d014      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	74bb      	strb	r3, [r7, #18]
 8004ad6:	e011      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3320      	adds	r3, #32
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f935 	bl	8004d58 <RCCEx_PLLSAI2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b16:	490d      	ldr	r1, [pc, #52]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	4904      	ldr	r1, [pc, #16]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b42:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000

08004b50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000

08004b70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b7e:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b8a:	4b72      	ldr	r3, [pc, #456]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0203 	and.w	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d10d      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d047      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
 8004bba:	e044      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d018      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x86>
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d825      	bhi.n	8004c14 <RCCEx_PLLSAI1_Config+0xa4>
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d002      	beq.n	8004bd2 <RCCEx_PLLSAI1_Config+0x62>
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d009      	beq.n	8004be4 <RCCEx_PLLSAI1_Config+0x74>
 8004bd0:	e020      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bd2:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d11d      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be2:	e01a      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be4:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf4:	e013      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bf6:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10f      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c02:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c12:	e006      	b.n	8004c22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      break;
 8004c18:	e004      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e002      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10d      	bne.n	8004c46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c2a:	4b4a      	ldr	r3, [pc, #296]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	4944      	ldr	r1, [pc, #272]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d17d      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fd fac8 	bl	80021ec <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5e:	e009      	b.n	8004c74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c60:	f7fd fac4 	bl	80021ec <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d902      	bls.n	8004c74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	73fb      	strb	r3, [r7, #15]
        break;
 8004c72:	e005      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ef      	bne.n	8004c60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d160      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6892      	ldr	r2, [r2, #8]
 8004c9c:	0211      	lsls	r1, r2, #8
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68d2      	ldr	r2, [r2, #12]
 8004ca2:	0912      	lsrs	r2, r2, #4
 8004ca4:	0452      	lsls	r2, r2, #17
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	492a      	ldr	r1, [pc, #168]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	610b      	str	r3, [r1, #16]
 8004cae:	e027      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d112      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6892      	ldr	r2, [r2, #8]
 8004cc6:	0211      	lsls	r1, r2, #8
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6912      	ldr	r2, [r2, #16]
 8004ccc:	0852      	lsrs	r2, r2, #1
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	0552      	lsls	r2, r2, #21
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	491f      	ldr	r1, [pc, #124]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]
 8004cda:	e011      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6892      	ldr	r2, [r2, #8]
 8004cec:	0211      	lsls	r1, r2, #8
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6952      	ldr	r2, [r2, #20]
 8004cf2:	0852      	lsrs	r2, r2, #1
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	0652      	lsls	r2, r2, #25
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	4916      	ldr	r1, [pc, #88]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd fa6e 	bl	80021ec <HAL_GetTick>
 8004d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d12:	e009      	b.n	8004d28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d14:	f7fd fa6a 	bl	80021ec <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d902      	bls.n	8004d28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	73fb      	strb	r3, [r7, #15]
          break;
 8004d26:	e005      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	4904      	ldr	r1, [pc, #16]	; (8004d54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000

08004d58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d66:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d72:	4b67      	ldr	r3, [pc, #412]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0203 	and.w	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d10d      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
       ||
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d8a:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
       ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d047      	beq.n	8004e2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	e044      	b.n	8004e2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d018      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x86>
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d825      	bhi.n	8004dfc <RCCEx_PLLSAI2_Config+0xa4>
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d002      	beq.n	8004dba <RCCEx_PLLSAI2_Config+0x62>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d009      	beq.n	8004dcc <RCCEx_PLLSAI2_Config+0x74>
 8004db8:	e020      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dba:	4b55      	ldr	r3, [pc, #340]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11d      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dca:	e01a      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ddc:	e013      	b.n	8004e06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dde:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dea:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dfa:	e006      	b.n	8004e0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004e00:	e004      	b.n	8004e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e02:	bf00      	nop
 8004e04:	e002      	b.n	8004e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10d      	bne.n	8004e2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	430b      	orrs	r3, r1
 8004e28:	4939      	ldr	r1, [pc, #228]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d167      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e40:	f7fd f9d4 	bl	80021ec <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e46:	e009      	b.n	8004e5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e48:	f7fd f9d0 	bl	80021ec <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	73fb      	strb	r3, [r7, #15]
        break;
 8004e5a:	e005      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ef      	bne.n	8004e48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d14a      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d111      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e74:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6892      	ldr	r2, [r2, #8]
 8004e84:	0211      	lsls	r1, r2, #8
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68d2      	ldr	r2, [r2, #12]
 8004e8a:	0912      	lsrs	r2, r2, #4
 8004e8c:	0452      	lsls	r2, r2, #17
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	491f      	ldr	r1, [pc, #124]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	614b      	str	r3, [r1, #20]
 8004e96:	e011      	b.n	8004ebc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	0211      	lsls	r1, r2, #8
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6912      	ldr	r2, [r2, #16]
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0652      	lsls	r2, r2, #25
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	4916      	ldr	r1, [pc, #88]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ebc:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd f990 	bl	80021ec <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ece:	e009      	b.n	8004ee4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ed0:	f7fd f98c 	bl	80021ec <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee2:	e005      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	4904      	ldr	r1, [pc, #16]	; (8004f10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e095      	b.n	8005052 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	61da      	str	r2, [r3, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fc fe00 	bl	8001b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f8c:	d902      	bls.n	8004f94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e002      	b.n	8004f9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fa2:	d007      	beq.n	8004fb4 <HAL_SPI_Init+0xa0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	ea42 0103 	orr.w	r1, r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0204 	and.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005030:	ea42 0103 	orr.w	r1, r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e040      	b.n	80050ee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fc fdb9 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2224      	movs	r2, #36	; 0x24
 8005086:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f82d 	bl	80050f8 <UART_SetConfig>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e022      	b.n	80050ee <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 faab 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb32 	bl	8005750 <UART_CheckIdleState>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	4313      	orrs	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4bad      	ldr	r3, [pc, #692]	; (80053d8 <UART_SetConfig+0x2e0>)
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	69f9      	ldr	r1, [r7, #28]
 800512c:	430b      	orrs	r3, r1
 800512e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4aa2      	ldr	r2, [pc, #648]	; (80053dc <UART_SetConfig+0x2e4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	4313      	orrs	r3, r2
 800515e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a99      	ldr	r2, [pc, #612]	; (80053e0 <UART_SetConfig+0x2e8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d121      	bne.n	80051c2 <UART_SetConfig+0xca>
 800517e:	4b99      	ldr	r3, [pc, #612]	; (80053e4 <UART_SetConfig+0x2ec>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b03      	cmp	r3, #3
 800518a:	d817      	bhi.n	80051bc <UART_SetConfig+0xc4>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x9c>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051b1 	.word	0x080051b1
 800519c:	080051ab 	.word	0x080051ab
 80051a0:	080051b7 	.word	0x080051b7
 80051a4:	2301      	movs	r3, #1
 80051a6:	76fb      	strb	r3, [r7, #27]
 80051a8:	e0e7      	b.n	800537a <UART_SetConfig+0x282>
 80051aa:	2302      	movs	r3, #2
 80051ac:	76fb      	strb	r3, [r7, #27]
 80051ae:	e0e4      	b.n	800537a <UART_SetConfig+0x282>
 80051b0:	2304      	movs	r3, #4
 80051b2:	76fb      	strb	r3, [r7, #27]
 80051b4:	e0e1      	b.n	800537a <UART_SetConfig+0x282>
 80051b6:	2308      	movs	r3, #8
 80051b8:	76fb      	strb	r3, [r7, #27]
 80051ba:	e0de      	b.n	800537a <UART_SetConfig+0x282>
 80051bc:	2310      	movs	r3, #16
 80051be:	76fb      	strb	r3, [r7, #27]
 80051c0:	e0db      	b.n	800537a <UART_SetConfig+0x282>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a88      	ldr	r2, [pc, #544]	; (80053e8 <UART_SetConfig+0x2f0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d132      	bne.n	8005232 <UART_SetConfig+0x13a>
 80051cc:	4b85      	ldr	r3, [pc, #532]	; (80053e4 <UART_SetConfig+0x2ec>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d828      	bhi.n	800522c <UART_SetConfig+0x134>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0xe8>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005215 	.word	0x08005215
 80051e4:	0800522d 	.word	0x0800522d
 80051e8:	0800522d 	.word	0x0800522d
 80051ec:	0800522d 	.word	0x0800522d
 80051f0:	08005221 	.word	0x08005221
 80051f4:	0800522d 	.word	0x0800522d
 80051f8:	0800522d 	.word	0x0800522d
 80051fc:	0800522d 	.word	0x0800522d
 8005200:	0800521b 	.word	0x0800521b
 8005204:	0800522d 	.word	0x0800522d
 8005208:	0800522d 	.word	0x0800522d
 800520c:	0800522d 	.word	0x0800522d
 8005210:	08005227 	.word	0x08005227
 8005214:	2300      	movs	r3, #0
 8005216:	76fb      	strb	r3, [r7, #27]
 8005218:	e0af      	b.n	800537a <UART_SetConfig+0x282>
 800521a:	2302      	movs	r3, #2
 800521c:	76fb      	strb	r3, [r7, #27]
 800521e:	e0ac      	b.n	800537a <UART_SetConfig+0x282>
 8005220:	2304      	movs	r3, #4
 8005222:	76fb      	strb	r3, [r7, #27]
 8005224:	e0a9      	b.n	800537a <UART_SetConfig+0x282>
 8005226:	2308      	movs	r3, #8
 8005228:	76fb      	strb	r3, [r7, #27]
 800522a:	e0a6      	b.n	800537a <UART_SetConfig+0x282>
 800522c:	2310      	movs	r3, #16
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e0a3      	b.n	800537a <UART_SetConfig+0x282>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6d      	ldr	r2, [pc, #436]	; (80053ec <UART_SetConfig+0x2f4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d120      	bne.n	800527e <UART_SetConfig+0x186>
 800523c:	4b69      	ldr	r3, [pc, #420]	; (80053e4 <UART_SetConfig+0x2ec>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005246:	2b30      	cmp	r3, #48	; 0x30
 8005248:	d013      	beq.n	8005272 <UART_SetConfig+0x17a>
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d814      	bhi.n	8005278 <UART_SetConfig+0x180>
 800524e:	2b20      	cmp	r3, #32
 8005250:	d009      	beq.n	8005266 <UART_SetConfig+0x16e>
 8005252:	2b20      	cmp	r3, #32
 8005254:	d810      	bhi.n	8005278 <UART_SetConfig+0x180>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <UART_SetConfig+0x168>
 800525a:	2b10      	cmp	r3, #16
 800525c:	d006      	beq.n	800526c <UART_SetConfig+0x174>
 800525e:	e00b      	b.n	8005278 <UART_SetConfig+0x180>
 8005260:	2300      	movs	r3, #0
 8005262:	76fb      	strb	r3, [r7, #27]
 8005264:	e089      	b.n	800537a <UART_SetConfig+0x282>
 8005266:	2302      	movs	r3, #2
 8005268:	76fb      	strb	r3, [r7, #27]
 800526a:	e086      	b.n	800537a <UART_SetConfig+0x282>
 800526c:	2304      	movs	r3, #4
 800526e:	76fb      	strb	r3, [r7, #27]
 8005270:	e083      	b.n	800537a <UART_SetConfig+0x282>
 8005272:	2308      	movs	r3, #8
 8005274:	76fb      	strb	r3, [r7, #27]
 8005276:	e080      	b.n	800537a <UART_SetConfig+0x282>
 8005278:	2310      	movs	r3, #16
 800527a:	76fb      	strb	r3, [r7, #27]
 800527c:	e07d      	b.n	800537a <UART_SetConfig+0x282>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a5b      	ldr	r2, [pc, #364]	; (80053f0 <UART_SetConfig+0x2f8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d120      	bne.n	80052ca <UART_SetConfig+0x1d2>
 8005288:	4b56      	ldr	r3, [pc, #344]	; (80053e4 <UART_SetConfig+0x2ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005292:	2bc0      	cmp	r3, #192	; 0xc0
 8005294:	d013      	beq.n	80052be <UART_SetConfig+0x1c6>
 8005296:	2bc0      	cmp	r3, #192	; 0xc0
 8005298:	d814      	bhi.n	80052c4 <UART_SetConfig+0x1cc>
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d009      	beq.n	80052b2 <UART_SetConfig+0x1ba>
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d810      	bhi.n	80052c4 <UART_SetConfig+0x1cc>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <UART_SetConfig+0x1b4>
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d006      	beq.n	80052b8 <UART_SetConfig+0x1c0>
 80052aa:	e00b      	b.n	80052c4 <UART_SetConfig+0x1cc>
 80052ac:	2300      	movs	r3, #0
 80052ae:	76fb      	strb	r3, [r7, #27]
 80052b0:	e063      	b.n	800537a <UART_SetConfig+0x282>
 80052b2:	2302      	movs	r3, #2
 80052b4:	76fb      	strb	r3, [r7, #27]
 80052b6:	e060      	b.n	800537a <UART_SetConfig+0x282>
 80052b8:	2304      	movs	r3, #4
 80052ba:	76fb      	strb	r3, [r7, #27]
 80052bc:	e05d      	b.n	800537a <UART_SetConfig+0x282>
 80052be:	2308      	movs	r3, #8
 80052c0:	76fb      	strb	r3, [r7, #27]
 80052c2:	e05a      	b.n	800537a <UART_SetConfig+0x282>
 80052c4:	2310      	movs	r3, #16
 80052c6:	76fb      	strb	r3, [r7, #27]
 80052c8:	e057      	b.n	800537a <UART_SetConfig+0x282>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a49      	ldr	r2, [pc, #292]	; (80053f4 <UART_SetConfig+0x2fc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d125      	bne.n	8005320 <UART_SetConfig+0x228>
 80052d4:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <UART_SetConfig+0x2ec>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e2:	d017      	beq.n	8005314 <UART_SetConfig+0x21c>
 80052e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e8:	d817      	bhi.n	800531a <UART_SetConfig+0x222>
 80052ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ee:	d00b      	beq.n	8005308 <UART_SetConfig+0x210>
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f4:	d811      	bhi.n	800531a <UART_SetConfig+0x222>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <UART_SetConfig+0x20a>
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d006      	beq.n	800530e <UART_SetConfig+0x216>
 8005300:	e00b      	b.n	800531a <UART_SetConfig+0x222>
 8005302:	2300      	movs	r3, #0
 8005304:	76fb      	strb	r3, [r7, #27]
 8005306:	e038      	b.n	800537a <UART_SetConfig+0x282>
 8005308:	2302      	movs	r3, #2
 800530a:	76fb      	strb	r3, [r7, #27]
 800530c:	e035      	b.n	800537a <UART_SetConfig+0x282>
 800530e:	2304      	movs	r3, #4
 8005310:	76fb      	strb	r3, [r7, #27]
 8005312:	e032      	b.n	800537a <UART_SetConfig+0x282>
 8005314:	2308      	movs	r3, #8
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e02f      	b.n	800537a <UART_SetConfig+0x282>
 800531a:	2310      	movs	r3, #16
 800531c:	76fb      	strb	r3, [r7, #27]
 800531e:	e02c      	b.n	800537a <UART_SetConfig+0x282>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <UART_SetConfig+0x2e4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d125      	bne.n	8005376 <UART_SetConfig+0x27e>
 800532a:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <UART_SetConfig+0x2ec>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005338:	d017      	beq.n	800536a <UART_SetConfig+0x272>
 800533a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533e:	d817      	bhi.n	8005370 <UART_SetConfig+0x278>
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	d00b      	beq.n	800535e <UART_SetConfig+0x266>
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534a:	d811      	bhi.n	8005370 <UART_SetConfig+0x278>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <UART_SetConfig+0x260>
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d006      	beq.n	8005364 <UART_SetConfig+0x26c>
 8005356:	e00b      	b.n	8005370 <UART_SetConfig+0x278>
 8005358:	2300      	movs	r3, #0
 800535a:	76fb      	strb	r3, [r7, #27]
 800535c:	e00d      	b.n	800537a <UART_SetConfig+0x282>
 800535e:	2302      	movs	r3, #2
 8005360:	76fb      	strb	r3, [r7, #27]
 8005362:	e00a      	b.n	800537a <UART_SetConfig+0x282>
 8005364:	2304      	movs	r3, #4
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e007      	b.n	800537a <UART_SetConfig+0x282>
 800536a:	2308      	movs	r3, #8
 800536c:	76fb      	strb	r3, [r7, #27]
 800536e:	e004      	b.n	800537a <UART_SetConfig+0x282>
 8005370:	2310      	movs	r3, #16
 8005372:	76fb      	strb	r3, [r7, #27]
 8005374:	e001      	b.n	800537a <UART_SetConfig+0x282>
 8005376:	2310      	movs	r3, #16
 8005378:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <UART_SetConfig+0x2e4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f040 8087 	bne.w	8005494 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005386:	7efb      	ldrb	r3, [r7, #27]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d837      	bhi.n	80053fc <UART_SetConfig+0x304>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x29c>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053fd 	.word	0x080053fd
 80053a4:	080053c7 	.word	0x080053c7
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b8:	f7ff f854 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e022      	b.n	8005406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <UART_SetConfig+0x300>)
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	e01f      	b.n	8005406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fe ffb5 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80053ca:	6178      	str	r0, [r7, #20]
        break;
 80053cc:	e01b      	b.n	8005406 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e017      	b.n	8005406 <UART_SetConfig+0x30e>
 80053d6:	bf00      	nop
 80053d8:	efff69f3 	.word	0xefff69f3
 80053dc:	40008000 	.word	0x40008000
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40004400 	.word	0x40004400
 80053ec:	40004800 	.word	0x40004800
 80053f0:	40004c00 	.word	0x40004c00
 80053f4:	40005000 	.word	0x40005000
 80053f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	76bb      	strb	r3, [r7, #26]
        break;
 8005404:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80f1 	beq.w	80055f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	429a      	cmp	r2, r3
 800541c:	d305      	bcc.n	800542a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	429a      	cmp	r2, r3
 8005428:	d902      	bls.n	8005430 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	76bb      	strb	r3, [r7, #26]
 800542e:	e0df      	b.n	80055f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4618      	mov	r0, r3
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	020b      	lsls	r3, r1, #8
 8005442:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005446:	0202      	lsls	r2, r0, #8
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	6849      	ldr	r1, [r1, #4]
 800544c:	0849      	lsrs	r1, r1, #1
 800544e:	4608      	mov	r0, r1
 8005450:	f04f 0100 	mov.w	r1, #0
 8005454:	1814      	adds	r4, r2, r0
 8005456:	eb43 0501 	adc.w	r5, r3, r1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	461a      	mov	r2, r3
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	4620      	mov	r0, r4
 8005466:	4629      	mov	r1, r5
 8005468:	f7fb fb9e 	bl	8000ba8 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4613      	mov	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547a:	d308      	bcc.n	800548e <UART_SetConfig+0x396>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005482:	d204      	bcs.n	800548e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	60da      	str	r2, [r3, #12]
 800548c:	e0b0      	b.n	80055f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	76bb      	strb	r3, [r7, #26]
 8005492:	e0ad      	b.n	80055f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549c:	d15b      	bne.n	8005556 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800549e:	7efb      	ldrb	r3, [r7, #27]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d828      	bhi.n	80054f6 <UART_SetConfig+0x3fe>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x3b4>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe ffc8 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 80054d4:	6178      	str	r0, [r7, #20]
        break;
 80054d6:	e013      	b.n	8005500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe ffda 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 80054dc:	6178      	str	r0, [r7, #20]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <UART_SetConfig+0x510>)
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe ff25 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80054ea:	6178      	str	r0, [r7, #20]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	617b      	str	r3, [r7, #20]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	76bb      	strb	r3, [r7, #26]
        break;
 80054fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d074      	beq.n	80055f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d916      	bls.n	8005550 <UART_SetConfig+0x458>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d212      	bcs.n	8005550 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f023 030f 	bic.w	r3, r3, #15
 8005532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b29a      	uxth	r2, r3
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	4313      	orrs	r3, r2
 8005544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	89fa      	ldrh	r2, [r7, #14]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e04f      	b.n	80055f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	76bb      	strb	r3, [r7, #26]
 8005554:	e04c      	b.n	80055f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005556:	7efb      	ldrb	r3, [r7, #27]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d828      	bhi.n	80055ae <UART_SetConfig+0x4b6>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x46c>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe ff6c 	bl	8004464 <HAL_RCC_GetPCLK1Freq>
 800558c:	6178      	str	r0, [r7, #20]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe ff7e 	bl	8004490 <HAL_RCC_GetPCLK2Freq>
 8005594:	6178      	str	r0, [r7, #20]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <UART_SetConfig+0x510>)
 800559a:	617b      	str	r3, [r7, #20]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fec9 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80055a2:	6178      	str	r0, [r7, #20]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	617b      	str	r3, [r7, #20]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	76bb      	strb	r3, [r7, #26]
        break;
 80055b6:	bf00      	nop
    }

    if (pclk != 0U)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085a      	lsrs	r2, r3, #1
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b0f      	cmp	r3, #15
 80055d6:	d909      	bls.n	80055ec <UART_SetConfig+0x4f4>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055de:	d205      	bcs.n	80055ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e001      	b.n	80055f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bdb0      	pop	{r4, r5, r7, pc}
 8005606:	bf00      	nop
 8005608:	00f42400 	.word	0x00f42400

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fc fd44 	bl	80021ec <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d10e      	bne.n	8005792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f82d 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e023      	b.n	80057da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d10e      	bne.n	80057be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f817 	bl	80057e2 <UART_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e00d      	b.n	80057da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b09c      	sub	sp, #112	; 0x70
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4613      	mov	r3, r2
 80057f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	e0a5      	b.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	f000 80a1 	beq.w	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fc fcf5 	bl	80021ec <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <UART_WaitOnFlagUntilTimeout+0x32>
 800580e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005810:	2b00      	cmp	r3, #0
 8005812:	d13e      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005828:	667b      	str	r3, [r7, #100]	; 0x64
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005834:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e6      	bne.n	8005814 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3308      	adds	r3, #8
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	663b      	str	r3, [r7, #96]	; 0x60
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005866:	64ba      	str	r2, [r7, #72]	; 0x48
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800586c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e067      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d04f      	beq.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ae:	d147      	bne.n	8005940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
 80058da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3308      	adds	r3, #8
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	66bb      	str	r3, [r7, #104]	; 0x68
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3308      	adds	r3, #8
 800590a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800590c:	623a      	str	r2, [r7, #32]
 800590e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	61bb      	str	r3, [r7, #24]
   return(result);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e010      	b.n	8005962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	429a      	cmp	r2, r3
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	429a      	cmp	r2, r3
 800595c:	f43f af4a 	beq.w	80057f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3770      	adds	r7, #112	; 0x70
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800596a:	b084      	sub	sp, #16
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	f107 001c 	add.w	r0, r7, #28
 8005978:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fa6b 	bl	8005e64 <USB_CoreReset>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
 80059a4:	e005      	b.n	80059b2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059be:	b004      	add	sp, #16
 80059c0:	4770      	bx	lr

080059c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d115      	bne.n	8005a32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fc fbf6 	bl	8002204 <HAL_Delay>
      ms++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa12 	bl	8005e48 <USB_GetMode>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d01e      	beq.n	8005a68 <USB_SetCurrentMode+0x84>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b31      	cmp	r3, #49	; 0x31
 8005a2e:	d9f0      	bls.n	8005a12 <USB_SetCurrentMode+0x2e>
 8005a30:	e01a      	b.n	8005a68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d115      	bne.n	8005a64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f7fc fbdd 	bl	8002204 <HAL_Delay>
      ms++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9f9 	bl	8005e48 <USB_GetMode>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <USB_SetCurrentMode+0x84>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b31      	cmp	r3, #49	; 0x31
 8005a60:	d9f0      	bls.n	8005a44 <USB_SetCurrentMode+0x60>
 8005a62:	e001      	b.n	8005a68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e005      	b.n	8005a74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b32      	cmp	r3, #50	; 0x32
 8005a6c:	d101      	bne.n	8005a72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e009      	b.n	8005ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3340      	adds	r3, #64	; 0x40
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3301      	adds	r3, #1
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b0e      	cmp	r3, #14
 8005ab4:	d9f2      	bls.n	8005a9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11c      	bne.n	8005af6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	e005      	b.n	8005b02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b14:	4619      	mov	r1, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	680b      	ldr	r3, [r1, #0]
 8005b20:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b22:	2103      	movs	r1, #3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f955 	bl	8005dd4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b2a:	2110      	movs	r1, #16
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f8f1 	bl	8005d14 <USB_FlushTxFifo>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f91b 	bl	8005d78 <USB_FlushRxFifo>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	461a      	mov	r2, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e043      	b.n	8005bfe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b8c:	d118      	bne.n	8005bc0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e013      	b.n	8005bd2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e008      	b.n	8005bd2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3b7      	bcc.n	8005b76 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e043      	b.n	8005c94 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c22:	d118      	bne.n	8005c56 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c3c:	6013      	str	r3, [r2, #0]
 8005c3e:	e013      	b.n	8005c68 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e008      	b.n	8005c68 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	461a      	mov	r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	461a      	mov	r2, r3
 8005c76:	2300      	movs	r3, #0
 8005c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3301      	adds	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d3b7      	bcc.n	8005c0c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005caa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f043 0210 	orr.w	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <USB_DevInit+0x294>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f043 0208 	orr.w	r2, r3, #8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d107      	bne.n	8005cfe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf6:	f043 0304 	orr.w	r3, r3, #4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d0a:	b004      	add	sp, #16
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	803c3800 	.word	0x803c3800

08005d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <USB_FlushTxFifo+0x60>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e01a      	b.n	8005d68 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	daf3      	bge.n	8005d22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	019b      	lsls	r3, r3, #6
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <USB_FlushTxFifo+0x60>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e006      	b.n	8005d68 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d0f1      	beq.n	8005d4a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	00030d40 	.word	0x00030d40

08005d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4a11      	ldr	r2, [pc, #68]	; (8005dd0 <USB_FlushRxFifo+0x58>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e017      	b.n	8005dc4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	daf3      	bge.n	8005d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2210      	movs	r2, #16
 8005da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <USB_FlushRxFifo+0x58>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e006      	b.n	8005dc4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d0f1      	beq.n	8005da6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	00030d40 	.word	0x00030d40

08005dd4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e34:	f043 0302 	orr.w	r3, r3, #2
 8005e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0301 	and.w	r3, r3, #1
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <USB_CoreReset+0x60>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e01a      	b.n	8005eb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	daf3      	bge.n	8005e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f043 0201 	orr.w	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <USB_CoreReset+0x60>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e006      	b.n	8005eb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d0f1      	beq.n	8005e98 <USB_CoreReset+0x34>

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	00030d40 	.word	0x00030d40

08005ec8 <__errno>:
 8005ec8:	4b01      	ldr	r3, [pc, #4]	; (8005ed0 <__errno+0x8>)
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	2000000c 	.word	0x2000000c

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f002 feb4 	bl	8008c54 <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	080090b4 	.word	0x080090b4
 8005f10:	080090b4 	.word	0x080090b4
 8005f14:	080090b4 	.word	0x080090b4
 8005f18:	080090b8 	.word	0x080090b8

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <__cvt>:
 8005f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	ec55 4b10 	vmov	r4, r5, d0
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	460e      	mov	r6, r1
 8005f38:	4619      	mov	r1, r3
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	bfbb      	ittet	lt
 8005f3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f42:	461d      	movlt	r5, r3
 8005f44:	2300      	movge	r3, #0
 8005f46:	232d      	movlt	r3, #45	; 0x2d
 8005f48:	700b      	strb	r3, [r1, #0]
 8005f4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f50:	4691      	mov	r9, r2
 8005f52:	f023 0820 	bic.w	r8, r3, #32
 8005f56:	bfbc      	itt	lt
 8005f58:	4622      	movlt	r2, r4
 8005f5a:	4614      	movlt	r4, r2
 8005f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f60:	d005      	beq.n	8005f6e <__cvt+0x42>
 8005f62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f66:	d100      	bne.n	8005f6a <__cvt+0x3e>
 8005f68:	3601      	adds	r6, #1
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	e000      	b.n	8005f70 <__cvt+0x44>
 8005f6e:	2103      	movs	r1, #3
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	ab02      	add	r3, sp, #8
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	ec45 4b10 	vmov	d0, r4, r5
 8005f7c:	4653      	mov	r3, sl
 8005f7e:	4632      	mov	r2, r6
 8005f80:	f000 fcea 	bl	8006958 <_dtoa_r>
 8005f84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f88:	4607      	mov	r7, r0
 8005f8a:	d102      	bne.n	8005f92 <__cvt+0x66>
 8005f8c:	f019 0f01 	tst.w	r9, #1
 8005f90:	d022      	beq.n	8005fd8 <__cvt+0xac>
 8005f92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f96:	eb07 0906 	add.w	r9, r7, r6
 8005f9a:	d110      	bne.n	8005fbe <__cvt+0x92>
 8005f9c:	783b      	ldrb	r3, [r7, #0]
 8005f9e:	2b30      	cmp	r3, #48	; 0x30
 8005fa0:	d10a      	bne.n	8005fb8 <__cvt+0x8c>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fae:	b918      	cbnz	r0, 8005fb8 <__cvt+0x8c>
 8005fb0:	f1c6 0601 	rsb	r6, r6, #1
 8005fb4:	f8ca 6000 	str.w	r6, [sl]
 8005fb8:	f8da 3000 	ldr.w	r3, [sl]
 8005fbc:	4499      	add	r9, r3
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f7fa fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fca:	b108      	cbz	r0, 8005fd0 <__cvt+0xa4>
 8005fcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fd0:	2230      	movs	r2, #48	; 0x30
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	454b      	cmp	r3, r9
 8005fd6:	d307      	bcc.n	8005fe8 <__cvt+0xbc>
 8005fd8:	9b03      	ldr	r3, [sp, #12]
 8005fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fdc:	1bdb      	subs	r3, r3, r7
 8005fde:	4638      	mov	r0, r7
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	b004      	add	sp, #16
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	9103      	str	r1, [sp, #12]
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e7f0      	b.n	8005fd2 <__cvt+0xa6>

08005ff0 <__exponent>:
 8005ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	bfb8      	it	lt
 8005ff8:	4249      	neglt	r1, r1
 8005ffa:	f803 2b02 	strb.w	r2, [r3], #2
 8005ffe:	bfb4      	ite	lt
 8006000:	222d      	movlt	r2, #45	; 0x2d
 8006002:	222b      	movge	r2, #43	; 0x2b
 8006004:	2909      	cmp	r1, #9
 8006006:	7042      	strb	r2, [r0, #1]
 8006008:	dd2a      	ble.n	8006060 <__exponent+0x70>
 800600a:	f10d 0407 	add.w	r4, sp, #7
 800600e:	46a4      	mov	ip, r4
 8006010:	270a      	movs	r7, #10
 8006012:	46a6      	mov	lr, r4
 8006014:	460a      	mov	r2, r1
 8006016:	fb91 f6f7 	sdiv	r6, r1, r7
 800601a:	fb07 1516 	mls	r5, r7, r6, r1
 800601e:	3530      	adds	r5, #48	; 0x30
 8006020:	2a63      	cmp	r2, #99	; 0x63
 8006022:	f104 34ff 	add.w	r4, r4, #4294967295
 8006026:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800602a:	4631      	mov	r1, r6
 800602c:	dcf1      	bgt.n	8006012 <__exponent+0x22>
 800602e:	3130      	adds	r1, #48	; 0x30
 8006030:	f1ae 0502 	sub.w	r5, lr, #2
 8006034:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006038:	1c44      	adds	r4, r0, #1
 800603a:	4629      	mov	r1, r5
 800603c:	4561      	cmp	r1, ip
 800603e:	d30a      	bcc.n	8006056 <__exponent+0x66>
 8006040:	f10d 0209 	add.w	r2, sp, #9
 8006044:	eba2 020e 	sub.w	r2, r2, lr
 8006048:	4565      	cmp	r5, ip
 800604a:	bf88      	it	hi
 800604c:	2200      	movhi	r2, #0
 800604e:	4413      	add	r3, r2
 8006050:	1a18      	subs	r0, r3, r0
 8006052:	b003      	add	sp, #12
 8006054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800605a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800605e:	e7ed      	b.n	800603c <__exponent+0x4c>
 8006060:	2330      	movs	r3, #48	; 0x30
 8006062:	3130      	adds	r1, #48	; 0x30
 8006064:	7083      	strb	r3, [r0, #2]
 8006066:	70c1      	strb	r1, [r0, #3]
 8006068:	1d03      	adds	r3, r0, #4
 800606a:	e7f1      	b.n	8006050 <__exponent+0x60>

0800606c <_printf_float>:
 800606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006070:	ed2d 8b02 	vpush	{d8}
 8006074:	b08d      	sub	sp, #52	; 0x34
 8006076:	460c      	mov	r4, r1
 8006078:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800607c:	4616      	mov	r6, r2
 800607e:	461f      	mov	r7, r3
 8006080:	4605      	mov	r5, r0
 8006082:	f001 fa55 	bl	8007530 <_localeconv_r>
 8006086:	f8d0 a000 	ldr.w	sl, [r0]
 800608a:	4650      	mov	r0, sl
 800608c:	f7fa f8a0 	bl	80001d0 <strlen>
 8006090:	2300      	movs	r3, #0
 8006092:	930a      	str	r3, [sp, #40]	; 0x28
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	9305      	str	r3, [sp, #20]
 8006098:	f8d8 3000 	ldr.w	r3, [r8]
 800609c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060a0:	3307      	adds	r3, #7
 80060a2:	f023 0307 	bic.w	r3, r3, #7
 80060a6:	f103 0208 	add.w	r2, r3, #8
 80060aa:	f8c8 2000 	str.w	r2, [r8]
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80060ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80060c4:	ee08 0a10 	vmov	s16, r0
 80060c8:	4b9f      	ldr	r3, [pc, #636]	; (8006348 <_printf_float+0x2dc>)
 80060ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	f7fa fd2b 	bl	8000b2c <__aeabi_dcmpun>
 80060d6:	bb88      	cbnz	r0, 800613c <_printf_float+0xd0>
 80060d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060dc:	4b9a      	ldr	r3, [pc, #616]	; (8006348 <_printf_float+0x2dc>)
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	f7fa fd05 	bl	8000af0 <__aeabi_dcmple>
 80060e6:	bb48      	cbnz	r0, 800613c <_printf_float+0xd0>
 80060e8:	2200      	movs	r2, #0
 80060ea:	2300      	movs	r3, #0
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	f7fa fcf4 	bl	8000adc <__aeabi_dcmplt>
 80060f4:	b110      	cbz	r0, 80060fc <_printf_float+0x90>
 80060f6:	232d      	movs	r3, #45	; 0x2d
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fc:	4b93      	ldr	r3, [pc, #588]	; (800634c <_printf_float+0x2e0>)
 80060fe:	4894      	ldr	r0, [pc, #592]	; (8006350 <_printf_float+0x2e4>)
 8006100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006104:	bf94      	ite	ls
 8006106:	4698      	movls	r8, r3
 8006108:	4680      	movhi	r8, r0
 800610a:	2303      	movs	r3, #3
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	f023 0204 	bic.w	r2, r3, #4
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	9700      	str	r7, [sp, #0]
 800611c:	4633      	mov	r3, r6
 800611e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006120:	4621      	mov	r1, r4
 8006122:	4628      	mov	r0, r5
 8006124:	f000 f9d8 	bl	80064d8 <_printf_common>
 8006128:	3001      	adds	r0, #1
 800612a:	f040 8090 	bne.w	800624e <_printf_float+0x1e2>
 800612e:	f04f 30ff 	mov.w	r0, #4294967295
 8006132:	b00d      	add	sp, #52	; 0x34
 8006134:	ecbd 8b02 	vpop	{d8}
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fcf2 	bl	8000b2c <__aeabi_dcmpun>
 8006148:	b140      	cbz	r0, 800615c <_printf_float+0xf0>
 800614a:	464b      	mov	r3, r9
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfbc      	itt	lt
 8006150:	232d      	movlt	r3, #45	; 0x2d
 8006152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006156:	487f      	ldr	r0, [pc, #508]	; (8006354 <_printf_float+0x2e8>)
 8006158:	4b7f      	ldr	r3, [pc, #508]	; (8006358 <_printf_float+0x2ec>)
 800615a:	e7d1      	b.n	8006100 <_printf_float+0x94>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006162:	9206      	str	r2, [sp, #24]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	d13f      	bne.n	80061e8 <_printf_float+0x17c>
 8006168:	2306      	movs	r3, #6
 800616a:	6063      	str	r3, [r4, #4]
 800616c:	9b05      	ldr	r3, [sp, #20]
 800616e:	6861      	ldr	r1, [r4, #4]
 8006170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006174:	2300      	movs	r3, #0
 8006176:	9303      	str	r3, [sp, #12]
 8006178:	ab0a      	add	r3, sp, #40	; 0x28
 800617a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800617e:	ab09      	add	r3, sp, #36	; 0x24
 8006180:	ec49 8b10 	vmov	d0, r8, r9
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800618c:	4628      	mov	r0, r5
 800618e:	f7ff fecd 	bl	8005f2c <__cvt>
 8006192:	9b06      	ldr	r3, [sp, #24]
 8006194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006196:	2b47      	cmp	r3, #71	; 0x47
 8006198:	4680      	mov	r8, r0
 800619a:	d108      	bne.n	80061ae <_printf_float+0x142>
 800619c:	1cc8      	adds	r0, r1, #3
 800619e:	db02      	blt.n	80061a6 <_printf_float+0x13a>
 80061a0:	6863      	ldr	r3, [r4, #4]
 80061a2:	4299      	cmp	r1, r3
 80061a4:	dd41      	ble.n	800622a <_printf_float+0x1be>
 80061a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80061aa:	fa5f fb8b 	uxtb.w	fp, fp
 80061ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80061b2:	d820      	bhi.n	80061f6 <_printf_float+0x18a>
 80061b4:	3901      	subs	r1, #1
 80061b6:	465a      	mov	r2, fp
 80061b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061bc:	9109      	str	r1, [sp, #36]	; 0x24
 80061be:	f7ff ff17 	bl	8005ff0 <__exponent>
 80061c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061c4:	1813      	adds	r3, r2, r0
 80061c6:	2a01      	cmp	r2, #1
 80061c8:	4681      	mov	r9, r0
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	dc02      	bgt.n	80061d4 <_printf_float+0x168>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	07d2      	lsls	r2, r2, #31
 80061d2:	d501      	bpl.n	80061d8 <_printf_float+0x16c>
 80061d4:	3301      	adds	r3, #1
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d09c      	beq.n	800611a <_printf_float+0xae>
 80061e0:	232d      	movs	r3, #45	; 0x2d
 80061e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e6:	e798      	b.n	800611a <_printf_float+0xae>
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	2a47      	cmp	r2, #71	; 0x47
 80061ec:	d1be      	bne.n	800616c <_printf_float+0x100>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1bc      	bne.n	800616c <_printf_float+0x100>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e7b9      	b.n	800616a <_printf_float+0xfe>
 80061f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061fa:	d118      	bne.n	800622e <_printf_float+0x1c2>
 80061fc:	2900      	cmp	r1, #0
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	dd0b      	ble.n	800621a <_printf_float+0x1ae>
 8006202:	6121      	str	r1, [r4, #16]
 8006204:	b913      	cbnz	r3, 800620c <_printf_float+0x1a0>
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	07d0      	lsls	r0, r2, #31
 800620a:	d502      	bpl.n	8006212 <_printf_float+0x1a6>
 800620c:	3301      	adds	r3, #1
 800620e:	440b      	add	r3, r1
 8006210:	6123      	str	r3, [r4, #16]
 8006212:	65a1      	str	r1, [r4, #88]	; 0x58
 8006214:	f04f 0900 	mov.w	r9, #0
 8006218:	e7de      	b.n	80061d8 <_printf_float+0x16c>
 800621a:	b913      	cbnz	r3, 8006222 <_printf_float+0x1b6>
 800621c:	6822      	ldr	r2, [r4, #0]
 800621e:	07d2      	lsls	r2, r2, #31
 8006220:	d501      	bpl.n	8006226 <_printf_float+0x1ba>
 8006222:	3302      	adds	r3, #2
 8006224:	e7f4      	b.n	8006210 <_printf_float+0x1a4>
 8006226:	2301      	movs	r3, #1
 8006228:	e7f2      	b.n	8006210 <_printf_float+0x1a4>
 800622a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	4299      	cmp	r1, r3
 8006232:	db05      	blt.n	8006240 <_printf_float+0x1d4>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	6121      	str	r1, [r4, #16]
 8006238:	07d8      	lsls	r0, r3, #31
 800623a:	d5ea      	bpl.n	8006212 <_printf_float+0x1a6>
 800623c:	1c4b      	adds	r3, r1, #1
 800623e:	e7e7      	b.n	8006210 <_printf_float+0x1a4>
 8006240:	2900      	cmp	r1, #0
 8006242:	bfd4      	ite	le
 8006244:	f1c1 0202 	rsble	r2, r1, #2
 8006248:	2201      	movgt	r2, #1
 800624a:	4413      	add	r3, r2
 800624c:	e7e0      	b.n	8006210 <_printf_float+0x1a4>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	055a      	lsls	r2, r3, #21
 8006252:	d407      	bmi.n	8006264 <_printf_float+0x1f8>
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	4642      	mov	r2, r8
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	47b8      	blx	r7
 800625e:	3001      	adds	r0, #1
 8006260:	d12c      	bne.n	80062bc <_printf_float+0x250>
 8006262:	e764      	b.n	800612e <_printf_float+0xc2>
 8006264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006268:	f240 80e0 	bls.w	800642c <_printf_float+0x3c0>
 800626c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	f7fa fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8006278:	2800      	cmp	r0, #0
 800627a:	d034      	beq.n	80062e6 <_printf_float+0x27a>
 800627c:	4a37      	ldr	r2, [pc, #220]	; (800635c <_printf_float+0x2f0>)
 800627e:	2301      	movs	r3, #1
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	f43f af51 	beq.w	800612e <_printf_float+0xc2>
 800628c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006290:	429a      	cmp	r2, r3
 8006292:	db02      	blt.n	800629a <_printf_float+0x22e>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	07d8      	lsls	r0, r3, #31
 8006298:	d510      	bpl.n	80062bc <_printf_float+0x250>
 800629a:	ee18 3a10 	vmov	r3, s16
 800629e:	4652      	mov	r2, sl
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af41 	beq.w	800612e <_printf_float+0xc2>
 80062ac:	f04f 0800 	mov.w	r8, #0
 80062b0:	f104 091a 	add.w	r9, r4, #26
 80062b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4543      	cmp	r3, r8
 80062ba:	dc09      	bgt.n	80062d0 <_printf_float+0x264>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	f100 8105 	bmi.w	80064ce <_printf_float+0x462>
 80062c4:	68e0      	ldr	r0, [r4, #12]
 80062c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c8:	4298      	cmp	r0, r3
 80062ca:	bfb8      	it	lt
 80062cc:	4618      	movlt	r0, r3
 80062ce:	e730      	b.n	8006132 <_printf_float+0xc6>
 80062d0:	2301      	movs	r3, #1
 80062d2:	464a      	mov	r2, r9
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af27 	beq.w	800612e <_printf_float+0xc2>
 80062e0:	f108 0801 	add.w	r8, r8, #1
 80062e4:	e7e6      	b.n	80062b4 <_printf_float+0x248>
 80062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dc39      	bgt.n	8006360 <_printf_float+0x2f4>
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <_printf_float+0x2f0>)
 80062ee:	2301      	movs	r3, #1
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f af19 	beq.w	800612e <_printf_float+0xc2>
 80062fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006300:	4313      	orrs	r3, r2
 8006302:	d102      	bne.n	800630a <_printf_float+0x29e>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07d9      	lsls	r1, r3, #31
 8006308:	d5d8      	bpl.n	80062bc <_printf_float+0x250>
 800630a:	ee18 3a10 	vmov	r3, s16
 800630e:	4652      	mov	r2, sl
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af09 	beq.w	800612e <_printf_float+0xc2>
 800631c:	f04f 0900 	mov.w	r9, #0
 8006320:	f104 0a1a 	add.w	sl, r4, #26
 8006324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006326:	425b      	negs	r3, r3
 8006328:	454b      	cmp	r3, r9
 800632a:	dc01      	bgt.n	8006330 <_printf_float+0x2c4>
 800632c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632e:	e792      	b.n	8006256 <_printf_float+0x1ea>
 8006330:	2301      	movs	r3, #1
 8006332:	4652      	mov	r2, sl
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	f43f aef7 	beq.w	800612e <_printf_float+0xc2>
 8006340:	f109 0901 	add.w	r9, r9, #1
 8006344:	e7ee      	b.n	8006324 <_printf_float+0x2b8>
 8006346:	bf00      	nop
 8006348:	7fefffff 	.word	0x7fefffff
 800634c:	08008ccc 	.word	0x08008ccc
 8006350:	08008cd0 	.word	0x08008cd0
 8006354:	08008cd8 	.word	0x08008cd8
 8006358:	08008cd4 	.word	0x08008cd4
 800635c:	08008cdc 	.word	0x08008cdc
 8006360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006364:	429a      	cmp	r2, r3
 8006366:	bfa8      	it	ge
 8006368:	461a      	movge	r2, r3
 800636a:	2a00      	cmp	r2, #0
 800636c:	4691      	mov	r9, r2
 800636e:	dc37      	bgt.n	80063e0 <_printf_float+0x374>
 8006370:	f04f 0b00 	mov.w	fp, #0
 8006374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006378:	f104 021a 	add.w	r2, r4, #26
 800637c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800637e:	9305      	str	r3, [sp, #20]
 8006380:	eba3 0309 	sub.w	r3, r3, r9
 8006384:	455b      	cmp	r3, fp
 8006386:	dc33      	bgt.n	80063f0 <_printf_float+0x384>
 8006388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800638c:	429a      	cmp	r2, r3
 800638e:	db3b      	blt.n	8006408 <_printf_float+0x39c>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	07da      	lsls	r2, r3, #31
 8006394:	d438      	bmi.n	8006408 <_printf_float+0x39c>
 8006396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006398:	9b05      	ldr	r3, [sp, #20]
 800639a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	eba2 0901 	sub.w	r9, r2, r1
 80063a2:	4599      	cmp	r9, r3
 80063a4:	bfa8      	it	ge
 80063a6:	4699      	movge	r9, r3
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	dc35      	bgt.n	800641a <_printf_float+0x3ae>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b6:	f104 0a1a 	add.w	sl, r4, #26
 80063ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	eba3 0309 	sub.w	r3, r3, r9
 80063c4:	4543      	cmp	r3, r8
 80063c6:	f77f af79 	ble.w	80062bc <_printf_float+0x250>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4652      	mov	r2, sl
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f aeaa 	beq.w	800612e <_printf_float+0xc2>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	e7ec      	b.n	80063ba <_printf_float+0x34e>
 80063e0:	4613      	mov	r3, r2
 80063e2:	4631      	mov	r1, r6
 80063e4:	4642      	mov	r2, r8
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	d1c0      	bne.n	8006370 <_printf_float+0x304>
 80063ee:	e69e      	b.n	800612e <_printf_float+0xc2>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4631      	mov	r1, r6
 80063f4:	4628      	mov	r0, r5
 80063f6:	9205      	str	r2, [sp, #20]
 80063f8:	47b8      	blx	r7
 80063fa:	3001      	adds	r0, #1
 80063fc:	f43f ae97 	beq.w	800612e <_printf_float+0xc2>
 8006400:	9a05      	ldr	r2, [sp, #20]
 8006402:	f10b 0b01 	add.w	fp, fp, #1
 8006406:	e7b9      	b.n	800637c <_printf_float+0x310>
 8006408:	ee18 3a10 	vmov	r3, s16
 800640c:	4652      	mov	r2, sl
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	d1be      	bne.n	8006396 <_printf_float+0x32a>
 8006418:	e689      	b.n	800612e <_printf_float+0xc2>
 800641a:	9a05      	ldr	r2, [sp, #20]
 800641c:	464b      	mov	r3, r9
 800641e:	4442      	add	r2, r8
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	d1c1      	bne.n	80063ae <_printf_float+0x342>
 800642a:	e680      	b.n	800612e <_printf_float+0xc2>
 800642c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642e:	2a01      	cmp	r2, #1
 8006430:	dc01      	bgt.n	8006436 <_printf_float+0x3ca>
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d538      	bpl.n	80064a8 <_printf_float+0x43c>
 8006436:	2301      	movs	r3, #1
 8006438:	4642      	mov	r2, r8
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae74 	beq.w	800612e <_printf_float+0xc2>
 8006446:	ee18 3a10 	vmov	r3, s16
 800644a:	4652      	mov	r2, sl
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f ae6b 	beq.w	800612e <_printf_float+0xc2>
 8006458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	f7fa fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006464:	b9d8      	cbnz	r0, 800649e <_printf_float+0x432>
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	f108 0201 	add.w	r2, r8, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	d10e      	bne.n	8006496 <_printf_float+0x42a>
 8006478:	e659      	b.n	800612e <_printf_float+0xc2>
 800647a:	2301      	movs	r3, #1
 800647c:	4652      	mov	r2, sl
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f ae52 	beq.w	800612e <_printf_float+0xc2>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006490:	3b01      	subs	r3, #1
 8006492:	4543      	cmp	r3, r8
 8006494:	dcf1      	bgt.n	800647a <_printf_float+0x40e>
 8006496:	464b      	mov	r3, r9
 8006498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800649c:	e6dc      	b.n	8006258 <_printf_float+0x1ec>
 800649e:	f04f 0800 	mov.w	r8, #0
 80064a2:	f104 0a1a 	add.w	sl, r4, #26
 80064a6:	e7f2      	b.n	800648e <_printf_float+0x422>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4642      	mov	r2, r8
 80064ac:	e7df      	b.n	800646e <_printf_float+0x402>
 80064ae:	2301      	movs	r3, #1
 80064b0:	464a      	mov	r2, r9
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae38 	beq.w	800612e <_printf_float+0xc2>
 80064be:	f108 0801 	add.w	r8, r8, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	4543      	cmp	r3, r8
 80064ca:	dcf0      	bgt.n	80064ae <_printf_float+0x442>
 80064cc:	e6fa      	b.n	80062c4 <_printf_float+0x258>
 80064ce:	f04f 0800 	mov.w	r8, #0
 80064d2:	f104 0919 	add.w	r9, r4, #25
 80064d6:	e7f4      	b.n	80064c2 <_printf_float+0x456>

080064d8 <_printf_common>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4616      	mov	r6, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	688a      	ldr	r2, [r1, #8]
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bfb8      	it	lt
 80064ec:	4613      	movlt	r3, r2
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f4:	4607      	mov	r7, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b10a      	cbz	r2, 80064fe <_printf_common+0x26>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	6833      	ldrmi	r3, [r6, #0]
 8006506:	3302      	addmi	r3, #2
 8006508:	6033      	strmi	r3, [r6, #0]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d106      	bne.n	8006520 <_printf_common+0x48>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc26      	bgt.n	800656e <_printf_common+0x96>
 8006520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006524:	1e13      	subs	r3, r2, #0
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	2301      	movne	r3, #1
 800652c:	0692      	lsls	r2, r2, #26
 800652e:	d42b      	bmi.n	8006588 <_printf_common+0xb0>
 8006530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006534:	4649      	mov	r1, r9
 8006536:	4638      	mov	r0, r7
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d01e      	beq.n	800657c <_printf_common+0xa4>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	68e5      	ldr	r5, [r4, #12]
 8006542:	6832      	ldr	r2, [r6, #0]
 8006544:	f003 0306 	and.w	r3, r3, #6
 8006548:	2b04      	cmp	r3, #4
 800654a:	bf08      	it	eq
 800654c:	1aad      	subeq	r5, r5, r2
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	bf0c      	ite	eq
 8006554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006558:	2500      	movne	r5, #0
 800655a:	4293      	cmp	r3, r2
 800655c:	bfc4      	itt	gt
 800655e:	1a9b      	subgt	r3, r3, r2
 8006560:	18ed      	addgt	r5, r5, r3
 8006562:	2600      	movs	r6, #0
 8006564:	341a      	adds	r4, #26
 8006566:	42b5      	cmp	r5, r6
 8006568:	d11a      	bne.n	80065a0 <_printf_common+0xc8>
 800656a:	2000      	movs	r0, #0
 800656c:	e008      	b.n	8006580 <_printf_common+0xa8>
 800656e:	2301      	movs	r3, #1
 8006570:	4652      	mov	r2, sl
 8006572:	4649      	mov	r1, r9
 8006574:	4638      	mov	r0, r7
 8006576:	47c0      	blx	r8
 8006578:	3001      	adds	r0, #1
 800657a:	d103      	bne.n	8006584 <_printf_common+0xac>
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006584:	3501      	adds	r5, #1
 8006586:	e7c6      	b.n	8006516 <_printf_common+0x3e>
 8006588:	18e1      	adds	r1, r4, r3
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	2030      	movs	r0, #48	; 0x30
 800658e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006592:	4422      	add	r2, r4
 8006594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800659c:	3302      	adds	r3, #2
 800659e:	e7c7      	b.n	8006530 <_printf_common+0x58>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4622      	mov	r2, r4
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d0e6      	beq.n	800657c <_printf_common+0xa4>
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7d9      	b.n	8006566 <_printf_common+0x8e>
	...

080065b4 <_printf_i>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	4691      	mov	r9, r2
 80065bc:	7e27      	ldrb	r7, [r4, #24]
 80065be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065c0:	2f78      	cmp	r7, #120	; 0x78
 80065c2:	4680      	mov	r8, r0
 80065c4:	469a      	mov	sl, r3
 80065c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ca:	d807      	bhi.n	80065dc <_printf_i+0x28>
 80065cc:	2f62      	cmp	r7, #98	; 0x62
 80065ce:	d80a      	bhi.n	80065e6 <_printf_i+0x32>
 80065d0:	2f00      	cmp	r7, #0
 80065d2:	f000 80d8 	beq.w	8006786 <_printf_i+0x1d2>
 80065d6:	2f58      	cmp	r7, #88	; 0x58
 80065d8:	f000 80a3 	beq.w	8006722 <_printf_i+0x16e>
 80065dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065e4:	e03a      	b.n	800665c <_printf_i+0xa8>
 80065e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ea:	2b15      	cmp	r3, #21
 80065ec:	d8f6      	bhi.n	80065dc <_printf_i+0x28>
 80065ee:	a001      	add	r0, pc, #4	; (adr r0, 80065f4 <_printf_i+0x40>)
 80065f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	08006661 	.word	0x08006661
 80065fc:	080065dd 	.word	0x080065dd
 8006600:	080065dd 	.word	0x080065dd
 8006604:	080065dd 	.word	0x080065dd
 8006608:	080065dd 	.word	0x080065dd
 800660c:	08006661 	.word	0x08006661
 8006610:	080065dd 	.word	0x080065dd
 8006614:	080065dd 	.word	0x080065dd
 8006618:	080065dd 	.word	0x080065dd
 800661c:	080065dd 	.word	0x080065dd
 8006620:	0800676d 	.word	0x0800676d
 8006624:	08006691 	.word	0x08006691
 8006628:	0800674f 	.word	0x0800674f
 800662c:	080065dd 	.word	0x080065dd
 8006630:	080065dd 	.word	0x080065dd
 8006634:	0800678f 	.word	0x0800678f
 8006638:	080065dd 	.word	0x080065dd
 800663c:	08006691 	.word	0x08006691
 8006640:	080065dd 	.word	0x080065dd
 8006644:	080065dd 	.word	0x080065dd
 8006648:	08006757 	.word	0x08006757
 800664c:	680b      	ldr	r3, [r1, #0]
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	600a      	str	r2, [r1, #0]
 8006654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665c:	2301      	movs	r3, #1
 800665e:	e0a3      	b.n	80067a8 <_printf_i+0x1f4>
 8006660:	6825      	ldr	r5, [r4, #0]
 8006662:	6808      	ldr	r0, [r1, #0]
 8006664:	062e      	lsls	r6, r5, #24
 8006666:	f100 0304 	add.w	r3, r0, #4
 800666a:	d50a      	bpl.n	8006682 <_printf_i+0xce>
 800666c:	6805      	ldr	r5, [r0, #0]
 800666e:	600b      	str	r3, [r1, #0]
 8006670:	2d00      	cmp	r5, #0
 8006672:	da03      	bge.n	800667c <_printf_i+0xc8>
 8006674:	232d      	movs	r3, #45	; 0x2d
 8006676:	426d      	negs	r5, r5
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667c:	485e      	ldr	r0, [pc, #376]	; (80067f8 <_printf_i+0x244>)
 800667e:	230a      	movs	r3, #10
 8006680:	e019      	b.n	80066b6 <_printf_i+0x102>
 8006682:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006686:	6805      	ldr	r5, [r0, #0]
 8006688:	600b      	str	r3, [r1, #0]
 800668a:	bf18      	it	ne
 800668c:	b22d      	sxthne	r5, r5
 800668e:	e7ef      	b.n	8006670 <_printf_i+0xbc>
 8006690:	680b      	ldr	r3, [r1, #0]
 8006692:	6825      	ldr	r5, [r4, #0]
 8006694:	1d18      	adds	r0, r3, #4
 8006696:	6008      	str	r0, [r1, #0]
 8006698:	0628      	lsls	r0, r5, #24
 800669a:	d501      	bpl.n	80066a0 <_printf_i+0xec>
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	e002      	b.n	80066a6 <_printf_i+0xf2>
 80066a0:	0669      	lsls	r1, r5, #25
 80066a2:	d5fb      	bpl.n	800669c <_printf_i+0xe8>
 80066a4:	881d      	ldrh	r5, [r3, #0]
 80066a6:	4854      	ldr	r0, [pc, #336]	; (80067f8 <_printf_i+0x244>)
 80066a8:	2f6f      	cmp	r7, #111	; 0x6f
 80066aa:	bf0c      	ite	eq
 80066ac:	2308      	moveq	r3, #8
 80066ae:	230a      	movne	r3, #10
 80066b0:	2100      	movs	r1, #0
 80066b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066b6:	6866      	ldr	r6, [r4, #4]
 80066b8:	60a6      	str	r6, [r4, #8]
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	bfa2      	ittt	ge
 80066be:	6821      	ldrge	r1, [r4, #0]
 80066c0:	f021 0104 	bicge.w	r1, r1, #4
 80066c4:	6021      	strge	r1, [r4, #0]
 80066c6:	b90d      	cbnz	r5, 80066cc <_printf_i+0x118>
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	d04d      	beq.n	8006768 <_printf_i+0x1b4>
 80066cc:	4616      	mov	r6, r2
 80066ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80066d2:	fb03 5711 	mls	r7, r3, r1, r5
 80066d6:	5dc7      	ldrb	r7, [r0, r7]
 80066d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066dc:	462f      	mov	r7, r5
 80066de:	42bb      	cmp	r3, r7
 80066e0:	460d      	mov	r5, r1
 80066e2:	d9f4      	bls.n	80066ce <_printf_i+0x11a>
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d10b      	bne.n	8006700 <_printf_i+0x14c>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07df      	lsls	r7, r3, #31
 80066ec:	d508      	bpl.n	8006700 <_printf_i+0x14c>
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	4299      	cmp	r1, r3
 80066f4:	bfde      	ittt	le
 80066f6:	2330      	movle	r3, #48	; 0x30
 80066f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006700:	1b92      	subs	r2, r2, r6
 8006702:	6122      	str	r2, [r4, #16]
 8006704:	f8cd a000 	str.w	sl, [sp]
 8006708:	464b      	mov	r3, r9
 800670a:	aa03      	add	r2, sp, #12
 800670c:	4621      	mov	r1, r4
 800670e:	4640      	mov	r0, r8
 8006710:	f7ff fee2 	bl	80064d8 <_printf_common>
 8006714:	3001      	adds	r0, #1
 8006716:	d14c      	bne.n	80067b2 <_printf_i+0x1fe>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	b004      	add	sp, #16
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	4835      	ldr	r0, [pc, #212]	; (80067f8 <_printf_i+0x244>)
 8006724:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	680e      	ldr	r6, [r1, #0]
 800672c:	061f      	lsls	r7, r3, #24
 800672e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006732:	600e      	str	r6, [r1, #0]
 8006734:	d514      	bpl.n	8006760 <_printf_i+0x1ac>
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	bf44      	itt	mi
 800673a:	f043 0320 	orrmi.w	r3, r3, #32
 800673e:	6023      	strmi	r3, [r4, #0]
 8006740:	b91d      	cbnz	r5, 800674a <_printf_i+0x196>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f023 0320 	bic.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	2310      	movs	r3, #16
 800674c:	e7b0      	b.n	80066b0 <_printf_i+0xfc>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	f043 0320 	orr.w	r3, r3, #32
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	2378      	movs	r3, #120	; 0x78
 8006758:	4828      	ldr	r0, [pc, #160]	; (80067fc <_printf_i+0x248>)
 800675a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800675e:	e7e3      	b.n	8006728 <_printf_i+0x174>
 8006760:	065e      	lsls	r6, r3, #25
 8006762:	bf48      	it	mi
 8006764:	b2ad      	uxthmi	r5, r5
 8006766:	e7e6      	b.n	8006736 <_printf_i+0x182>
 8006768:	4616      	mov	r6, r2
 800676a:	e7bb      	b.n	80066e4 <_printf_i+0x130>
 800676c:	680b      	ldr	r3, [r1, #0]
 800676e:	6826      	ldr	r6, [r4, #0]
 8006770:	6960      	ldr	r0, [r4, #20]
 8006772:	1d1d      	adds	r5, r3, #4
 8006774:	600d      	str	r5, [r1, #0]
 8006776:	0635      	lsls	r5, r6, #24
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	d501      	bpl.n	8006780 <_printf_i+0x1cc>
 800677c:	6018      	str	r0, [r3, #0]
 800677e:	e002      	b.n	8006786 <_printf_i+0x1d2>
 8006780:	0671      	lsls	r1, r6, #25
 8006782:	d5fb      	bpl.n	800677c <_printf_i+0x1c8>
 8006784:	8018      	strh	r0, [r3, #0]
 8006786:	2300      	movs	r3, #0
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	4616      	mov	r6, r2
 800678c:	e7ba      	b.n	8006704 <_printf_i+0x150>
 800678e:	680b      	ldr	r3, [r1, #0]
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	600a      	str	r2, [r1, #0]
 8006794:	681e      	ldr	r6, [r3, #0]
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	2100      	movs	r1, #0
 800679a:	4630      	mov	r0, r6
 800679c:	f7f9 fd20 	bl	80001e0 <memchr>
 80067a0:	b108      	cbz	r0, 80067a6 <_printf_i+0x1f2>
 80067a2:	1b80      	subs	r0, r0, r6
 80067a4:	6060      	str	r0, [r4, #4]
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	2300      	movs	r3, #0
 80067ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b0:	e7a8      	b.n	8006704 <_printf_i+0x150>
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	4632      	mov	r2, r6
 80067b6:	4649      	mov	r1, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	47d0      	blx	sl
 80067bc:	3001      	adds	r0, #1
 80067be:	d0ab      	beq.n	8006718 <_printf_i+0x164>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	079b      	lsls	r3, r3, #30
 80067c4:	d413      	bmi.n	80067ee <_printf_i+0x23a>
 80067c6:	68e0      	ldr	r0, [r4, #12]
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	4298      	cmp	r0, r3
 80067cc:	bfb8      	it	lt
 80067ce:	4618      	movlt	r0, r3
 80067d0:	e7a4      	b.n	800671c <_printf_i+0x168>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4632      	mov	r2, r6
 80067d6:	4649      	mov	r1, r9
 80067d8:	4640      	mov	r0, r8
 80067da:	47d0      	blx	sl
 80067dc:	3001      	adds	r0, #1
 80067de:	d09b      	beq.n	8006718 <_printf_i+0x164>
 80067e0:	3501      	adds	r5, #1
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	9903      	ldr	r1, [sp, #12]
 80067e6:	1a5b      	subs	r3, r3, r1
 80067e8:	42ab      	cmp	r3, r5
 80067ea:	dcf2      	bgt.n	80067d2 <_printf_i+0x21e>
 80067ec:	e7eb      	b.n	80067c6 <_printf_i+0x212>
 80067ee:	2500      	movs	r5, #0
 80067f0:	f104 0619 	add.w	r6, r4, #25
 80067f4:	e7f5      	b.n	80067e2 <_printf_i+0x22e>
 80067f6:	bf00      	nop
 80067f8:	08008cde 	.word	0x08008cde
 80067fc:	08008cef 	.word	0x08008cef

08006800 <_vsiprintf_r>:
 8006800:	b500      	push	{lr}
 8006802:	b09b      	sub	sp, #108	; 0x6c
 8006804:	9100      	str	r1, [sp, #0]
 8006806:	9104      	str	r1, [sp, #16]
 8006808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	9102      	str	r1, [sp, #8]
 8006810:	4905      	ldr	r1, [pc, #20]	; (8006828 <_vsiprintf_r+0x28>)
 8006812:	9103      	str	r1, [sp, #12]
 8006814:	4669      	mov	r1, sp
 8006816:	f001 fb39 	bl	8007e8c <_svfiprintf_r>
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	b01b      	add	sp, #108	; 0x6c
 8006822:	f85d fb04 	ldr.w	pc, [sp], #4
 8006826:	bf00      	nop
 8006828:	ffff0208 	.word	0xffff0208

0800682c <vsiprintf>:
 800682c:	4613      	mov	r3, r2
 800682e:	460a      	mov	r2, r1
 8006830:	4601      	mov	r1, r0
 8006832:	4802      	ldr	r0, [pc, #8]	; (800683c <vsiprintf+0x10>)
 8006834:	6800      	ldr	r0, [r0, #0]
 8006836:	f7ff bfe3 	b.w	8006800 <_vsiprintf_r>
 800683a:	bf00      	nop
 800683c:	2000000c 	.word	0x2000000c

08006840 <quorem>:
 8006840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	6903      	ldr	r3, [r0, #16]
 8006846:	690c      	ldr	r4, [r1, #16]
 8006848:	42a3      	cmp	r3, r4
 800684a:	4607      	mov	r7, r0
 800684c:	f2c0 8081 	blt.w	8006952 <quorem+0x112>
 8006850:	3c01      	subs	r4, #1
 8006852:	f101 0814 	add.w	r8, r1, #20
 8006856:	f100 0514 	add.w	r5, r0, #20
 800685a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006868:	3301      	adds	r3, #1
 800686a:	429a      	cmp	r2, r3
 800686c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006874:	fbb2 f6f3 	udiv	r6, r2, r3
 8006878:	d331      	bcc.n	80068de <quorem+0x9e>
 800687a:	f04f 0e00 	mov.w	lr, #0
 800687e:	4640      	mov	r0, r8
 8006880:	46ac      	mov	ip, r5
 8006882:	46f2      	mov	sl, lr
 8006884:	f850 2b04 	ldr.w	r2, [r0], #4
 8006888:	b293      	uxth	r3, r2
 800688a:	fb06 e303 	mla	r3, r6, r3, lr
 800688e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006892:	b29b      	uxth	r3, r3
 8006894:	ebaa 0303 	sub.w	r3, sl, r3
 8006898:	0c12      	lsrs	r2, r2, #16
 800689a:	f8dc a000 	ldr.w	sl, [ip]
 800689e:	fb06 e202 	mla	r2, r6, r2, lr
 80068a2:	fa13 f38a 	uxtah	r3, r3, sl
 80068a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068aa:	fa1f fa82 	uxth.w	sl, r2
 80068ae:	f8dc 2000 	ldr.w	r2, [ip]
 80068b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80068b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c0:	4581      	cmp	r9, r0
 80068c2:	f84c 3b04 	str.w	r3, [ip], #4
 80068c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068ca:	d2db      	bcs.n	8006884 <quorem+0x44>
 80068cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80068d0:	b92b      	cbnz	r3, 80068de <quorem+0x9e>
 80068d2:	9b01      	ldr	r3, [sp, #4]
 80068d4:	3b04      	subs	r3, #4
 80068d6:	429d      	cmp	r5, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	d32e      	bcc.n	800693a <quorem+0xfa>
 80068dc:	613c      	str	r4, [r7, #16]
 80068de:	4638      	mov	r0, r7
 80068e0:	f001 f8be 	bl	8007a60 <__mcmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	db24      	blt.n	8006932 <quorem+0xf2>
 80068e8:	3601      	adds	r6, #1
 80068ea:	4628      	mov	r0, r5
 80068ec:	f04f 0c00 	mov.w	ip, #0
 80068f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80068f4:	f8d0 e000 	ldr.w	lr, [r0]
 80068f8:	b293      	uxth	r3, r2
 80068fa:	ebac 0303 	sub.w	r3, ip, r3
 80068fe:	0c12      	lsrs	r2, r2, #16
 8006900:	fa13 f38e 	uxtah	r3, r3, lr
 8006904:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800690c:	b29b      	uxth	r3, r3
 800690e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006912:	45c1      	cmp	r9, r8
 8006914:	f840 3b04 	str.w	r3, [r0], #4
 8006918:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800691c:	d2e8      	bcs.n	80068f0 <quorem+0xb0>
 800691e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006926:	b922      	cbnz	r2, 8006932 <quorem+0xf2>
 8006928:	3b04      	subs	r3, #4
 800692a:	429d      	cmp	r5, r3
 800692c:	461a      	mov	r2, r3
 800692e:	d30a      	bcc.n	8006946 <quorem+0x106>
 8006930:	613c      	str	r4, [r7, #16]
 8006932:	4630      	mov	r0, r6
 8006934:	b003      	add	sp, #12
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	3b04      	subs	r3, #4
 800693e:	2a00      	cmp	r2, #0
 8006940:	d1cc      	bne.n	80068dc <quorem+0x9c>
 8006942:	3c01      	subs	r4, #1
 8006944:	e7c7      	b.n	80068d6 <quorem+0x96>
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	3b04      	subs	r3, #4
 800694a:	2a00      	cmp	r2, #0
 800694c:	d1f0      	bne.n	8006930 <quorem+0xf0>
 800694e:	3c01      	subs	r4, #1
 8006950:	e7eb      	b.n	800692a <quorem+0xea>
 8006952:	2000      	movs	r0, #0
 8006954:	e7ee      	b.n	8006934 <quorem+0xf4>
	...

08006958 <_dtoa_r>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	ed2d 8b02 	vpush	{d8}
 8006960:	ec57 6b10 	vmov	r6, r7, d0
 8006964:	b095      	sub	sp, #84	; 0x54
 8006966:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006968:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006972:	4604      	mov	r4, r0
 8006974:	9209      	str	r2, [sp, #36]	; 0x24
 8006976:	930f      	str	r3, [sp, #60]	; 0x3c
 8006978:	b975      	cbnz	r5, 8006998 <_dtoa_r+0x40>
 800697a:	2010      	movs	r0, #16
 800697c:	f000 fddc 	bl	8007538 <malloc>
 8006980:	4602      	mov	r2, r0
 8006982:	6260      	str	r0, [r4, #36]	; 0x24
 8006984:	b920      	cbnz	r0, 8006990 <_dtoa_r+0x38>
 8006986:	4bb2      	ldr	r3, [pc, #712]	; (8006c50 <_dtoa_r+0x2f8>)
 8006988:	21ea      	movs	r1, #234	; 0xea
 800698a:	48b2      	ldr	r0, [pc, #712]	; (8006c54 <_dtoa_r+0x2fc>)
 800698c:	f001 fb8e 	bl	80080ac <__assert_func>
 8006990:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006994:	6005      	str	r5, [r0, #0]
 8006996:	60c5      	str	r5, [r0, #12]
 8006998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800699a:	6819      	ldr	r1, [r3, #0]
 800699c:	b151      	cbz	r1, 80069b4 <_dtoa_r+0x5c>
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	604a      	str	r2, [r1, #4]
 80069a2:	2301      	movs	r3, #1
 80069a4:	4093      	lsls	r3, r2
 80069a6:	608b      	str	r3, [r1, #8]
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fe1b 	bl	80075e4 <_Bfree>
 80069ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	1e3b      	subs	r3, r7, #0
 80069b6:	bfb9      	ittee	lt
 80069b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	9303      	strlt	r3, [sp, #12]
 80069be:	2300      	movge	r3, #0
 80069c0:	f8c8 3000 	strge.w	r3, [r8]
 80069c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80069c8:	4ba3      	ldr	r3, [pc, #652]	; (8006c58 <_dtoa_r+0x300>)
 80069ca:	bfbc      	itt	lt
 80069cc:	2201      	movlt	r2, #1
 80069ce:	f8c8 2000 	strlt.w	r2, [r8]
 80069d2:	ea33 0309 	bics.w	r3, r3, r9
 80069d6:	d11b      	bne.n	8006a10 <_dtoa_r+0xb8>
 80069d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069da:	f242 730f 	movw	r3, #9999	; 0x270f
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069e4:	4333      	orrs	r3, r6
 80069e6:	f000 857a 	beq.w	80074de <_dtoa_r+0xb86>
 80069ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ec:	b963      	cbnz	r3, 8006a08 <_dtoa_r+0xb0>
 80069ee:	4b9b      	ldr	r3, [pc, #620]	; (8006c5c <_dtoa_r+0x304>)
 80069f0:	e024      	b.n	8006a3c <_dtoa_r+0xe4>
 80069f2:	4b9b      	ldr	r3, [pc, #620]	; (8006c60 <_dtoa_r+0x308>)
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	9800      	ldr	r0, [sp, #0]
 80069fe:	b015      	add	sp, #84	; 0x54
 8006a00:	ecbd 8b02 	vpop	{d8}
 8006a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a08:	4b94      	ldr	r3, [pc, #592]	; (8006c5c <_dtoa_r+0x304>)
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	3303      	adds	r3, #3
 8006a0e:	e7f3      	b.n	80069f8 <_dtoa_r+0xa0>
 8006a10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	ec51 0b17 	vmov	r0, r1, d7
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006a20:	f7fa f852 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a24:	4680      	mov	r8, r0
 8006a26:	b158      	cbz	r0, 8006a40 <_dtoa_r+0xe8>
 8006a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 8551 	beq.w	80074d8 <_dtoa_r+0xb80>
 8006a36:	488b      	ldr	r0, [pc, #556]	; (8006c64 <_dtoa_r+0x30c>)
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	1e43      	subs	r3, r0, #1
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	e7dd      	b.n	80069fc <_dtoa_r+0xa4>
 8006a40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a44:	aa12      	add	r2, sp, #72	; 0x48
 8006a46:	a913      	add	r1, sp, #76	; 0x4c
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f001 f8ad 	bl	8007ba8 <__d2b>
 8006a4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a52:	4683      	mov	fp, r0
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	d07c      	beq.n	8006b52 <_dtoa_r+0x1fa>
 8006a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a72:	4b7d      	ldr	r3, [pc, #500]	; (8006c68 <_dtoa_r+0x310>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 fc05 	bl	8000288 <__aeabi_dsub>
 8006a7e:	a36e      	add	r3, pc, #440	; (adr r3, 8006c38 <_dtoa_r+0x2e0>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fdb8 	bl	80005f8 <__aeabi_dmul>
 8006a88:	a36d      	add	r3, pc, #436	; (adr r3, 8006c40 <_dtoa_r+0x2e8>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7f9 fbfd 	bl	800028c <__adddf3>
 8006a92:	4606      	mov	r6, r0
 8006a94:	4628      	mov	r0, r5
 8006a96:	460f      	mov	r7, r1
 8006a98:	f7f9 fd44 	bl	8000524 <__aeabi_i2d>
 8006a9c:	a36a      	add	r3, pc, #424	; (adr r3, 8006c48 <_dtoa_r+0x2f0>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fda9 	bl	80005f8 <__aeabi_dmul>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4639      	mov	r1, r7
 8006aae:	f7f9 fbed 	bl	800028c <__adddf3>
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f84f 	bl	8000b58 <__aeabi_d2iz>
 8006aba:	2200      	movs	r2, #0
 8006abc:	4682      	mov	sl, r0
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f80a 	bl	8000adc <__aeabi_dcmplt>
 8006ac8:	b148      	cbz	r0, 8006ade <_dtoa_r+0x186>
 8006aca:	4650      	mov	r0, sl
 8006acc:	f7f9 fd2a 	bl	8000524 <__aeabi_i2d>
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	f7f9 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad8:	b908      	cbnz	r0, 8006ade <_dtoa_r+0x186>
 8006ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ade:	f1ba 0f16 	cmp.w	sl, #22
 8006ae2:	d854      	bhi.n	8006b8e <_dtoa_r+0x236>
 8006ae4:	4b61      	ldr	r3, [pc, #388]	; (8006c6c <_dtoa_r+0x314>)
 8006ae6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006af2:	f7f9 fff3 	bl	8000adc <__aeabi_dcmplt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d04b      	beq.n	8006b92 <_dtoa_r+0x23a>
 8006afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006afe:	2300      	movs	r3, #0
 8006b00:	930e      	str	r3, [sp, #56]	; 0x38
 8006b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b04:	1b5d      	subs	r5, r3, r5
 8006b06:	1e6b      	subs	r3, r5, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	bf43      	ittte	mi
 8006b0c:	2300      	movmi	r3, #0
 8006b0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006b12:	9304      	strmi	r3, [sp, #16]
 8006b14:	f04f 0800 	movpl.w	r8, #0
 8006b18:	f1ba 0f00 	cmp.w	sl, #0
 8006b1c:	db3b      	blt.n	8006b96 <_dtoa_r+0x23e>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006b24:	4453      	add	r3, sl
 8006b26:	9304      	str	r3, [sp, #16]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9306      	str	r3, [sp, #24]
 8006b2c:	9b05      	ldr	r3, [sp, #20]
 8006b2e:	2b09      	cmp	r3, #9
 8006b30:	d869      	bhi.n	8006c06 <_dtoa_r+0x2ae>
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	bfc4      	itt	gt
 8006b36:	3b04      	subgt	r3, #4
 8006b38:	9305      	strgt	r3, [sp, #20]
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	f1a3 0302 	sub.w	r3, r3, #2
 8006b40:	bfcc      	ite	gt
 8006b42:	2500      	movgt	r5, #0
 8006b44:	2501      	movle	r5, #1
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d869      	bhi.n	8006c1e <_dtoa_r+0x2c6>
 8006b4a:	e8df f003 	tbb	[pc, r3]
 8006b4e:	4e2c      	.short	0x4e2c
 8006b50:	5a4c      	.short	0x5a4c
 8006b52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b56:	441d      	add	r5, r3
 8006b58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	bfc1      	itttt	gt
 8006b60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b68:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b70:	bfda      	itte	le
 8006b72:	f1c3 0320 	rsble	r3, r3, #32
 8006b76:	fa06 f003 	lslle.w	r0, r6, r3
 8006b7a:	4318      	orrgt	r0, r3
 8006b7c:	f7f9 fcc2 	bl	8000504 <__aeabi_ui2d>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4606      	mov	r6, r0
 8006b84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b88:	3d01      	subs	r5, #1
 8006b8a:	9310      	str	r3, [sp, #64]	; 0x40
 8006b8c:	e771      	b.n	8006a72 <_dtoa_r+0x11a>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7b6      	b.n	8006b00 <_dtoa_r+0x1a8>
 8006b92:	900e      	str	r0, [sp, #56]	; 0x38
 8006b94:	e7b5      	b.n	8006b02 <_dtoa_r+0x1aa>
 8006b96:	f1ca 0300 	rsb	r3, sl, #0
 8006b9a:	9306      	str	r3, [sp, #24]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	eba8 080a 	sub.w	r8, r8, sl
 8006ba2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ba4:	e7c2      	b.n	8006b2c <_dtoa_r+0x1d4>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	9308      	str	r3, [sp, #32]
 8006baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dc39      	bgt.n	8006c24 <_dtoa_r+0x2cc>
 8006bb0:	f04f 0901 	mov.w	r9, #1
 8006bb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bb8:	464b      	mov	r3, r9
 8006bba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006bbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6042      	str	r2, [r0, #4]
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	f102 0614 	add.w	r6, r2, #20
 8006bca:	429e      	cmp	r6, r3
 8006bcc:	6841      	ldr	r1, [r0, #4]
 8006bce:	d92f      	bls.n	8006c30 <_dtoa_r+0x2d8>
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fcc7 	bl	8007564 <_Balloc>
 8006bd6:	9000      	str	r0, [sp, #0]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d14b      	bne.n	8006c74 <_dtoa_r+0x31c>
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <_dtoa_r+0x318>)
 8006bde:	4602      	mov	r2, r0
 8006be0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006be4:	e6d1      	b.n	800698a <_dtoa_r+0x32>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e7de      	b.n	8006ba8 <_dtoa_r+0x250>
 8006bea:	2300      	movs	r3, #0
 8006bec:	9308      	str	r3, [sp, #32]
 8006bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf0:	eb0a 0903 	add.w	r9, sl, r3
 8006bf4:	f109 0301 	add.w	r3, r9, #1
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	bfb8      	it	lt
 8006bfe:	2301      	movlt	r3, #1
 8006c00:	e7dd      	b.n	8006bbe <_dtoa_r+0x266>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e7f2      	b.n	8006bec <_dtoa_r+0x294>
 8006c06:	2501      	movs	r5, #1
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9305      	str	r3, [sp, #20]
 8006c0c:	9508      	str	r5, [sp, #32]
 8006c0e:	f04f 39ff 	mov.w	r9, #4294967295
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c18:	2312      	movs	r3, #18
 8006c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c1c:	e7cf      	b.n	8006bbe <_dtoa_r+0x266>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	9308      	str	r3, [sp, #32]
 8006c22:	e7f4      	b.n	8006c0e <_dtoa_r+0x2b6>
 8006c24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c28:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	e7c6      	b.n	8006bbe <_dtoa_r+0x266>
 8006c30:	3101      	adds	r1, #1
 8006c32:	6041      	str	r1, [r0, #4]
 8006c34:	0052      	lsls	r2, r2, #1
 8006c36:	e7c6      	b.n	8006bc6 <_dtoa_r+0x26e>
 8006c38:	636f4361 	.word	0x636f4361
 8006c3c:	3fd287a7 	.word	0x3fd287a7
 8006c40:	8b60c8b3 	.word	0x8b60c8b3
 8006c44:	3fc68a28 	.word	0x3fc68a28
 8006c48:	509f79fb 	.word	0x509f79fb
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	08008d0d 	.word	0x08008d0d
 8006c54:	08008d24 	.word	0x08008d24
 8006c58:	7ff00000 	.word	0x7ff00000
 8006c5c:	08008d09 	.word	0x08008d09
 8006c60:	08008d00 	.word	0x08008d00
 8006c64:	08008cdd 	.word	0x08008cdd
 8006c68:	3ff80000 	.word	0x3ff80000
 8006c6c:	08008e20 	.word	0x08008e20
 8006c70:	08008d83 	.word	0x08008d83
 8006c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c76:	9a00      	ldr	r2, [sp, #0]
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	2b0e      	cmp	r3, #14
 8006c7e:	f200 80ad 	bhi.w	8006ddc <_dtoa_r+0x484>
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	f000 80aa 	beq.w	8006ddc <_dtoa_r+0x484>
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	dd36      	ble.n	8006cfc <_dtoa_r+0x3a4>
 8006c8e:	4ac3      	ldr	r2, [pc, #780]	; (8006f9c <_dtoa_r+0x644>)
 8006c90:	f00a 030f 	and.w	r3, sl, #15
 8006c94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c98:	ed93 7b00 	vldr	d7, [r3]
 8006c9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006ca0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006ca4:	eeb0 8a47 	vmov.f32	s16, s14
 8006ca8:	eef0 8a67 	vmov.f32	s17, s15
 8006cac:	d016      	beq.n	8006cdc <_dtoa_r+0x384>
 8006cae:	4bbc      	ldr	r3, [pc, #752]	; (8006fa0 <_dtoa_r+0x648>)
 8006cb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cb8:	f7f9 fdc8 	bl	800084c <__aeabi_ddiv>
 8006cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc0:	f007 070f 	and.w	r7, r7, #15
 8006cc4:	2503      	movs	r5, #3
 8006cc6:	4eb6      	ldr	r6, [pc, #728]	; (8006fa0 <_dtoa_r+0x648>)
 8006cc8:	b957      	cbnz	r7, 8006ce0 <_dtoa_r+0x388>
 8006cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cce:	ec53 2b18 	vmov	r2, r3, d8
 8006cd2:	f7f9 fdbb 	bl	800084c <__aeabi_ddiv>
 8006cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cda:	e029      	b.n	8006d30 <_dtoa_r+0x3d8>
 8006cdc:	2502      	movs	r5, #2
 8006cde:	e7f2      	b.n	8006cc6 <_dtoa_r+0x36e>
 8006ce0:	07f9      	lsls	r1, r7, #31
 8006ce2:	d508      	bpl.n	8006cf6 <_dtoa_r+0x39e>
 8006ce4:	ec51 0b18 	vmov	r0, r1, d8
 8006ce8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	ec41 0b18 	vmov	d8, r0, r1
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	107f      	asrs	r7, r7, #1
 8006cf8:	3608      	adds	r6, #8
 8006cfa:	e7e5      	b.n	8006cc8 <_dtoa_r+0x370>
 8006cfc:	f000 80a6 	beq.w	8006e4c <_dtoa_r+0x4f4>
 8006d00:	f1ca 0600 	rsb	r6, sl, #0
 8006d04:	4ba5      	ldr	r3, [pc, #660]	; (8006f9c <_dtoa_r+0x644>)
 8006d06:	4fa6      	ldr	r7, [pc, #664]	; (8006fa0 <_dtoa_r+0x648>)
 8006d08:	f006 020f 	and.w	r2, r6, #15
 8006d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d18:	f7f9 fc6e 	bl	80005f8 <__aeabi_dmul>
 8006d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d20:	1136      	asrs	r6, r6, #4
 8006d22:	2300      	movs	r3, #0
 8006d24:	2502      	movs	r5, #2
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	f040 8085 	bne.w	8006e36 <_dtoa_r+0x4de>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1d2      	bne.n	8006cd6 <_dtoa_r+0x37e>
 8006d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 808c 	beq.w	8006e50 <_dtoa_r+0x4f8>
 8006d38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d3c:	4b99      	ldr	r3, [pc, #612]	; (8006fa4 <_dtoa_r+0x64c>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	f7f9 feca 	bl	8000adc <__aeabi_dcmplt>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f000 8081 	beq.w	8006e50 <_dtoa_r+0x4f8>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d07d      	beq.n	8006e50 <_dtoa_r+0x4f8>
 8006d54:	f1b9 0f00 	cmp.w	r9, #0
 8006d58:	dd3c      	ble.n	8006dd4 <_dtoa_r+0x47c>
 8006d5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d5e:	9307      	str	r3, [sp, #28]
 8006d60:	2200      	movs	r2, #0
 8006d62:	4b91      	ldr	r3, [pc, #580]	; (8006fa8 <_dtoa_r+0x650>)
 8006d64:	4630      	mov	r0, r6
 8006d66:	4639      	mov	r1, r7
 8006d68:	f7f9 fc46 	bl	80005f8 <__aeabi_dmul>
 8006d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d70:	3501      	adds	r5, #1
 8006d72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7f9 fbd2 	bl	8000524 <__aeabi_i2d>
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	f7f9 fc38 	bl	80005f8 <__aeabi_dmul>
 8006d88:	4b88      	ldr	r3, [pc, #544]	; (8006fac <_dtoa_r+0x654>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7f9 fa7e 	bl	800028c <__adddf3>
 8006d90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d15c      	bne.n	8006e5a <_dtoa_r+0x502>
 8006da0:	4b83      	ldr	r3, [pc, #524]	; (8006fb0 <_dtoa_r+0x658>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fa6e 	bl	8000288 <__aeabi_dsub>
 8006dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	f7f9 feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f040 8296 	bne.w	80072ea <_dtoa_r+0x992>
 8006dbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 fe87 	bl	8000adc <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f040 8288 	bne.w	80072e4 <_dtoa_r+0x98c>
 8006dd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ddc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f2c0 8158 	blt.w	8007094 <_dtoa_r+0x73c>
 8006de4:	f1ba 0f0e 	cmp.w	sl, #14
 8006de8:	f300 8154 	bgt.w	8007094 <_dtoa_r+0x73c>
 8006dec:	4b6b      	ldr	r3, [pc, #428]	; (8006f9c <_dtoa_r+0x644>)
 8006dee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006df2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f280 80e3 	bge.w	8006fc4 <_dtoa_r+0x66c>
 8006dfe:	9b01      	ldr	r3, [sp, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f300 80df 	bgt.w	8006fc4 <_dtoa_r+0x66c>
 8006e06:	f040 826d 	bne.w	80072e4 <_dtoa_r+0x98c>
 8006e0a:	4b69      	ldr	r3, [pc, #420]	; (8006fb0 <_dtoa_r+0x658>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4640      	mov	r0, r8
 8006e10:	4649      	mov	r1, r9
 8006e12:	f7f9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8006e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e1a:	f7f9 fe73 	bl	8000b04 <__aeabi_dcmpge>
 8006e1e:	9e01      	ldr	r6, [sp, #4]
 8006e20:	4637      	mov	r7, r6
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f040 8243 	bne.w	80072ae <_dtoa_r+0x956>
 8006e28:	9d00      	ldr	r5, [sp, #0]
 8006e2a:	2331      	movs	r3, #49	; 0x31
 8006e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e30:	f10a 0a01 	add.w	sl, sl, #1
 8006e34:	e23f      	b.n	80072b6 <_dtoa_r+0x95e>
 8006e36:	07f2      	lsls	r2, r6, #31
 8006e38:	d505      	bpl.n	8006e46 <_dtoa_r+0x4ee>
 8006e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	3501      	adds	r5, #1
 8006e44:	2301      	movs	r3, #1
 8006e46:	1076      	asrs	r6, r6, #1
 8006e48:	3708      	adds	r7, #8
 8006e4a:	e76c      	b.n	8006d26 <_dtoa_r+0x3ce>
 8006e4c:	2502      	movs	r5, #2
 8006e4e:	e76f      	b.n	8006d30 <_dtoa_r+0x3d8>
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e56:	930c      	str	r3, [sp, #48]	; 0x30
 8006e58:	e78d      	b.n	8006d76 <_dtoa_r+0x41e>
 8006e5a:	9900      	ldr	r1, [sp, #0]
 8006e5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e60:	4b4e      	ldr	r3, [pc, #312]	; (8006f9c <_dtoa_r+0x644>)
 8006e62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e66:	4401      	add	r1, r0
 8006e68:	9102      	str	r1, [sp, #8]
 8006e6a:	9908      	ldr	r1, [sp, #32]
 8006e6c:	eeb0 8a47 	vmov.f32	s16, s14
 8006e70:	eef0 8a67 	vmov.f32	s17, s15
 8006e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d045      	beq.n	8006f0c <_dtoa_r+0x5b4>
 8006e80:	494c      	ldr	r1, [pc, #304]	; (8006fb4 <_dtoa_r+0x65c>)
 8006e82:	2000      	movs	r0, #0
 8006e84:	f7f9 fce2 	bl	800084c <__aeabi_ddiv>
 8006e88:	ec53 2b18 	vmov	r2, r3, d8
 8006e8c:	f7f9 f9fc 	bl	8000288 <__aeabi_dsub>
 8006e90:	9d00      	ldr	r5, [sp, #0]
 8006e92:	ec41 0b18 	vmov	d8, r0, r1
 8006e96:	4639      	mov	r1, r7
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f7f9 fe5d 	bl	8000b58 <__aeabi_d2iz>
 8006e9e:	900c      	str	r0, [sp, #48]	; 0x30
 8006ea0:	f7f9 fb40 	bl	8000524 <__aeabi_i2d>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4639      	mov	r1, r7
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb2:	3330      	adds	r3, #48	; 0x30
 8006eb4:	f805 3b01 	strb.w	r3, [r5], #1
 8006eb8:	ec53 2b18 	vmov	r2, r3, d8
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	f7f9 fe0c 	bl	8000adc <__aeabi_dcmplt>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d165      	bne.n	8006f94 <_dtoa_r+0x63c>
 8006ec8:	4632      	mov	r2, r6
 8006eca:	463b      	mov	r3, r7
 8006ecc:	4935      	ldr	r1, [pc, #212]	; (8006fa4 <_dtoa_r+0x64c>)
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7f9 f9da 	bl	8000288 <__aeabi_dsub>
 8006ed4:	ec53 2b18 	vmov	r2, r3, d8
 8006ed8:	f7f9 fe00 	bl	8000adc <__aeabi_dcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 80b9 	bne.w	8007054 <_dtoa_r+0x6fc>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	429d      	cmp	r5, r3
 8006ee6:	f43f af75 	beq.w	8006dd4 <_dtoa_r+0x47c>
 8006eea:	4b2f      	ldr	r3, [pc, #188]	; (8006fa8 <_dtoa_r+0x650>)
 8006eec:	ec51 0b18 	vmov	r0, r1, d8
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <_dtoa_r+0x650>)
 8006ef8:	ec41 0b18 	vmov	d8, r0, r1
 8006efc:	2200      	movs	r2, #0
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	4606      	mov	r6, r0
 8006f08:	460f      	mov	r7, r1
 8006f0a:	e7c4      	b.n	8006e96 <_dtoa_r+0x53e>
 8006f0c:	ec51 0b17 	vmov	r0, r1, d7
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	9d00      	ldr	r5, [sp, #0]
 8006f18:	930c      	str	r3, [sp, #48]	; 0x30
 8006f1a:	ec41 0b18 	vmov	d8, r0, r1
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7f9 fe19 	bl	8000b58 <__aeabi_d2iz>
 8006f26:	9011      	str	r0, [sp, #68]	; 0x44
 8006f28:	f7f9 fafc 	bl	8000524 <__aeabi_i2d>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4630      	mov	r0, r6
 8006f32:	4639      	mov	r1, r7
 8006f34:	f7f9 f9a8 	bl	8000288 <__aeabi_dsub>
 8006f38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f3a:	3330      	adds	r3, #48	; 0x30
 8006f3c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	429d      	cmp	r5, r3
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	d134      	bne.n	8006fb8 <_dtoa_r+0x660>
 8006f4e:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <_dtoa_r+0x65c>)
 8006f50:	ec51 0b18 	vmov	r0, r1, d8
 8006f54:	f7f9 f99a 	bl	800028c <__adddf3>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fdda 	bl	8000b18 <__aeabi_dcmpgt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d175      	bne.n	8007054 <_dtoa_r+0x6fc>
 8006f68:	ec53 2b18 	vmov	r2, r3, d8
 8006f6c:	4911      	ldr	r1, [pc, #68]	; (8006fb4 <_dtoa_r+0x65c>)
 8006f6e:	2000      	movs	r0, #0
 8006f70:	f7f9 f98a 	bl	8000288 <__aeabi_dsub>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fdae 	bl	8000adc <__aeabi_dcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f43f af27 	beq.w	8006dd4 <_dtoa_r+0x47c>
 8006f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f88:	1e6b      	subs	r3, r5, #1
 8006f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d0f8      	beq.n	8006f86 <_dtoa_r+0x62e>
 8006f94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f98:	e04a      	b.n	8007030 <_dtoa_r+0x6d8>
 8006f9a:	bf00      	nop
 8006f9c:	08008e20 	.word	0x08008e20
 8006fa0:	08008df8 	.word	0x08008df8
 8006fa4:	3ff00000 	.word	0x3ff00000
 8006fa8:	40240000 	.word	0x40240000
 8006fac:	401c0000 	.word	0x401c0000
 8006fb0:	40140000 	.word	0x40140000
 8006fb4:	3fe00000 	.word	0x3fe00000
 8006fb8:	4baf      	ldr	r3, [pc, #700]	; (8007278 <_dtoa_r+0x920>)
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	e7ac      	b.n	8006f1e <_dtoa_r+0x5c6>
 8006fc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fc8:	9d00      	ldr	r5, [sp, #0]
 8006fca:	4642      	mov	r2, r8
 8006fcc:	464b      	mov	r3, r9
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 fc3b 	bl	800084c <__aeabi_ddiv>
 8006fd6:	f7f9 fdbf 	bl	8000b58 <__aeabi_d2iz>
 8006fda:	9002      	str	r0, [sp, #8]
 8006fdc:	f7f9 faa2 	bl	8000524 <__aeabi_i2d>
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f7f9 fb08 	bl	80005f8 <__aeabi_dmul>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 f94a 	bl	8000288 <__aeabi_dsub>
 8006ff4:	9e02      	ldr	r6, [sp, #8]
 8006ff6:	9f01      	ldr	r7, [sp, #4]
 8006ff8:	3630      	adds	r6, #48	; 0x30
 8006ffa:	f805 6b01 	strb.w	r6, [r5], #1
 8006ffe:	9e00      	ldr	r6, [sp, #0]
 8007000:	1bae      	subs	r6, r5, r6
 8007002:	42b7      	cmp	r7, r6
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	d137      	bne.n	800707a <_dtoa_r+0x722>
 800700a:	f7f9 f93f 	bl	800028c <__adddf3>
 800700e:	4642      	mov	r2, r8
 8007010:	464b      	mov	r3, r9
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	f7f9 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800701a:	b9c8      	cbnz	r0, 8007050 <_dtoa_r+0x6f8>
 800701c:	4642      	mov	r2, r8
 800701e:	464b      	mov	r3, r9
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007028:	b110      	cbz	r0, 8007030 <_dtoa_r+0x6d8>
 800702a:	9b02      	ldr	r3, [sp, #8]
 800702c:	07d9      	lsls	r1, r3, #31
 800702e:	d40f      	bmi.n	8007050 <_dtoa_r+0x6f8>
 8007030:	4620      	mov	r0, r4
 8007032:	4659      	mov	r1, fp
 8007034:	f000 fad6 	bl	80075e4 <_Bfree>
 8007038:	2300      	movs	r3, #0
 800703a:	702b      	strb	r3, [r5, #0]
 800703c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800703e:	f10a 0001 	add.w	r0, sl, #1
 8007042:	6018      	str	r0, [r3, #0]
 8007044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007046:	2b00      	cmp	r3, #0
 8007048:	f43f acd8 	beq.w	80069fc <_dtoa_r+0xa4>
 800704c:	601d      	str	r5, [r3, #0]
 800704e:	e4d5      	b.n	80069fc <_dtoa_r+0xa4>
 8007050:	f8cd a01c 	str.w	sl, [sp, #28]
 8007054:	462b      	mov	r3, r5
 8007056:	461d      	mov	r5, r3
 8007058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800705c:	2a39      	cmp	r2, #57	; 0x39
 800705e:	d108      	bne.n	8007072 <_dtoa_r+0x71a>
 8007060:	9a00      	ldr	r2, [sp, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d1f7      	bne.n	8007056 <_dtoa_r+0x6fe>
 8007066:	9a07      	ldr	r2, [sp, #28]
 8007068:	9900      	ldr	r1, [sp, #0]
 800706a:	3201      	adds	r2, #1
 800706c:	9207      	str	r2, [sp, #28]
 800706e:	2230      	movs	r2, #48	; 0x30
 8007070:	700a      	strb	r2, [r1, #0]
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	3201      	adds	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e78c      	b.n	8006f94 <_dtoa_r+0x63c>
 800707a:	4b7f      	ldr	r3, [pc, #508]	; (8007278 <_dtoa_r+0x920>)
 800707c:	2200      	movs	r2, #0
 800707e:	f7f9 fabb 	bl	80005f8 <__aeabi_dmul>
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	4606      	mov	r6, r0
 8007088:	460f      	mov	r7, r1
 800708a:	f7f9 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800708e:	2800      	cmp	r0, #0
 8007090:	d09b      	beq.n	8006fca <_dtoa_r+0x672>
 8007092:	e7cd      	b.n	8007030 <_dtoa_r+0x6d8>
 8007094:	9a08      	ldr	r2, [sp, #32]
 8007096:	2a00      	cmp	r2, #0
 8007098:	f000 80c4 	beq.w	8007224 <_dtoa_r+0x8cc>
 800709c:	9a05      	ldr	r2, [sp, #20]
 800709e:	2a01      	cmp	r2, #1
 80070a0:	f300 80a8 	bgt.w	80071f4 <_dtoa_r+0x89c>
 80070a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	f000 80a0 	beq.w	80071ec <_dtoa_r+0x894>
 80070ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070b0:	9e06      	ldr	r6, [sp, #24]
 80070b2:	4645      	mov	r5, r8
 80070b4:	9a04      	ldr	r2, [sp, #16]
 80070b6:	2101      	movs	r1, #1
 80070b8:	441a      	add	r2, r3
 80070ba:	4620      	mov	r0, r4
 80070bc:	4498      	add	r8, r3
 80070be:	9204      	str	r2, [sp, #16]
 80070c0:	f000 fb4c 	bl	800775c <__i2b>
 80070c4:	4607      	mov	r7, r0
 80070c6:	2d00      	cmp	r5, #0
 80070c8:	dd0b      	ble.n	80070e2 <_dtoa_r+0x78a>
 80070ca:	9b04      	ldr	r3, [sp, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd08      	ble.n	80070e2 <_dtoa_r+0x78a>
 80070d0:	42ab      	cmp	r3, r5
 80070d2:	9a04      	ldr	r2, [sp, #16]
 80070d4:	bfa8      	it	ge
 80070d6:	462b      	movge	r3, r5
 80070d8:	eba8 0803 	sub.w	r8, r8, r3
 80070dc:	1aed      	subs	r5, r5, r3
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	b1fb      	cbz	r3, 8007126 <_dtoa_r+0x7ce>
 80070e6:	9b08      	ldr	r3, [sp, #32]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 809f 	beq.w	800722c <_dtoa_r+0x8d4>
 80070ee:	2e00      	cmp	r6, #0
 80070f0:	dd11      	ble.n	8007116 <_dtoa_r+0x7be>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4632      	mov	r2, r6
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 fbec 	bl	80078d4 <__pow5mult>
 80070fc:	465a      	mov	r2, fp
 80070fe:	4601      	mov	r1, r0
 8007100:	4607      	mov	r7, r0
 8007102:	4620      	mov	r0, r4
 8007104:	f000 fb40 	bl	8007788 <__multiply>
 8007108:	4659      	mov	r1, fp
 800710a:	9007      	str	r0, [sp, #28]
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fa69 	bl	80075e4 <_Bfree>
 8007112:	9b07      	ldr	r3, [sp, #28]
 8007114:	469b      	mov	fp, r3
 8007116:	9b06      	ldr	r3, [sp, #24]
 8007118:	1b9a      	subs	r2, r3, r6
 800711a:	d004      	beq.n	8007126 <_dtoa_r+0x7ce>
 800711c:	4659      	mov	r1, fp
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fbd8 	bl	80078d4 <__pow5mult>
 8007124:	4683      	mov	fp, r0
 8007126:	2101      	movs	r1, #1
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fb17 	bl	800775c <__i2b>
 800712e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007130:	2b00      	cmp	r3, #0
 8007132:	4606      	mov	r6, r0
 8007134:	dd7c      	ble.n	8007230 <_dtoa_r+0x8d8>
 8007136:	461a      	mov	r2, r3
 8007138:	4601      	mov	r1, r0
 800713a:	4620      	mov	r0, r4
 800713c:	f000 fbca 	bl	80078d4 <__pow5mult>
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	2b01      	cmp	r3, #1
 8007144:	4606      	mov	r6, r0
 8007146:	dd76      	ble.n	8007236 <_dtoa_r+0x8de>
 8007148:	2300      	movs	r3, #0
 800714a:	9306      	str	r3, [sp, #24]
 800714c:	6933      	ldr	r3, [r6, #16]
 800714e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007152:	6918      	ldr	r0, [r3, #16]
 8007154:	f000 fab2 	bl	80076bc <__hi0bits>
 8007158:	f1c0 0020 	rsb	r0, r0, #32
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	4418      	add	r0, r3
 8007160:	f010 001f 	ands.w	r0, r0, #31
 8007164:	f000 8086 	beq.w	8007274 <_dtoa_r+0x91c>
 8007168:	f1c0 0320 	rsb	r3, r0, #32
 800716c:	2b04      	cmp	r3, #4
 800716e:	dd7f      	ble.n	8007270 <_dtoa_r+0x918>
 8007170:	f1c0 001c 	rsb	r0, r0, #28
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	4403      	add	r3, r0
 8007178:	4480      	add	r8, r0
 800717a:	4405      	add	r5, r0
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	f1b8 0f00 	cmp.w	r8, #0
 8007182:	dd05      	ble.n	8007190 <_dtoa_r+0x838>
 8007184:	4659      	mov	r1, fp
 8007186:	4642      	mov	r2, r8
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fbfd 	bl	8007988 <__lshift>
 800718e:	4683      	mov	fp, r0
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dd05      	ble.n	80071a2 <_dtoa_r+0x84a>
 8007196:	4631      	mov	r1, r6
 8007198:	461a      	mov	r2, r3
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fbf4 	bl	8007988 <__lshift>
 80071a0:	4606      	mov	r6, r0
 80071a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d069      	beq.n	800727c <_dtoa_r+0x924>
 80071a8:	4631      	mov	r1, r6
 80071aa:	4658      	mov	r0, fp
 80071ac:	f000 fc58 	bl	8007a60 <__mcmp>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	da63      	bge.n	800727c <_dtoa_r+0x924>
 80071b4:	2300      	movs	r3, #0
 80071b6:	4659      	mov	r1, fp
 80071b8:	220a      	movs	r2, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fa34 	bl	8007628 <__multadd>
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071c6:	4683      	mov	fp, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 818f 	beq.w	80074ec <_dtoa_r+0xb94>
 80071ce:	4639      	mov	r1, r7
 80071d0:	2300      	movs	r3, #0
 80071d2:	220a      	movs	r2, #10
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fa27 	bl	8007628 <__multadd>
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	4607      	mov	r7, r0
 80071e0:	f300 808e 	bgt.w	8007300 <_dtoa_r+0x9a8>
 80071e4:	9b05      	ldr	r3, [sp, #20]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	dc50      	bgt.n	800728c <_dtoa_r+0x934>
 80071ea:	e089      	b.n	8007300 <_dtoa_r+0x9a8>
 80071ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071f2:	e75d      	b.n	80070b0 <_dtoa_r+0x758>
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	1e5e      	subs	r6, r3, #1
 80071f8:	9b06      	ldr	r3, [sp, #24]
 80071fa:	42b3      	cmp	r3, r6
 80071fc:	bfbf      	itttt	lt
 80071fe:	9b06      	ldrlt	r3, [sp, #24]
 8007200:	9606      	strlt	r6, [sp, #24]
 8007202:	1af2      	sublt	r2, r6, r3
 8007204:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007206:	bfb6      	itet	lt
 8007208:	189b      	addlt	r3, r3, r2
 800720a:	1b9e      	subge	r6, r3, r6
 800720c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	bfb8      	it	lt
 8007212:	2600      	movlt	r6, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfb5      	itete	lt
 8007218:	eba8 0503 	sublt.w	r5, r8, r3
 800721c:	9b01      	ldrge	r3, [sp, #4]
 800721e:	2300      	movlt	r3, #0
 8007220:	4645      	movge	r5, r8
 8007222:	e747      	b.n	80070b4 <_dtoa_r+0x75c>
 8007224:	9e06      	ldr	r6, [sp, #24]
 8007226:	9f08      	ldr	r7, [sp, #32]
 8007228:	4645      	mov	r5, r8
 800722a:	e74c      	b.n	80070c6 <_dtoa_r+0x76e>
 800722c:	9a06      	ldr	r2, [sp, #24]
 800722e:	e775      	b.n	800711c <_dtoa_r+0x7c4>
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	2b01      	cmp	r3, #1
 8007234:	dc18      	bgt.n	8007268 <_dtoa_r+0x910>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	b9b3      	cbnz	r3, 8007268 <_dtoa_r+0x910>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007240:	b9a3      	cbnz	r3, 800726c <_dtoa_r+0x914>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007248:	0d1b      	lsrs	r3, r3, #20
 800724a:	051b      	lsls	r3, r3, #20
 800724c:	b12b      	cbz	r3, 800725a <_dtoa_r+0x902>
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	3301      	adds	r3, #1
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	f108 0801 	add.w	r8, r8, #1
 8007258:	2301      	movs	r3, #1
 800725a:	9306      	str	r3, [sp, #24]
 800725c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800725e:	2b00      	cmp	r3, #0
 8007260:	f47f af74 	bne.w	800714c <_dtoa_r+0x7f4>
 8007264:	2001      	movs	r0, #1
 8007266:	e779      	b.n	800715c <_dtoa_r+0x804>
 8007268:	2300      	movs	r3, #0
 800726a:	e7f6      	b.n	800725a <_dtoa_r+0x902>
 800726c:	9b02      	ldr	r3, [sp, #8]
 800726e:	e7f4      	b.n	800725a <_dtoa_r+0x902>
 8007270:	d085      	beq.n	800717e <_dtoa_r+0x826>
 8007272:	4618      	mov	r0, r3
 8007274:	301c      	adds	r0, #28
 8007276:	e77d      	b.n	8007174 <_dtoa_r+0x81c>
 8007278:	40240000 	.word	0x40240000
 800727c:	9b01      	ldr	r3, [sp, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	dc38      	bgt.n	80072f4 <_dtoa_r+0x99c>
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	2b02      	cmp	r3, #2
 8007286:	dd35      	ble.n	80072f4 <_dtoa_r+0x99c>
 8007288:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800728c:	f1b9 0f00 	cmp.w	r9, #0
 8007290:	d10d      	bne.n	80072ae <_dtoa_r+0x956>
 8007292:	4631      	mov	r1, r6
 8007294:	464b      	mov	r3, r9
 8007296:	2205      	movs	r2, #5
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f9c5 	bl	8007628 <__multadd>
 800729e:	4601      	mov	r1, r0
 80072a0:	4606      	mov	r6, r0
 80072a2:	4658      	mov	r0, fp
 80072a4:	f000 fbdc 	bl	8007a60 <__mcmp>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f73f adbd 	bgt.w	8006e28 <_dtoa_r+0x4d0>
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	9d00      	ldr	r5, [sp, #0]
 80072b2:	ea6f 0a03 	mvn.w	sl, r3
 80072b6:	f04f 0800 	mov.w	r8, #0
 80072ba:	4631      	mov	r1, r6
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 f991 	bl	80075e4 <_Bfree>
 80072c2:	2f00      	cmp	r7, #0
 80072c4:	f43f aeb4 	beq.w	8007030 <_dtoa_r+0x6d8>
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	d005      	beq.n	80072da <_dtoa_r+0x982>
 80072ce:	45b8      	cmp	r8, r7
 80072d0:	d003      	beq.n	80072da <_dtoa_r+0x982>
 80072d2:	4641      	mov	r1, r8
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 f985 	bl	80075e4 <_Bfree>
 80072da:	4639      	mov	r1, r7
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 f981 	bl	80075e4 <_Bfree>
 80072e2:	e6a5      	b.n	8007030 <_dtoa_r+0x6d8>
 80072e4:	2600      	movs	r6, #0
 80072e6:	4637      	mov	r7, r6
 80072e8:	e7e1      	b.n	80072ae <_dtoa_r+0x956>
 80072ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072f0:	4637      	mov	r7, r6
 80072f2:	e599      	b.n	8006e28 <_dtoa_r+0x4d0>
 80072f4:	9b08      	ldr	r3, [sp, #32]
 80072f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80fd 	beq.w	80074fa <_dtoa_r+0xba2>
 8007300:	2d00      	cmp	r5, #0
 8007302:	dd05      	ble.n	8007310 <_dtoa_r+0x9b8>
 8007304:	4639      	mov	r1, r7
 8007306:	462a      	mov	r2, r5
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fb3d 	bl	8007988 <__lshift>
 800730e:	4607      	mov	r7, r0
 8007310:	9b06      	ldr	r3, [sp, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d05c      	beq.n	80073d0 <_dtoa_r+0xa78>
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4620      	mov	r0, r4
 800731a:	f000 f923 	bl	8007564 <_Balloc>
 800731e:	4605      	mov	r5, r0
 8007320:	b928      	cbnz	r0, 800732e <_dtoa_r+0x9d6>
 8007322:	4b80      	ldr	r3, [pc, #512]	; (8007524 <_dtoa_r+0xbcc>)
 8007324:	4602      	mov	r2, r0
 8007326:	f240 21ea 	movw	r1, #746	; 0x2ea
 800732a:	f7ff bb2e 	b.w	800698a <_dtoa_r+0x32>
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	3202      	adds	r2, #2
 8007332:	0092      	lsls	r2, r2, #2
 8007334:	f107 010c 	add.w	r1, r7, #12
 8007338:	300c      	adds	r0, #12
 800733a:	f000 f905 	bl	8007548 <memcpy>
 800733e:	2201      	movs	r2, #1
 8007340:	4629      	mov	r1, r5
 8007342:	4620      	mov	r0, r4
 8007344:	f000 fb20 	bl	8007988 <__lshift>
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	3301      	adds	r3, #1
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	444b      	add	r3, r9
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	46b8      	mov	r8, r7
 800735c:	9306      	str	r3, [sp, #24]
 800735e:	4607      	mov	r7, r0
 8007360:	9b01      	ldr	r3, [sp, #4]
 8007362:	4631      	mov	r1, r6
 8007364:	3b01      	subs	r3, #1
 8007366:	4658      	mov	r0, fp
 8007368:	9302      	str	r3, [sp, #8]
 800736a:	f7ff fa69 	bl	8006840 <quorem>
 800736e:	4603      	mov	r3, r0
 8007370:	3330      	adds	r3, #48	; 0x30
 8007372:	9004      	str	r0, [sp, #16]
 8007374:	4641      	mov	r1, r8
 8007376:	4658      	mov	r0, fp
 8007378:	9308      	str	r3, [sp, #32]
 800737a:	f000 fb71 	bl	8007a60 <__mcmp>
 800737e:	463a      	mov	r2, r7
 8007380:	4681      	mov	r9, r0
 8007382:	4631      	mov	r1, r6
 8007384:	4620      	mov	r0, r4
 8007386:	f000 fb87 	bl	8007a98 <__mdiff>
 800738a:	68c2      	ldr	r2, [r0, #12]
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	4605      	mov	r5, r0
 8007390:	bb02      	cbnz	r2, 80073d4 <_dtoa_r+0xa7c>
 8007392:	4601      	mov	r1, r0
 8007394:	4658      	mov	r0, fp
 8007396:	f000 fb63 	bl	8007a60 <__mcmp>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	4602      	mov	r2, r0
 800739e:	4629      	mov	r1, r5
 80073a0:	4620      	mov	r0, r4
 80073a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80073a6:	f000 f91d 	bl	80075e4 <_Bfree>
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ae:	9d01      	ldr	r5, [sp, #4]
 80073b0:	ea43 0102 	orr.w	r1, r3, r2
 80073b4:	9b06      	ldr	r3, [sp, #24]
 80073b6:	430b      	orrs	r3, r1
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	d10d      	bne.n	80073d8 <_dtoa_r+0xa80>
 80073bc:	2b39      	cmp	r3, #57	; 0x39
 80073be:	d029      	beq.n	8007414 <_dtoa_r+0xabc>
 80073c0:	f1b9 0f00 	cmp.w	r9, #0
 80073c4:	dd01      	ble.n	80073ca <_dtoa_r+0xa72>
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	3331      	adds	r3, #49	; 0x31
 80073ca:	9a02      	ldr	r2, [sp, #8]
 80073cc:	7013      	strb	r3, [r2, #0]
 80073ce:	e774      	b.n	80072ba <_dtoa_r+0x962>
 80073d0:	4638      	mov	r0, r7
 80073d2:	e7b9      	b.n	8007348 <_dtoa_r+0x9f0>
 80073d4:	2201      	movs	r2, #1
 80073d6:	e7e2      	b.n	800739e <_dtoa_r+0xa46>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	db06      	blt.n	80073ec <_dtoa_r+0xa94>
 80073de:	9905      	ldr	r1, [sp, #20]
 80073e0:	ea41 0909 	orr.w	r9, r1, r9
 80073e4:	9906      	ldr	r1, [sp, #24]
 80073e6:	ea59 0101 	orrs.w	r1, r9, r1
 80073ea:	d120      	bne.n	800742e <_dtoa_r+0xad6>
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	ddec      	ble.n	80073ca <_dtoa_r+0xa72>
 80073f0:	4659      	mov	r1, fp
 80073f2:	2201      	movs	r2, #1
 80073f4:	4620      	mov	r0, r4
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f000 fac6 	bl	8007988 <__lshift>
 80073fc:	4631      	mov	r1, r6
 80073fe:	4683      	mov	fp, r0
 8007400:	f000 fb2e 	bl	8007a60 <__mcmp>
 8007404:	2800      	cmp	r0, #0
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	dc02      	bgt.n	8007410 <_dtoa_r+0xab8>
 800740a:	d1de      	bne.n	80073ca <_dtoa_r+0xa72>
 800740c:	07da      	lsls	r2, r3, #31
 800740e:	d5dc      	bpl.n	80073ca <_dtoa_r+0xa72>
 8007410:	2b39      	cmp	r3, #57	; 0x39
 8007412:	d1d8      	bne.n	80073c6 <_dtoa_r+0xa6e>
 8007414:	9a02      	ldr	r2, [sp, #8]
 8007416:	2339      	movs	r3, #57	; 0x39
 8007418:	7013      	strb	r3, [r2, #0]
 800741a:	462b      	mov	r3, r5
 800741c:	461d      	mov	r5, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007424:	2a39      	cmp	r2, #57	; 0x39
 8007426:	d050      	beq.n	80074ca <_dtoa_r+0xb72>
 8007428:	3201      	adds	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e745      	b.n	80072ba <_dtoa_r+0x962>
 800742e:	2a00      	cmp	r2, #0
 8007430:	dd03      	ble.n	800743a <_dtoa_r+0xae2>
 8007432:	2b39      	cmp	r3, #57	; 0x39
 8007434:	d0ee      	beq.n	8007414 <_dtoa_r+0xabc>
 8007436:	3301      	adds	r3, #1
 8007438:	e7c7      	b.n	80073ca <_dtoa_r+0xa72>
 800743a:	9a01      	ldr	r2, [sp, #4]
 800743c:	9907      	ldr	r1, [sp, #28]
 800743e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007442:	428a      	cmp	r2, r1
 8007444:	d02a      	beq.n	800749c <_dtoa_r+0xb44>
 8007446:	4659      	mov	r1, fp
 8007448:	2300      	movs	r3, #0
 800744a:	220a      	movs	r2, #10
 800744c:	4620      	mov	r0, r4
 800744e:	f000 f8eb 	bl	8007628 <__multadd>
 8007452:	45b8      	cmp	r8, r7
 8007454:	4683      	mov	fp, r0
 8007456:	f04f 0300 	mov.w	r3, #0
 800745a:	f04f 020a 	mov.w	r2, #10
 800745e:	4641      	mov	r1, r8
 8007460:	4620      	mov	r0, r4
 8007462:	d107      	bne.n	8007474 <_dtoa_r+0xb1c>
 8007464:	f000 f8e0 	bl	8007628 <__multadd>
 8007468:	4680      	mov	r8, r0
 800746a:	4607      	mov	r7, r0
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	3301      	adds	r3, #1
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	e775      	b.n	8007360 <_dtoa_r+0xa08>
 8007474:	f000 f8d8 	bl	8007628 <__multadd>
 8007478:	4639      	mov	r1, r7
 800747a:	4680      	mov	r8, r0
 800747c:	2300      	movs	r3, #0
 800747e:	220a      	movs	r2, #10
 8007480:	4620      	mov	r0, r4
 8007482:	f000 f8d1 	bl	8007628 <__multadd>
 8007486:	4607      	mov	r7, r0
 8007488:	e7f0      	b.n	800746c <_dtoa_r+0xb14>
 800748a:	f1b9 0f00 	cmp.w	r9, #0
 800748e:	9a00      	ldr	r2, [sp, #0]
 8007490:	bfcc      	ite	gt
 8007492:	464d      	movgt	r5, r9
 8007494:	2501      	movle	r5, #1
 8007496:	4415      	add	r5, r2
 8007498:	f04f 0800 	mov.w	r8, #0
 800749c:	4659      	mov	r1, fp
 800749e:	2201      	movs	r2, #1
 80074a0:	4620      	mov	r0, r4
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	f000 fa70 	bl	8007988 <__lshift>
 80074a8:	4631      	mov	r1, r6
 80074aa:	4683      	mov	fp, r0
 80074ac:	f000 fad8 	bl	8007a60 <__mcmp>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	dcb2      	bgt.n	800741a <_dtoa_r+0xac2>
 80074b4:	d102      	bne.n	80074bc <_dtoa_r+0xb64>
 80074b6:	9b01      	ldr	r3, [sp, #4]
 80074b8:	07db      	lsls	r3, r3, #31
 80074ba:	d4ae      	bmi.n	800741a <_dtoa_r+0xac2>
 80074bc:	462b      	mov	r3, r5
 80074be:	461d      	mov	r5, r3
 80074c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074c4:	2a30      	cmp	r2, #48	; 0x30
 80074c6:	d0fa      	beq.n	80074be <_dtoa_r+0xb66>
 80074c8:	e6f7      	b.n	80072ba <_dtoa_r+0x962>
 80074ca:	9a00      	ldr	r2, [sp, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d1a5      	bne.n	800741c <_dtoa_r+0xac4>
 80074d0:	f10a 0a01 	add.w	sl, sl, #1
 80074d4:	2331      	movs	r3, #49	; 0x31
 80074d6:	e779      	b.n	80073cc <_dtoa_r+0xa74>
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <_dtoa_r+0xbd0>)
 80074da:	f7ff baaf 	b.w	8006a3c <_dtoa_r+0xe4>
 80074de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f47f aa86 	bne.w	80069f2 <_dtoa_r+0x9a>
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <_dtoa_r+0xbd4>)
 80074e8:	f7ff baa8 	b.w	8006a3c <_dtoa_r+0xe4>
 80074ec:	f1b9 0f00 	cmp.w	r9, #0
 80074f0:	dc03      	bgt.n	80074fa <_dtoa_r+0xba2>
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	f73f aec9 	bgt.w	800728c <_dtoa_r+0x934>
 80074fa:	9d00      	ldr	r5, [sp, #0]
 80074fc:	4631      	mov	r1, r6
 80074fe:	4658      	mov	r0, fp
 8007500:	f7ff f99e 	bl	8006840 <quorem>
 8007504:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007508:	f805 3b01 	strb.w	r3, [r5], #1
 800750c:	9a00      	ldr	r2, [sp, #0]
 800750e:	1aaa      	subs	r2, r5, r2
 8007510:	4591      	cmp	r9, r2
 8007512:	ddba      	ble.n	800748a <_dtoa_r+0xb32>
 8007514:	4659      	mov	r1, fp
 8007516:	2300      	movs	r3, #0
 8007518:	220a      	movs	r2, #10
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f884 	bl	8007628 <__multadd>
 8007520:	4683      	mov	fp, r0
 8007522:	e7eb      	b.n	80074fc <_dtoa_r+0xba4>
 8007524:	08008d83 	.word	0x08008d83
 8007528:	08008cdc 	.word	0x08008cdc
 800752c:	08008d00 	.word	0x08008d00

08007530 <_localeconv_r>:
 8007530:	4800      	ldr	r0, [pc, #0]	; (8007534 <_localeconv_r+0x4>)
 8007532:	4770      	bx	lr
 8007534:	20000160 	.word	0x20000160

08007538 <malloc>:
 8007538:	4b02      	ldr	r3, [pc, #8]	; (8007544 <malloc+0xc>)
 800753a:	4601      	mov	r1, r0
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	f000 bbef 	b.w	8007d20 <_malloc_r>
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c

08007548 <memcpy>:
 8007548:	440a      	add	r2, r1
 800754a:	4291      	cmp	r1, r2
 800754c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007550:	d100      	bne.n	8007554 <memcpy+0xc>
 8007552:	4770      	bx	lr
 8007554:	b510      	push	{r4, lr}
 8007556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800755e:	4291      	cmp	r1, r2
 8007560:	d1f9      	bne.n	8007556 <memcpy+0xe>
 8007562:	bd10      	pop	{r4, pc}

08007564 <_Balloc>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	b976      	cbnz	r6, 800758c <_Balloc+0x28>
 800756e:	2010      	movs	r0, #16
 8007570:	f7ff ffe2 	bl	8007538 <malloc>
 8007574:	4602      	mov	r2, r0
 8007576:	6260      	str	r0, [r4, #36]	; 0x24
 8007578:	b920      	cbnz	r0, 8007584 <_Balloc+0x20>
 800757a:	4b18      	ldr	r3, [pc, #96]	; (80075dc <_Balloc+0x78>)
 800757c:	4818      	ldr	r0, [pc, #96]	; (80075e0 <_Balloc+0x7c>)
 800757e:	2166      	movs	r1, #102	; 0x66
 8007580:	f000 fd94 	bl	80080ac <__assert_func>
 8007584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007588:	6006      	str	r6, [r0, #0]
 800758a:	60c6      	str	r6, [r0, #12]
 800758c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800758e:	68f3      	ldr	r3, [r6, #12]
 8007590:	b183      	cbz	r3, 80075b4 <_Balloc+0x50>
 8007592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800759a:	b9b8      	cbnz	r0, 80075cc <_Balloc+0x68>
 800759c:	2101      	movs	r1, #1
 800759e:	fa01 f605 	lsl.w	r6, r1, r5
 80075a2:	1d72      	adds	r2, r6, #5
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 fb5a 	bl	8007c60 <_calloc_r>
 80075ac:	b160      	cbz	r0, 80075c8 <_Balloc+0x64>
 80075ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075b2:	e00e      	b.n	80075d2 <_Balloc+0x6e>
 80075b4:	2221      	movs	r2, #33	; 0x21
 80075b6:	2104      	movs	r1, #4
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fb51 	bl	8007c60 <_calloc_r>
 80075be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c0:	60f0      	str	r0, [r6, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <_Balloc+0x2e>
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075d2:	2300      	movs	r3, #0
 80075d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075d8:	e7f7      	b.n	80075ca <_Balloc+0x66>
 80075da:	bf00      	nop
 80075dc:	08008d0d 	.word	0x08008d0d
 80075e0:	08008d94 	.word	0x08008d94

080075e4 <_Bfree>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075e8:	4605      	mov	r5, r0
 80075ea:	460c      	mov	r4, r1
 80075ec:	b976      	cbnz	r6, 800760c <_Bfree+0x28>
 80075ee:	2010      	movs	r0, #16
 80075f0:	f7ff ffa2 	bl	8007538 <malloc>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6268      	str	r0, [r5, #36]	; 0x24
 80075f8:	b920      	cbnz	r0, 8007604 <_Bfree+0x20>
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <_Bfree+0x3c>)
 80075fc:	4809      	ldr	r0, [pc, #36]	; (8007624 <_Bfree+0x40>)
 80075fe:	218a      	movs	r1, #138	; 0x8a
 8007600:	f000 fd54 	bl	80080ac <__assert_func>
 8007604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007608:	6006      	str	r6, [r0, #0]
 800760a:	60c6      	str	r6, [r0, #12]
 800760c:	b13c      	cbz	r4, 800761e <_Bfree+0x3a>
 800760e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007610:	6862      	ldr	r2, [r4, #4]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007618:	6021      	str	r1, [r4, #0]
 800761a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	08008d0d 	.word	0x08008d0d
 8007624:	08008d94 	.word	0x08008d94

08007628 <__multadd>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	690e      	ldr	r6, [r1, #16]
 800762e:	4607      	mov	r7, r0
 8007630:	4698      	mov	r8, r3
 8007632:	460c      	mov	r4, r1
 8007634:	f101 0014 	add.w	r0, r1, #20
 8007638:	2300      	movs	r3, #0
 800763a:	6805      	ldr	r5, [r0, #0]
 800763c:	b2a9      	uxth	r1, r5
 800763e:	fb02 8101 	mla	r1, r2, r1, r8
 8007642:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007646:	0c2d      	lsrs	r5, r5, #16
 8007648:	fb02 c505 	mla	r5, r2, r5, ip
 800764c:	b289      	uxth	r1, r1
 800764e:	3301      	adds	r3, #1
 8007650:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007654:	429e      	cmp	r6, r3
 8007656:	f840 1b04 	str.w	r1, [r0], #4
 800765a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800765e:	dcec      	bgt.n	800763a <__multadd+0x12>
 8007660:	f1b8 0f00 	cmp.w	r8, #0
 8007664:	d022      	beq.n	80076ac <__multadd+0x84>
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	42b3      	cmp	r3, r6
 800766a:	dc19      	bgt.n	80076a0 <__multadd+0x78>
 800766c:	6861      	ldr	r1, [r4, #4]
 800766e:	4638      	mov	r0, r7
 8007670:	3101      	adds	r1, #1
 8007672:	f7ff ff77 	bl	8007564 <_Balloc>
 8007676:	4605      	mov	r5, r0
 8007678:	b928      	cbnz	r0, 8007686 <__multadd+0x5e>
 800767a:	4602      	mov	r2, r0
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <__multadd+0x8c>)
 800767e:	480e      	ldr	r0, [pc, #56]	; (80076b8 <__multadd+0x90>)
 8007680:	21b5      	movs	r1, #181	; 0xb5
 8007682:	f000 fd13 	bl	80080ac <__assert_func>
 8007686:	6922      	ldr	r2, [r4, #16]
 8007688:	3202      	adds	r2, #2
 800768a:	f104 010c 	add.w	r1, r4, #12
 800768e:	0092      	lsls	r2, r2, #2
 8007690:	300c      	adds	r0, #12
 8007692:	f7ff ff59 	bl	8007548 <memcpy>
 8007696:	4621      	mov	r1, r4
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff ffa3 	bl	80075e4 <_Bfree>
 800769e:	462c      	mov	r4, r5
 80076a0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80076a4:	3601      	adds	r6, #1
 80076a6:	f8c3 8014 	str.w	r8, [r3, #20]
 80076aa:	6126      	str	r6, [r4, #16]
 80076ac:	4620      	mov	r0, r4
 80076ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b2:	bf00      	nop
 80076b4:	08008d83 	.word	0x08008d83
 80076b8:	08008d94 	.word	0x08008d94

080076bc <__hi0bits>:
 80076bc:	0c03      	lsrs	r3, r0, #16
 80076be:	041b      	lsls	r3, r3, #16
 80076c0:	b9d3      	cbnz	r3, 80076f8 <__hi0bits+0x3c>
 80076c2:	0400      	lsls	r0, r0, #16
 80076c4:	2310      	movs	r3, #16
 80076c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076ca:	bf04      	itt	eq
 80076cc:	0200      	lsleq	r0, r0, #8
 80076ce:	3308      	addeq	r3, #8
 80076d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076d4:	bf04      	itt	eq
 80076d6:	0100      	lsleq	r0, r0, #4
 80076d8:	3304      	addeq	r3, #4
 80076da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076de:	bf04      	itt	eq
 80076e0:	0080      	lsleq	r0, r0, #2
 80076e2:	3302      	addeq	r3, #2
 80076e4:	2800      	cmp	r0, #0
 80076e6:	db05      	blt.n	80076f4 <__hi0bits+0x38>
 80076e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076ec:	f103 0301 	add.w	r3, r3, #1
 80076f0:	bf08      	it	eq
 80076f2:	2320      	moveq	r3, #32
 80076f4:	4618      	mov	r0, r3
 80076f6:	4770      	bx	lr
 80076f8:	2300      	movs	r3, #0
 80076fa:	e7e4      	b.n	80076c6 <__hi0bits+0xa>

080076fc <__lo0bits>:
 80076fc:	6803      	ldr	r3, [r0, #0]
 80076fe:	f013 0207 	ands.w	r2, r3, #7
 8007702:	4601      	mov	r1, r0
 8007704:	d00b      	beq.n	800771e <__lo0bits+0x22>
 8007706:	07da      	lsls	r2, r3, #31
 8007708:	d424      	bmi.n	8007754 <__lo0bits+0x58>
 800770a:	0798      	lsls	r0, r3, #30
 800770c:	bf49      	itett	mi
 800770e:	085b      	lsrmi	r3, r3, #1
 8007710:	089b      	lsrpl	r3, r3, #2
 8007712:	2001      	movmi	r0, #1
 8007714:	600b      	strmi	r3, [r1, #0]
 8007716:	bf5c      	itt	pl
 8007718:	600b      	strpl	r3, [r1, #0]
 800771a:	2002      	movpl	r0, #2
 800771c:	4770      	bx	lr
 800771e:	b298      	uxth	r0, r3
 8007720:	b9b0      	cbnz	r0, 8007750 <__lo0bits+0x54>
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	2010      	movs	r0, #16
 8007726:	f013 0fff 	tst.w	r3, #255	; 0xff
 800772a:	bf04      	itt	eq
 800772c:	0a1b      	lsreq	r3, r3, #8
 800772e:	3008      	addeq	r0, #8
 8007730:	071a      	lsls	r2, r3, #28
 8007732:	bf04      	itt	eq
 8007734:	091b      	lsreq	r3, r3, #4
 8007736:	3004      	addeq	r0, #4
 8007738:	079a      	lsls	r2, r3, #30
 800773a:	bf04      	itt	eq
 800773c:	089b      	lsreq	r3, r3, #2
 800773e:	3002      	addeq	r0, #2
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	d403      	bmi.n	800774c <__lo0bits+0x50>
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	f100 0001 	add.w	r0, r0, #1
 800774a:	d005      	beq.n	8007758 <__lo0bits+0x5c>
 800774c:	600b      	str	r3, [r1, #0]
 800774e:	4770      	bx	lr
 8007750:	4610      	mov	r0, r2
 8007752:	e7e8      	b.n	8007726 <__lo0bits+0x2a>
 8007754:	2000      	movs	r0, #0
 8007756:	4770      	bx	lr
 8007758:	2020      	movs	r0, #32
 800775a:	4770      	bx	lr

0800775c <__i2b>:
 800775c:	b510      	push	{r4, lr}
 800775e:	460c      	mov	r4, r1
 8007760:	2101      	movs	r1, #1
 8007762:	f7ff feff 	bl	8007564 <_Balloc>
 8007766:	4602      	mov	r2, r0
 8007768:	b928      	cbnz	r0, 8007776 <__i2b+0x1a>
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <__i2b+0x24>)
 800776c:	4805      	ldr	r0, [pc, #20]	; (8007784 <__i2b+0x28>)
 800776e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007772:	f000 fc9b 	bl	80080ac <__assert_func>
 8007776:	2301      	movs	r3, #1
 8007778:	6144      	str	r4, [r0, #20]
 800777a:	6103      	str	r3, [r0, #16]
 800777c:	bd10      	pop	{r4, pc}
 800777e:	bf00      	nop
 8007780:	08008d83 	.word	0x08008d83
 8007784:	08008d94 	.word	0x08008d94

08007788 <__multiply>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4614      	mov	r4, r2
 800778e:	690a      	ldr	r2, [r1, #16]
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	bfb8      	it	lt
 8007796:	460b      	movlt	r3, r1
 8007798:	460d      	mov	r5, r1
 800779a:	bfbc      	itt	lt
 800779c:	4625      	movlt	r5, r4
 800779e:	461c      	movlt	r4, r3
 80077a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077a8:	68ab      	ldr	r3, [r5, #8]
 80077aa:	6869      	ldr	r1, [r5, #4]
 80077ac:	eb0a 0709 	add.w	r7, sl, r9
 80077b0:	42bb      	cmp	r3, r7
 80077b2:	b085      	sub	sp, #20
 80077b4:	bfb8      	it	lt
 80077b6:	3101      	addlt	r1, #1
 80077b8:	f7ff fed4 	bl	8007564 <_Balloc>
 80077bc:	b930      	cbnz	r0, 80077cc <__multiply+0x44>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b42      	ldr	r3, [pc, #264]	; (80078cc <__multiply+0x144>)
 80077c2:	4843      	ldr	r0, [pc, #268]	; (80078d0 <__multiply+0x148>)
 80077c4:	f240 115d 	movw	r1, #349	; 0x15d
 80077c8:	f000 fc70 	bl	80080ac <__assert_func>
 80077cc:	f100 0614 	add.w	r6, r0, #20
 80077d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077d4:	4633      	mov	r3, r6
 80077d6:	2200      	movs	r2, #0
 80077d8:	4543      	cmp	r3, r8
 80077da:	d31e      	bcc.n	800781a <__multiply+0x92>
 80077dc:	f105 0c14 	add.w	ip, r5, #20
 80077e0:	f104 0314 	add.w	r3, r4, #20
 80077e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077ec:	9202      	str	r2, [sp, #8]
 80077ee:	ebac 0205 	sub.w	r2, ip, r5
 80077f2:	3a15      	subs	r2, #21
 80077f4:	f022 0203 	bic.w	r2, r2, #3
 80077f8:	3204      	adds	r2, #4
 80077fa:	f105 0115 	add.w	r1, r5, #21
 80077fe:	458c      	cmp	ip, r1
 8007800:	bf38      	it	cc
 8007802:	2204      	movcc	r2, #4
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9a02      	ldr	r2, [sp, #8]
 8007808:	9303      	str	r3, [sp, #12]
 800780a:	429a      	cmp	r2, r3
 800780c:	d808      	bhi.n	8007820 <__multiply+0x98>
 800780e:	2f00      	cmp	r7, #0
 8007810:	dc55      	bgt.n	80078be <__multiply+0x136>
 8007812:	6107      	str	r7, [r0, #16]
 8007814:	b005      	add	sp, #20
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	f843 2b04 	str.w	r2, [r3], #4
 800781e:	e7db      	b.n	80077d8 <__multiply+0x50>
 8007820:	f8b3 a000 	ldrh.w	sl, [r3]
 8007824:	f1ba 0f00 	cmp.w	sl, #0
 8007828:	d020      	beq.n	800786c <__multiply+0xe4>
 800782a:	f105 0e14 	add.w	lr, r5, #20
 800782e:	46b1      	mov	r9, r6
 8007830:	2200      	movs	r2, #0
 8007832:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007836:	f8d9 b000 	ldr.w	fp, [r9]
 800783a:	b2a1      	uxth	r1, r4
 800783c:	fa1f fb8b 	uxth.w	fp, fp
 8007840:	fb0a b101 	mla	r1, sl, r1, fp
 8007844:	4411      	add	r1, r2
 8007846:	f8d9 2000 	ldr.w	r2, [r9]
 800784a:	0c24      	lsrs	r4, r4, #16
 800784c:	0c12      	lsrs	r2, r2, #16
 800784e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007852:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007856:	b289      	uxth	r1, r1
 8007858:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800785c:	45f4      	cmp	ip, lr
 800785e:	f849 1b04 	str.w	r1, [r9], #4
 8007862:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007866:	d8e4      	bhi.n	8007832 <__multiply+0xaa>
 8007868:	9901      	ldr	r1, [sp, #4]
 800786a:	5072      	str	r2, [r6, r1]
 800786c:	9a03      	ldr	r2, [sp, #12]
 800786e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007872:	3304      	adds	r3, #4
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	d01f      	beq.n	80078ba <__multiply+0x132>
 800787a:	6834      	ldr	r4, [r6, #0]
 800787c:	f105 0114 	add.w	r1, r5, #20
 8007880:	46b6      	mov	lr, r6
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	880a      	ldrh	r2, [r1, #0]
 8007888:	f8be b002 	ldrh.w	fp, [lr, #2]
 800788c:	fb09 b202 	mla	r2, r9, r2, fp
 8007890:	4492      	add	sl, r2
 8007892:	b2a4      	uxth	r4, r4
 8007894:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007898:	f84e 4b04 	str.w	r4, [lr], #4
 800789c:	f851 4b04 	ldr.w	r4, [r1], #4
 80078a0:	f8be 2000 	ldrh.w	r2, [lr]
 80078a4:	0c24      	lsrs	r4, r4, #16
 80078a6:	fb09 2404 	mla	r4, r9, r4, r2
 80078aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078ae:	458c      	cmp	ip, r1
 80078b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078b4:	d8e7      	bhi.n	8007886 <__multiply+0xfe>
 80078b6:	9a01      	ldr	r2, [sp, #4]
 80078b8:	50b4      	str	r4, [r6, r2]
 80078ba:	3604      	adds	r6, #4
 80078bc:	e7a3      	b.n	8007806 <__multiply+0x7e>
 80078be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1a5      	bne.n	8007812 <__multiply+0x8a>
 80078c6:	3f01      	subs	r7, #1
 80078c8:	e7a1      	b.n	800780e <__multiply+0x86>
 80078ca:	bf00      	nop
 80078cc:	08008d83 	.word	0x08008d83
 80078d0:	08008d94 	.word	0x08008d94

080078d4 <__pow5mult>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4615      	mov	r5, r2
 80078da:	f012 0203 	ands.w	r2, r2, #3
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	d007      	beq.n	80078f4 <__pow5mult+0x20>
 80078e4:	4c25      	ldr	r4, [pc, #148]	; (800797c <__pow5mult+0xa8>)
 80078e6:	3a01      	subs	r2, #1
 80078e8:	2300      	movs	r3, #0
 80078ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ee:	f7ff fe9b 	bl	8007628 <__multadd>
 80078f2:	4607      	mov	r7, r0
 80078f4:	10ad      	asrs	r5, r5, #2
 80078f6:	d03d      	beq.n	8007974 <__pow5mult+0xa0>
 80078f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078fa:	b97c      	cbnz	r4, 800791c <__pow5mult+0x48>
 80078fc:	2010      	movs	r0, #16
 80078fe:	f7ff fe1b 	bl	8007538 <malloc>
 8007902:	4602      	mov	r2, r0
 8007904:	6270      	str	r0, [r6, #36]	; 0x24
 8007906:	b928      	cbnz	r0, 8007914 <__pow5mult+0x40>
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <__pow5mult+0xac>)
 800790a:	481e      	ldr	r0, [pc, #120]	; (8007984 <__pow5mult+0xb0>)
 800790c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007910:	f000 fbcc 	bl	80080ac <__assert_func>
 8007914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007918:	6004      	str	r4, [r0, #0]
 800791a:	60c4      	str	r4, [r0, #12]
 800791c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007924:	b94c      	cbnz	r4, 800793a <__pow5mult+0x66>
 8007926:	f240 2171 	movw	r1, #625	; 0x271
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff ff16 	bl	800775c <__i2b>
 8007930:	2300      	movs	r3, #0
 8007932:	f8c8 0008 	str.w	r0, [r8, #8]
 8007936:	4604      	mov	r4, r0
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	f04f 0900 	mov.w	r9, #0
 800793e:	07eb      	lsls	r3, r5, #31
 8007940:	d50a      	bpl.n	8007958 <__pow5mult+0x84>
 8007942:	4639      	mov	r1, r7
 8007944:	4622      	mov	r2, r4
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff ff1e 	bl	8007788 <__multiply>
 800794c:	4639      	mov	r1, r7
 800794e:	4680      	mov	r8, r0
 8007950:	4630      	mov	r0, r6
 8007952:	f7ff fe47 	bl	80075e4 <_Bfree>
 8007956:	4647      	mov	r7, r8
 8007958:	106d      	asrs	r5, r5, #1
 800795a:	d00b      	beq.n	8007974 <__pow5mult+0xa0>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	b938      	cbnz	r0, 8007970 <__pow5mult+0x9c>
 8007960:	4622      	mov	r2, r4
 8007962:	4621      	mov	r1, r4
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ff0f 	bl	8007788 <__multiply>
 800796a:	6020      	str	r0, [r4, #0]
 800796c:	f8c0 9000 	str.w	r9, [r0]
 8007970:	4604      	mov	r4, r0
 8007972:	e7e4      	b.n	800793e <__pow5mult+0x6a>
 8007974:	4638      	mov	r0, r7
 8007976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797a:	bf00      	nop
 800797c:	08008ee8 	.word	0x08008ee8
 8007980:	08008d0d 	.word	0x08008d0d
 8007984:	08008d94 	.word	0x08008d94

08007988 <__lshift>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	460c      	mov	r4, r1
 800798e:	6849      	ldr	r1, [r1, #4]
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	4607      	mov	r7, r0
 800799a:	4691      	mov	r9, r2
 800799c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079a0:	f108 0601 	add.w	r6, r8, #1
 80079a4:	42b3      	cmp	r3, r6
 80079a6:	db0b      	blt.n	80079c0 <__lshift+0x38>
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff fddb 	bl	8007564 <_Balloc>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b948      	cbnz	r0, 80079c6 <__lshift+0x3e>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <__lshift+0xd0>)
 80079b6:	4829      	ldr	r0, [pc, #164]	; (8007a5c <__lshift+0xd4>)
 80079b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079bc:	f000 fb76 	bl	80080ac <__assert_func>
 80079c0:	3101      	adds	r1, #1
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	e7ee      	b.n	80079a4 <__lshift+0x1c>
 80079c6:	2300      	movs	r3, #0
 80079c8:	f100 0114 	add.w	r1, r0, #20
 80079cc:	f100 0210 	add.w	r2, r0, #16
 80079d0:	4618      	mov	r0, r3
 80079d2:	4553      	cmp	r3, sl
 80079d4:	db33      	blt.n	8007a3e <__lshift+0xb6>
 80079d6:	6920      	ldr	r0, [r4, #16]
 80079d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079dc:	f104 0314 	add.w	r3, r4, #20
 80079e0:	f019 091f 	ands.w	r9, r9, #31
 80079e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079ec:	d02b      	beq.n	8007a46 <__lshift+0xbe>
 80079ee:	f1c9 0e20 	rsb	lr, r9, #32
 80079f2:	468a      	mov	sl, r1
 80079f4:	2200      	movs	r2, #0
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	fa00 f009 	lsl.w	r0, r0, r9
 80079fc:	4302      	orrs	r2, r0
 80079fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a06:	459c      	cmp	ip, r3
 8007a08:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a0c:	d8f3      	bhi.n	80079f6 <__lshift+0x6e>
 8007a0e:	ebac 0304 	sub.w	r3, ip, r4
 8007a12:	3b15      	subs	r3, #21
 8007a14:	f023 0303 	bic.w	r3, r3, #3
 8007a18:	3304      	adds	r3, #4
 8007a1a:	f104 0015 	add.w	r0, r4, #21
 8007a1e:	4584      	cmp	ip, r0
 8007a20:	bf38      	it	cc
 8007a22:	2304      	movcc	r3, #4
 8007a24:	50ca      	str	r2, [r1, r3]
 8007a26:	b10a      	cbz	r2, 8007a2c <__lshift+0xa4>
 8007a28:	f108 0602 	add.w	r6, r8, #2
 8007a2c:	3e01      	subs	r6, #1
 8007a2e:	4638      	mov	r0, r7
 8007a30:	612e      	str	r6, [r5, #16]
 8007a32:	4621      	mov	r1, r4
 8007a34:	f7ff fdd6 	bl	80075e4 <_Bfree>
 8007a38:	4628      	mov	r0, r5
 8007a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a42:	3301      	adds	r3, #1
 8007a44:	e7c5      	b.n	80079d2 <__lshift+0x4a>
 8007a46:	3904      	subs	r1, #4
 8007a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a50:	459c      	cmp	ip, r3
 8007a52:	d8f9      	bhi.n	8007a48 <__lshift+0xc0>
 8007a54:	e7ea      	b.n	8007a2c <__lshift+0xa4>
 8007a56:	bf00      	nop
 8007a58:	08008d83 	.word	0x08008d83
 8007a5c:	08008d94 	.word	0x08008d94

08007a60 <__mcmp>:
 8007a60:	b530      	push	{r4, r5, lr}
 8007a62:	6902      	ldr	r2, [r0, #16]
 8007a64:	690c      	ldr	r4, [r1, #16]
 8007a66:	1b12      	subs	r2, r2, r4
 8007a68:	d10e      	bne.n	8007a88 <__mcmp+0x28>
 8007a6a:	f100 0314 	add.w	r3, r0, #20
 8007a6e:	3114      	adds	r1, #20
 8007a70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a80:	42a5      	cmp	r5, r4
 8007a82:	d003      	beq.n	8007a8c <__mcmp+0x2c>
 8007a84:	d305      	bcc.n	8007a92 <__mcmp+0x32>
 8007a86:	2201      	movs	r2, #1
 8007a88:	4610      	mov	r0, r2
 8007a8a:	bd30      	pop	{r4, r5, pc}
 8007a8c:	4283      	cmp	r3, r0
 8007a8e:	d3f3      	bcc.n	8007a78 <__mcmp+0x18>
 8007a90:	e7fa      	b.n	8007a88 <__mcmp+0x28>
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	e7f7      	b.n	8007a88 <__mcmp+0x28>

08007a98 <__mdiff>:
 8007a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4617      	mov	r7, r2
 8007aa6:	f7ff ffdb 	bl	8007a60 <__mcmp>
 8007aaa:	1e05      	subs	r5, r0, #0
 8007aac:	d110      	bne.n	8007ad0 <__mdiff+0x38>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7ff fd57 	bl	8007564 <_Balloc>
 8007ab6:	b930      	cbnz	r0, 8007ac6 <__mdiff+0x2e>
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <__mdiff+0x108>)
 8007aba:	4602      	mov	r2, r0
 8007abc:	f240 2132 	movw	r1, #562	; 0x232
 8007ac0:	4838      	ldr	r0, [pc, #224]	; (8007ba4 <__mdiff+0x10c>)
 8007ac2:	f000 faf3 	bl	80080ac <__assert_func>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	bfa4      	itt	ge
 8007ad2:	463b      	movge	r3, r7
 8007ad4:	4627      	movge	r7, r4
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	bfa6      	itte	ge
 8007adc:	461c      	movge	r4, r3
 8007ade:	2500      	movge	r5, #0
 8007ae0:	2501      	movlt	r5, #1
 8007ae2:	f7ff fd3f 	bl	8007564 <_Balloc>
 8007ae6:	b920      	cbnz	r0, 8007af2 <__mdiff+0x5a>
 8007ae8:	4b2d      	ldr	r3, [pc, #180]	; (8007ba0 <__mdiff+0x108>)
 8007aea:	4602      	mov	r2, r0
 8007aec:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007af0:	e7e6      	b.n	8007ac0 <__mdiff+0x28>
 8007af2:	693e      	ldr	r6, [r7, #16]
 8007af4:	60c5      	str	r5, [r0, #12]
 8007af6:	6925      	ldr	r5, [r4, #16]
 8007af8:	f107 0114 	add.w	r1, r7, #20
 8007afc:	f104 0914 	add.w	r9, r4, #20
 8007b00:	f100 0e14 	add.w	lr, r0, #20
 8007b04:	f107 0210 	add.w	r2, r7, #16
 8007b08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b10:	46f2      	mov	sl, lr
 8007b12:	2700      	movs	r7, #0
 8007b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b1c:	fa1f f883 	uxth.w	r8, r3
 8007b20:	fa17 f78b 	uxtah	r7, r7, fp
 8007b24:	0c1b      	lsrs	r3, r3, #16
 8007b26:	eba7 0808 	sub.w	r8, r7, r8
 8007b2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b32:	fa1f f888 	uxth.w	r8, r8
 8007b36:	141f      	asrs	r7, r3, #16
 8007b38:	454d      	cmp	r5, r9
 8007b3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b3e:	f84a 3b04 	str.w	r3, [sl], #4
 8007b42:	d8e7      	bhi.n	8007b14 <__mdiff+0x7c>
 8007b44:	1b2b      	subs	r3, r5, r4
 8007b46:	3b15      	subs	r3, #21
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	3415      	adds	r4, #21
 8007b50:	42a5      	cmp	r5, r4
 8007b52:	bf38      	it	cc
 8007b54:	2304      	movcc	r3, #4
 8007b56:	4419      	add	r1, r3
 8007b58:	4473      	add	r3, lr
 8007b5a:	469e      	mov	lr, r3
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	4565      	cmp	r5, ip
 8007b60:	d30e      	bcc.n	8007b80 <__mdiff+0xe8>
 8007b62:	f10c 0203 	add.w	r2, ip, #3
 8007b66:	1a52      	subs	r2, r2, r1
 8007b68:	f022 0203 	bic.w	r2, r2, #3
 8007b6c:	3903      	subs	r1, #3
 8007b6e:	458c      	cmp	ip, r1
 8007b70:	bf38      	it	cc
 8007b72:	2200      	movcc	r2, #0
 8007b74:	441a      	add	r2, r3
 8007b76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b7a:	b17b      	cbz	r3, 8007b9c <__mdiff+0x104>
 8007b7c:	6106      	str	r6, [r0, #16]
 8007b7e:	e7a5      	b.n	8007acc <__mdiff+0x34>
 8007b80:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b84:	fa17 f488 	uxtah	r4, r7, r8
 8007b88:	1422      	asrs	r2, r4, #16
 8007b8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b8e:	b2a4      	uxth	r4, r4
 8007b90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b94:	f84e 4b04 	str.w	r4, [lr], #4
 8007b98:	1417      	asrs	r7, r2, #16
 8007b9a:	e7e0      	b.n	8007b5e <__mdiff+0xc6>
 8007b9c:	3e01      	subs	r6, #1
 8007b9e:	e7ea      	b.n	8007b76 <__mdiff+0xde>
 8007ba0:	08008d83 	.word	0x08008d83
 8007ba4:	08008d94 	.word	0x08008d94

08007ba8 <__d2b>:
 8007ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4689      	mov	r9, r1
 8007bae:	2101      	movs	r1, #1
 8007bb0:	ec57 6b10 	vmov	r6, r7, d0
 8007bb4:	4690      	mov	r8, r2
 8007bb6:	f7ff fcd5 	bl	8007564 <_Balloc>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	b930      	cbnz	r0, 8007bcc <__d2b+0x24>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b25      	ldr	r3, [pc, #148]	; (8007c58 <__d2b+0xb0>)
 8007bc2:	4826      	ldr	r0, [pc, #152]	; (8007c5c <__d2b+0xb4>)
 8007bc4:	f240 310a 	movw	r1, #778	; 0x30a
 8007bc8:	f000 fa70 	bl	80080ac <__assert_func>
 8007bcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bd4:	bb35      	cbnz	r5, 8007c24 <__d2b+0x7c>
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	d028      	beq.n	8007c2e <__d2b+0x86>
 8007bdc:	4668      	mov	r0, sp
 8007bde:	9600      	str	r6, [sp, #0]
 8007be0:	f7ff fd8c 	bl	80076fc <__lo0bits>
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	b300      	cbz	r0, 8007c2a <__d2b+0x82>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	f1c0 0320 	rsb	r3, r0, #32
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	40c2      	lsrs	r2, r0
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	9b01      	ldr	r3, [sp, #4]
 8007bfc:	61a3      	str	r3, [r4, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bf14      	ite	ne
 8007c02:	2202      	movne	r2, #2
 8007c04:	2201      	moveq	r2, #1
 8007c06:	6122      	str	r2, [r4, #16]
 8007c08:	b1d5      	cbz	r5, 8007c40 <__d2b+0x98>
 8007c0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c0e:	4405      	add	r5, r0
 8007c10:	f8c9 5000 	str.w	r5, [r9]
 8007c14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c18:	f8c8 0000 	str.w	r0, [r8]
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	b003      	add	sp, #12
 8007c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c28:	e7d5      	b.n	8007bd6 <__d2b+0x2e>
 8007c2a:	6161      	str	r1, [r4, #20]
 8007c2c:	e7e5      	b.n	8007bfa <__d2b+0x52>
 8007c2e:	a801      	add	r0, sp, #4
 8007c30:	f7ff fd64 	bl	80076fc <__lo0bits>
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	6163      	str	r3, [r4, #20]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	6122      	str	r2, [r4, #16]
 8007c3c:	3020      	adds	r0, #32
 8007c3e:	e7e3      	b.n	8007c08 <__d2b+0x60>
 8007c40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c48:	f8c9 0000 	str.w	r0, [r9]
 8007c4c:	6918      	ldr	r0, [r3, #16]
 8007c4e:	f7ff fd35 	bl	80076bc <__hi0bits>
 8007c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c56:	e7df      	b.n	8007c18 <__d2b+0x70>
 8007c58:	08008d83 	.word	0x08008d83
 8007c5c:	08008d94 	.word	0x08008d94

08007c60 <_calloc_r>:
 8007c60:	b513      	push	{r0, r1, r4, lr}
 8007c62:	434a      	muls	r2, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	f000 f85a 	bl	8007d20 <_malloc_r>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	b118      	cbz	r0, 8007c78 <_calloc_r+0x18>
 8007c70:	9a01      	ldr	r2, [sp, #4]
 8007c72:	2100      	movs	r1, #0
 8007c74:	f7fe f952 	bl	8005f1c <memset>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	b002      	add	sp, #8
 8007c7c:	bd10      	pop	{r4, pc}
	...

08007c80 <_free_r>:
 8007c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c82:	2900      	cmp	r1, #0
 8007c84:	d048      	beq.n	8007d18 <_free_r+0x98>
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	9001      	str	r0, [sp, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c92:	bfb8      	it	lt
 8007c94:	18e4      	addlt	r4, r4, r3
 8007c96:	f000 fa65 	bl	8008164 <__malloc_lock>
 8007c9a:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <_free_r+0x9c>)
 8007c9c:	9801      	ldr	r0, [sp, #4]
 8007c9e:	6813      	ldr	r3, [r2, #0]
 8007ca0:	4615      	mov	r5, r2
 8007ca2:	b933      	cbnz	r3, 8007cb2 <_free_r+0x32>
 8007ca4:	6063      	str	r3, [r4, #4]
 8007ca6:	6014      	str	r4, [r2, #0]
 8007ca8:	b003      	add	sp, #12
 8007caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cae:	f000 ba5f 	b.w	8008170 <__malloc_unlock>
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	d90b      	bls.n	8007cce <_free_r+0x4e>
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	1862      	adds	r2, r4, r1
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bf04      	itt	eq
 8007cbe:	681a      	ldreq	r2, [r3, #0]
 8007cc0:	685b      	ldreq	r3, [r3, #4]
 8007cc2:	6063      	str	r3, [r4, #4]
 8007cc4:	bf04      	itt	eq
 8007cc6:	1852      	addeq	r2, r2, r1
 8007cc8:	6022      	streq	r2, [r4, #0]
 8007cca:	602c      	str	r4, [r5, #0]
 8007ccc:	e7ec      	b.n	8007ca8 <_free_r+0x28>
 8007cce:	461a      	mov	r2, r3
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b10b      	cbz	r3, 8007cd8 <_free_r+0x58>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d9fa      	bls.n	8007cce <_free_r+0x4e>
 8007cd8:	6811      	ldr	r1, [r2, #0]
 8007cda:	1855      	adds	r5, r2, r1
 8007cdc:	42a5      	cmp	r5, r4
 8007cde:	d10b      	bne.n	8007cf8 <_free_r+0x78>
 8007ce0:	6824      	ldr	r4, [r4, #0]
 8007ce2:	4421      	add	r1, r4
 8007ce4:	1854      	adds	r4, r2, r1
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	6011      	str	r1, [r2, #0]
 8007cea:	d1dd      	bne.n	8007ca8 <_free_r+0x28>
 8007cec:	681c      	ldr	r4, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	6053      	str	r3, [r2, #4]
 8007cf2:	4421      	add	r1, r4
 8007cf4:	6011      	str	r1, [r2, #0]
 8007cf6:	e7d7      	b.n	8007ca8 <_free_r+0x28>
 8007cf8:	d902      	bls.n	8007d00 <_free_r+0x80>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	e7d3      	b.n	8007ca8 <_free_r+0x28>
 8007d00:	6825      	ldr	r5, [r4, #0]
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf04      	itt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	6063      	str	r3, [r4, #4]
 8007d0e:	bf04      	itt	eq
 8007d10:	1949      	addeq	r1, r1, r5
 8007d12:	6021      	streq	r1, [r4, #0]
 8007d14:	6054      	str	r4, [r2, #4]
 8007d16:	e7c7      	b.n	8007ca8 <_free_r+0x28>
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	2000022c 	.word	0x2000022c

08007d20 <_malloc_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	1ccd      	adds	r5, r1, #3
 8007d24:	f025 0503 	bic.w	r5, r5, #3
 8007d28:	3508      	adds	r5, #8
 8007d2a:	2d0c      	cmp	r5, #12
 8007d2c:	bf38      	it	cc
 8007d2e:	250c      	movcc	r5, #12
 8007d30:	2d00      	cmp	r5, #0
 8007d32:	4606      	mov	r6, r0
 8007d34:	db01      	blt.n	8007d3a <_malloc_r+0x1a>
 8007d36:	42a9      	cmp	r1, r5
 8007d38:	d903      	bls.n	8007d42 <_malloc_r+0x22>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	6033      	str	r3, [r6, #0]
 8007d3e:	2000      	movs	r0, #0
 8007d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d42:	f000 fa0f 	bl	8008164 <__malloc_lock>
 8007d46:	4921      	ldr	r1, [pc, #132]	; (8007dcc <_malloc_r+0xac>)
 8007d48:	680a      	ldr	r2, [r1, #0]
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	b99c      	cbnz	r4, 8007d76 <_malloc_r+0x56>
 8007d4e:	4f20      	ldr	r7, [pc, #128]	; (8007dd0 <_malloc_r+0xb0>)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	b923      	cbnz	r3, 8007d5e <_malloc_r+0x3e>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4630      	mov	r0, r6
 8007d58:	f000 f998 	bl	800808c <_sbrk_r>
 8007d5c:	6038      	str	r0, [r7, #0]
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f993 	bl	800808c <_sbrk_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d123      	bne.n	8007db2 <_malloc_r+0x92>
 8007d6a:	230c      	movs	r3, #12
 8007d6c:	6033      	str	r3, [r6, #0]
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f000 f9fe 	bl	8008170 <__malloc_unlock>
 8007d74:	e7e3      	b.n	8007d3e <_malloc_r+0x1e>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	1b5b      	subs	r3, r3, r5
 8007d7a:	d417      	bmi.n	8007dac <_malloc_r+0x8c>
 8007d7c:	2b0b      	cmp	r3, #11
 8007d7e:	d903      	bls.n	8007d88 <_malloc_r+0x68>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	441c      	add	r4, r3
 8007d84:	6025      	str	r5, [r4, #0]
 8007d86:	e004      	b.n	8007d92 <_malloc_r+0x72>
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	42a2      	cmp	r2, r4
 8007d8c:	bf0c      	ite	eq
 8007d8e:	600b      	streq	r3, [r1, #0]
 8007d90:	6053      	strne	r3, [r2, #4]
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f9ec 	bl	8008170 <__malloc_unlock>
 8007d98:	f104 000b 	add.w	r0, r4, #11
 8007d9c:	1d23      	adds	r3, r4, #4
 8007d9e:	f020 0007 	bic.w	r0, r0, #7
 8007da2:	1ac2      	subs	r2, r0, r3
 8007da4:	d0cc      	beq.n	8007d40 <_malloc_r+0x20>
 8007da6:	1a1b      	subs	r3, r3, r0
 8007da8:	50a3      	str	r3, [r4, r2]
 8007daa:	e7c9      	b.n	8007d40 <_malloc_r+0x20>
 8007dac:	4622      	mov	r2, r4
 8007dae:	6864      	ldr	r4, [r4, #4]
 8007db0:	e7cc      	b.n	8007d4c <_malloc_r+0x2c>
 8007db2:	1cc4      	adds	r4, r0, #3
 8007db4:	f024 0403 	bic.w	r4, r4, #3
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d0e3      	beq.n	8007d84 <_malloc_r+0x64>
 8007dbc:	1a21      	subs	r1, r4, r0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f000 f964 	bl	800808c <_sbrk_r>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1dd      	bne.n	8007d84 <_malloc_r+0x64>
 8007dc8:	e7cf      	b.n	8007d6a <_malloc_r+0x4a>
 8007dca:	bf00      	nop
 8007dcc:	2000022c 	.word	0x2000022c
 8007dd0:	20000230 	.word	0x20000230

08007dd4 <__ssputs_r>:
 8007dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	688e      	ldr	r6, [r1, #8]
 8007dda:	429e      	cmp	r6, r3
 8007ddc:	4682      	mov	sl, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	4690      	mov	r8, r2
 8007de2:	461f      	mov	r7, r3
 8007de4:	d838      	bhi.n	8007e58 <__ssputs_r+0x84>
 8007de6:	898a      	ldrh	r2, [r1, #12]
 8007de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dec:	d032      	beq.n	8007e54 <__ssputs_r+0x80>
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	6909      	ldr	r1, [r1, #16]
 8007df2:	eba5 0901 	sub.w	r9, r5, r1
 8007df6:	6965      	ldr	r5, [r4, #20]
 8007df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e00:	3301      	adds	r3, #1
 8007e02:	444b      	add	r3, r9
 8007e04:	106d      	asrs	r5, r5, #1
 8007e06:	429d      	cmp	r5, r3
 8007e08:	bf38      	it	cc
 8007e0a:	461d      	movcc	r5, r3
 8007e0c:	0553      	lsls	r3, r2, #21
 8007e0e:	d531      	bpl.n	8007e74 <__ssputs_r+0xa0>
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7ff ff85 	bl	8007d20 <_malloc_r>
 8007e16:	4606      	mov	r6, r0
 8007e18:	b950      	cbnz	r0, 8007e30 <__ssputs_r+0x5c>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	f8ca 3000 	str.w	r3, [sl]
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e30:	6921      	ldr	r1, [r4, #16]
 8007e32:	464a      	mov	r2, r9
 8007e34:	f7ff fb88 	bl	8007548 <memcpy>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	6126      	str	r6, [r4, #16]
 8007e46:	6165      	str	r5, [r4, #20]
 8007e48:	444e      	add	r6, r9
 8007e4a:	eba5 0509 	sub.w	r5, r5, r9
 8007e4e:	6026      	str	r6, [r4, #0]
 8007e50:	60a5      	str	r5, [r4, #8]
 8007e52:	463e      	mov	r6, r7
 8007e54:	42be      	cmp	r6, r7
 8007e56:	d900      	bls.n	8007e5a <__ssputs_r+0x86>
 8007e58:	463e      	mov	r6, r7
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	4641      	mov	r1, r8
 8007e60:	f000 f966 	bl	8008130 <memmove>
 8007e64:	68a3      	ldr	r3, [r4, #8]
 8007e66:	6822      	ldr	r2, [r4, #0]
 8007e68:	1b9b      	subs	r3, r3, r6
 8007e6a:	4432      	add	r2, r6
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	2000      	movs	r0, #0
 8007e72:	e7db      	b.n	8007e2c <__ssputs_r+0x58>
 8007e74:	462a      	mov	r2, r5
 8007e76:	f000 f981 	bl	800817c <_realloc_r>
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1e1      	bne.n	8007e44 <__ssputs_r+0x70>
 8007e80:	6921      	ldr	r1, [r4, #16]
 8007e82:	4650      	mov	r0, sl
 8007e84:	f7ff fefc 	bl	8007c80 <_free_r>
 8007e88:	e7c7      	b.n	8007e1a <__ssputs_r+0x46>
	...

08007e8c <_svfiprintf_r>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	4698      	mov	r8, r3
 8007e92:	898b      	ldrh	r3, [r1, #12]
 8007e94:	061b      	lsls	r3, r3, #24
 8007e96:	b09d      	sub	sp, #116	; 0x74
 8007e98:	4607      	mov	r7, r0
 8007e9a:	460d      	mov	r5, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	d50e      	bpl.n	8007ebe <_svfiprintf_r+0x32>
 8007ea0:	690b      	ldr	r3, [r1, #16]
 8007ea2:	b963      	cbnz	r3, 8007ebe <_svfiprintf_r+0x32>
 8007ea4:	2140      	movs	r1, #64	; 0x40
 8007ea6:	f7ff ff3b 	bl	8007d20 <_malloc_r>
 8007eaa:	6028      	str	r0, [r5, #0]
 8007eac:	6128      	str	r0, [r5, #16]
 8007eae:	b920      	cbnz	r0, 8007eba <_svfiprintf_r+0x2e>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e0d1      	b.n	800805e <_svfiprintf_r+0x1d2>
 8007eba:	2340      	movs	r3, #64	; 0x40
 8007ebc:	616b      	str	r3, [r5, #20]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec2:	2320      	movs	r3, #32
 8007ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ecc:	2330      	movs	r3, #48	; 0x30
 8007ece:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008078 <_svfiprintf_r+0x1ec>
 8007ed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed6:	f04f 0901 	mov.w	r9, #1
 8007eda:	4623      	mov	r3, r4
 8007edc:	469a      	mov	sl, r3
 8007ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee2:	b10a      	cbz	r2, 8007ee8 <_svfiprintf_r+0x5c>
 8007ee4:	2a25      	cmp	r2, #37	; 0x25
 8007ee6:	d1f9      	bne.n	8007edc <_svfiprintf_r+0x50>
 8007ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8007eec:	d00b      	beq.n	8007f06 <_svfiprintf_r+0x7a>
 8007eee:	465b      	mov	r3, fp
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ff6d 	bl	8007dd4 <__ssputs_r>
 8007efa:	3001      	adds	r0, #1
 8007efc:	f000 80aa 	beq.w	8008054 <_svfiprintf_r+0x1c8>
 8007f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f02:	445a      	add	r2, fp
 8007f04:	9209      	str	r2, [sp, #36]	; 0x24
 8007f06:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 80a2 	beq.w	8008054 <_svfiprintf_r+0x1c8>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1a:	f10a 0a01 	add.w	sl, sl, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	9307      	str	r3, [sp, #28]
 8007f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f26:	931a      	str	r3, [sp, #104]	; 0x68
 8007f28:	4654      	mov	r4, sl
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f30:	4851      	ldr	r0, [pc, #324]	; (8008078 <_svfiprintf_r+0x1ec>)
 8007f32:	f7f8 f955 	bl	80001e0 <memchr>
 8007f36:	9a04      	ldr	r2, [sp, #16]
 8007f38:	b9d8      	cbnz	r0, 8007f72 <_svfiprintf_r+0xe6>
 8007f3a:	06d0      	lsls	r0, r2, #27
 8007f3c:	bf44      	itt	mi
 8007f3e:	2320      	movmi	r3, #32
 8007f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f44:	0711      	lsls	r1, r2, #28
 8007f46:	bf44      	itt	mi
 8007f48:	232b      	movmi	r3, #43	; 0x2b
 8007f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f52:	2b2a      	cmp	r3, #42	; 0x2a
 8007f54:	d015      	beq.n	8007f82 <_svfiprintf_r+0xf6>
 8007f56:	9a07      	ldr	r2, [sp, #28]
 8007f58:	4654      	mov	r4, sl
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	f04f 0c0a 	mov.w	ip, #10
 8007f60:	4621      	mov	r1, r4
 8007f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f66:	3b30      	subs	r3, #48	; 0x30
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d94e      	bls.n	800800a <_svfiprintf_r+0x17e>
 8007f6c:	b1b0      	cbz	r0, 8007f9c <_svfiprintf_r+0x110>
 8007f6e:	9207      	str	r2, [sp, #28]
 8007f70:	e014      	b.n	8007f9c <_svfiprintf_r+0x110>
 8007f72:	eba0 0308 	sub.w	r3, r0, r8
 8007f76:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	46a2      	mov	sl, r4
 8007f80:	e7d2      	b.n	8007f28 <_svfiprintf_r+0x9c>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	1d19      	adds	r1, r3, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	9103      	str	r1, [sp, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfbb      	ittet	lt
 8007f8e:	425b      	neglt	r3, r3
 8007f90:	f042 0202 	orrlt.w	r2, r2, #2
 8007f94:	9307      	strge	r3, [sp, #28]
 8007f96:	9307      	strlt	r3, [sp, #28]
 8007f98:	bfb8      	it	lt
 8007f9a:	9204      	strlt	r2, [sp, #16]
 8007f9c:	7823      	ldrb	r3, [r4, #0]
 8007f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8007fa0:	d10c      	bne.n	8007fbc <_svfiprintf_r+0x130>
 8007fa2:	7863      	ldrb	r3, [r4, #1]
 8007fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa6:	d135      	bne.n	8008014 <_svfiprintf_r+0x188>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	1d1a      	adds	r2, r3, #4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	9203      	str	r2, [sp, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfb8      	it	lt
 8007fb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fb8:	3402      	adds	r4, #2
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008088 <_svfiprintf_r+0x1fc>
 8007fc0:	7821      	ldrb	r1, [r4, #0]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	4650      	mov	r0, sl
 8007fc6:	f7f8 f90b 	bl	80001e0 <memchr>
 8007fca:	b140      	cbz	r0, 8007fde <_svfiprintf_r+0x152>
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	eba0 000a 	sub.w	r0, r0, sl
 8007fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	4303      	orrs	r3, r0
 8007fda:	3401      	adds	r4, #1
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe2:	4826      	ldr	r0, [pc, #152]	; (800807c <_svfiprintf_r+0x1f0>)
 8007fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe8:	2206      	movs	r2, #6
 8007fea:	f7f8 f8f9 	bl	80001e0 <memchr>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d038      	beq.n	8008064 <_svfiprintf_r+0x1d8>
 8007ff2:	4b23      	ldr	r3, [pc, #140]	; (8008080 <_svfiprintf_r+0x1f4>)
 8007ff4:	bb1b      	cbnz	r3, 800803e <_svfiprintf_r+0x1b2>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	3307      	adds	r3, #7
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	3308      	adds	r3, #8
 8008000:	9303      	str	r3, [sp, #12]
 8008002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008004:	4433      	add	r3, r6
 8008006:	9309      	str	r3, [sp, #36]	; 0x24
 8008008:	e767      	b.n	8007eda <_svfiprintf_r+0x4e>
 800800a:	fb0c 3202 	mla	r2, ip, r2, r3
 800800e:	460c      	mov	r4, r1
 8008010:	2001      	movs	r0, #1
 8008012:	e7a5      	b.n	8007f60 <_svfiprintf_r+0xd4>
 8008014:	2300      	movs	r3, #0
 8008016:	3401      	adds	r4, #1
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	4619      	mov	r1, r3
 800801c:	f04f 0c0a 	mov.w	ip, #10
 8008020:	4620      	mov	r0, r4
 8008022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008026:	3a30      	subs	r2, #48	; 0x30
 8008028:	2a09      	cmp	r2, #9
 800802a:	d903      	bls.n	8008034 <_svfiprintf_r+0x1a8>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0c5      	beq.n	8007fbc <_svfiprintf_r+0x130>
 8008030:	9105      	str	r1, [sp, #20]
 8008032:	e7c3      	b.n	8007fbc <_svfiprintf_r+0x130>
 8008034:	fb0c 2101 	mla	r1, ip, r1, r2
 8008038:	4604      	mov	r4, r0
 800803a:	2301      	movs	r3, #1
 800803c:	e7f0      	b.n	8008020 <_svfiprintf_r+0x194>
 800803e:	ab03      	add	r3, sp, #12
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	462a      	mov	r2, r5
 8008044:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <_svfiprintf_r+0x1f8>)
 8008046:	a904      	add	r1, sp, #16
 8008048:	4638      	mov	r0, r7
 800804a:	f7fe f80f 	bl	800606c <_printf_float>
 800804e:	1c42      	adds	r2, r0, #1
 8008050:	4606      	mov	r6, r0
 8008052:	d1d6      	bne.n	8008002 <_svfiprintf_r+0x176>
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	065b      	lsls	r3, r3, #25
 8008058:	f53f af2c 	bmi.w	8007eb4 <_svfiprintf_r+0x28>
 800805c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800805e:	b01d      	add	sp, #116	; 0x74
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	ab03      	add	r3, sp, #12
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	462a      	mov	r2, r5
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <_svfiprintf_r+0x1f8>)
 800806c:	a904      	add	r1, sp, #16
 800806e:	4638      	mov	r0, r7
 8008070:	f7fe faa0 	bl	80065b4 <_printf_i>
 8008074:	e7eb      	b.n	800804e <_svfiprintf_r+0x1c2>
 8008076:	bf00      	nop
 8008078:	08008ef4 	.word	0x08008ef4
 800807c:	08008efe 	.word	0x08008efe
 8008080:	0800606d 	.word	0x0800606d
 8008084:	08007dd5 	.word	0x08007dd5
 8008088:	08008efa 	.word	0x08008efa

0800808c <_sbrk_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_sbrk_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 ffce 	bl	8002038 <_sbrk>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_sbrk_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_sbrk_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200008c0 	.word	0x200008c0

080080ac <__assert_func>:
 80080ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ae:	4614      	mov	r4, r2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__assert_func+0x2c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4605      	mov	r5, r0
 80080b8:	68d8      	ldr	r0, [r3, #12]
 80080ba:	b14c      	cbz	r4, 80080d0 <__assert_func+0x24>
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <__assert_func+0x30>)
 80080be:	9100      	str	r1, [sp, #0]
 80080c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c4:	4906      	ldr	r1, [pc, #24]	; (80080e0 <__assert_func+0x34>)
 80080c6:	462b      	mov	r3, r5
 80080c8:	f000 f80e 	bl	80080e8 <fiprintf>
 80080cc:	f000 faa4 	bl	8008618 <abort>
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__assert_func+0x38>)
 80080d2:	461c      	mov	r4, r3
 80080d4:	e7f3      	b.n	80080be <__assert_func+0x12>
 80080d6:	bf00      	nop
 80080d8:	2000000c 	.word	0x2000000c
 80080dc:	08008f05 	.word	0x08008f05
 80080e0:	08008f12 	.word	0x08008f12
 80080e4:	08008f40 	.word	0x08008f40

080080e8 <fiprintf>:
 80080e8:	b40e      	push	{r1, r2, r3}
 80080ea:	b503      	push	{r0, r1, lr}
 80080ec:	4601      	mov	r1, r0
 80080ee:	ab03      	add	r3, sp, #12
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <fiprintf+0x20>)
 80080f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	f000 f88f 	bl	800821c <_vfiprintf_r>
 80080fe:	b002      	add	sp, #8
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	2000000c 	.word	0x2000000c

0800810c <__ascii_mbtowc>:
 800810c:	b082      	sub	sp, #8
 800810e:	b901      	cbnz	r1, 8008112 <__ascii_mbtowc+0x6>
 8008110:	a901      	add	r1, sp, #4
 8008112:	b142      	cbz	r2, 8008126 <__ascii_mbtowc+0x1a>
 8008114:	b14b      	cbz	r3, 800812a <__ascii_mbtowc+0x1e>
 8008116:	7813      	ldrb	r3, [r2, #0]
 8008118:	600b      	str	r3, [r1, #0]
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	1e10      	subs	r0, r2, #0
 800811e:	bf18      	it	ne
 8008120:	2001      	movne	r0, #1
 8008122:	b002      	add	sp, #8
 8008124:	4770      	bx	lr
 8008126:	4610      	mov	r0, r2
 8008128:	e7fb      	b.n	8008122 <__ascii_mbtowc+0x16>
 800812a:	f06f 0001 	mvn.w	r0, #1
 800812e:	e7f8      	b.n	8008122 <__ascii_mbtowc+0x16>

08008130 <memmove>:
 8008130:	4288      	cmp	r0, r1
 8008132:	b510      	push	{r4, lr}
 8008134:	eb01 0402 	add.w	r4, r1, r2
 8008138:	d902      	bls.n	8008140 <memmove+0x10>
 800813a:	4284      	cmp	r4, r0
 800813c:	4623      	mov	r3, r4
 800813e:	d807      	bhi.n	8008150 <memmove+0x20>
 8008140:	1e43      	subs	r3, r0, #1
 8008142:	42a1      	cmp	r1, r4
 8008144:	d008      	beq.n	8008158 <memmove+0x28>
 8008146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800814a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800814e:	e7f8      	b.n	8008142 <memmove+0x12>
 8008150:	4402      	add	r2, r0
 8008152:	4601      	mov	r1, r0
 8008154:	428a      	cmp	r2, r1
 8008156:	d100      	bne.n	800815a <memmove+0x2a>
 8008158:	bd10      	pop	{r4, pc}
 800815a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800815e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008162:	e7f7      	b.n	8008154 <memmove+0x24>

08008164 <__malloc_lock>:
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <__malloc_lock+0x8>)
 8008166:	f000 bc17 	b.w	8008998 <__retarget_lock_acquire_recursive>
 800816a:	bf00      	nop
 800816c:	200008c8 	.word	0x200008c8

08008170 <__malloc_unlock>:
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <__malloc_unlock+0x8>)
 8008172:	f000 bc12 	b.w	800899a <__retarget_lock_release_recursive>
 8008176:	bf00      	nop
 8008178:	200008c8 	.word	0x200008c8

0800817c <_realloc_r>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	4607      	mov	r7, r0
 8008180:	4614      	mov	r4, r2
 8008182:	460e      	mov	r6, r1
 8008184:	b921      	cbnz	r1, 8008190 <_realloc_r+0x14>
 8008186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800818a:	4611      	mov	r1, r2
 800818c:	f7ff bdc8 	b.w	8007d20 <_malloc_r>
 8008190:	b922      	cbnz	r2, 800819c <_realloc_r+0x20>
 8008192:	f7ff fd75 	bl	8007c80 <_free_r>
 8008196:	4625      	mov	r5, r4
 8008198:	4628      	mov	r0, r5
 800819a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800819c:	f000 fc62 	bl	8008a64 <_malloc_usable_size_r>
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d20f      	bcs.n	80081c4 <_realloc_r+0x48>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7ff fdba 	bl	8007d20 <_malloc_r>
 80081ac:	4605      	mov	r5, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0f2      	beq.n	8008198 <_realloc_r+0x1c>
 80081b2:	4631      	mov	r1, r6
 80081b4:	4622      	mov	r2, r4
 80081b6:	f7ff f9c7 	bl	8007548 <memcpy>
 80081ba:	4631      	mov	r1, r6
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff fd5f 	bl	8007c80 <_free_r>
 80081c2:	e7e9      	b.n	8008198 <_realloc_r+0x1c>
 80081c4:	4635      	mov	r5, r6
 80081c6:	e7e7      	b.n	8008198 <_realloc_r+0x1c>

080081c8 <__sfputc_r>:
 80081c8:	6893      	ldr	r3, [r2, #8]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	b410      	push	{r4}
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	da08      	bge.n	80081e6 <__sfputc_r+0x1e>
 80081d4:	6994      	ldr	r4, [r2, #24]
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	db01      	blt.n	80081de <__sfputc_r+0x16>
 80081da:	290a      	cmp	r1, #10
 80081dc:	d103      	bne.n	80081e6 <__sfputc_r+0x1e>
 80081de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e2:	f000 b94b 	b.w	800847c <__swbuf_r>
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	1c58      	adds	r0, r3, #1
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	7019      	strb	r1, [r3, #0]
 80081ee:	4608      	mov	r0, r1
 80081f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <__sfputs_r>:
 80081f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f8:	4606      	mov	r6, r0
 80081fa:	460f      	mov	r7, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	18d5      	adds	r5, r2, r3
 8008200:	42ac      	cmp	r4, r5
 8008202:	d101      	bne.n	8008208 <__sfputs_r+0x12>
 8008204:	2000      	movs	r0, #0
 8008206:	e007      	b.n	8008218 <__sfputs_r+0x22>
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	463a      	mov	r2, r7
 800820e:	4630      	mov	r0, r6
 8008210:	f7ff ffda 	bl	80081c8 <__sfputc_r>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d1f3      	bne.n	8008200 <__sfputs_r+0xa>
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	b09d      	sub	sp, #116	; 0x74
 8008224:	4614      	mov	r4, r2
 8008226:	4698      	mov	r8, r3
 8008228:	4606      	mov	r6, r0
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6983      	ldr	r3, [r0, #24]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f000 fb14 	bl	800885c <__sinit>
 8008234:	4b89      	ldr	r3, [pc, #548]	; (800845c <_vfiprintf_r+0x240>)
 8008236:	429d      	cmp	r5, r3
 8008238:	d11b      	bne.n	8008272 <_vfiprintf_r+0x56>
 800823a:	6875      	ldr	r5, [r6, #4]
 800823c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d405      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d402      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f000 fba5 	bl	8008998 <__retarget_lock_acquire_recursive>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	071b      	lsls	r3, r3, #28
 8008252:	d501      	bpl.n	8008258 <_vfiprintf_r+0x3c>
 8008254:	692b      	ldr	r3, [r5, #16]
 8008256:	b9eb      	cbnz	r3, 8008294 <_vfiprintf_r+0x78>
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f000 f96e 	bl	800853c <__swsetup_r>
 8008260:	b1c0      	cbz	r0, 8008294 <_vfiprintf_r+0x78>
 8008262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008264:	07dc      	lsls	r4, r3, #31
 8008266:	d50e      	bpl.n	8008286 <_vfiprintf_r+0x6a>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	b01d      	add	sp, #116	; 0x74
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <_vfiprintf_r+0x244>)
 8008274:	429d      	cmp	r5, r3
 8008276:	d101      	bne.n	800827c <_vfiprintf_r+0x60>
 8008278:	68b5      	ldr	r5, [r6, #8]
 800827a:	e7df      	b.n	800823c <_vfiprintf_r+0x20>
 800827c:	4b79      	ldr	r3, [pc, #484]	; (8008464 <_vfiprintf_r+0x248>)
 800827e:	429d      	cmp	r5, r3
 8008280:	bf08      	it	eq
 8008282:	68f5      	ldreq	r5, [r6, #12]
 8008284:	e7da      	b.n	800823c <_vfiprintf_r+0x20>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	0598      	lsls	r0, r3, #22
 800828a:	d4ed      	bmi.n	8008268 <_vfiprintf_r+0x4c>
 800828c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828e:	f000 fb84 	bl	800899a <__retarget_lock_release_recursive>
 8008292:	e7e9      	b.n	8008268 <_vfiprintf_r+0x4c>
 8008294:	2300      	movs	r3, #0
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	2320      	movs	r3, #32
 800829a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829e:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a2:	2330      	movs	r3, #48	; 0x30
 80082a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008468 <_vfiprintf_r+0x24c>
 80082a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ac:	f04f 0901 	mov.w	r9, #1
 80082b0:	4623      	mov	r3, r4
 80082b2:	469a      	mov	sl, r3
 80082b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b8:	b10a      	cbz	r2, 80082be <_vfiprintf_r+0xa2>
 80082ba:	2a25      	cmp	r2, #37	; 0x25
 80082bc:	d1f9      	bne.n	80082b2 <_vfiprintf_r+0x96>
 80082be:	ebba 0b04 	subs.w	fp, sl, r4
 80082c2:	d00b      	beq.n	80082dc <_vfiprintf_r+0xc0>
 80082c4:	465b      	mov	r3, fp
 80082c6:	4622      	mov	r2, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ff93 	bl	80081f6 <__sfputs_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f000 80aa 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d8:	445a      	add	r2, fp
 80082da:	9209      	str	r2, [sp, #36]	; 0x24
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a2 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f0:	f10a 0a01 	add.w	sl, sl, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082fc:	931a      	str	r3, [sp, #104]	; 0x68
 80082fe:	4654      	mov	r4, sl
 8008300:	2205      	movs	r2, #5
 8008302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008306:	4858      	ldr	r0, [pc, #352]	; (8008468 <_vfiprintf_r+0x24c>)
 8008308:	f7f7 ff6a 	bl	80001e0 <memchr>
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	b9d8      	cbnz	r0, 8008348 <_vfiprintf_r+0x12c>
 8008310:	06d1      	lsls	r1, r2, #27
 8008312:	bf44      	itt	mi
 8008314:	2320      	movmi	r3, #32
 8008316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831a:	0713      	lsls	r3, r2, #28
 800831c:	bf44      	itt	mi
 800831e:	232b      	movmi	r3, #43	; 0x2b
 8008320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008324:	f89a 3000 	ldrb.w	r3, [sl]
 8008328:	2b2a      	cmp	r3, #42	; 0x2a
 800832a:	d015      	beq.n	8008358 <_vfiprintf_r+0x13c>
 800832c:	9a07      	ldr	r2, [sp, #28]
 800832e:	4654      	mov	r4, sl
 8008330:	2000      	movs	r0, #0
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	4621      	mov	r1, r4
 8008338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833c:	3b30      	subs	r3, #48	; 0x30
 800833e:	2b09      	cmp	r3, #9
 8008340:	d94e      	bls.n	80083e0 <_vfiprintf_r+0x1c4>
 8008342:	b1b0      	cbz	r0, 8008372 <_vfiprintf_r+0x156>
 8008344:	9207      	str	r2, [sp, #28]
 8008346:	e014      	b.n	8008372 <_vfiprintf_r+0x156>
 8008348:	eba0 0308 	sub.w	r3, r0, r8
 800834c:	fa09 f303 	lsl.w	r3, r9, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	46a2      	mov	sl, r4
 8008356:	e7d2      	b.n	80082fe <_vfiprintf_r+0xe2>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	9103      	str	r1, [sp, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbb      	ittet	lt
 8008364:	425b      	neglt	r3, r3
 8008366:	f042 0202 	orrlt.w	r2, r2, #2
 800836a:	9307      	strge	r3, [sp, #28]
 800836c:	9307      	strlt	r3, [sp, #28]
 800836e:	bfb8      	it	lt
 8008370:	9204      	strlt	r2, [sp, #16]
 8008372:	7823      	ldrb	r3, [r4, #0]
 8008374:	2b2e      	cmp	r3, #46	; 0x2e
 8008376:	d10c      	bne.n	8008392 <_vfiprintf_r+0x176>
 8008378:	7863      	ldrb	r3, [r4, #1]
 800837a:	2b2a      	cmp	r3, #42	; 0x2a
 800837c:	d135      	bne.n	80083ea <_vfiprintf_r+0x1ce>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9203      	str	r2, [sp, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfb8      	it	lt
 800838a:	f04f 33ff 	movlt.w	r3, #4294967295
 800838e:	3402      	adds	r4, #2
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008478 <_vfiprintf_r+0x25c>
 8008396:	7821      	ldrb	r1, [r4, #0]
 8008398:	2203      	movs	r2, #3
 800839a:	4650      	mov	r0, sl
 800839c:	f7f7 ff20 	bl	80001e0 <memchr>
 80083a0:	b140      	cbz	r0, 80083b4 <_vfiprintf_r+0x198>
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	eba0 000a 	sub.w	r0, r0, sl
 80083a8:	fa03 f000 	lsl.w	r0, r3, r0
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	4303      	orrs	r3, r0
 80083b0:	3401      	adds	r4, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	482c      	ldr	r0, [pc, #176]	; (800846c <_vfiprintf_r+0x250>)
 80083ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083be:	2206      	movs	r2, #6
 80083c0:	f7f7 ff0e 	bl	80001e0 <memchr>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d03f      	beq.n	8008448 <_vfiprintf_r+0x22c>
 80083c8:	4b29      	ldr	r3, [pc, #164]	; (8008470 <_vfiprintf_r+0x254>)
 80083ca:	bb1b      	cbnz	r3, 8008414 <_vfiprintf_r+0x1f8>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	3307      	adds	r3, #7
 80083d0:	f023 0307 	bic.w	r3, r3, #7
 80083d4:	3308      	adds	r3, #8
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	443b      	add	r3, r7
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	e767      	b.n	80082b0 <_vfiprintf_r+0x94>
 80083e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e4:	460c      	mov	r4, r1
 80083e6:	2001      	movs	r0, #1
 80083e8:	e7a5      	b.n	8008336 <_vfiprintf_r+0x11a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	3401      	adds	r4, #1
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	4619      	mov	r1, r3
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4620      	mov	r0, r4
 80083f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083fc:	3a30      	subs	r2, #48	; 0x30
 80083fe:	2a09      	cmp	r2, #9
 8008400:	d903      	bls.n	800840a <_vfiprintf_r+0x1ee>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0c5      	beq.n	8008392 <_vfiprintf_r+0x176>
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	e7c3      	b.n	8008392 <_vfiprintf_r+0x176>
 800840a:	fb0c 2101 	mla	r1, ip, r1, r2
 800840e:	4604      	mov	r4, r0
 8008410:	2301      	movs	r3, #1
 8008412:	e7f0      	b.n	80083f6 <_vfiprintf_r+0x1da>
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	462a      	mov	r2, r5
 800841a:	4b16      	ldr	r3, [pc, #88]	; (8008474 <_vfiprintf_r+0x258>)
 800841c:	a904      	add	r1, sp, #16
 800841e:	4630      	mov	r0, r6
 8008420:	f7fd fe24 	bl	800606c <_printf_float>
 8008424:	4607      	mov	r7, r0
 8008426:	1c78      	adds	r0, r7, #1
 8008428:	d1d6      	bne.n	80083d8 <_vfiprintf_r+0x1bc>
 800842a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842c:	07d9      	lsls	r1, r3, #31
 800842e:	d405      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008430:	89ab      	ldrh	r3, [r5, #12]
 8008432:	059a      	lsls	r2, r3, #22
 8008434:	d402      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008438:	f000 faaf 	bl	800899a <__retarget_lock_release_recursive>
 800843c:	89ab      	ldrh	r3, [r5, #12]
 800843e:	065b      	lsls	r3, r3, #25
 8008440:	f53f af12 	bmi.w	8008268 <_vfiprintf_r+0x4c>
 8008444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008446:	e711      	b.n	800826c <_vfiprintf_r+0x50>
 8008448:	ab03      	add	r3, sp, #12
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	462a      	mov	r2, r5
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <_vfiprintf_r+0x258>)
 8008450:	a904      	add	r1, sp, #16
 8008452:	4630      	mov	r0, r6
 8008454:	f7fe f8ae 	bl	80065b4 <_printf_i>
 8008458:	e7e4      	b.n	8008424 <_vfiprintf_r+0x208>
 800845a:	bf00      	nop
 800845c:	0800906c 	.word	0x0800906c
 8008460:	0800908c 	.word	0x0800908c
 8008464:	0800904c 	.word	0x0800904c
 8008468:	08008ef4 	.word	0x08008ef4
 800846c:	08008efe 	.word	0x08008efe
 8008470:	0800606d 	.word	0x0800606d
 8008474:	080081f7 	.word	0x080081f7
 8008478:	08008efa 	.word	0x08008efa

0800847c <__swbuf_r>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	460e      	mov	r6, r1
 8008480:	4614      	mov	r4, r2
 8008482:	4605      	mov	r5, r0
 8008484:	b118      	cbz	r0, 800848e <__swbuf_r+0x12>
 8008486:	6983      	ldr	r3, [r0, #24]
 8008488:	b90b      	cbnz	r3, 800848e <__swbuf_r+0x12>
 800848a:	f000 f9e7 	bl	800885c <__sinit>
 800848e:	4b21      	ldr	r3, [pc, #132]	; (8008514 <__swbuf_r+0x98>)
 8008490:	429c      	cmp	r4, r3
 8008492:	d12b      	bne.n	80084ec <__swbuf_r+0x70>
 8008494:	686c      	ldr	r4, [r5, #4]
 8008496:	69a3      	ldr	r3, [r4, #24]
 8008498:	60a3      	str	r3, [r4, #8]
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	071a      	lsls	r2, r3, #28
 800849e:	d52f      	bpl.n	8008500 <__swbuf_r+0x84>
 80084a0:	6923      	ldr	r3, [r4, #16]
 80084a2:	b36b      	cbz	r3, 8008500 <__swbuf_r+0x84>
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	1ac0      	subs	r0, r0, r3
 80084aa:	6963      	ldr	r3, [r4, #20]
 80084ac:	b2f6      	uxtb	r6, r6
 80084ae:	4283      	cmp	r3, r0
 80084b0:	4637      	mov	r7, r6
 80084b2:	dc04      	bgt.n	80084be <__swbuf_r+0x42>
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f93c 	bl	8008734 <_fflush_r>
 80084bc:	bb30      	cbnz	r0, 800850c <__swbuf_r+0x90>
 80084be:	68a3      	ldr	r3, [r4, #8]
 80084c0:	3b01      	subs	r3, #1
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	701e      	strb	r6, [r3, #0]
 80084cc:	6963      	ldr	r3, [r4, #20]
 80084ce:	3001      	adds	r0, #1
 80084d0:	4283      	cmp	r3, r0
 80084d2:	d004      	beq.n	80084de <__swbuf_r+0x62>
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	07db      	lsls	r3, r3, #31
 80084d8:	d506      	bpl.n	80084e8 <__swbuf_r+0x6c>
 80084da:	2e0a      	cmp	r6, #10
 80084dc:	d104      	bne.n	80084e8 <__swbuf_r+0x6c>
 80084de:	4621      	mov	r1, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	f000 f927 	bl	8008734 <_fflush_r>
 80084e6:	b988      	cbnz	r0, 800850c <__swbuf_r+0x90>
 80084e8:	4638      	mov	r0, r7
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <__swbuf_r+0x9c>)
 80084ee:	429c      	cmp	r4, r3
 80084f0:	d101      	bne.n	80084f6 <__swbuf_r+0x7a>
 80084f2:	68ac      	ldr	r4, [r5, #8]
 80084f4:	e7cf      	b.n	8008496 <__swbuf_r+0x1a>
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <__swbuf_r+0xa0>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	bf08      	it	eq
 80084fc:	68ec      	ldreq	r4, [r5, #12]
 80084fe:	e7ca      	b.n	8008496 <__swbuf_r+0x1a>
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f81a 	bl	800853c <__swsetup_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	d0cb      	beq.n	80084a4 <__swbuf_r+0x28>
 800850c:	f04f 37ff 	mov.w	r7, #4294967295
 8008510:	e7ea      	b.n	80084e8 <__swbuf_r+0x6c>
 8008512:	bf00      	nop
 8008514:	0800906c 	.word	0x0800906c
 8008518:	0800908c 	.word	0x0800908c
 800851c:	0800904c 	.word	0x0800904c

08008520 <__ascii_wctomb>:
 8008520:	b149      	cbz	r1, 8008536 <__ascii_wctomb+0x16>
 8008522:	2aff      	cmp	r2, #255	; 0xff
 8008524:	bf85      	ittet	hi
 8008526:	238a      	movhi	r3, #138	; 0x8a
 8008528:	6003      	strhi	r3, [r0, #0]
 800852a:	700a      	strbls	r2, [r1, #0]
 800852c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008530:	bf98      	it	ls
 8008532:	2001      	movls	r0, #1
 8008534:	4770      	bx	lr
 8008536:	4608      	mov	r0, r1
 8008538:	4770      	bx	lr
	...

0800853c <__swsetup_r>:
 800853c:	4b32      	ldr	r3, [pc, #200]	; (8008608 <__swsetup_r+0xcc>)
 800853e:	b570      	push	{r4, r5, r6, lr}
 8008540:	681d      	ldr	r5, [r3, #0]
 8008542:	4606      	mov	r6, r0
 8008544:	460c      	mov	r4, r1
 8008546:	b125      	cbz	r5, 8008552 <__swsetup_r+0x16>
 8008548:	69ab      	ldr	r3, [r5, #24]
 800854a:	b913      	cbnz	r3, 8008552 <__swsetup_r+0x16>
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f985 	bl	800885c <__sinit>
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <__swsetup_r+0xd0>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d10f      	bne.n	8008578 <__swsetup_r+0x3c>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008560:	0719      	lsls	r1, r3, #28
 8008562:	d42c      	bmi.n	80085be <__swsetup_r+0x82>
 8008564:	06dd      	lsls	r5, r3, #27
 8008566:	d411      	bmi.n	800858c <__swsetup_r+0x50>
 8008568:	2309      	movs	r3, #9
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	e03e      	b.n	80085f6 <__swsetup_r+0xba>
 8008578:	4b25      	ldr	r3, [pc, #148]	; (8008610 <__swsetup_r+0xd4>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d101      	bne.n	8008582 <__swsetup_r+0x46>
 800857e:	68ac      	ldr	r4, [r5, #8]
 8008580:	e7eb      	b.n	800855a <__swsetup_r+0x1e>
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <__swsetup_r+0xd8>)
 8008584:	429c      	cmp	r4, r3
 8008586:	bf08      	it	eq
 8008588:	68ec      	ldreq	r4, [r5, #12]
 800858a:	e7e6      	b.n	800855a <__swsetup_r+0x1e>
 800858c:	0758      	lsls	r0, r3, #29
 800858e:	d512      	bpl.n	80085b6 <__swsetup_r+0x7a>
 8008590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008592:	b141      	cbz	r1, 80085a6 <__swsetup_r+0x6a>
 8008594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008598:	4299      	cmp	r1, r3
 800859a:	d002      	beq.n	80085a2 <__swsetup_r+0x66>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff fb6f 	bl	8007c80 <_free_r>
 80085a2:	2300      	movs	r3, #0
 80085a4:	6363      	str	r3, [r4, #52]	; 0x34
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	2300      	movs	r3, #0
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f043 0308 	orr.w	r3, r3, #8
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	b94b      	cbnz	r3, 80085d6 <__swsetup_r+0x9a>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085cc:	d003      	beq.n	80085d6 <__swsetup_r+0x9a>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 fa07 	bl	80089e4 <__smakebuf_r>
 80085d6:	89a0      	ldrh	r0, [r4, #12]
 80085d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085dc:	f010 0301 	ands.w	r3, r0, #1
 80085e0:	d00a      	beq.n	80085f8 <__swsetup_r+0xbc>
 80085e2:	2300      	movs	r3, #0
 80085e4:	60a3      	str	r3, [r4, #8]
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	425b      	negs	r3, r3
 80085ea:	61a3      	str	r3, [r4, #24]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	b943      	cbnz	r3, 8008602 <__swsetup_r+0xc6>
 80085f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085f4:	d1ba      	bne.n	800856c <__swsetup_r+0x30>
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	0781      	lsls	r1, r0, #30
 80085fa:	bf58      	it	pl
 80085fc:	6963      	ldrpl	r3, [r4, #20]
 80085fe:	60a3      	str	r3, [r4, #8]
 8008600:	e7f4      	b.n	80085ec <__swsetup_r+0xb0>
 8008602:	2000      	movs	r0, #0
 8008604:	e7f7      	b.n	80085f6 <__swsetup_r+0xba>
 8008606:	bf00      	nop
 8008608:	2000000c 	.word	0x2000000c
 800860c:	0800906c 	.word	0x0800906c
 8008610:	0800908c 	.word	0x0800908c
 8008614:	0800904c 	.word	0x0800904c

08008618 <abort>:
 8008618:	b508      	push	{r3, lr}
 800861a:	2006      	movs	r0, #6
 800861c:	f000 fa52 	bl	8008ac4 <raise>
 8008620:	2001      	movs	r0, #1
 8008622:	f7f9 fc92 	bl	8001f4a <_exit>
	...

08008628 <__sflush_r>:
 8008628:	898a      	ldrh	r2, [r1, #12]
 800862a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862e:	4605      	mov	r5, r0
 8008630:	0710      	lsls	r0, r2, #28
 8008632:	460c      	mov	r4, r1
 8008634:	d458      	bmi.n	80086e8 <__sflush_r+0xc0>
 8008636:	684b      	ldr	r3, [r1, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	dc05      	bgt.n	8008648 <__sflush_r+0x20>
 800863c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	dc02      	bgt.n	8008648 <__sflush_r+0x20>
 8008642:	2000      	movs	r0, #0
 8008644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800864a:	2e00      	cmp	r6, #0
 800864c:	d0f9      	beq.n	8008642 <__sflush_r+0x1a>
 800864e:	2300      	movs	r3, #0
 8008650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008654:	682f      	ldr	r7, [r5, #0]
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	d032      	beq.n	80086c0 <__sflush_r+0x98>
 800865a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	075a      	lsls	r2, r3, #29
 8008660:	d505      	bpl.n	800866e <__sflush_r+0x46>
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	1ac0      	subs	r0, r0, r3
 8008666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008668:	b10b      	cbz	r3, 800866e <__sflush_r+0x46>
 800866a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800866c:	1ac0      	subs	r0, r0, r3
 800866e:	2300      	movs	r3, #0
 8008670:	4602      	mov	r2, r0
 8008672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008674:	6a21      	ldr	r1, [r4, #32]
 8008676:	4628      	mov	r0, r5
 8008678:	47b0      	blx	r6
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	d106      	bne.n	800868e <__sflush_r+0x66>
 8008680:	6829      	ldr	r1, [r5, #0]
 8008682:	291d      	cmp	r1, #29
 8008684:	d82c      	bhi.n	80086e0 <__sflush_r+0xb8>
 8008686:	4a2a      	ldr	r2, [pc, #168]	; (8008730 <__sflush_r+0x108>)
 8008688:	40ca      	lsrs	r2, r1
 800868a:	07d6      	lsls	r6, r2, #31
 800868c:	d528      	bpl.n	80086e0 <__sflush_r+0xb8>
 800868e:	2200      	movs	r2, #0
 8008690:	6062      	str	r2, [r4, #4]
 8008692:	04d9      	lsls	r1, r3, #19
 8008694:	6922      	ldr	r2, [r4, #16]
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	d504      	bpl.n	80086a4 <__sflush_r+0x7c>
 800869a:	1c42      	adds	r2, r0, #1
 800869c:	d101      	bne.n	80086a2 <__sflush_r+0x7a>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	b903      	cbnz	r3, 80086a4 <__sflush_r+0x7c>
 80086a2:	6560      	str	r0, [r4, #84]	; 0x54
 80086a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086a6:	602f      	str	r7, [r5, #0]
 80086a8:	2900      	cmp	r1, #0
 80086aa:	d0ca      	beq.n	8008642 <__sflush_r+0x1a>
 80086ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086b0:	4299      	cmp	r1, r3
 80086b2:	d002      	beq.n	80086ba <__sflush_r+0x92>
 80086b4:	4628      	mov	r0, r5
 80086b6:	f7ff fae3 	bl	8007c80 <_free_r>
 80086ba:	2000      	movs	r0, #0
 80086bc:	6360      	str	r0, [r4, #52]	; 0x34
 80086be:	e7c1      	b.n	8008644 <__sflush_r+0x1c>
 80086c0:	6a21      	ldr	r1, [r4, #32]
 80086c2:	2301      	movs	r3, #1
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b0      	blx	r6
 80086c8:	1c41      	adds	r1, r0, #1
 80086ca:	d1c7      	bne.n	800865c <__sflush_r+0x34>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0c4      	beq.n	800865c <__sflush_r+0x34>
 80086d2:	2b1d      	cmp	r3, #29
 80086d4:	d001      	beq.n	80086da <__sflush_r+0xb2>
 80086d6:	2b16      	cmp	r3, #22
 80086d8:	d101      	bne.n	80086de <__sflush_r+0xb6>
 80086da:	602f      	str	r7, [r5, #0]
 80086dc:	e7b1      	b.n	8008642 <__sflush_r+0x1a>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	e7ad      	b.n	8008644 <__sflush_r+0x1c>
 80086e8:	690f      	ldr	r7, [r1, #16]
 80086ea:	2f00      	cmp	r7, #0
 80086ec:	d0a9      	beq.n	8008642 <__sflush_r+0x1a>
 80086ee:	0793      	lsls	r3, r2, #30
 80086f0:	680e      	ldr	r6, [r1, #0]
 80086f2:	bf08      	it	eq
 80086f4:	694b      	ldreq	r3, [r1, #20]
 80086f6:	600f      	str	r7, [r1, #0]
 80086f8:	bf18      	it	ne
 80086fa:	2300      	movne	r3, #0
 80086fc:	eba6 0807 	sub.w	r8, r6, r7
 8008700:	608b      	str	r3, [r1, #8]
 8008702:	f1b8 0f00 	cmp.w	r8, #0
 8008706:	dd9c      	ble.n	8008642 <__sflush_r+0x1a>
 8008708:	6a21      	ldr	r1, [r4, #32]
 800870a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800870c:	4643      	mov	r3, r8
 800870e:	463a      	mov	r2, r7
 8008710:	4628      	mov	r0, r5
 8008712:	47b0      	blx	r6
 8008714:	2800      	cmp	r0, #0
 8008716:	dc06      	bgt.n	8008726 <__sflush_r+0xfe>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e78e      	b.n	8008644 <__sflush_r+0x1c>
 8008726:	4407      	add	r7, r0
 8008728:	eba8 0800 	sub.w	r8, r8, r0
 800872c:	e7e9      	b.n	8008702 <__sflush_r+0xda>
 800872e:	bf00      	nop
 8008730:	20400001 	.word	0x20400001

08008734 <_fflush_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	4605      	mov	r5, r0
 800873a:	460c      	mov	r4, r1
 800873c:	b913      	cbnz	r3, 8008744 <_fflush_r+0x10>
 800873e:	2500      	movs	r5, #0
 8008740:	4628      	mov	r0, r5
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	b118      	cbz	r0, 800874e <_fflush_r+0x1a>
 8008746:	6983      	ldr	r3, [r0, #24]
 8008748:	b90b      	cbnz	r3, 800874e <_fflush_r+0x1a>
 800874a:	f000 f887 	bl	800885c <__sinit>
 800874e:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <_fflush_r+0x6c>)
 8008750:	429c      	cmp	r4, r3
 8008752:	d11b      	bne.n	800878c <_fflush_r+0x58>
 8008754:	686c      	ldr	r4, [r5, #4]
 8008756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0ef      	beq.n	800873e <_fflush_r+0xa>
 800875e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008760:	07d0      	lsls	r0, r2, #31
 8008762:	d404      	bmi.n	800876e <_fflush_r+0x3a>
 8008764:	0599      	lsls	r1, r3, #22
 8008766:	d402      	bmi.n	800876e <_fflush_r+0x3a>
 8008768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800876a:	f000 f915 	bl	8008998 <__retarget_lock_acquire_recursive>
 800876e:	4628      	mov	r0, r5
 8008770:	4621      	mov	r1, r4
 8008772:	f7ff ff59 	bl	8008628 <__sflush_r>
 8008776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008778:	07da      	lsls	r2, r3, #31
 800877a:	4605      	mov	r5, r0
 800877c:	d4e0      	bmi.n	8008740 <_fflush_r+0xc>
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	059b      	lsls	r3, r3, #22
 8008782:	d4dd      	bmi.n	8008740 <_fflush_r+0xc>
 8008784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008786:	f000 f908 	bl	800899a <__retarget_lock_release_recursive>
 800878a:	e7d9      	b.n	8008740 <_fflush_r+0xc>
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <_fflush_r+0x70>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d101      	bne.n	8008796 <_fflush_r+0x62>
 8008792:	68ac      	ldr	r4, [r5, #8]
 8008794:	e7df      	b.n	8008756 <_fflush_r+0x22>
 8008796:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <_fflush_r+0x74>)
 8008798:	429c      	cmp	r4, r3
 800879a:	bf08      	it	eq
 800879c:	68ec      	ldreq	r4, [r5, #12]
 800879e:	e7da      	b.n	8008756 <_fflush_r+0x22>
 80087a0:	0800906c 	.word	0x0800906c
 80087a4:	0800908c 	.word	0x0800908c
 80087a8:	0800904c 	.word	0x0800904c

080087ac <std>:
 80087ac:	2300      	movs	r3, #0
 80087ae:	b510      	push	{r4, lr}
 80087b0:	4604      	mov	r4, r0
 80087b2:	e9c0 3300 	strd	r3, r3, [r0]
 80087b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ba:	6083      	str	r3, [r0, #8]
 80087bc:	8181      	strh	r1, [r0, #12]
 80087be:	6643      	str	r3, [r0, #100]	; 0x64
 80087c0:	81c2      	strh	r2, [r0, #14]
 80087c2:	6183      	str	r3, [r0, #24]
 80087c4:	4619      	mov	r1, r3
 80087c6:	2208      	movs	r2, #8
 80087c8:	305c      	adds	r0, #92	; 0x5c
 80087ca:	f7fd fba7 	bl	8005f1c <memset>
 80087ce:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <std+0x38>)
 80087d0:	6263      	str	r3, [r4, #36]	; 0x24
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <std+0x3c>)
 80087d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087d6:	4b05      	ldr	r3, [pc, #20]	; (80087ec <std+0x40>)
 80087d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x44>)
 80087dc:	6224      	str	r4, [r4, #32]
 80087de:	6323      	str	r3, [r4, #48]	; 0x30
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	bf00      	nop
 80087e4:	08008afd 	.word	0x08008afd
 80087e8:	08008b1f 	.word	0x08008b1f
 80087ec:	08008b57 	.word	0x08008b57
 80087f0:	08008b7b 	.word	0x08008b7b

080087f4 <_cleanup_r>:
 80087f4:	4901      	ldr	r1, [pc, #4]	; (80087fc <_cleanup_r+0x8>)
 80087f6:	f000 b8af 	b.w	8008958 <_fwalk_reent>
 80087fa:	bf00      	nop
 80087fc:	08008735 	.word	0x08008735

08008800 <__sfmoreglue>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	1e4a      	subs	r2, r1, #1
 8008804:	2568      	movs	r5, #104	; 0x68
 8008806:	4355      	muls	r5, r2
 8008808:	460e      	mov	r6, r1
 800880a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800880e:	f7ff fa87 	bl	8007d20 <_malloc_r>
 8008812:	4604      	mov	r4, r0
 8008814:	b140      	cbz	r0, 8008828 <__sfmoreglue+0x28>
 8008816:	2100      	movs	r1, #0
 8008818:	e9c0 1600 	strd	r1, r6, [r0]
 800881c:	300c      	adds	r0, #12
 800881e:	60a0      	str	r0, [r4, #8]
 8008820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008824:	f7fd fb7a 	bl	8005f1c <memset>
 8008828:	4620      	mov	r0, r4
 800882a:	bd70      	pop	{r4, r5, r6, pc}

0800882c <__sfp_lock_acquire>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sfp_lock_acquire+0x8>)
 800882e:	f000 b8b3 	b.w	8008998 <__retarget_lock_acquire_recursive>
 8008832:	bf00      	nop
 8008834:	200008cc 	.word	0x200008cc

08008838 <__sfp_lock_release>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_release+0x8>)
 800883a:	f000 b8ae 	b.w	800899a <__retarget_lock_release_recursive>
 800883e:	bf00      	nop
 8008840:	200008cc 	.word	0x200008cc

08008844 <__sinit_lock_acquire>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sinit_lock_acquire+0x8>)
 8008846:	f000 b8a7 	b.w	8008998 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	200008c7 	.word	0x200008c7

08008850 <__sinit_lock_release>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sinit_lock_release+0x8>)
 8008852:	f000 b8a2 	b.w	800899a <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	200008c7 	.word	0x200008c7

0800885c <__sinit>:
 800885c:	b510      	push	{r4, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	f7ff fff0 	bl	8008844 <__sinit_lock_acquire>
 8008864:	69a3      	ldr	r3, [r4, #24]
 8008866:	b11b      	cbz	r3, 8008870 <__sinit+0x14>
 8008868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886c:	f7ff bff0 	b.w	8008850 <__sinit_lock_release>
 8008870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008874:	6523      	str	r3, [r4, #80]	; 0x50
 8008876:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <__sinit+0x68>)
 8008878:	4a13      	ldr	r2, [pc, #76]	; (80088c8 <__sinit+0x6c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	62a2      	str	r2, [r4, #40]	; 0x28
 800887e:	42a3      	cmp	r3, r4
 8008880:	bf04      	itt	eq
 8008882:	2301      	moveq	r3, #1
 8008884:	61a3      	streq	r3, [r4, #24]
 8008886:	4620      	mov	r0, r4
 8008888:	f000 f820 	bl	80088cc <__sfp>
 800888c:	6060      	str	r0, [r4, #4]
 800888e:	4620      	mov	r0, r4
 8008890:	f000 f81c 	bl	80088cc <__sfp>
 8008894:	60a0      	str	r0, [r4, #8]
 8008896:	4620      	mov	r0, r4
 8008898:	f000 f818 	bl	80088cc <__sfp>
 800889c:	2200      	movs	r2, #0
 800889e:	60e0      	str	r0, [r4, #12]
 80088a0:	2104      	movs	r1, #4
 80088a2:	6860      	ldr	r0, [r4, #4]
 80088a4:	f7ff ff82 	bl	80087ac <std>
 80088a8:	68a0      	ldr	r0, [r4, #8]
 80088aa:	2201      	movs	r2, #1
 80088ac:	2109      	movs	r1, #9
 80088ae:	f7ff ff7d 	bl	80087ac <std>
 80088b2:	68e0      	ldr	r0, [r4, #12]
 80088b4:	2202      	movs	r2, #2
 80088b6:	2112      	movs	r1, #18
 80088b8:	f7ff ff78 	bl	80087ac <std>
 80088bc:	2301      	movs	r3, #1
 80088be:	61a3      	str	r3, [r4, #24]
 80088c0:	e7d2      	b.n	8008868 <__sinit+0xc>
 80088c2:	bf00      	nop
 80088c4:	08008cc8 	.word	0x08008cc8
 80088c8:	080087f5 	.word	0x080087f5

080088cc <__sfp>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	4607      	mov	r7, r0
 80088d0:	f7ff ffac 	bl	800882c <__sfp_lock_acquire>
 80088d4:	4b1e      	ldr	r3, [pc, #120]	; (8008950 <__sfp+0x84>)
 80088d6:	681e      	ldr	r6, [r3, #0]
 80088d8:	69b3      	ldr	r3, [r6, #24]
 80088da:	b913      	cbnz	r3, 80088e2 <__sfp+0x16>
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff ffbd 	bl	800885c <__sinit>
 80088e2:	3648      	adds	r6, #72	; 0x48
 80088e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	d503      	bpl.n	80088f4 <__sfp+0x28>
 80088ec:	6833      	ldr	r3, [r6, #0]
 80088ee:	b30b      	cbz	r3, 8008934 <__sfp+0x68>
 80088f0:	6836      	ldr	r6, [r6, #0]
 80088f2:	e7f7      	b.n	80088e4 <__sfp+0x18>
 80088f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088f8:	b9d5      	cbnz	r5, 8008930 <__sfp+0x64>
 80088fa:	4b16      	ldr	r3, [pc, #88]	; (8008954 <__sfp+0x88>)
 80088fc:	60e3      	str	r3, [r4, #12]
 80088fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008902:	6665      	str	r5, [r4, #100]	; 0x64
 8008904:	f000 f847 	bl	8008996 <__retarget_lock_init_recursive>
 8008908:	f7ff ff96 	bl	8008838 <__sfp_lock_release>
 800890c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008914:	6025      	str	r5, [r4, #0]
 8008916:	61a5      	str	r5, [r4, #24]
 8008918:	2208      	movs	r2, #8
 800891a:	4629      	mov	r1, r5
 800891c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008920:	f7fd fafc 	bl	8005f1c <memset>
 8008924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800892c:	4620      	mov	r0, r4
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008930:	3468      	adds	r4, #104	; 0x68
 8008932:	e7d9      	b.n	80088e8 <__sfp+0x1c>
 8008934:	2104      	movs	r1, #4
 8008936:	4638      	mov	r0, r7
 8008938:	f7ff ff62 	bl	8008800 <__sfmoreglue>
 800893c:	4604      	mov	r4, r0
 800893e:	6030      	str	r0, [r6, #0]
 8008940:	2800      	cmp	r0, #0
 8008942:	d1d5      	bne.n	80088f0 <__sfp+0x24>
 8008944:	f7ff ff78 	bl	8008838 <__sfp_lock_release>
 8008948:	230c      	movs	r3, #12
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	e7ee      	b.n	800892c <__sfp+0x60>
 800894e:	bf00      	nop
 8008950:	08008cc8 	.word	0x08008cc8
 8008954:	ffff0001 	.word	0xffff0001

08008958 <_fwalk_reent>:
 8008958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800895c:	4606      	mov	r6, r0
 800895e:	4688      	mov	r8, r1
 8008960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008964:	2700      	movs	r7, #0
 8008966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800896a:	f1b9 0901 	subs.w	r9, r9, #1
 800896e:	d505      	bpl.n	800897c <_fwalk_reent+0x24>
 8008970:	6824      	ldr	r4, [r4, #0]
 8008972:	2c00      	cmp	r4, #0
 8008974:	d1f7      	bne.n	8008966 <_fwalk_reent+0xe>
 8008976:	4638      	mov	r0, r7
 8008978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897c:	89ab      	ldrh	r3, [r5, #12]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d907      	bls.n	8008992 <_fwalk_reent+0x3a>
 8008982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008986:	3301      	adds	r3, #1
 8008988:	d003      	beq.n	8008992 <_fwalk_reent+0x3a>
 800898a:	4629      	mov	r1, r5
 800898c:	4630      	mov	r0, r6
 800898e:	47c0      	blx	r8
 8008990:	4307      	orrs	r7, r0
 8008992:	3568      	adds	r5, #104	; 0x68
 8008994:	e7e9      	b.n	800896a <_fwalk_reent+0x12>

08008996 <__retarget_lock_init_recursive>:
 8008996:	4770      	bx	lr

08008998 <__retarget_lock_acquire_recursive>:
 8008998:	4770      	bx	lr

0800899a <__retarget_lock_release_recursive>:
 800899a:	4770      	bx	lr

0800899c <__swhatbuf_r>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	460e      	mov	r6, r1
 80089a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a4:	2900      	cmp	r1, #0
 80089a6:	b096      	sub	sp, #88	; 0x58
 80089a8:	4614      	mov	r4, r2
 80089aa:	461d      	mov	r5, r3
 80089ac:	da07      	bge.n	80089be <__swhatbuf_r+0x22>
 80089ae:	2300      	movs	r3, #0
 80089b0:	602b      	str	r3, [r5, #0]
 80089b2:	89b3      	ldrh	r3, [r6, #12]
 80089b4:	061a      	lsls	r2, r3, #24
 80089b6:	d410      	bmi.n	80089da <__swhatbuf_r+0x3e>
 80089b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089bc:	e00e      	b.n	80089dc <__swhatbuf_r+0x40>
 80089be:	466a      	mov	r2, sp
 80089c0:	f000 f902 	bl	8008bc8 <_fstat_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	dbf2      	blt.n	80089ae <__swhatbuf_r+0x12>
 80089c8:	9a01      	ldr	r2, [sp, #4]
 80089ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089d2:	425a      	negs	r2, r3
 80089d4:	415a      	adcs	r2, r3
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	e7ee      	b.n	80089b8 <__swhatbuf_r+0x1c>
 80089da:	2340      	movs	r3, #64	; 0x40
 80089dc:	2000      	movs	r0, #0
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	b016      	add	sp, #88	; 0x58
 80089e2:	bd70      	pop	{r4, r5, r6, pc}

080089e4 <__smakebuf_r>:
 80089e4:	898b      	ldrh	r3, [r1, #12]
 80089e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089e8:	079d      	lsls	r5, r3, #30
 80089ea:	4606      	mov	r6, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	d507      	bpl.n	8008a00 <__smakebuf_r+0x1c>
 80089f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	2301      	movs	r3, #1
 80089fa:	6163      	str	r3, [r4, #20]
 80089fc:	b002      	add	sp, #8
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	ab01      	add	r3, sp, #4
 8008a02:	466a      	mov	r2, sp
 8008a04:	f7ff ffca 	bl	800899c <__swhatbuf_r>
 8008a08:	9900      	ldr	r1, [sp, #0]
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff f987 	bl	8007d20 <_malloc_r>
 8008a12:	b948      	cbnz	r0, 8008a28 <__smakebuf_r+0x44>
 8008a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d4ef      	bmi.n	80089fc <__smakebuf_r+0x18>
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	f043 0302 	orr.w	r3, r3, #2
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	e7e3      	b.n	80089f0 <__smakebuf_r+0xc>
 8008a28:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <__smakebuf_r+0x7c>)
 8008a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	6163      	str	r3, [r4, #20]
 8008a3a:	9b01      	ldr	r3, [sp, #4]
 8008a3c:	6120      	str	r0, [r4, #16]
 8008a3e:	b15b      	cbz	r3, 8008a58 <__smakebuf_r+0x74>
 8008a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a44:	4630      	mov	r0, r6
 8008a46:	f000 f8d1 	bl	8008bec <_isatty_r>
 8008a4a:	b128      	cbz	r0, 8008a58 <__smakebuf_r+0x74>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	f043 0301 	orr.w	r3, r3, #1
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	89a0      	ldrh	r0, [r4, #12]
 8008a5a:	4305      	orrs	r5, r0
 8008a5c:	81a5      	strh	r5, [r4, #12]
 8008a5e:	e7cd      	b.n	80089fc <__smakebuf_r+0x18>
 8008a60:	080087f5 	.word	0x080087f5

08008a64 <_malloc_usable_size_r>:
 8008a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a68:	1f18      	subs	r0, r3, #4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	bfbc      	itt	lt
 8008a6e:	580b      	ldrlt	r3, [r1, r0]
 8008a70:	18c0      	addlt	r0, r0, r3
 8008a72:	4770      	bx	lr

08008a74 <_raise_r>:
 8008a74:	291f      	cmp	r1, #31
 8008a76:	b538      	push	{r3, r4, r5, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	d904      	bls.n	8008a88 <_raise_r+0x14>
 8008a7e:	2316      	movs	r3, #22
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a8a:	b112      	cbz	r2, 8008a92 <_raise_r+0x1e>
 8008a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a90:	b94b      	cbnz	r3, 8008aa6 <_raise_r+0x32>
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 f830 	bl	8008af8 <_getpid_r>
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa2:	f000 b817 	b.w	8008ad4 <_kill_r>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d00a      	beq.n	8008ac0 <_raise_r+0x4c>
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	d103      	bne.n	8008ab6 <_raise_r+0x42>
 8008aae:	2316      	movs	r3, #22
 8008ab0:	6003      	str	r3, [r0, #0]
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7e7      	b.n	8008a86 <_raise_r+0x12>
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008abc:	4628      	mov	r0, r5
 8008abe:	4798      	blx	r3
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e7e0      	b.n	8008a86 <_raise_r+0x12>

08008ac4 <raise>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <raise+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f7ff bfd3 	b.w	8008a74 <_raise_r>
 8008ace:	bf00      	nop
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <_kill_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d07      	ldr	r5, [pc, #28]	; (8008af4 <_kill_r+0x20>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	602b      	str	r3, [r5, #0]
 8008ae2:	f7f9 fa22 	bl	8001f2a <_kill>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d102      	bne.n	8008af0 <_kill_r+0x1c>
 8008aea:	682b      	ldr	r3, [r5, #0]
 8008aec:	b103      	cbz	r3, 8008af0 <_kill_r+0x1c>
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	bd38      	pop	{r3, r4, r5, pc}
 8008af2:	bf00      	nop
 8008af4:	200008c0 	.word	0x200008c0

08008af8 <_getpid_r>:
 8008af8:	f7f9 ba0f 	b.w	8001f1a <_getpid>

08008afc <__sread>:
 8008afc:	b510      	push	{r4, lr}
 8008afe:	460c      	mov	r4, r1
 8008b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b04:	f000 f894 	bl	8008c30 <_read_r>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	bfab      	itete	ge
 8008b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b10:	181b      	addge	r3, r3, r0
 8008b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b16:	bfac      	ite	ge
 8008b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b1a:	81a3      	strhlt	r3, [r4, #12]
 8008b1c:	bd10      	pop	{r4, pc}

08008b1e <__swrite>:
 8008b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	461f      	mov	r7, r3
 8008b24:	898b      	ldrh	r3, [r1, #12]
 8008b26:	05db      	lsls	r3, r3, #23
 8008b28:	4605      	mov	r5, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	d505      	bpl.n	8008b3c <__swrite+0x1e>
 8008b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b34:	2302      	movs	r3, #2
 8008b36:	2200      	movs	r2, #0
 8008b38:	f000 f868 	bl	8008c0c <_lseek_r>
 8008b3c:	89a3      	ldrh	r3, [r4, #12]
 8008b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b46:	81a3      	strh	r3, [r4, #12]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b52:	f000 b817 	b.w	8008b84 <_write_r>

08008b56 <__sseek>:
 8008b56:	b510      	push	{r4, lr}
 8008b58:	460c      	mov	r4, r1
 8008b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5e:	f000 f855 	bl	8008c0c <_lseek_r>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	bf15      	itete	ne
 8008b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b72:	81a3      	strheq	r3, [r4, #12]
 8008b74:	bf18      	it	ne
 8008b76:	81a3      	strhne	r3, [r4, #12]
 8008b78:	bd10      	pop	{r4, pc}

08008b7a <__sclose>:
 8008b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7e:	f000 b813 	b.w	8008ba8 <_close_r>
	...

08008b84 <_write_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d07      	ldr	r5, [pc, #28]	; (8008ba4 <_write_r+0x20>)
 8008b88:	4604      	mov	r4, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	602a      	str	r2, [r5, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f7f9 fa00 	bl	8001f98 <_write>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_write_r+0x1e>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_write_r+0x1e>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	200008c0 	.word	0x200008c0

08008ba8 <_close_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4d06      	ldr	r5, [pc, #24]	; (8008bc4 <_close_r+0x1c>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	f7f9 fa0c 	bl	8001fd0 <_close>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_close_r+0x1a>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_close_r+0x1a>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	200008c0 	.word	0x200008c0

08008bc8 <_fstat_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d07      	ldr	r5, [pc, #28]	; (8008be8 <_fstat_r+0x20>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	f7f9 fa07 	bl	8001fe8 <_fstat>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d102      	bne.n	8008be4 <_fstat_r+0x1c>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	b103      	cbz	r3, 8008be4 <_fstat_r+0x1c>
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	200008c0 	.word	0x200008c0

08008bec <_isatty_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	; (8008c08 <_isatty_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f9 fa06 	bl	8002008 <_isatty>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_isatty_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_isatty_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	200008c0 	.word	0x200008c0

08008c0c <_lseek_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d07      	ldr	r5, [pc, #28]	; (8008c2c <_lseek_r+0x20>)
 8008c10:	4604      	mov	r4, r0
 8008c12:	4608      	mov	r0, r1
 8008c14:	4611      	mov	r1, r2
 8008c16:	2200      	movs	r2, #0
 8008c18:	602a      	str	r2, [r5, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f7f9 f9ff 	bl	800201e <_lseek>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_lseek_r+0x1e>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_lseek_r+0x1e>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	200008c0 	.word	0x200008c0

08008c30 <_read_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4d07      	ldr	r5, [pc, #28]	; (8008c50 <_read_r+0x20>)
 8008c34:	4604      	mov	r4, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	4611      	mov	r1, r2
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	602a      	str	r2, [r5, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f7f9 f98d 	bl	8001f5e <_read>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_read_r+0x1e>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_read_r+0x1e>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	200008c0 	.word	0x200008c0

08008c54 <_init>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr

08008c60 <_fini>:
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c62:	bf00      	nop
 8008c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c66:	bc08      	pop	{r3}
 8008c68:	469e      	mov	lr, r3
 8008c6a:	4770      	bx	lr

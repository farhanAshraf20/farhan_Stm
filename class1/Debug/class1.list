
class1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800669c  0800669c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000070  08006714  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08006714  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021861  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036aa  00000000  00000000  00041901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00044fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  00046b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a129  00000000  00000000  00048588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec0a  00000000  00000000  000726b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffb1d  00000000  00000000  000912bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fac  00000000  00000000  00190e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006560 	.word	0x08006560

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006560 	.word	0x08006560

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f001 f8df 	bl	800172e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f8a6 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fabe 	bl	8000af4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000578:	f000 f904 	bl	8000784 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800057c:	f000 f93a 	bl	80007f4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000580:	f000 f978 	bl	8000874 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000584:	f000 f99c 	bl	80008c0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000588:	f000 fa26 	bl	80009d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800058c:	f000 fa54 	bl	8000a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000590:	f000 fa82 	bl	8000a98 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000594:	f000 f9d2 	bl	800093c <MX_TIM2_Init>
	  }
*/

	 // printf("count=%d\n",c);

	  switch(c)
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <main+0x140>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3b01      	subs	r3, #1
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d874      	bhi.n	800068c <main+0x124>
 80005a2:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <main+0x40>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005bd 	.word	0x080005bd
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	08000635 	.word	0x08000635
 80005b4:	0800065d 	.word	0x0800065d
 80005b8:	08000685 	.word	0x08000685
	  {
		  case 1:
		  {
			  printf("In case 1\n");
 80005bc:	483b      	ldr	r0, [pc, #236]	; (80006ac <main+0x144>)
 80005be:	f005 f889 	bl	80056d4 <puts>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 fd11 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f001 f921 	bl	8001818 <HAL_Delay>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 fd07 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f001 f917 	bl	8001818 <HAL_Delay>
		  break;
 80005ea:	e05b      	b.n	80006a4 <main+0x13c>
		  }

		  case 2:
		  {
			  printf("In case 2\n");
 80005ec:	4830      	ldr	r0, [pc, #192]	; (80006b0 <main+0x148>)
 80005ee:	f005 f871 	bl	80056d4 <puts>
			  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,1);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f8:	482e      	ldr	r0, [pc, #184]	; (80006b4 <main+0x14c>)
 80005fa:	f001 fcf9 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,1);
 80005fe:	2201      	movs	r2, #1
 8000600:	2120      	movs	r1, #32
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 fcf3 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f001 f903 	bl	8001818 <HAL_Delay>
			  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <main+0x14c>)
 800061a:	f001 fce9 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,0);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f001 fce3 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f001 f8f3 	bl	8001818 <HAL_Delay>

			  break;
 8000632:	e037      	b.n	80006a4 <main+0x13c>
		  }

		  case 3:
		  {
			  printf("In case 3\n");
 8000634:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x150>)
 8000636:	f005 f84d 	bl	80056d4 <puts>
			  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,1);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <main+0x14c>)
 8000642:	f001 fcd5 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,1);
 8000646:	2201      	movs	r2, #1
 8000648:	2120      	movs	r1, #32
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f001 fccf 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000656:	f001 f8df 	bl	8001818 <HAL_Delay>
		  break;
 800065a:	e023      	b.n	80006a4 <main+0x13c>
		  }
		  case 4:
		  {
			  printf("In case 4\n");
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0x154>)
 800065e:	f005 f839 	bl	80056d4 <puts>
			  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,0);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <main+0x14c>)
 800066a:	f001 fcc1 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,0);
 800066e:	2200      	movs	r2, #0
 8000670:	2120      	movs	r1, #32
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 fcbb 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800067a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067e:	f001 f8cb 	bl	8001818 <HAL_Delay>
		  break;
 8000682:	e00f      	b.n	80006a4 <main+0x13c>
		  }
		  case 5:
		  {
		  c=1;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0x140>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
		  break;
 800068a:	e00b      	b.n	80006a4 <main+0x13c>
		  }

		  default :
		  {
			  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,0);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4808      	ldr	r0, [pc, #32]	; (80006b4 <main+0x14c>)
 8000694:	f001 fcac 	bl	8001ff0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,0);
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f001 fca6 	bl	8001ff0 <HAL_GPIO_WritePin>
	  switch(c)
 80006a4:	e778      	b.n	8000598 <main+0x30>
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	08006578 	.word	0x08006578
 80006b0:	08006584 	.word	0x08006584
 80006b4:	48000400 	.word	0x48000400
 80006b8:	08006590 	.word	0x08006590
 80006bc:	0800659c 	.word	0x0800659c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2244      	movs	r2, #68	; 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 ff72 	bl	80055b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e6:	f001 ff3f 	bl	8002568 <HAL_PWREx_ControlVoltageScaling>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f0:	f000 fbbc 	bl	8000e6c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f001 ff1a 	bl	800252c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemClock_Config+0xc0>)
 80006fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fe:	4a20      	ldr	r2, [pc, #128]	; (8000780 <SystemClock_Config+0xc0>)
 8000700:	f023 0318 	bic.w	r3, r3, #24
 8000704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000708:	2314      	movs	r3, #20
 800070a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000720:	2301      	movs	r3, #1
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000724:	2301      	movs	r3, #1
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000728:	2328      	movs	r3, #40	; 0x28
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f835 	bl	80027ac <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000748:	f000 fb90 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2303      	movs	r3, #3
 8000752:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	2104      	movs	r1, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fc07 	bl	8002f78 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000770:	f000 fb7c 	bl	8000e6c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000774:	f003 f8f0 	bl	8003958 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000778:	bf00      	nop
 800077a:	3758      	adds	r7, #88	; 0x58
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000

08000784 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_DFSDM1_Init+0x68>)
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <MX_DFSDM1_Init+0x6c>)
 800078c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_DFSDM1_Init+0x68>)
 8000790:	2201      	movs	r2, #1
 8000792:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_DFSDM1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_DFSDM1_Init+0x68>)
 800079c:	2202      	movs	r2, #2
 800079e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007bc:	2204      	movs	r2, #4
 80007be:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_DFSDM1_Init+0x68>)
 80007da:	f001 f953 	bl	8001a84 <HAL_DFSDM_ChannelInit>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007e4:	f000 fb42 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000c4 	.word	0x200000c4
 80007f0:	40016020 	.word	0x40016020

080007f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C2_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C2_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C2_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C2_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C2_Init+0x74>)
 8000830:	f001 fc0e 	bl	8002050 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 fb17 	bl	8000e6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C2_Init+0x74>)
 8000842:	f001 fc94 	bl	800216e <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fb0e 	bl	8000e6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C2_Init+0x74>)
 8000854:	f001 fcd6 	bl	8002204 <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fb05 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000588 	.word	0x20000588
 800086c:	40005800 	.word	0x40005800
 8000870:	10909cec 	.word	0x10909cec

08000874 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <MX_QUADSPI_Init+0x48>)
 800087c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000886:	2204      	movs	r2, #4
 8000888:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800088c:	2210      	movs	r2, #16
 800088e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000892:	2217      	movs	r2, #23
 8000894:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 80008a4:	f001 fec6 	bl	8002634 <HAL_QSPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008ae:	f000 fadd 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000708 	.word	0x20000708
 80008bc:	a0001000 	.word	0xa0001000

080008c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_SPI3_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_SPI3_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_SPI3_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI3_Init+0x74>)
 80008da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI3_Init+0x74>)
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SPI3_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI3_Init+0x74>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SPI3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI3_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_SPI3_Init+0x74>)
 8000920:	f003 f9fc 	bl	8003d1c <HAL_SPI_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 fa9f 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200005d4 	.word	0x200005d4
 8000938:	40003c00 	.word	0x40003c00

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM2_Init+0x98>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_TIM2_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM2_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_TIM2_Init+0x98>)
 8000970:	f04f 32ff 	mov.w	r2, #4294967295
 8000974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_TIM2_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM2_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_TIM2_Init+0x98>)
 8000984:	f003 fa6d 	bl	8003e62 <HAL_TIM_Base_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 fa6d 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_TIM2_Init+0x98>)
 80009a0:	f003 fbd5 	bl	800414e <HAL_TIM_ConfigClockSource>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009aa:	f000 fa5f 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_TIM2_Init+0x98>)
 80009bc:	f003 fdf6 	bl	80045ac <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009c6:	f000 fa51 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200006bc 	.word	0x200006bc

080009d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART1_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x58>)
 8000a1c:	f003 fe6c 	bl	80046f8 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 fa21 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000638 	.word	0x20000638
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_USART3_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART3_UART_Init+0x58>)
 8000a7c:	f003 fe3c 	bl	80046f8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 f9f1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000fc 	.word	0x200000fc
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	f001 fbde 	bl	800229c <HAL_PCD_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 f9c1 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000180 	.word	0x20000180

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	4bbd      	ldr	r3, [pc, #756]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4abc      	ldr	r2, [pc, #752]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4bba      	ldr	r3, [pc, #744]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4bb7      	ldr	r3, [pc, #732]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4ab6      	ldr	r2, [pc, #728]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4bb4      	ldr	r3, [pc, #720]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4bb1      	ldr	r3, [pc, #708]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4ab0      	ldr	r2, [pc, #704]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4bae      	ldr	r3, [pc, #696]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4bab      	ldr	r3, [pc, #684]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4aaa      	ldr	r2, [pc, #680]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4ba8      	ldr	r3, [pc, #672]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4ba5      	ldr	r3, [pc, #660]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4aa4      	ldr	r2, [pc, #656]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4ba2      	ldr	r3, [pc, #648]	; (8000e00 <MX_GPIO_Init+0x30c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b88:	489e      	ldr	r0, [pc, #632]	; (8000e04 <MX_GPIO_Init+0x310>)
 8000b8a:	f001 fa31 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f248 1124 	movw	r1, #33060	; 0x8124
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f001 fa2a 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin|SPSGRF_915_SDN_Pin
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ba2:	4899      	ldr	r0, [pc, #612]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000ba4:	f001 fa24 	bl	8001ff0 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bae:	4897      	ldr	r0, [pc, #604]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000bb0:	f001 fa1e 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4894      	ldr	r0, [pc, #592]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000bbc:	f001 fa18 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED6_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bc6:	4892      	ldr	r0, [pc, #584]	; (8000e10 <MX_GPIO_Init+0x31c>)
 8000bc8:	f001 fa12 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
 8000bd0:	488d      	ldr	r0, [pc, #564]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000bd2:	f001 fa0d 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	488a      	ldr	r0, [pc, #552]	; (8000e04 <MX_GPIO_Init+0x310>)
 8000bdc:	f001 fa08 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000be0:	f240 1315 	movw	r3, #277	; 0x115
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4882      	ldr	r0, [pc, #520]	; (8000e04 <MX_GPIO_Init+0x310>)
 8000bfa:	f001 f84f 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bfe:	236a      	movs	r3, #106	; 0x6a
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	487c      	ldr	r0, [pc, #496]	; (8000e04 <MX_GPIO_Init+0x310>)
 8000c14:	f001 f842 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : sw1_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = sw1_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c18:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4878      	ldr	r0, [pc, #480]	; (8000e10 <MX_GPIO_Init+0x31c>)
 8000c30:	f001 f834 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c34:	233f      	movs	r3, #63	; 0x3f
 8000c36:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c38:	230b      	movs	r3, #11
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4872      	ldr	r0, [pc, #456]	; (8000e10 <MX_GPIO_Init+0x31c>)
 8000c48:	f001 f828 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6a:	f001 f817 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c6e:	f248 1324 	movw	r3, #33060	; 0x8124
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 f807 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c92:	230b      	movs	r3, #11
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 fffa 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D11_Pin;
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D11_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 ffe9 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	484a      	ldr	r0, [pc, #296]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000ce0:	f000 ffdc 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4844      	ldr	r0, [pc, #272]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000cf8:	f000 ffd0 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : sw2_Pin */
  GPIO_InitStruct.Pin = sw2_Pin;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sw2_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	483e      	ldr	r0, [pc, #248]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000d10:	f000 ffc4 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin|SPSGRF_915_SDN_Pin
 8000d14:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000d18:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4836      	ldr	r0, [pc, #216]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000d2e:	f000 ffb5 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d32:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d36:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4830      	ldr	r0, [pc, #192]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000d4a:	f000 ffa7 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d4e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4829      	ldr	r0, [pc, #164]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000d68:	f000 ff98 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d6c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4822      	ldr	r0, [pc, #136]	; (8000e10 <MX_GPIO_Init+0x31c>)
 8000d86:	f000 ff89 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4819      	ldr	r0, [pc, #100]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000da6:	f000 ff79 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000daa:	2378      	movs	r3, #120	; 0x78
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <MX_GPIO_Init+0x318>)
 8000dc6:	f000 ff69 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <MX_GPIO_Init+0x314>)
 8000de8:	f000 ff58 	bl	8001c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2017      	movs	r0, #23
 8000df2:	f000 fe10 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000df6:	2017      	movs	r0, #23
 8000df8:	f000 fe29 	bl	8001a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	e009      	b.n	8000e14 <MX_GPIO_Init+0x320>
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48001000 	.word	0x48001000
 8000e08:	48000400 	.word	0x48000400
 8000e0c:	48000c00 	.word	0x48000c00
 8000e10:	48000800 	.word	0x48000800
 8000e14:	2100      	movs	r1, #0
 8000e16:	2028      	movs	r0, #40	; 0x28
 8000e18:	f000 fdfd 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e1c:	2028      	movs	r0, #40	; 0x28
 8000e1e:	f000 fe16 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop

08000e2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//int c=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == sw1_Pin)
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		//HAL_GPIO_TogglePin(LED14_GPIO_Port, LED14_Pin);
		//printf("Button pressed event!!\n");
		c++;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x38>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x38>)
 8000e48:	701a      	strb	r2, [r3, #0]
		printf("count : %d",c);
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x38>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e52:	f004 fbb9 	bl	80055c8 <iprintf>
	}
	else {
	__NOP();
	}
}
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_EXTI_Callback+0x2e>
	__NOP();
 8000e58:	bf00      	nop
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	080065a8 	.word	0x080065a8

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0ac      	sub	sp, #176	; 0xb0
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2288      	movs	r2, #136	; 0x88
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fb69 	bl	80055b8 <memset>
  if(DFSDM1_Init == 0)
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d142      	bne.n	8000f74 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fa40 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f0a:	f7ff ffaf 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f18:	6613      	str	r3, [r2, #96]	; 0x60
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f3e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f66:	f000 fe99 	bl	8001c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a02      	ldr	r2, [pc, #8]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f72:	6013      	str	r3, [r2, #0]
  }

}
 8000f74:	bf00      	nop
 8000f76:	37b0      	adds	r7, #176	; 0xb0
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000090 	.word	0x20000090
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48001000 	.word	0x48001000

08000f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	; 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2288      	movs	r2, #136	; 0x88
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fb05 	bl	80055b8 <memset>
  if(hi2c->Instance==I2C2)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_I2C_MspInit+0xb0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d13b      	bne.n	8001030 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 f9dd 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fd0:	f7ff ff4c 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001010:	4619      	mov	r1, r3
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_I2C_MspInit+0xb8>)
 8001014:	f000 fe42 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_I2C_MspInit+0xb4>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_I2C_MspInit+0xb4>)
 800101e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_I2C_MspInit+0xb4>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	37b0      	adds	r7, #176	; 0xb0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40005800 	.word	0x40005800
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400

08001044 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_QSPI_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 8001068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106a:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6513      	str	r3, [r2, #80]	; 0x50
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 8001074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a10      	ldr	r2, [pc, #64]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_QSPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001096:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800109a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010a8:	230a      	movs	r3, #10
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_QSPI_MspInit+0x84>)
 80010b4:	f000 fdf2 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	a0001000 	.word	0xa0001000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48001000 	.word	0x48001000

080010cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_SPI_MspInit+0x7c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d128      	bne.n	8001140 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_SPI_MspInit+0x80>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_SPI_MspInit+0x80>)
 80010f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_SPI_MspInit+0x80>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_SPI_MspInit+0x80>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_SPI_MspInit+0x80>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_SPI_MspInit+0x80>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800111e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001130:	2306      	movs	r3, #6
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_SPI_MspInit+0x84>)
 800113c:	f000 fdae 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40003c00 	.word	0x40003c00
 800114c:	40021000 	.word	0x40021000
 8001150:	48000800 	.word	0x48000800

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d130      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_TIM_Base_MspInit+0x8c>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011a6:	2308      	movs	r3, #8
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f000 fd6a 	bl	8001c9c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	201c      	movs	r0, #28
 80011ce:	f000 fc22 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011d2:	201c      	movs	r0, #28
 80011d4:	f000 fc3b 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	; 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0ae      	sub	sp, #184	; 0xb8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2288      	movs	r2, #136	; 0x88
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f004 f9d7 	bl	80055b8 <memset>
  if(huart->Instance==USART1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a42      	ldr	r2, [pc, #264]	; (8001318 <HAL_UART_MspInit+0x134>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d13b      	bne.n	800128c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001214:	2301      	movs	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001218:	2300      	movs	r3, #0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4618      	mov	r0, r3
 8001222:	f002 f8af 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800122c:	f7ff fe1e 	bl	8000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <HAL_UART_MspInit+0x138>)
 8001232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001234:	4a39      	ldr	r2, [pc, #228]	; (800131c <HAL_UART_MspInit+0x138>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6613      	str	r3, [r2, #96]	; 0x60
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_UART_MspInit+0x138>)
 800123e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_UART_MspInit+0x138>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	4a33      	ldr	r2, [pc, #204]	; (800131c <HAL_UART_MspInit+0x138>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_UART_MspInit+0x138>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001260:	23c0      	movs	r3, #192	; 0xc0
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001282:	4619      	mov	r1, r3
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <HAL_UART_MspInit+0x13c>)
 8001286:	f000 fd09 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128a:	e040      	b.n	800130e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <HAL_UART_MspInit+0x140>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d13b      	bne.n	800130e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001296:	2304      	movs	r3, #4
 8001298:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800129a:	2300      	movs	r3, #0
 800129c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 f86e 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012ae:	f7ff fddd 	bl	8000e6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_UART_MspInit+0x138>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_UART_MspInit+0x138>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_UART_MspInit+0x138>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_UART_MspInit+0x138>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_UART_MspInit+0x138>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_UART_MspInit+0x138>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012fc:	2307      	movs	r3, #7
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <HAL_UART_MspInit+0x144>)
 800130a:	f000 fcc7 	bl	8001c9c <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	37b8      	adds	r7, #184	; 0xb8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40013800 	.word	0x40013800
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400
 8001324:	40004800 	.word	0x40004800
 8001328:	48000c00 	.word	0x48000c00

0800132c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ac      	sub	sp, #176	; 0xb0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2288      	movs	r2, #136	; 0x88
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f004 f933 	bl	80055b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135a:	d17c      	bne.n	8001456 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001372:	2318      	movs	r3, #24
 8001374:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fff9 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001398:	f7ff fd68 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_PCD_MspInit+0x134>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_PCD_MspInit+0x134>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f000 fc63 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013f0:	230a      	movs	r3, #10
 80013f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f000 fc4c 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_PCD_MspInit+0x134>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800140a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_PCD_MspInit+0x134>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d114      	bne.n	8001452 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	; 0x58
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_PCD_MspInit+0x134>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001440:	f001 f8e8 	bl	8002614 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_PCD_MspInit+0x134>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_PCD_MspInit+0x134>)
 800144a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001450:	e001      	b.n	8001456 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001452:	f001 f8df 	bl	8002614 <HAL_PWREx_EnableVddUSB>
}
 8001456:	bf00      	nop
 8001458:	37b0      	adds	r7, #176	; 0xb0
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 f992 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014bc:	2020      	movs	r0, #32
 80014be:	f000 fdaf 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80014c2:	2040      	movs	r0, #64	; 0x40
 80014c4:	f000 fdac 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80014c8:	2080      	movs	r0, #128	; 0x80
 80014ca:	f000 fda9 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014d2:	f000 fda5 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM2_IRQHandler+0x10>)
 80014e2:	f002 fd15 	bl	8003f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200006bc 	.word	0x200006bc

080014f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014f8:	f000 fd92 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80014fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001500:	f000 fd8e 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001504:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001508:	f000 fd8a 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800150c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001510:	f000 fd86 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001514:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001518:	f000 fd82 	bl	8002020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <ITM_SendChar+0x48>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <ITM_SendChar+0x48>)
 8001530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001534:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <ITM_SendChar+0x4c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0c      	ldr	r2, [pc, #48]	; (800156c <ITM_SendChar+0x4c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001542:	bf00      	nop
 8001544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f8      	beq.n	8001544 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001552:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	6013      	str	r3, [r2, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000edfc 	.word	0xe000edfc
 800156c:	e0000e00 	.word	0xe0000e00

08001570 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
	}

return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e009      	b.n	80015d0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ffab 	bl	8001520 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf1      	blt.n	80015bc <_write+0x12>
	}
	return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160a:	605a      	str	r2, [r3, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_isatty>:

int _isatty(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	return 1;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f003 ff72 	bl	8005564 <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20018000 	.word	0x20018000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	20000094 	.word	0x20000094
 80016b4:	20000760 	.word	0x20000760

080016b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e0:	f7ff ffea 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	; (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 ff31 	bl	8005570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170e:	f7fe ff2b 	bl	8000568 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001720:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8001724:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001728:	20000760 	.word	0x20000760

0800172c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>

0800172e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f961 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f80e 	bl	8001760 <HAL_InitTick>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	e001      	b.n	8001754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001750:	f7ff fb92 	bl	8000e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_InitTick+0x70>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_InitTick+0x6c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f96d 	bl	8001a6a <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d809      	bhi.n	80017b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f937 	bl	8001a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_InitTick+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e004      	b.n	80017c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e001      	b.n	80017c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	2000074c 	.word	0x2000074c

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000074c 	.word	0x2000074c

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0ac      	b.n	8001bf0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f8b2 	bl	8001c04 <DFSDM_GetChannelFromInstance>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a55      	ldr	r2, [pc, #340]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x174>)
 8001aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e09f      	b.n	8001bf0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fa05 	bl	8000ec0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_DFSDM_ChannelInit+0x178>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <HAL_DFSDM_ChannelInit+0x178>)
 8001abe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_DFSDM_ChannelInit+0x178>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d125      	bne.n	8001b14 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ad2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4948      	ldr	r1, [pc, #288]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a46      	ldr	r2, [pc, #280]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001aec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	791b      	ldrb	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001af6:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	493f      	ldr	r1, [pc, #252]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b08:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b12:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b22:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b32:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b38:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 020f 	bic.w	r2, r2, #15
 8001b50:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6819      	ldr	r1, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b78:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f002 0207 	and.w	r2, r2, #7
 8001ba4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f810 	bl	8001c04 <DFSDM_GetChannelFromInstance>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <HAL_DFSDM_ChannelInit+0x174>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	2000009c 	.word	0x2000009c
 8001bfc:	20000098 	.word	0x20000098
 8001c00:	40016000 	.word	0x40016000

08001c04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <DFSDM_GetChannelFromInstance+0x7c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d102      	bne.n	8001c1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e02b      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <DFSDM_GetChannelFromInstance+0x80>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d102      	bne.n	8001c28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e024      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <DFSDM_GetChannelFromInstance+0x84>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c30:	2302      	movs	r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e01d      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <DFSDM_GetChannelFromInstance+0x88>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d102      	bne.n	8001c44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e016      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <DFSDM_GetChannelFromInstance+0x8c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	e00f      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <DFSDM_GetChannelFromInstance+0x90>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d102      	bne.n	8001c60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	e008      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <DFSDM_GetChannelFromInstance+0x94>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d102      	bne.n	8001c6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c68:	2307      	movs	r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e001      	b.n	8001c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40016000 	.word	0x40016000
 8001c84:	40016020 	.word	0x40016020
 8001c88:	40016040 	.word	0x40016040
 8001c8c:	40016080 	.word	0x40016080
 8001c90:	400160a0 	.word	0x400160a0
 8001c94:	400160c0 	.word	0x400160c0
 8001c98:	400160e0 	.word	0x400160e0

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001caa:	e17f      	b.n	8001fac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8171 	beq.w	8001fa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d005      	beq.n	8001cdc <HAL_GPIO_Init+0x40>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d118      	bne.n	8001d7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d50:	2201      	movs	r2, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f003 0201 	and.w	r2, r3, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d017      	beq.n	8001db8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d123      	bne.n	8001e0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	6939      	ldr	r1, [r7, #16]
 8001e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80ac 	beq.w	8001fa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_GPIO_Init+0x330>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	4a5e      	ldr	r2, [pc, #376]	; (8001fcc <HAL_GPIO_Init+0x330>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6613      	str	r3, [r2, #96]	; 0x60
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_GPIO_Init+0x330>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e66:	4a5a      	ldr	r2, [pc, #360]	; (8001fd0 <HAL_GPIO_Init+0x334>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e90:	d025      	beq.n	8001ede <HAL_GPIO_Init+0x242>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x338>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x23e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x33c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x23a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x340>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x236>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x344>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x232>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x348>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x22e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x34c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x22a>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e00c      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	e00a      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x244>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_GPIO_Init+0x334>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f22:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f28:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f47f ae78 	bne.w	8001cac <HAL_GPIO_Init+0x10>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48001000 	.word	0x48001000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	48001800 	.word	0x48001800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d006      	beq.n	8002044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fef4 	bl	8000e2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e081      	b.n	8002166 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe ff86 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2224      	movs	r2, #36	; 0x24
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	e006      	b.n	80020d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d104      	bne.n	80020ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800210c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69d9      	ldr	r1, [r3, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b20      	cmp	r3, #32
 8002182:	d138      	bne.n	80021f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800218e:	2302      	movs	r3, #2
 8002190:	e032      	b.n	80021f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2224      	movs	r2, #36	; 0x24
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	d139      	bne.n	800228e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002224:	2302      	movs	r3, #2
 8002226:	e033      	b.n	8002290 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002256:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800229c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229e:	b08f      	sub	sp, #60	; 0x3c
 80022a0:	af0a      	add	r7, sp, #40	; 0x28
 80022a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e116      	b.n	80024dc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff f82f 	bl	800132c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2203      	movs	r2, #3
 80022d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 feb6 	bl	800505e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	687e      	ldr	r6, [r7, #4]
 80022fa:	466d      	mov	r5, sp
 80022fc:	f106 0410 	add.w	r4, r6, #16
 8002300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002308:	e894 0003 	ldmia.w	r4, {r0, r1}
 800230c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002310:	1d33      	adds	r3, r6, #4
 8002312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f002 fe76 	bl	8005006 <USB_CoreInit>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d7      	b.n	80024dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fea4 	bl	8005080 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e04a      	b.n	80023d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	333d      	adds	r3, #61	; 0x3d
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	333c      	adds	r3, #60	; 0x3c
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	b298      	uxth	r0, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3342      	adds	r3, #66	; 0x42
 800237a:	4602      	mov	r2, r0
 800237c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	333f      	adds	r3, #63	; 0x3f
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	3344      	adds	r3, #68	; 0x44
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3348      	adds	r3, #72	; 0x48
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	3350      	adds	r3, #80	; 0x50
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	3301      	adds	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3af      	bcc.n	800233e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e044      	b.n	800246e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a9b      	subs	r3, r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	3301      	adds	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3b5      	bcc.n	80023e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	687e      	ldr	r6, [r7, #4]
 8002480:	466d      	mov	r5, sp
 8002482:	f106 0410 	add.w	r4, r6, #16
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002492:	e885 0003 	stmia.w	r5, {r0, r1}
 8002496:	1d33      	adds	r3, r6, #4
 8002498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f002 fe3c 	bl	8005118 <USB_DevInit>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e014      	b.n	80024dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f80a 	bl	80024e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 ffe4 	bl	80054a2 <USB_DevDisconnect>

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002516:	f043 0303 	orr.w	r3, r3, #3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_PWREx_GetVoltageRange+0x18>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d130      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d038      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2232      	movs	r2, #50	; 0x32
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ac:	e002      	b.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d102      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f2      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d4:	d110      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e00f      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d007      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_PWREx_EnableVddUSB+0x1c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_PWREx_EnableVddUSB+0x1c>)
 800261e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002622:	6053      	str	r3, [r2, #4]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff f8e0 	bl	8001800 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e063      	b.n	8002714 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fcef 	bl	8001044 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002666:	f241 3188 	movw	r1, #5000	; 0x1388
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f858 	bl	8002720 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	3b01      	subs	r3, #1
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f850 	bl	800273c <QSPI_WaitFlagStateUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d131      	bne.n	800270a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026b0:	f023 0310 	bic.w	r3, r3, #16
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6852      	ldr	r2, [r2, #4]
 80026b8:	0611      	lsls	r1, r2, #24
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_QSPI_Init+0xe8>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6912      	ldr	r2, [r2, #16]
 80026d6:	0411      	lsls	r1, r2, #16
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6952      	ldr	r2, [r2, #20]
 80026dc:	4311      	orrs	r1, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6992      	ldr	r2, [r2, #24]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002712:	7afb      	ldrb	r3, [r7, #11]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	ffe0f8fe 	.word	0xffe0f8fe

08002720 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800274c:	e01a      	b.n	8002784 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d016      	beq.n	8002784 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002756:	f7ff f853 	bl	8001800 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	429a      	cmp	r2, r3
 8002764:	d302      	bcc.n	800276c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2204      	movs	r2, #4
 8002770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e00e      	b.n	80027a2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	429a      	cmp	r2, r3
 800279e:	d1d6      	bne.n	800274e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e3d4      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c8:	4b9e      	ldr	r3, [pc, #632]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80e4 	beq.w	80029a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4a>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	f040 808b 	bne.w	8002904 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	f040 8087 	bne.w	8002904 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f6:	4b93      	ldr	r3, [pc, #588]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x62>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e3ac      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_RCC_OscConfig+0x7c>
 800281e:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002826:	e005      	b.n	8002834 <HAL_RCC_OscConfig+0x88>
 8002828:	4b86      	ldr	r3, [pc, #536]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	4293      	cmp	r3, r2
 8002836:	d223      	bcs.n	8002880 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fd41 	bl	80032c4 <RCC_SetFlashLatencyFromMSIRange>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e38d      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a7c      	ldr	r2, [pc, #496]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4977      	ldr	r1, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	4972      	ldr	r1, [pc, #456]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
 800287e:	e025      	b.n	80028cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002880:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002886:	f043 0308 	orr.w	r3, r3, #8
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	496a      	ldr	r1, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800289e:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	4965      	ldr	r1, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd01 	bl	80032c4 <RCC_SetFlashLatencyFromMSIRange>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e34d      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028cc:	f000 fc36 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	495a      	ldr	r1, [pc, #360]	; (8002a48 <HAL_RCC_OscConfig+0x29c>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	4a58      	ldr	r2, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x2a0>)
 80028ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x2a4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe ff35 	bl	8001760 <HAL_InitTick>
 80028f6:	4603      	mov	r3, r0
 80028f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d052      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	e331      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d032      	beq.n	8002972 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002918:	f7fe ff72 	bl	8001800 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002920:	f7fe ff6e 	bl	8001800 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e31a      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	493b      	ldr	r1, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002958:	4313      	orrs	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800295c:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	4936      	ldr	r1, [pc, #216]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
 8002970:	e01a      	b.n	80029a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297e:	f7fe ff3f 	bl	8001800 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002986:	f7fe ff3b 	bl	8001800 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e2e7      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x1da>
 80029a4:	e000      	b.n	80029a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d074      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x21a>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d10e      	bne.n	80029de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d064      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d160      	bne.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e2c4      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x24a>
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e01d      	b.n	8002a32 <HAL_RCC_OscConfig+0x286>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fe:	d10c      	bne.n	8002a1a <HAL_RCC_OscConfig+0x26e>
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	e00b      	b.n	8002a32 <HAL_RCC_OscConfig+0x286>
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fee1 	bl	8001800 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a40:	e011      	b.n	8002a66 <HAL_RCC_OscConfig+0x2ba>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	080065b4 	.word	0x080065b4
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fed4 	bl	8001800 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e280      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a66:	4baf      	ldr	r3, [pc, #700]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x2a8>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fec4 	bl	8001800 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fec0 	bl	8001800 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e26c      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8e:	4ba5      	ldr	r3, [pc, #660]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2d0>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d060      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_OscConfig+0x310>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d119      	bne.n	8002aea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d116      	bne.n	8002aea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002abc:	4b99      	ldr	r3, [pc, #612]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x328>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e249      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b93      	ldr	r3, [pc, #588]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	4990      	ldr	r1, [pc, #576]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	e040      	b.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d023      	beq.n	8002b3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af2:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a8b      	ldr	r2, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7fe fe7f 	bl	8001800 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b06:	f7fe fe7b 	bl	8001800 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e227      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	497c      	ldr	r1, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e018      	b.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fe5b 	bl	8001800 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fe57 	bl	8001800 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e203      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b60:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	4a67      	ldr	r2, [pc, #412]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f7fe fe36 	bl	8001800 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fe32 	bl	8001800 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1de      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ef      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3ec>
 8002bb8:	e01b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bba:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe fe19 	bl	8001800 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fe15 	bl	8001800 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e1c1      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ef      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80a6 	beq.w	8002d4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_OscConfig+0x57c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d118      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x57c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x57c>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fddc 	bl	8001800 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4c:	f7fe fdd8 	bl	8001800 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e184      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5e:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x57c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d108      	bne.n	8002c84 <HAL_RCC_OscConfig+0x4d8>
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c82:	e024      	b.n	8002cce <HAL_RCC_OscConfig+0x522>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d110      	bne.n	8002cae <HAL_RCC_OscConfig+0x502>
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a20      	ldr	r2, [pc, #128]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cac:	e00f      	b.n	8002cce <HAL_RCC_OscConfig+0x522>
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fd93 	bl	8001800 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fd8f 	bl	8001800 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e139      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ed      	beq.n	8002cde <HAL_RCC_OscConfig+0x532>
 8002d02:	e01a      	b.n	8002d3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fd7c 	bl	8001800 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0a:	e00f      	b.n	8002d2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fd78 	bl	8001800 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d906      	bls.n	8002d2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e122      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d2c:	4b90      	ldr	r3, [pc, #576]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1e8      	bne.n	8002d0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3a:	7ffb      	ldrb	r3, [r7, #31]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d40:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	4a8a      	ldr	r2, [pc, #552]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8108 	beq.w	8002f66 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f040 80d0 	bne.w	8002f00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d60:	4b83      	ldr	r3, [pc, #524]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d130      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d127      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d11f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da0:	2a07      	cmp	r2, #7
 8002da2:	bf14      	ite	ne
 8002da4:	2201      	movne	r2, #1
 8002da6:	2200      	moveq	r2, #0
 8002da8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d113      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d06e      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d069      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ddc:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de8:	4b61      	ldr	r3, [pc, #388]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b7      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df8:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e04:	f7fe fcfc 	bl	8001800 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fcf8 	bl	8001800 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0a4      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1e:	4b54      	ldr	r3, [pc, #336]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b51      	ldr	r3, [pc, #324]	; (8002f74 <HAL_RCC_OscConfig+0x7c8>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e3a:	3a01      	subs	r2, #1
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e44:	0212      	lsls	r2, r2, #8
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e4c:	0852      	lsrs	r2, r2, #1
 8002e4e:	3a01      	subs	r2, #1
 8002e50:	0552      	lsls	r2, r2, #21
 8002e52:	4311      	orrs	r1, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0652      	lsls	r2, r2, #25
 8002e5e:	4311      	orrs	r1, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e64:	0912      	lsrs	r2, r2, #4
 8002e66:	0452      	lsls	r2, r2, #17
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	4941      	ldr	r1, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e70:	4b3f      	ldr	r3, [pc, #252]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3e      	ldr	r2, [pc, #248]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e7c:	4b3c      	ldr	r3, [pc, #240]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4a3b      	ldr	r2, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e88:	f7fe fcba 	bl	8001800 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fcb6 	bl	8001800 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e062      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eae:	e05a      	b.n	8002f66 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e059      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb4:	4b2e      	ldr	r3, [pc, #184]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d152      	bne.n	8002f66 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed8:	f7fe fc92 	bl	8001800 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fc8e 	bl	8001800 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e03a      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x734>
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d02d      	beq.n	8002f62 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f24:	f023 0303 	bic.w	r3, r3, #3
 8002f28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fc61 	bl	8001800 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fc5d 	bl	8001800 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e009      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x796>
 8002f60:	e001      	b.n	8002f66 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	f99d808c 	.word	0xf99d808c

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0c8      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 0207 	bic.w	r2, r3, #7
 8002fa2:	4961      	ldr	r1, [pc, #388]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b0      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d04c      	beq.n	8003062 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d121      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e09e      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e092      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003000:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e086      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e07e      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 0203 	bic.w	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	493f      	ldr	r1, [pc, #252]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003032:	f7fe fbe5 	bl	8001800 <HAL_GetTick>
 8003036:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	e00a      	b.n	8003050 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303a:	f7fe fbe1 	bl	8001800 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e066      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 020c 	and.w	r2, r3, #12
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	429a      	cmp	r2, r3
 8003060:	d1eb      	bne.n	800303a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	492c      	ldr	r1, [pc, #176]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d210      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 0207 	bic.w	r2, r3, #7
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_RCC_ClockConfig+0x1b0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e036      	b.n	800311e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4918      	ldr	r1, [pc, #96]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4910      	ldr	r1, [pc, #64]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ee:	f000 f825 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_RCC_ClockConfig+0x1b4>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490c      	ldr	r1, [pc, #48]	; (8003130 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fb24 	bl	8001760 <HAL_InitTick>
 8003118:	4603      	mov	r3, r0
 800311a:	72fb      	strb	r3, [r7, #11]

  return status;
 800311c:	7afb      	ldrb	r3, [r7, #11]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40022000 	.word	0x40022000
 800312c:	40021000 	.word	0x40021000
 8003130:	080065b4 	.word	0x080065b4
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x34>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d121      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d11e      	bne.n	80031ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003170:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800317c:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e005      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <HAL_RCC_GetSysClockFreq+0x10c>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e004      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCC_GetSysClockFreq+0x114>)
 80031c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d134      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d003      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0xac>
 80031e0:	e005      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	e005      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ea:	617b      	str	r3, [r7, #20]
      break;
 80031ec:	e002      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	617b      	str	r3, [r7, #20]
      break;
 80031f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	3301      	adds	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	fb02 f203 	mul.w	r2, r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_GetSysClockFreq+0x108>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	0e5b      	lsrs	r3, r3, #25
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	3301      	adds	r3, #1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003234:	69bb      	ldr	r3, [r7, #24]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	080065cc 	.word	0x080065cc
 800324c:	00f42400 	.word	0x00f42400
 8003250:	007a1200 	.word	0x007a1200

08003254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCC_GetHCLKFreq+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000000 	.word	0x20000000

0800326c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003270:	f7ff fff0 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	080065c4 	.word	0x080065c4

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800329c:	f7ff ffda 	bl	8003254 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0adb      	lsrs	r3, r3, #11
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	080065c4 	.word	0x080065c4

080032c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032dc:	f7ff f936 	bl	800254c <HAL_PWREx_GetVoltageRange>
 80032e0:	6178      	str	r0, [r7, #20]
 80032e2:	e014      	b.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	; 0x58
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032fc:	f7ff f926 	bl	800254c <HAL_PWREx_GetVoltageRange>
 8003300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	4a1d      	ldr	r2, [pc, #116]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d10b      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d919      	bls.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2ba0      	cmp	r3, #160	; 0xa0
 8003320:	d902      	bls.n	8003328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003322:	2302      	movs	r3, #2
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e013      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003328:	2301      	movs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e010      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b80      	cmp	r3, #128	; 0x80
 8003332:	d902      	bls.n	800333a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003334:	2303      	movs	r3, #3
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	e00a      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d102      	bne.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e004      	b.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b70      	cmp	r3, #112	; 0x70
 800334a:	d101      	bne.n	8003350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800334c:	2301      	movs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 0207 	bic.w	r2, r3, #7
 8003358:	4909      	ldr	r1, [pc, #36]	; (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40022000 	.word	0x40022000

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800338c:	2300      	movs	r3, #0
 800338e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003390:	2300      	movs	r3, #0
 8003392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339c:	2b00      	cmp	r3, #0
 800339e:	d041      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a8:	d02a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ae:	d824      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b4:	d008      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ba:	d81e      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c4:	d010      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c6:	e018      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c8:	4b86      	ldr	r3, [pc, #536]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a85      	ldr	r2, [pc, #532]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d4:	e015      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 facb 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e6:	e00c      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3320      	adds	r3, #32
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fbb6 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f8:	e003      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	74fb      	strb	r3, [r7, #19]
      break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003408:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003416:	4973      	ldr	r1, [pc, #460]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800341e:	e001      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d041      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003438:	d02a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800343a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343e:	d824      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003444:	d008      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800344a:	d81e      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d010      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003456:	e018      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003458:	4b62      	ldr	r3, [pc, #392]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a61      	ldr	r2, [pc, #388]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003462:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fa83 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003476:	e00c      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3320      	adds	r3, #32
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fb6e 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	74fb      	strb	r3, [r7, #19]
      break;
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003498:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a6:	494f      	ldr	r1, [pc, #316]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034ae:	e001      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a0 	beq.w	8003602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6593      	str	r3, [r2, #88]	; 0x58
 80034e8:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003504:	f7fe f97c 	bl	8001800 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800350a:	e009      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7fe f978 	bl	8001800 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	74fb      	strb	r3, [r7, #19]
        break;
 800351e:	e005      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ef      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d15c      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003532:	4b2c      	ldr	r3, [pc, #176]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	d019      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	4a20      	ldr	r2, [pc, #128]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800357c:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe f937 	bl	8001800 <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003594:	e00b      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fe f933 	bl	8001800 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d902      	bls.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	74fb      	strb	r3, [r7, #19]
            break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ec      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10c      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	4904      	ldr	r1, [pc, #16]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035da:	e009      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
 80035e0:	e006      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f0:	7c7b      	ldrb	r3, [r7, #17]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b9e      	ldr	r3, [pc, #632]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	4a9d      	ldr	r2, [pc, #628]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360e:	4b98      	ldr	r3, [pc, #608]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f023 0203 	bic.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	4994      	ldr	r1, [pc, #592]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003630:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f023 020c 	bic.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	498c      	ldr	r1, [pc, #560]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003652:	4b87      	ldr	r3, [pc, #540]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4983      	ldr	r1, [pc, #524]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	497b      	ldr	r1, [pc, #492]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	4972      	ldr	r1, [pc, #456]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b8:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	496a      	ldr	r1, [pc, #424]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	4961      	ldr	r1, [pc, #388]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fc:	4b5c      	ldr	r3, [pc, #368]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	4959      	ldr	r1, [pc, #356]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	4950      	ldr	r1, [pc, #320]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	4948      	ldr	r1, [pc, #288]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	493f      	ldr	r1, [pc, #252]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d028      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003792:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a2:	d106      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4a31      	ldr	r2, [pc, #196]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ae:	60d3      	str	r3, [r2, #12]
 80037b0:	e011      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f8d8 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d028      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	491f      	ldr	r1, [pc, #124]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003800:	d106      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380c:	60d3      	str	r3, [r2, #12]
 800380e:	e011      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003818:	d10c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f8a9 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	4908      	ldr	r1, [pc, #32]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385e:	d109      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a02      	ldr	r2, [pc, #8]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386a:	60d3      	str	r3, [r2, #12]
 800386c:	e014      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f877 	bl	8003978 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b2:	4928      	ldr	r1, [pc, #160]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f854 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d014      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038da:	7cfb      	ldrb	r3, [r7, #19]
 80038dc:	74bb      	strb	r3, [r7, #18]
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3320      	adds	r3, #32
 80038ee:	2102      	movs	r1, #2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f935 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003910:	4b10      	ldr	r3, [pc, #64]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391e:	490d      	ldr	r1, [pc, #52]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800394a:	7cbb      	ldrb	r3, [r7, #18]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003992:	4b72      	ldr	r3, [pc, #456]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039aa:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b54      	ldr	r3, [pc, #336]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4944      	ldr	r1, [pc, #272]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d17d      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fece 	bl	8001800 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd feca 	bl	8001800 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d160      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	492a      	ldr	r1, [pc, #168]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e027      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d112      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6912      	ldr	r2, [r2, #16]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0552      	lsls	r2, r2, #21
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6952      	ldr	r2, [r2, #20]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fe74 	bl	8001800 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b1c:	f7fd fe70 	bl	8001800 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d047      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e044      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d018      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x86>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d825      	bhi.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x62>
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d009      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x74>
 8003bc0:	e020      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc2:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e01a      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be4:	e013      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf2:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c02:	e006      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e004      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	4939      	ldr	r1, [pc, #228]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d167      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a35      	ldr	r2, [pc, #212]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fd fdda 	bl	8001800 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4e:	e009      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c50:	f7fd fdd6 	bl	8001800 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d902      	bls.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	73fb      	strb	r3, [r7, #15]
        break;
 8003c62:	e005      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ef      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14a      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7c:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	0211      	lsls	r1, r2, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0912      	lsrs	r2, r2, #4
 8003c94:	0452      	lsls	r2, r2, #17
 8003c96:	430a      	orrs	r2, r1
 8003c98:	491f      	ldr	r1, [pc, #124]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	614b      	str	r3, [r1, #20]
 8003c9e:	e011      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4916      	ldr	r1, [pc, #88]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fd96 	bl	8001800 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd8:	f7fd fd92 	bl	8001800 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e095      	b.n	8003e5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3e:	d009      	beq.n	8003d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
 8003d46:	e005      	b.n	8003d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f9ac 	bl	80010cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d94:	d902      	bls.n	8003d9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e002      	b.n	8003da2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003daa:	d007      	beq.n	8003dbc <HAL_SPI_Init+0xa0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfe:	ea42 0103 	orr.w	r1, r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	f003 0204 	and.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e38:	ea42 0103 	orr.w	r1, r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e049      	b.n	8003f08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fd f963 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f000 fa4f 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d122      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d11b      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0202 	mvn.w	r2, #2
 8003f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9d8 	bl	8004308 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9ca 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9db 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0204 	mvn.w	r2, #4
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9ae 	bl	8004308 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9a0 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9b1 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0208 	mvn.w	r2, #8
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f984 	bl	8004308 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f976 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f987 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b10      	cmp	r3, #16
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b10      	cmp	r3, #16
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0210 	mvn.w	r2, #16
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2208      	movs	r2, #8
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f95a 	bl	8004308 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f94c 	bl	80042f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f95d 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0201 	mvn.w	r2, #1
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f926 	bl	80042e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b80      	cmp	r3, #128	; 0x80
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b80      	cmp	r3, #128	; 0x80
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fb08 	bl	80046d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fafb 	bl	80046e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d10e      	bne.n	800411a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d107      	bne.n	800411a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f90b 	bl	8004330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d10e      	bne.n	8004146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b20      	cmp	r3, #32
 8004134:	d107      	bne.n	8004146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f06f 0220 	mvn.w	r2, #32
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fabb 	bl	80046bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_TIM_ConfigClockSource+0x1c>
 8004166:	2302      	movs	r3, #2
 8004168:	e0b6      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x18a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004188:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800418c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004194:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d03e      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0xd8>
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	f200 8087 	bhi.w	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	f000 8086 	beq.w	80042c4 <HAL_TIM_ConfigClockSource+0x176>
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d87f      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041be:	2b70      	cmp	r3, #112	; 0x70
 80041c0:	d01a      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0xaa>
 80041c2:	2b70      	cmp	r3, #112	; 0x70
 80041c4:	d87b      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041c6:	2b60      	cmp	r3, #96	; 0x60
 80041c8:	d050      	beq.n	800426c <HAL_TIM_ConfigClockSource+0x11e>
 80041ca:	2b60      	cmp	r3, #96	; 0x60
 80041cc:	d877      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041ce:	2b50      	cmp	r3, #80	; 0x50
 80041d0:	d03c      	beq.n	800424c <HAL_TIM_ConfigClockSource+0xfe>
 80041d2:	2b50      	cmp	r3, #80	; 0x50
 80041d4:	d873      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d058      	beq.n	800428c <HAL_TIM_ConfigClockSource+0x13e>
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d86f      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041de:	2b30      	cmp	r3, #48	; 0x30
 80041e0:	d064      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x15e>
 80041e2:	2b30      	cmp	r3, #48	; 0x30
 80041e4:	d86b      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d060      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x15e>
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d867      	bhi.n	80042be <HAL_TIM_ConfigClockSource+0x170>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d05c      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x15e>
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d05a      	beq.n	80042ac <HAL_TIM_ConfigClockSource+0x15e>
 80041f6:	e062      	b.n	80042be <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6899      	ldr	r1, [r3, #8]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f000 f9b0 	bl	800456c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800421a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
      break;
 8004224:	e04f      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6899      	ldr	r1, [r3, #8]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f000 f999 	bl	800456c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004248:	609a      	str	r2, [r3, #8]
      break;
 800424a:	e03c      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	461a      	mov	r2, r3
 800425a:	f000 f90d 	bl	8004478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2150      	movs	r1, #80	; 0x50
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f966 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 800426a:	e02c      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	461a      	mov	r2, r3
 800427a:	f000 f92c 	bl	80044d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2160      	movs	r1, #96	; 0x60
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f956 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 800428a:	e01c      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	461a      	mov	r2, r3
 800429a:	f000 f8ed 	bl	8004478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2140      	movs	r1, #64	; 0x40
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f946 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 80042aa:	e00c      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 f93d 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e003      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      break;
 80042c2:	e000      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a40      	ldr	r2, [pc, #256]	; (8004458 <TIM_Base_SetConfig+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d00f      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <TIM_Base_SetConfig+0x118>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <TIM_Base_SetConfig+0x11c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3b      	ldr	r2, [pc, #236]	; (8004464 <TIM_Base_SetConfig+0x120>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3a      	ldr	r2, [pc, #232]	; (8004468 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <TIM_Base_SetConfig+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01f      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2c      	ldr	r2, [pc, #176]	; (800445c <TIM_Base_SetConfig+0x118>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <TIM_Base_SetConfig+0x11c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <TIM_Base_SetConfig+0x120>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <TIM_Base_SetConfig+0x124>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a28      	ldr	r2, [pc, #160]	; (800446c <TIM_Base_SetConfig+0x128>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a27      	ldr	r2, [pc, #156]	; (8004470 <TIM_Base_SetConfig+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x9a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <TIM_Base_SetConfig+0x130>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <TIM_Base_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d00f      	beq.n	800443c <TIM_Base_SetConfig+0xf8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a12      	ldr	r2, [pc, #72]	; (8004468 <TIM_Base_SetConfig+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00b      	beq.n	800443c <TIM_Base_SetConfig+0xf8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a11      	ldr	r2, [pc, #68]	; (800446c <TIM_Base_SetConfig+0x128>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d007      	beq.n	800443c <TIM_Base_SetConfig+0xf8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <TIM_Base_SetConfig+0x12c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0xf8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <TIM_Base_SetConfig+0x130>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800

08004478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f023 030a 	bic.w	r3, r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f023 0210 	bic.w	r2, r3, #16
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	f043 0307 	orr.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	431a      	orrs	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e068      	b.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2d      	ldr	r2, [pc, #180]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1e      	ldr	r2, [pc, #120]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01d      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d018      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1a      	ldr	r2, [pc, #104]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00e      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a18      	ldr	r2, [pc, #96]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d009      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40000c00 	.word	0x40000c00
 80046b8:	40014000 	.word	0x40014000

080046bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e040      	b.n	800478c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fd62 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	; 0x24
 8004724:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f82c 	bl	8004794 <UART_SetConfig>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e022      	b.n	800478c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 faaa 	bl	8004ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004772:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fb31 	bl	8004dec <UART_CheckIdleState>
 800478a:	4603      	mov	r3, r0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004794:	b5b0      	push	{r4, r5, r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4bad      	ldr	r3, [pc, #692]	; (8004a74 <UART_SetConfig+0x2e0>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4aa2      	ldr	r2, [pc, #648]	; (8004a78 <UART_SetConfig+0x2e4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a99      	ldr	r2, [pc, #612]	; (8004a7c <UART_SetConfig+0x2e8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d121      	bne.n	800485e <UART_SetConfig+0xca>
 800481a:	4b99      	ldr	r3, [pc, #612]	; (8004a80 <UART_SetConfig+0x2ec>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d817      	bhi.n	8004858 <UART_SetConfig+0xc4>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0x9c>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004841 	.word	0x08004841
 8004834:	0800484d 	.word	0x0800484d
 8004838:	08004847 	.word	0x08004847
 800483c:	08004853 	.word	0x08004853
 8004840:	2301      	movs	r3, #1
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e0e7      	b.n	8004a16 <UART_SetConfig+0x282>
 8004846:	2302      	movs	r3, #2
 8004848:	76fb      	strb	r3, [r7, #27]
 800484a:	e0e4      	b.n	8004a16 <UART_SetConfig+0x282>
 800484c:	2304      	movs	r3, #4
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e0e1      	b.n	8004a16 <UART_SetConfig+0x282>
 8004852:	2308      	movs	r3, #8
 8004854:	76fb      	strb	r3, [r7, #27]
 8004856:	e0de      	b.n	8004a16 <UART_SetConfig+0x282>
 8004858:	2310      	movs	r3, #16
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e0db      	b.n	8004a16 <UART_SetConfig+0x282>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a88      	ldr	r2, [pc, #544]	; (8004a84 <UART_SetConfig+0x2f0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d132      	bne.n	80048ce <UART_SetConfig+0x13a>
 8004868:	4b85      	ldr	r3, [pc, #532]	; (8004a80 <UART_SetConfig+0x2ec>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d828      	bhi.n	80048c8 <UART_SetConfig+0x134>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0xe8>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080048c9 	.word	0x080048c9
 8004884:	080048c9 	.word	0x080048c9
 8004888:	080048c9 	.word	0x080048c9
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048c9 	.word	0x080048c9
 8004898:	080048c9 	.word	0x080048c9
 800489c:	080048b7 	.word	0x080048b7
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048c9 	.word	0x080048c9
 80048ac:	080048c3 	.word	0x080048c3
 80048b0:	2300      	movs	r3, #0
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e0af      	b.n	8004a16 <UART_SetConfig+0x282>
 80048b6:	2302      	movs	r3, #2
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e0ac      	b.n	8004a16 <UART_SetConfig+0x282>
 80048bc:	2304      	movs	r3, #4
 80048be:	76fb      	strb	r3, [r7, #27]
 80048c0:	e0a9      	b.n	8004a16 <UART_SetConfig+0x282>
 80048c2:	2308      	movs	r3, #8
 80048c4:	76fb      	strb	r3, [r7, #27]
 80048c6:	e0a6      	b.n	8004a16 <UART_SetConfig+0x282>
 80048c8:	2310      	movs	r3, #16
 80048ca:	76fb      	strb	r3, [r7, #27]
 80048cc:	e0a3      	b.n	8004a16 <UART_SetConfig+0x282>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6d      	ldr	r2, [pc, #436]	; (8004a88 <UART_SetConfig+0x2f4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d120      	bne.n	800491a <UART_SetConfig+0x186>
 80048d8:	4b69      	ldr	r3, [pc, #420]	; (8004a80 <UART_SetConfig+0x2ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d013      	beq.n	800490e <UART_SetConfig+0x17a>
 80048e6:	2b30      	cmp	r3, #48	; 0x30
 80048e8:	d814      	bhi.n	8004914 <UART_SetConfig+0x180>
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d009      	beq.n	8004902 <UART_SetConfig+0x16e>
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d810      	bhi.n	8004914 <UART_SetConfig+0x180>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <UART_SetConfig+0x168>
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d006      	beq.n	8004908 <UART_SetConfig+0x174>
 80048fa:	e00b      	b.n	8004914 <UART_SetConfig+0x180>
 80048fc:	2300      	movs	r3, #0
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	e089      	b.n	8004a16 <UART_SetConfig+0x282>
 8004902:	2302      	movs	r3, #2
 8004904:	76fb      	strb	r3, [r7, #27]
 8004906:	e086      	b.n	8004a16 <UART_SetConfig+0x282>
 8004908:	2304      	movs	r3, #4
 800490a:	76fb      	strb	r3, [r7, #27]
 800490c:	e083      	b.n	8004a16 <UART_SetConfig+0x282>
 800490e:	2308      	movs	r3, #8
 8004910:	76fb      	strb	r3, [r7, #27]
 8004912:	e080      	b.n	8004a16 <UART_SetConfig+0x282>
 8004914:	2310      	movs	r3, #16
 8004916:	76fb      	strb	r3, [r7, #27]
 8004918:	e07d      	b.n	8004a16 <UART_SetConfig+0x282>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5b      	ldr	r2, [pc, #364]	; (8004a8c <UART_SetConfig+0x2f8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d120      	bne.n	8004966 <UART_SetConfig+0x1d2>
 8004924:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <UART_SetConfig+0x2ec>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d013      	beq.n	800495a <UART_SetConfig+0x1c6>
 8004932:	2bc0      	cmp	r3, #192	; 0xc0
 8004934:	d814      	bhi.n	8004960 <UART_SetConfig+0x1cc>
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d009      	beq.n	800494e <UART_SetConfig+0x1ba>
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d810      	bhi.n	8004960 <UART_SetConfig+0x1cc>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <UART_SetConfig+0x1b4>
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d006      	beq.n	8004954 <UART_SetConfig+0x1c0>
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x1cc>
 8004948:	2300      	movs	r3, #0
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e063      	b.n	8004a16 <UART_SetConfig+0x282>
 800494e:	2302      	movs	r3, #2
 8004950:	76fb      	strb	r3, [r7, #27]
 8004952:	e060      	b.n	8004a16 <UART_SetConfig+0x282>
 8004954:	2304      	movs	r3, #4
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e05d      	b.n	8004a16 <UART_SetConfig+0x282>
 800495a:	2308      	movs	r3, #8
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e05a      	b.n	8004a16 <UART_SetConfig+0x282>
 8004960:	2310      	movs	r3, #16
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e057      	b.n	8004a16 <UART_SetConfig+0x282>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a49      	ldr	r2, [pc, #292]	; (8004a90 <UART_SetConfig+0x2fc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x228>
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <UART_SetConfig+0x2ec>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x21c>
 8004980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004984:	d817      	bhi.n	80049b6 <UART_SetConfig+0x222>
 8004986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x210>
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d811      	bhi.n	80049b6 <UART_SetConfig+0x222>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x20a>
 8004996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x216>
 800499c:	e00b      	b.n	80049b6 <UART_SetConfig+0x222>
 800499e:	2300      	movs	r3, #0
 80049a0:	76fb      	strb	r3, [r7, #27]
 80049a2:	e038      	b.n	8004a16 <UART_SetConfig+0x282>
 80049a4:	2302      	movs	r3, #2
 80049a6:	76fb      	strb	r3, [r7, #27]
 80049a8:	e035      	b.n	8004a16 <UART_SetConfig+0x282>
 80049aa:	2304      	movs	r3, #4
 80049ac:	76fb      	strb	r3, [r7, #27]
 80049ae:	e032      	b.n	8004a16 <UART_SetConfig+0x282>
 80049b0:	2308      	movs	r3, #8
 80049b2:	76fb      	strb	r3, [r7, #27]
 80049b4:	e02f      	b.n	8004a16 <UART_SetConfig+0x282>
 80049b6:	2310      	movs	r3, #16
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e02c      	b.n	8004a16 <UART_SetConfig+0x282>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <UART_SetConfig+0x2e4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d125      	bne.n	8004a12 <UART_SetConfig+0x27e>
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <UART_SetConfig+0x2ec>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d4:	d017      	beq.n	8004a06 <UART_SetConfig+0x272>
 80049d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049da:	d817      	bhi.n	8004a0c <UART_SetConfig+0x278>
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d00b      	beq.n	80049fa <UART_SetConfig+0x266>
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e6:	d811      	bhi.n	8004a0c <UART_SetConfig+0x278>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <UART_SetConfig+0x260>
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	d006      	beq.n	8004a00 <UART_SetConfig+0x26c>
 80049f2:	e00b      	b.n	8004a0c <UART_SetConfig+0x278>
 80049f4:	2300      	movs	r3, #0
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e00d      	b.n	8004a16 <UART_SetConfig+0x282>
 80049fa:	2302      	movs	r3, #2
 80049fc:	76fb      	strb	r3, [r7, #27]
 80049fe:	e00a      	b.n	8004a16 <UART_SetConfig+0x282>
 8004a00:	2304      	movs	r3, #4
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	e007      	b.n	8004a16 <UART_SetConfig+0x282>
 8004a06:	2308      	movs	r3, #8
 8004a08:	76fb      	strb	r3, [r7, #27]
 8004a0a:	e004      	b.n	8004a16 <UART_SetConfig+0x282>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	76fb      	strb	r3, [r7, #27]
 8004a10:	e001      	b.n	8004a16 <UART_SetConfig+0x282>
 8004a12:	2310      	movs	r3, #16
 8004a14:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <UART_SetConfig+0x2e4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 8087 	bne.w	8004b30 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a22:	7efb      	ldrb	r3, [r7, #27]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d837      	bhi.n	8004a98 <UART_SetConfig+0x304>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x29c>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a99 	.word	0x08004a99
 8004a40:	08004a63 	.word	0x08004a63
 8004a44:	08004a99 	.word	0x08004a99
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	08004a99 	.word	0x08004a99
 8004a50:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fe fc0a 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004a58:	6178      	str	r0, [r7, #20]
        break;
 8004a5a:	e022      	b.n	8004aa2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <UART_SetConfig+0x300>)
 8004a5e:	617b      	str	r3, [r7, #20]
        break;
 8004a60:	e01f      	b.n	8004aa2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fe fb6b 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004a66:	6178      	str	r0, [r7, #20]
        break;
 8004a68:	e01b      	b.n	8004aa2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6e:	617b      	str	r3, [r7, #20]
        break;
 8004a70:	e017      	b.n	8004aa2 <UART_SetConfig+0x30e>
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40008000 	.word	0x40008000
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	40004c00 	.word	0x40004c00
 8004a90:	40005000 	.word	0x40005000
 8004a94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	76bb      	strb	r3, [r7, #26]
        break;
 8004aa0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80f1 	beq.w	8004c8c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d305      	bcc.n	8004ac6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d902      	bls.n	8004acc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	76bb      	strb	r3, [r7, #26]
 8004aca:	e0df      	b.n	8004c8c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	020b      	lsls	r3, r1, #8
 8004ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ae2:	0202      	lsls	r2, r0, #8
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	6849      	ldr	r1, [r1, #4]
 8004ae8:	0849      	lsrs	r1, r1, #1
 8004aea:	4608      	mov	r0, r1
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	1814      	adds	r4, r2, r0
 8004af2:	eb43 0501 	adc.w	r5, r3, r1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fbb4 	bl	8000270 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b16:	d308      	bcc.n	8004b2a <UART_SetConfig+0x396>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d204      	bcs.n	8004b2a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e0b0      	b.n	8004c8c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	76bb      	strb	r3, [r7, #26]
 8004b2e:	e0ad      	b.n	8004c8c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d15b      	bne.n	8004bf2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004b3a:	7efb      	ldrb	r3, [r7, #27]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d828      	bhi.n	8004b92 <UART_SetConfig+0x3fe>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x3b4>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b83 	.word	0x08004b83
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004b93 	.word	0x08004b93
 8004b68:	08004b8b 	.word	0x08004b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fe fb7e 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004b70:	6178      	str	r0, [r7, #20]
        break;
 8004b72:	e013      	b.n	8004b9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fb90 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004b78:	6178      	str	r0, [r7, #20]
        break;
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b49      	ldr	r3, [pc, #292]	; (8004ca4 <UART_SetConfig+0x510>)
 8004b7e:	617b      	str	r3, [r7, #20]
        break;
 8004b80:	e00c      	b.n	8004b9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe fadb 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004b86:	6178      	str	r0, [r7, #20]
        break;
 8004b88:	e008      	b.n	8004b9c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	617b      	str	r3, [r7, #20]
        break;
 8004b90:	e004      	b.n	8004b9c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	76bb      	strb	r3, [r7, #26]
        break;
 8004b9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d074      	beq.n	8004c8c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005a      	lsls	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d916      	bls.n	8004bec <UART_SetConfig+0x458>
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d212      	bcs.n	8004bec <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	89fa      	ldrh	r2, [r7, #14]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e04f      	b.n	8004c8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	76bb      	strb	r3, [r7, #26]
 8004bf0:	e04c      	b.n	8004c8c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf2:	7efb      	ldrb	r3, [r7, #27]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d828      	bhi.n	8004c4a <UART_SetConfig+0x4b6>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x46c>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c3b 	.word	0x08004c3b
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c4b 	.word	0x08004c4b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c24:	f7fe fb22 	bl	800326c <HAL_RCC_GetPCLK1Freq>
 8004c28:	6178      	str	r0, [r7, #20]
        break;
 8004c2a:	e013      	b.n	8004c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe fb34 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004c30:	6178      	str	r0, [r7, #20]
        break;
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <UART_SetConfig+0x510>)
 8004c36:	617b      	str	r3, [r7, #20]
        break;
 8004c38:	e00c      	b.n	8004c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fa7f 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004c3e:	6178      	str	r0, [r7, #20]
        break;
 8004c40:	e008      	b.n	8004c54 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	617b      	str	r3, [r7, #20]
        break;
 8004c48:	e004      	b.n	8004c54 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	76bb      	strb	r3, [r7, #26]
        break;
 8004c52:	bf00      	nop
    }

    if (pclk != 0U)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085a      	lsrs	r2, r3, #1
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d909      	bls.n	8004c88 <UART_SetConfig+0x4f4>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d205      	bcs.n	8004c88 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e001      	b.n	8004c8c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c98:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da6:	d10a      	bne.n	8004dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dfc:	f7fc fd00 	bl	8001800 <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d10e      	bne.n	8004e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f82d 	bl	8004e7e <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e023      	b.n	8004e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d10e      	bne.n	8004e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f817 	bl	8004e7e <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00d      	b.n	8004e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b09c      	sub	sp, #112	; 0x70
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8e:	e0a5      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	f000 80a1 	beq.w	8004fdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fc fcb1 	bl	8001800 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d13e      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e6      	bne.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3308      	adds	r3, #8
 8004f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e5      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e067      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d04f      	beq.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d147      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
 8004f76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e6      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	613b      	str	r3, [r7, #16]
   return(result);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fa8:	623a      	str	r2, [r7, #32]
 8004faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	69f9      	ldr	r1, [r7, #28]
 8004fae:	6a3a      	ldr	r2, [r7, #32]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e5      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e010      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f43f af4a 	beq.w	8004e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3770      	adds	r7, #112	; 0x70
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005006:	b084      	sub	sp, #16
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	f107 001c 	add.w	r0, r7, #28
 8005014:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fa6b 	bl	8005500 <USB_CoreReset>
 800502a:	4603      	mov	r3, r0
 800502c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800502e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
 8005040:	e005      	b.n	800504e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800505a:	b004      	add	sp, #16
 800505c:	4770      	bx	lr

0800505e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d115      	bne.n	80050ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7fc fbb2 	bl	8001818 <HAL_Delay>
      ms++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa12 	bl	80054e4 <USB_GetMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d01e      	beq.n	8005104 <USB_SetCurrentMode+0x84>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b31      	cmp	r3, #49	; 0x31
 80050ca:	d9f0      	bls.n	80050ae <USB_SetCurrentMode+0x2e>
 80050cc:	e01a      	b.n	8005104 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050e0:	2001      	movs	r0, #1
 80050e2:	f7fc fb99 	bl	8001818 <HAL_Delay>
      ms++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9f9 	bl	80054e4 <USB_GetMode>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <USB_SetCurrentMode+0x84>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b31      	cmp	r3, #49	; 0x31
 80050fc:	d9f0      	bls.n	80050e0 <USB_SetCurrentMode+0x60>
 80050fe:	e001      	b.n	8005104 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e005      	b.n	8005110 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b32      	cmp	r3, #50	; 0x32
 8005108:	d101      	bne.n	800510e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005118:	b084      	sub	sp, #16
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e009      	b.n	800514c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3340      	adds	r3, #64	; 0x40
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	2200      	movs	r2, #0
 8005144:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3301      	adds	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b0e      	cmp	r3, #14
 8005150:	d9f2      	bls.n	8005138 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11c      	bne.n	8005192 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e005      	b.n	800519e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	4619      	mov	r1, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	461a      	mov	r2, r3
 80051ba:	680b      	ldr	r3, [r1, #0]
 80051bc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051be:	2103      	movs	r1, #3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f955 	bl	8005470 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051c6:	2110      	movs	r1, #16
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8f1 	bl	80053b0 <USB_FlushTxFifo>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f91b 	bl	8005414 <USB_FlushRxFifo>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	461a      	mov	r2, r3
 80051f0:	2300      	movs	r3, #0
 80051f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e043      	b.n	800529a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005228:	d118      	bne.n	800525c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e013      	b.n	800526e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e008      	b.n	800526e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	2300      	movs	r3, #0
 800526c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	461a      	mov	r2, r3
 800528e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3301      	adds	r3, #1
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3b7      	bcc.n	8005212 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e043      	b.n	8005330 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052be:	d118      	bne.n	80052f2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e013      	b.n	8005304 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e008      	b.n	8005304 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	2300      	movs	r3, #0
 8005302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d3b7      	bcc.n	80052a8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f043 0210 	orr.w	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <USB_DevInit+0x294>)
 800536c:	4313      	orrs	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f043 0208 	orr.w	r2, r3, #8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d107      	bne.n	800539a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a6:	b004      	add	sp, #16
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	803c3800 	.word	0x803c3800

080053b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	4a12      	ldr	r2, [pc, #72]	; (8005410 <USB_FlushTxFifo+0x60>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e01a      	b.n	8005404 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	daf3      	bge.n	80053be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <USB_FlushTxFifo+0x60>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e006      	b.n	8005404 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d0f1      	beq.n	80053e6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	00030d40 	.word	0x00030d40

08005414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4a11      	ldr	r2, [pc, #68]	; (800546c <USB_FlushRxFifo+0x58>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e017      	b.n	8005460 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	daf3      	bge.n	8005420 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2210      	movs	r2, #16
 8005440:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <USB_FlushRxFifo+0x58>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e006      	b.n	8005460 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b10      	cmp	r3, #16
 800545c:	d0f1      	beq.n	8005442 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	00030d40 	.word	0x00030d40

08005470 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054bc:	f023 0303 	bic.w	r3, r3, #3
 80054c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d0:	f043 0302 	orr.w	r3, r3, #2
 80054d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	f003 0301 	and.w	r3, r3, #1
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <USB_CoreReset+0x60>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e01a      	b.n	8005552 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	daf3      	bge.n	800550c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3301      	adds	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	4a09      	ldr	r2, [pc, #36]	; (8005560 <USB_CoreReset+0x60>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e006      	b.n	8005552 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d0f1      	beq.n	8005534 <USB_CoreReset+0x34>

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	00030d40 	.word	0x00030d40

08005564 <__errno>:
 8005564:	4b01      	ldr	r3, [pc, #4]	; (800556c <__errno+0x8>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2000000c 	.word	0x2000000c

08005570 <__libc_init_array>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4d0d      	ldr	r5, [pc, #52]	; (80055a8 <__libc_init_array+0x38>)
 8005574:	4c0d      	ldr	r4, [pc, #52]	; (80055ac <__libc_init_array+0x3c>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	2600      	movs	r6, #0
 800557c:	42a6      	cmp	r6, r4
 800557e:	d109      	bne.n	8005594 <__libc_init_array+0x24>
 8005580:	4d0b      	ldr	r5, [pc, #44]	; (80055b0 <__libc_init_array+0x40>)
 8005582:	4c0c      	ldr	r4, [pc, #48]	; (80055b4 <__libc_init_array+0x44>)
 8005584:	f000 ffec 	bl	8006560 <_init>
 8005588:	1b64      	subs	r4, r4, r5
 800558a:	10a4      	asrs	r4, r4, #2
 800558c:	2600      	movs	r6, #0
 800558e:	42a6      	cmp	r6, r4
 8005590:	d105      	bne.n	800559e <__libc_init_array+0x2e>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	f855 3b04 	ldr.w	r3, [r5], #4
 8005598:	4798      	blx	r3
 800559a:	3601      	adds	r6, #1
 800559c:	e7ee      	b.n	800557c <__libc_init_array+0xc>
 800559e:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a2:	4798      	blx	r3
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7f2      	b.n	800558e <__libc_init_array+0x1e>
 80055a8:	0800669c 	.word	0x0800669c
 80055ac:	0800669c 	.word	0x0800669c
 80055b0:	0800669c 	.word	0x0800669c
 80055b4:	080066a0 	.word	0x080066a0

080055b8 <memset>:
 80055b8:	4402      	add	r2, r0
 80055ba:	4603      	mov	r3, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d100      	bne.n	80055c2 <memset+0xa>
 80055c0:	4770      	bx	lr
 80055c2:	f803 1b01 	strb.w	r1, [r3], #1
 80055c6:	e7f9      	b.n	80055bc <memset+0x4>

080055c8 <iprintf>:
 80055c8:	b40f      	push	{r0, r1, r2, r3}
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <iprintf+0x2c>)
 80055cc:	b513      	push	{r0, r1, r4, lr}
 80055ce:	681c      	ldr	r4, [r3, #0]
 80055d0:	b124      	cbz	r4, 80055dc <iprintf+0x14>
 80055d2:	69a3      	ldr	r3, [r4, #24]
 80055d4:	b913      	cbnz	r3, 80055dc <iprintf+0x14>
 80055d6:	4620      	mov	r0, r4
 80055d8:	f000 fa5e 	bl	8005a98 <__sinit>
 80055dc:	ab05      	add	r3, sp, #20
 80055de:	9a04      	ldr	r2, [sp, #16]
 80055e0:	68a1      	ldr	r1, [r4, #8]
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 fc2f 	bl	8005e48 <_vfiprintf_r>
 80055ea:	b002      	add	sp, #8
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f0:	b004      	add	sp, #16
 80055f2:	4770      	bx	lr
 80055f4:	2000000c 	.word	0x2000000c

080055f8 <_puts_r>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	460e      	mov	r6, r1
 80055fc:	4605      	mov	r5, r0
 80055fe:	b118      	cbz	r0, 8005608 <_puts_r+0x10>
 8005600:	6983      	ldr	r3, [r0, #24]
 8005602:	b90b      	cbnz	r3, 8005608 <_puts_r+0x10>
 8005604:	f000 fa48 	bl	8005a98 <__sinit>
 8005608:	69ab      	ldr	r3, [r5, #24]
 800560a:	68ac      	ldr	r4, [r5, #8]
 800560c:	b913      	cbnz	r3, 8005614 <_puts_r+0x1c>
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fa42 	bl	8005a98 <__sinit>
 8005614:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <_puts_r+0xd0>)
 8005616:	429c      	cmp	r4, r3
 8005618:	d120      	bne.n	800565c <_puts_r+0x64>
 800561a:	686c      	ldr	r4, [r5, #4]
 800561c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800561e:	07db      	lsls	r3, r3, #31
 8005620:	d405      	bmi.n	800562e <_puts_r+0x36>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d402      	bmi.n	800562e <_puts_r+0x36>
 8005628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562a:	f000 fad3 	bl	8005bd4 <__retarget_lock_acquire_recursive>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	0719      	lsls	r1, r3, #28
 8005632:	d51d      	bpl.n	8005670 <_puts_r+0x78>
 8005634:	6923      	ldr	r3, [r4, #16]
 8005636:	b1db      	cbz	r3, 8005670 <_puts_r+0x78>
 8005638:	3e01      	subs	r6, #1
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005640:	3b01      	subs	r3, #1
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	bb39      	cbnz	r1, 8005696 <_puts_r+0x9e>
 8005646:	2b00      	cmp	r3, #0
 8005648:	da38      	bge.n	80056bc <_puts_r+0xc4>
 800564a:	4622      	mov	r2, r4
 800564c:	210a      	movs	r1, #10
 800564e:	4628      	mov	r0, r5
 8005650:	f000 f848 	bl	80056e4 <__swbuf_r>
 8005654:	3001      	adds	r0, #1
 8005656:	d011      	beq.n	800567c <_puts_r+0x84>
 8005658:	250a      	movs	r5, #10
 800565a:	e011      	b.n	8005680 <_puts_r+0x88>
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <_puts_r+0xd4>)
 800565e:	429c      	cmp	r4, r3
 8005660:	d101      	bne.n	8005666 <_puts_r+0x6e>
 8005662:	68ac      	ldr	r4, [r5, #8]
 8005664:	e7da      	b.n	800561c <_puts_r+0x24>
 8005666:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <_puts_r+0xd8>)
 8005668:	429c      	cmp	r4, r3
 800566a:	bf08      	it	eq
 800566c:	68ec      	ldreq	r4, [r5, #12]
 800566e:	e7d5      	b.n	800561c <_puts_r+0x24>
 8005670:	4621      	mov	r1, r4
 8005672:	4628      	mov	r0, r5
 8005674:	f000 f888 	bl	8005788 <__swsetup_r>
 8005678:	2800      	cmp	r0, #0
 800567a:	d0dd      	beq.n	8005638 <_puts_r+0x40>
 800567c:	f04f 35ff 	mov.w	r5, #4294967295
 8005680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005682:	07da      	lsls	r2, r3, #31
 8005684:	d405      	bmi.n	8005692 <_puts_r+0x9a>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	059b      	lsls	r3, r3, #22
 800568a:	d402      	bmi.n	8005692 <_puts_r+0x9a>
 800568c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800568e:	f000 faa2 	bl	8005bd6 <__retarget_lock_release_recursive>
 8005692:	4628      	mov	r0, r5
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	2b00      	cmp	r3, #0
 8005698:	da04      	bge.n	80056a4 <_puts_r+0xac>
 800569a:	69a2      	ldr	r2, [r4, #24]
 800569c:	429a      	cmp	r2, r3
 800569e:	dc06      	bgt.n	80056ae <_puts_r+0xb6>
 80056a0:	290a      	cmp	r1, #10
 80056a2:	d004      	beq.n	80056ae <_puts_r+0xb6>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	7019      	strb	r1, [r3, #0]
 80056ac:	e7c5      	b.n	800563a <_puts_r+0x42>
 80056ae:	4622      	mov	r2, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f817 	bl	80056e4 <__swbuf_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	d1bf      	bne.n	800563a <_puts_r+0x42>
 80056ba:	e7df      	b.n	800567c <_puts_r+0x84>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	250a      	movs	r5, #10
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	6022      	str	r2, [r4, #0]
 80056c4:	701d      	strb	r5, [r3, #0]
 80056c6:	e7db      	b.n	8005680 <_puts_r+0x88>
 80056c8:	08006620 	.word	0x08006620
 80056cc:	08006640 	.word	0x08006640
 80056d0:	08006600 	.word	0x08006600

080056d4 <puts>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <puts+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f7ff bf8d 	b.w	80055f8 <_puts_r>
 80056de:	bf00      	nop
 80056e0:	2000000c 	.word	0x2000000c

080056e4 <__swbuf_r>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	460e      	mov	r6, r1
 80056e8:	4614      	mov	r4, r2
 80056ea:	4605      	mov	r5, r0
 80056ec:	b118      	cbz	r0, 80056f6 <__swbuf_r+0x12>
 80056ee:	6983      	ldr	r3, [r0, #24]
 80056f0:	b90b      	cbnz	r3, 80056f6 <__swbuf_r+0x12>
 80056f2:	f000 f9d1 	bl	8005a98 <__sinit>
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <__swbuf_r+0x98>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d12b      	bne.n	8005754 <__swbuf_r+0x70>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	69a3      	ldr	r3, [r4, #24]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	071a      	lsls	r2, r3, #28
 8005706:	d52f      	bpl.n	8005768 <__swbuf_r+0x84>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	b36b      	cbz	r3, 8005768 <__swbuf_r+0x84>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1ac0      	subs	r0, r0, r3
 8005712:	6963      	ldr	r3, [r4, #20]
 8005714:	b2f6      	uxtb	r6, r6
 8005716:	4283      	cmp	r3, r0
 8005718:	4637      	mov	r7, r6
 800571a:	dc04      	bgt.n	8005726 <__swbuf_r+0x42>
 800571c:	4621      	mov	r1, r4
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f926 	bl	8005970 <_fflush_r>
 8005724:	bb30      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	701e      	strb	r6, [r3, #0]
 8005734:	6963      	ldr	r3, [r4, #20]
 8005736:	3001      	adds	r0, #1
 8005738:	4283      	cmp	r3, r0
 800573a:	d004      	beq.n	8005746 <__swbuf_r+0x62>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d506      	bpl.n	8005750 <__swbuf_r+0x6c>
 8005742:	2e0a      	cmp	r6, #10
 8005744:	d104      	bne.n	8005750 <__swbuf_r+0x6c>
 8005746:	4621      	mov	r1, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f911 	bl	8005970 <_fflush_r>
 800574e:	b988      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005750:	4638      	mov	r0, r7
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <__swbuf_r+0x9c>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <__swbuf_r+0x7a>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7cf      	b.n	80056fe <__swbuf_r+0x1a>
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <__swbuf_r+0xa0>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7ca      	b.n	80056fe <__swbuf_r+0x1a>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 f80c 	bl	8005788 <__swsetup_r>
 8005770:	2800      	cmp	r0, #0
 8005772:	d0cb      	beq.n	800570c <__swbuf_r+0x28>
 8005774:	f04f 37ff 	mov.w	r7, #4294967295
 8005778:	e7ea      	b.n	8005750 <__swbuf_r+0x6c>
 800577a:	bf00      	nop
 800577c:	08006620 	.word	0x08006620
 8005780:	08006640 	.word	0x08006640
 8005784:	08006600 	.word	0x08006600

08005788 <__swsetup_r>:
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <__swsetup_r+0xcc>)
 800578a:	b570      	push	{r4, r5, r6, lr}
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	4606      	mov	r6, r0
 8005790:	460c      	mov	r4, r1
 8005792:	b125      	cbz	r5, 800579e <__swsetup_r+0x16>
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	b913      	cbnz	r3, 800579e <__swsetup_r+0x16>
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f97d 	bl	8005a98 <__sinit>
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <__swsetup_r+0xd0>)
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d10f      	bne.n	80057c4 <__swsetup_r+0x3c>
 80057a4:	686c      	ldr	r4, [r5, #4]
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ac:	0719      	lsls	r1, r3, #28
 80057ae:	d42c      	bmi.n	800580a <__swsetup_r+0x82>
 80057b0:	06dd      	lsls	r5, r3, #27
 80057b2:	d411      	bmi.n	80057d8 <__swsetup_r+0x50>
 80057b4:	2309      	movs	r3, #9
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	e03e      	b.n	8005842 <__swsetup_r+0xba>
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <__swsetup_r+0xd4>)
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d101      	bne.n	80057ce <__swsetup_r+0x46>
 80057ca:	68ac      	ldr	r4, [r5, #8]
 80057cc:	e7eb      	b.n	80057a6 <__swsetup_r+0x1e>
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <__swsetup_r+0xd8>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	bf08      	it	eq
 80057d4:	68ec      	ldreq	r4, [r5, #12]
 80057d6:	e7e6      	b.n	80057a6 <__swsetup_r+0x1e>
 80057d8:	0758      	lsls	r0, r3, #29
 80057da:	d512      	bpl.n	8005802 <__swsetup_r+0x7a>
 80057dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057de:	b141      	cbz	r1, 80057f2 <__swsetup_r+0x6a>
 80057e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e4:	4299      	cmp	r1, r3
 80057e6:	d002      	beq.n	80057ee <__swsetup_r+0x66>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 fa59 	bl	8005ca0 <_free_r>
 80057ee:	2300      	movs	r3, #0
 80057f0:	6363      	str	r3, [r4, #52]	; 0x34
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0308 	orr.w	r3, r3, #8
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	b94b      	cbnz	r3, 8005822 <__swsetup_r+0x9a>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d003      	beq.n	8005822 <__swsetup_r+0x9a>
 800581a:	4621      	mov	r1, r4
 800581c:	4630      	mov	r0, r6
 800581e:	f000 f9ff 	bl	8005c20 <__smakebuf_r>
 8005822:	89a0      	ldrh	r0, [r4, #12]
 8005824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005828:	f010 0301 	ands.w	r3, r0, #1
 800582c:	d00a      	beq.n	8005844 <__swsetup_r+0xbc>
 800582e:	2300      	movs	r3, #0
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	6963      	ldr	r3, [r4, #20]
 8005834:	425b      	negs	r3, r3
 8005836:	61a3      	str	r3, [r4, #24]
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	b943      	cbnz	r3, 800584e <__swsetup_r+0xc6>
 800583c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005840:	d1ba      	bne.n	80057b8 <__swsetup_r+0x30>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	0781      	lsls	r1, r0, #30
 8005846:	bf58      	it	pl
 8005848:	6963      	ldrpl	r3, [r4, #20]
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	e7f4      	b.n	8005838 <__swsetup_r+0xb0>
 800584e:	2000      	movs	r0, #0
 8005850:	e7f7      	b.n	8005842 <__swsetup_r+0xba>
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
 8005858:	08006620 	.word	0x08006620
 800585c:	08006640 	.word	0x08006640
 8005860:	08006600 	.word	0x08006600

08005864 <__sflush_r>:
 8005864:	898a      	ldrh	r2, [r1, #12]
 8005866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	0710      	lsls	r0, r2, #28
 800586e:	460c      	mov	r4, r1
 8005870:	d458      	bmi.n	8005924 <__sflush_r+0xc0>
 8005872:	684b      	ldr	r3, [r1, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc05      	bgt.n	8005884 <__sflush_r+0x20>
 8005878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	dc02      	bgt.n	8005884 <__sflush_r+0x20>
 800587e:	2000      	movs	r0, #0
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005886:	2e00      	cmp	r6, #0
 8005888:	d0f9      	beq.n	800587e <__sflush_r+0x1a>
 800588a:	2300      	movs	r3, #0
 800588c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005890:	682f      	ldr	r7, [r5, #0]
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	d032      	beq.n	80058fc <__sflush_r+0x98>
 8005896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	075a      	lsls	r2, r3, #29
 800589c:	d505      	bpl.n	80058aa <__sflush_r+0x46>
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	1ac0      	subs	r0, r0, r3
 80058a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a4:	b10b      	cbz	r3, 80058aa <__sflush_r+0x46>
 80058a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a8:	1ac0      	subs	r0, r0, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	4602      	mov	r2, r0
 80058ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b0      	blx	r6
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	d106      	bne.n	80058ca <__sflush_r+0x66>
 80058bc:	6829      	ldr	r1, [r5, #0]
 80058be:	291d      	cmp	r1, #29
 80058c0:	d82c      	bhi.n	800591c <__sflush_r+0xb8>
 80058c2:	4a2a      	ldr	r2, [pc, #168]	; (800596c <__sflush_r+0x108>)
 80058c4:	40ca      	lsrs	r2, r1
 80058c6:	07d6      	lsls	r6, r2, #31
 80058c8:	d528      	bpl.n	800591c <__sflush_r+0xb8>
 80058ca:	2200      	movs	r2, #0
 80058cc:	6062      	str	r2, [r4, #4]
 80058ce:	04d9      	lsls	r1, r3, #19
 80058d0:	6922      	ldr	r2, [r4, #16]
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	d504      	bpl.n	80058e0 <__sflush_r+0x7c>
 80058d6:	1c42      	adds	r2, r0, #1
 80058d8:	d101      	bne.n	80058de <__sflush_r+0x7a>
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	b903      	cbnz	r3, 80058e0 <__sflush_r+0x7c>
 80058de:	6560      	str	r0, [r4, #84]	; 0x54
 80058e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e2:	602f      	str	r7, [r5, #0]
 80058e4:	2900      	cmp	r1, #0
 80058e6:	d0ca      	beq.n	800587e <__sflush_r+0x1a>
 80058e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ec:	4299      	cmp	r1, r3
 80058ee:	d002      	beq.n	80058f6 <__sflush_r+0x92>
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 f9d5 	bl	8005ca0 <_free_r>
 80058f6:	2000      	movs	r0, #0
 80058f8:	6360      	str	r0, [r4, #52]	; 0x34
 80058fa:	e7c1      	b.n	8005880 <__sflush_r+0x1c>
 80058fc:	6a21      	ldr	r1, [r4, #32]
 80058fe:	2301      	movs	r3, #1
 8005900:	4628      	mov	r0, r5
 8005902:	47b0      	blx	r6
 8005904:	1c41      	adds	r1, r0, #1
 8005906:	d1c7      	bne.n	8005898 <__sflush_r+0x34>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c4      	beq.n	8005898 <__sflush_r+0x34>
 800590e:	2b1d      	cmp	r3, #29
 8005910:	d001      	beq.n	8005916 <__sflush_r+0xb2>
 8005912:	2b16      	cmp	r3, #22
 8005914:	d101      	bne.n	800591a <__sflush_r+0xb6>
 8005916:	602f      	str	r7, [r5, #0]
 8005918:	e7b1      	b.n	800587e <__sflush_r+0x1a>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	e7ad      	b.n	8005880 <__sflush_r+0x1c>
 8005924:	690f      	ldr	r7, [r1, #16]
 8005926:	2f00      	cmp	r7, #0
 8005928:	d0a9      	beq.n	800587e <__sflush_r+0x1a>
 800592a:	0793      	lsls	r3, r2, #30
 800592c:	680e      	ldr	r6, [r1, #0]
 800592e:	bf08      	it	eq
 8005930:	694b      	ldreq	r3, [r1, #20]
 8005932:	600f      	str	r7, [r1, #0]
 8005934:	bf18      	it	ne
 8005936:	2300      	movne	r3, #0
 8005938:	eba6 0807 	sub.w	r8, r6, r7
 800593c:	608b      	str	r3, [r1, #8]
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	dd9c      	ble.n	800587e <__sflush_r+0x1a>
 8005944:	6a21      	ldr	r1, [r4, #32]
 8005946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005948:	4643      	mov	r3, r8
 800594a:	463a      	mov	r2, r7
 800594c:	4628      	mov	r0, r5
 800594e:	47b0      	blx	r6
 8005950:	2800      	cmp	r0, #0
 8005952:	dc06      	bgt.n	8005962 <__sflush_r+0xfe>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e78e      	b.n	8005880 <__sflush_r+0x1c>
 8005962:	4407      	add	r7, r0
 8005964:	eba8 0800 	sub.w	r8, r8, r0
 8005968:	e7e9      	b.n	800593e <__sflush_r+0xda>
 800596a:	bf00      	nop
 800596c:	20400001 	.word	0x20400001

08005970 <_fflush_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b913      	cbnz	r3, 8005980 <_fflush_r+0x10>
 800597a:	2500      	movs	r5, #0
 800597c:	4628      	mov	r0, r5
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	b118      	cbz	r0, 800598a <_fflush_r+0x1a>
 8005982:	6983      	ldr	r3, [r0, #24]
 8005984:	b90b      	cbnz	r3, 800598a <_fflush_r+0x1a>
 8005986:	f000 f887 	bl	8005a98 <__sinit>
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <_fflush_r+0x6c>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d11b      	bne.n	80059c8 <_fflush_r+0x58>
 8005990:	686c      	ldr	r4, [r5, #4]
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <_fflush_r+0xa>
 800599a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800599c:	07d0      	lsls	r0, r2, #31
 800599e:	d404      	bmi.n	80059aa <_fflush_r+0x3a>
 80059a0:	0599      	lsls	r1, r3, #22
 80059a2:	d402      	bmi.n	80059aa <_fflush_r+0x3a>
 80059a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a6:	f000 f915 	bl	8005bd4 <__retarget_lock_acquire_recursive>
 80059aa:	4628      	mov	r0, r5
 80059ac:	4621      	mov	r1, r4
 80059ae:	f7ff ff59 	bl	8005864 <__sflush_r>
 80059b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b4:	07da      	lsls	r2, r3, #31
 80059b6:	4605      	mov	r5, r0
 80059b8:	d4e0      	bmi.n	800597c <_fflush_r+0xc>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d4dd      	bmi.n	800597c <_fflush_r+0xc>
 80059c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c2:	f000 f908 	bl	8005bd6 <__retarget_lock_release_recursive>
 80059c6:	e7d9      	b.n	800597c <_fflush_r+0xc>
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <_fflush_r+0x70>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d101      	bne.n	80059d2 <_fflush_r+0x62>
 80059ce:	68ac      	ldr	r4, [r5, #8]
 80059d0:	e7df      	b.n	8005992 <_fflush_r+0x22>
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <_fflush_r+0x74>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	bf08      	it	eq
 80059d8:	68ec      	ldreq	r4, [r5, #12]
 80059da:	e7da      	b.n	8005992 <_fflush_r+0x22>
 80059dc:	08006620 	.word	0x08006620
 80059e0:	08006640 	.word	0x08006640
 80059e4:	08006600 	.word	0x08006600

080059e8 <std>:
 80059e8:	2300      	movs	r3, #0
 80059ea:	b510      	push	{r4, lr}
 80059ec:	4604      	mov	r4, r0
 80059ee:	e9c0 3300 	strd	r3, r3, [r0]
 80059f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059f6:	6083      	str	r3, [r0, #8]
 80059f8:	8181      	strh	r1, [r0, #12]
 80059fa:	6643      	str	r3, [r0, #100]	; 0x64
 80059fc:	81c2      	strh	r2, [r0, #14]
 80059fe:	6183      	str	r3, [r0, #24]
 8005a00:	4619      	mov	r1, r3
 8005a02:	2208      	movs	r2, #8
 8005a04:	305c      	adds	r0, #92	; 0x5c
 8005a06:	f7ff fdd7 	bl	80055b8 <memset>
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <std+0x38>)
 8005a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <std+0x3c>)
 8005a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <std+0x40>)
 8005a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <std+0x44>)
 8005a18:	6224      	str	r4, [r4, #32]
 8005a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	080063f1 	.word	0x080063f1
 8005a24:	08006413 	.word	0x08006413
 8005a28:	0800644b 	.word	0x0800644b
 8005a2c:	0800646f 	.word	0x0800646f

08005a30 <_cleanup_r>:
 8005a30:	4901      	ldr	r1, [pc, #4]	; (8005a38 <_cleanup_r+0x8>)
 8005a32:	f000 b8af 	b.w	8005b94 <_fwalk_reent>
 8005a36:	bf00      	nop
 8005a38:	08005971 	.word	0x08005971

08005a3c <__sfmoreglue>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	1e4a      	subs	r2, r1, #1
 8005a40:	2568      	movs	r5, #104	; 0x68
 8005a42:	4355      	muls	r5, r2
 8005a44:	460e      	mov	r6, r1
 8005a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a4a:	f000 f979 	bl	8005d40 <_malloc_r>
 8005a4e:	4604      	mov	r4, r0
 8005a50:	b140      	cbz	r0, 8005a64 <__sfmoreglue+0x28>
 8005a52:	2100      	movs	r1, #0
 8005a54:	e9c0 1600 	strd	r1, r6, [r0]
 8005a58:	300c      	adds	r0, #12
 8005a5a:	60a0      	str	r0, [r4, #8]
 8005a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a60:	f7ff fdaa 	bl	80055b8 <memset>
 8005a64:	4620      	mov	r0, r4
 8005a66:	bd70      	pop	{r4, r5, r6, pc}

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 b8b3 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000758 	.word	0x20000758

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b8ae 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000758 	.word	0x20000758

08005a80 <__sinit_lock_acquire>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__sinit_lock_acquire+0x8>)
 8005a82:	f000 b8a7 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005a86:	bf00      	nop
 8005a88:	20000753 	.word	0x20000753

08005a8c <__sinit_lock_release>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	; (8005a94 <__sinit_lock_release+0x8>)
 8005a8e:	f000 b8a2 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005a92:	bf00      	nop
 8005a94:	20000753 	.word	0x20000753

08005a98 <__sinit>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	f7ff fff0 	bl	8005a80 <__sinit_lock_acquire>
 8005aa0:	69a3      	ldr	r3, [r4, #24]
 8005aa2:	b11b      	cbz	r3, 8005aac <__sinit+0x14>
 8005aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa8:	f7ff bff0 	b.w	8005a8c <__sinit_lock_release>
 8005aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <__sinit+0x68>)
 8005ab4:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <__sinit+0x6c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	bf04      	itt	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	61a3      	streq	r3, [r4, #24]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f820 	bl	8005b08 <__sfp>
 8005ac8:	6060      	str	r0, [r4, #4]
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 f81c 	bl	8005b08 <__sfp>
 8005ad0:	60a0      	str	r0, [r4, #8]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 f818 	bl	8005b08 <__sfp>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	60e0      	str	r0, [r4, #12]
 8005adc:	2104      	movs	r1, #4
 8005ade:	6860      	ldr	r0, [r4, #4]
 8005ae0:	f7ff ff82 	bl	80059e8 <std>
 8005ae4:	68a0      	ldr	r0, [r4, #8]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	2109      	movs	r1, #9
 8005aea:	f7ff ff7d 	bl	80059e8 <std>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	2202      	movs	r2, #2
 8005af2:	2112      	movs	r1, #18
 8005af4:	f7ff ff78 	bl	80059e8 <std>
 8005af8:	2301      	movs	r3, #1
 8005afa:	61a3      	str	r3, [r4, #24]
 8005afc:	e7d2      	b.n	8005aa4 <__sinit+0xc>
 8005afe:	bf00      	nop
 8005b00:	080065fc 	.word	0x080065fc
 8005b04:	08005a31 	.word	0x08005a31

08005b08 <__sfp>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	f7ff ffac 	bl	8005a68 <__sfp_lock_acquire>
 8005b10:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <__sfp+0x84>)
 8005b12:	681e      	ldr	r6, [r3, #0]
 8005b14:	69b3      	ldr	r3, [r6, #24]
 8005b16:	b913      	cbnz	r3, 8005b1e <__sfp+0x16>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ffbd 	bl	8005a98 <__sinit>
 8005b1e:	3648      	adds	r6, #72	; 0x48
 8005b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	d503      	bpl.n	8005b30 <__sfp+0x28>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	b30b      	cbz	r3, 8005b70 <__sfp+0x68>
 8005b2c:	6836      	ldr	r6, [r6, #0]
 8005b2e:	e7f7      	b.n	8005b20 <__sfp+0x18>
 8005b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b34:	b9d5      	cbnz	r5, 8005b6c <__sfp+0x64>
 8005b36:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <__sfp+0x88>)
 8005b38:	60e3      	str	r3, [r4, #12]
 8005b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b40:	f000 f847 	bl	8005bd2 <__retarget_lock_init_recursive>
 8005b44:	f7ff ff96 	bl	8005a74 <__sfp_lock_release>
 8005b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b50:	6025      	str	r5, [r4, #0]
 8005b52:	61a5      	str	r5, [r4, #24]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4629      	mov	r1, r5
 8005b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b5c:	f7ff fd2c 	bl	80055b8 <memset>
 8005b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b68:	4620      	mov	r0, r4
 8005b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6c:	3468      	adds	r4, #104	; 0x68
 8005b6e:	e7d9      	b.n	8005b24 <__sfp+0x1c>
 8005b70:	2104      	movs	r1, #4
 8005b72:	4638      	mov	r0, r7
 8005b74:	f7ff ff62 	bl	8005a3c <__sfmoreglue>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	6030      	str	r0, [r6, #0]
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d1d5      	bne.n	8005b2c <__sfp+0x24>
 8005b80:	f7ff ff78 	bl	8005a74 <__sfp_lock_release>
 8005b84:	230c      	movs	r3, #12
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	e7ee      	b.n	8005b68 <__sfp+0x60>
 8005b8a:	bf00      	nop
 8005b8c:	080065fc 	.word	0x080065fc
 8005b90:	ffff0001 	.word	0xffff0001

08005b94 <_fwalk_reent>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	4606      	mov	r6, r0
 8005b9a:	4688      	mov	r8, r1
 8005b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ba0:	2700      	movs	r7, #0
 8005ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8005baa:	d505      	bpl.n	8005bb8 <_fwalk_reent+0x24>
 8005bac:	6824      	ldr	r4, [r4, #0]
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	d1f7      	bne.n	8005ba2 <_fwalk_reent+0xe>
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb8:	89ab      	ldrh	r3, [r5, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d907      	bls.n	8005bce <_fwalk_reent+0x3a>
 8005bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	d003      	beq.n	8005bce <_fwalk_reent+0x3a>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	47c0      	blx	r8
 8005bcc:	4307      	orrs	r7, r0
 8005bce:	3568      	adds	r5, #104	; 0x68
 8005bd0:	e7e9      	b.n	8005ba6 <_fwalk_reent+0x12>

08005bd2 <__retarget_lock_init_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <__retarget_lock_acquire_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <__retarget_lock_release_recursive>:
 8005bd6:	4770      	bx	lr

08005bd8 <__swhatbuf_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	460e      	mov	r6, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	b096      	sub	sp, #88	; 0x58
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	da07      	bge.n	8005bfa <__swhatbuf_r+0x22>
 8005bea:	2300      	movs	r3, #0
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	89b3      	ldrh	r3, [r6, #12]
 8005bf0:	061a      	lsls	r2, r3, #24
 8005bf2:	d410      	bmi.n	8005c16 <__swhatbuf_r+0x3e>
 8005bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf8:	e00e      	b.n	8005c18 <__swhatbuf_r+0x40>
 8005bfa:	466a      	mov	r2, sp
 8005bfc:	f000 fc5e 	bl	80064bc <_fstat_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	dbf2      	blt.n	8005bea <__swhatbuf_r+0x12>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c0e:	425a      	negs	r2, r3
 8005c10:	415a      	adcs	r2, r3
 8005c12:	602a      	str	r2, [r5, #0]
 8005c14:	e7ee      	b.n	8005bf4 <__swhatbuf_r+0x1c>
 8005c16:	2340      	movs	r3, #64	; 0x40
 8005c18:	2000      	movs	r0, #0
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	b016      	add	sp, #88	; 0x58
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}

08005c20 <__smakebuf_r>:
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c24:	079d      	lsls	r5, r3, #30
 8005c26:	4606      	mov	r6, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	d507      	bpl.n	8005c3c <__smakebuf_r+0x1c>
 8005c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	2301      	movs	r3, #1
 8005c36:	6163      	str	r3, [r4, #20]
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	ab01      	add	r3, sp, #4
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f7ff ffca 	bl	8005bd8 <__swhatbuf_r>
 8005c44:	9900      	ldr	r1, [sp, #0]
 8005c46:	4605      	mov	r5, r0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f879 	bl	8005d40 <_malloc_r>
 8005c4e:	b948      	cbnz	r0, 8005c64 <__smakebuf_r+0x44>
 8005c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d4ef      	bmi.n	8005c38 <__smakebuf_r+0x18>
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	e7e3      	b.n	8005c2c <__smakebuf_r+0xc>
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <__smakebuf_r+0x7c>)
 8005c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	9b00      	ldr	r3, [sp, #0]
 8005c74:	6163      	str	r3, [r4, #20]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	b15b      	cbz	r3, 8005c94 <__smakebuf_r+0x74>
 8005c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 fc2d 	bl	80064e0 <_isatty_r>
 8005c86:	b128      	cbz	r0, 8005c94 <__smakebuf_r+0x74>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	89a0      	ldrh	r0, [r4, #12]
 8005c96:	4305      	orrs	r5, r0
 8005c98:	81a5      	strh	r5, [r4, #12]
 8005c9a:	e7cd      	b.n	8005c38 <__smakebuf_r+0x18>
 8005c9c:	08005a31 	.word	0x08005a31

08005ca0 <_free_r>:
 8005ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	d048      	beq.n	8005d38 <_free_r+0x98>
 8005ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005caa:	9001      	str	r0, [sp, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f1a1 0404 	sub.w	r4, r1, #4
 8005cb2:	bfb8      	it	lt
 8005cb4:	18e4      	addlt	r4, r4, r3
 8005cb6:	f000 fc35 	bl	8006524 <__malloc_lock>
 8005cba:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <_free_r+0x9c>)
 8005cbc:	9801      	ldr	r0, [sp, #4]
 8005cbe:	6813      	ldr	r3, [r2, #0]
 8005cc0:	4615      	mov	r5, r2
 8005cc2:	b933      	cbnz	r3, 8005cd2 <_free_r+0x32>
 8005cc4:	6063      	str	r3, [r4, #4]
 8005cc6:	6014      	str	r4, [r2, #0]
 8005cc8:	b003      	add	sp, #12
 8005cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cce:	f000 bc2f 	b.w	8006530 <__malloc_unlock>
 8005cd2:	42a3      	cmp	r3, r4
 8005cd4:	d90b      	bls.n	8005cee <_free_r+0x4e>
 8005cd6:	6821      	ldr	r1, [r4, #0]
 8005cd8:	1862      	adds	r2, r4, r1
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bf04      	itt	eq
 8005cde:	681a      	ldreq	r2, [r3, #0]
 8005ce0:	685b      	ldreq	r3, [r3, #4]
 8005ce2:	6063      	str	r3, [r4, #4]
 8005ce4:	bf04      	itt	eq
 8005ce6:	1852      	addeq	r2, r2, r1
 8005ce8:	6022      	streq	r2, [r4, #0]
 8005cea:	602c      	str	r4, [r5, #0]
 8005cec:	e7ec      	b.n	8005cc8 <_free_r+0x28>
 8005cee:	461a      	mov	r2, r3
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	b10b      	cbz	r3, 8005cf8 <_free_r+0x58>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d9fa      	bls.n	8005cee <_free_r+0x4e>
 8005cf8:	6811      	ldr	r1, [r2, #0]
 8005cfa:	1855      	adds	r5, r2, r1
 8005cfc:	42a5      	cmp	r5, r4
 8005cfe:	d10b      	bne.n	8005d18 <_free_r+0x78>
 8005d00:	6824      	ldr	r4, [r4, #0]
 8005d02:	4421      	add	r1, r4
 8005d04:	1854      	adds	r4, r2, r1
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	6011      	str	r1, [r2, #0]
 8005d0a:	d1dd      	bne.n	8005cc8 <_free_r+0x28>
 8005d0c:	681c      	ldr	r4, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	4421      	add	r1, r4
 8005d14:	6011      	str	r1, [r2, #0]
 8005d16:	e7d7      	b.n	8005cc8 <_free_r+0x28>
 8005d18:	d902      	bls.n	8005d20 <_free_r+0x80>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	6003      	str	r3, [r0, #0]
 8005d1e:	e7d3      	b.n	8005cc8 <_free_r+0x28>
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	1961      	adds	r1, r4, r5
 8005d24:	428b      	cmp	r3, r1
 8005d26:	bf04      	itt	eq
 8005d28:	6819      	ldreq	r1, [r3, #0]
 8005d2a:	685b      	ldreq	r3, [r3, #4]
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	bf04      	itt	eq
 8005d30:	1949      	addeq	r1, r1, r5
 8005d32:	6021      	streq	r1, [r4, #0]
 8005d34:	6054      	str	r4, [r2, #4]
 8005d36:	e7c7      	b.n	8005cc8 <_free_r+0x28>
 8005d38:	b003      	add	sp, #12
 8005d3a:	bd30      	pop	{r4, r5, pc}
 8005d3c:	200000bc 	.word	0x200000bc

08005d40 <_malloc_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	1ccd      	adds	r5, r1, #3
 8005d44:	f025 0503 	bic.w	r5, r5, #3
 8005d48:	3508      	adds	r5, #8
 8005d4a:	2d0c      	cmp	r5, #12
 8005d4c:	bf38      	it	cc
 8005d4e:	250c      	movcc	r5, #12
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	4606      	mov	r6, r0
 8005d54:	db01      	blt.n	8005d5a <_malloc_r+0x1a>
 8005d56:	42a9      	cmp	r1, r5
 8005d58:	d903      	bls.n	8005d62 <_malloc_r+0x22>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	2000      	movs	r0, #0
 8005d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d62:	f000 fbdf 	bl	8006524 <__malloc_lock>
 8005d66:	4921      	ldr	r1, [pc, #132]	; (8005dec <_malloc_r+0xac>)
 8005d68:	680a      	ldr	r2, [r1, #0]
 8005d6a:	4614      	mov	r4, r2
 8005d6c:	b99c      	cbnz	r4, 8005d96 <_malloc_r+0x56>
 8005d6e:	4f20      	ldr	r7, [pc, #128]	; (8005df0 <_malloc_r+0xb0>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	b923      	cbnz	r3, 8005d7e <_malloc_r+0x3e>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 fb2a 	bl	80063d0 <_sbrk_r>
 8005d7c:	6038      	str	r0, [r7, #0]
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 fb25 	bl	80063d0 <_sbrk_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d123      	bne.n	8005dd2 <_malloc_r+0x92>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f000 fbce 	bl	8006530 <__malloc_unlock>
 8005d94:	e7e3      	b.n	8005d5e <_malloc_r+0x1e>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	1b5b      	subs	r3, r3, r5
 8005d9a:	d417      	bmi.n	8005dcc <_malloc_r+0x8c>
 8005d9c:	2b0b      	cmp	r3, #11
 8005d9e:	d903      	bls.n	8005da8 <_malloc_r+0x68>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	441c      	add	r4, r3
 8005da4:	6025      	str	r5, [r4, #0]
 8005da6:	e004      	b.n	8005db2 <_malloc_r+0x72>
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	42a2      	cmp	r2, r4
 8005dac:	bf0c      	ite	eq
 8005dae:	600b      	streq	r3, [r1, #0]
 8005db0:	6053      	strne	r3, [r2, #4]
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 fbbc 	bl	8006530 <__malloc_unlock>
 8005db8:	f104 000b 	add.w	r0, r4, #11
 8005dbc:	1d23      	adds	r3, r4, #4
 8005dbe:	f020 0007 	bic.w	r0, r0, #7
 8005dc2:	1ac2      	subs	r2, r0, r3
 8005dc4:	d0cc      	beq.n	8005d60 <_malloc_r+0x20>
 8005dc6:	1a1b      	subs	r3, r3, r0
 8005dc8:	50a3      	str	r3, [r4, r2]
 8005dca:	e7c9      	b.n	8005d60 <_malloc_r+0x20>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	6864      	ldr	r4, [r4, #4]
 8005dd0:	e7cc      	b.n	8005d6c <_malloc_r+0x2c>
 8005dd2:	1cc4      	adds	r4, r0, #3
 8005dd4:	f024 0403 	bic.w	r4, r4, #3
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d0e3      	beq.n	8005da4 <_malloc_r+0x64>
 8005ddc:	1a21      	subs	r1, r4, r0
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 faf6 	bl	80063d0 <_sbrk_r>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d1dd      	bne.n	8005da4 <_malloc_r+0x64>
 8005de8:	e7cf      	b.n	8005d8a <_malloc_r+0x4a>
 8005dea:	bf00      	nop
 8005dec:	200000bc 	.word	0x200000bc
 8005df0:	200000c0 	.word	0x200000c0

08005df4 <__sfputc_r>:
 8005df4:	6893      	ldr	r3, [r2, #8]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	b410      	push	{r4}
 8005dfc:	6093      	str	r3, [r2, #8]
 8005dfe:	da08      	bge.n	8005e12 <__sfputc_r+0x1e>
 8005e00:	6994      	ldr	r4, [r2, #24]
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	db01      	blt.n	8005e0a <__sfputc_r+0x16>
 8005e06:	290a      	cmp	r1, #10
 8005e08:	d103      	bne.n	8005e12 <__sfputc_r+0x1e>
 8005e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e0e:	f7ff bc69 	b.w	80056e4 <__swbuf_r>
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	1c58      	adds	r0, r3, #1
 8005e16:	6010      	str	r0, [r2, #0]
 8005e18:	7019      	strb	r1, [r3, #0]
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <__sfputs_r>:
 8005e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	18d5      	adds	r5, r2, r3
 8005e2c:	42ac      	cmp	r4, r5
 8005e2e:	d101      	bne.n	8005e34 <__sfputs_r+0x12>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e007      	b.n	8005e44 <__sfputs_r+0x22>
 8005e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e38:	463a      	mov	r2, r7
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ffda 	bl	8005df4 <__sfputc_r>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d1f3      	bne.n	8005e2c <__sfputs_r+0xa>
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e48 <_vfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	b09d      	sub	sp, #116	; 0x74
 8005e50:	4614      	mov	r4, r2
 8005e52:	4698      	mov	r8, r3
 8005e54:	4606      	mov	r6, r0
 8005e56:	b118      	cbz	r0, 8005e60 <_vfiprintf_r+0x18>
 8005e58:	6983      	ldr	r3, [r0, #24]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_vfiprintf_r+0x18>
 8005e5c:	f7ff fe1c 	bl	8005a98 <__sinit>
 8005e60:	4b89      	ldr	r3, [pc, #548]	; (8006088 <_vfiprintf_r+0x240>)
 8005e62:	429d      	cmp	r5, r3
 8005e64:	d11b      	bne.n	8005e9e <_vfiprintf_r+0x56>
 8005e66:	6875      	ldr	r5, [r6, #4]
 8005e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e6a:	07d9      	lsls	r1, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	059a      	lsls	r2, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e76:	f7ff fead 	bl	8005bd4 <__retarget_lock_acquire_recursive>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	071b      	lsls	r3, r3, #28
 8005e7e:	d501      	bpl.n	8005e84 <_vfiprintf_r+0x3c>
 8005e80:	692b      	ldr	r3, [r5, #16]
 8005e82:	b9eb      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x78>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fc7e 	bl	8005788 <__swsetup_r>
 8005e8c:	b1c0      	cbz	r0, 8005ec0 <_vfiprintf_r+0x78>
 8005e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e90:	07dc      	lsls	r4, r3, #31
 8005e92:	d50e      	bpl.n	8005eb2 <_vfiprintf_r+0x6a>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b01d      	add	sp, #116	; 0x74
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	4b7b      	ldr	r3, [pc, #492]	; (800608c <_vfiprintf_r+0x244>)
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	d101      	bne.n	8005ea8 <_vfiprintf_r+0x60>
 8005ea4:	68b5      	ldr	r5, [r6, #8]
 8005ea6:	e7df      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005ea8:	4b79      	ldr	r3, [pc, #484]	; (8006090 <_vfiprintf_r+0x248>)
 8005eaa:	429d      	cmp	r5, r3
 8005eac:	bf08      	it	eq
 8005eae:	68f5      	ldreq	r5, [r6, #12]
 8005eb0:	e7da      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d4ed      	bmi.n	8005e94 <_vfiprintf_r+0x4c>
 8005eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eba:	f7ff fe8c 	bl	8005bd6 <__retarget_lock_release_recursive>
 8005ebe:	e7e9      	b.n	8005e94 <_vfiprintf_r+0x4c>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ece:	2330      	movs	r3, #48	; 0x30
 8005ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006094 <_vfiprintf_r+0x24c>
 8005ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed8:	f04f 0901 	mov.w	r9, #1
 8005edc:	4623      	mov	r3, r4
 8005ede:	469a      	mov	sl, r3
 8005ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee4:	b10a      	cbz	r2, 8005eea <_vfiprintf_r+0xa2>
 8005ee6:	2a25      	cmp	r2, #37	; 0x25
 8005ee8:	d1f9      	bne.n	8005ede <_vfiprintf_r+0x96>
 8005eea:	ebba 0b04 	subs.w	fp, sl, r4
 8005eee:	d00b      	beq.n	8005f08 <_vfiprintf_r+0xc0>
 8005ef0:	465b      	mov	r3, fp
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff93 	bl	8005e22 <__sfputs_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f000 80aa 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	445a      	add	r2, fp
 8005f06:	9209      	str	r2, [sp, #36]	; 0x24
 8005f08:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a2 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1c:	f10a 0a01 	add.w	sl, sl, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f28:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f32:	4858      	ldr	r0, [pc, #352]	; (8006094 <_vfiprintf_r+0x24c>)
 8005f34:	f7fa f94c 	bl	80001d0 <memchr>
 8005f38:	9a04      	ldr	r2, [sp, #16]
 8005f3a:	b9d8      	cbnz	r0, 8005f74 <_vfiprintf_r+0x12c>
 8005f3c:	06d1      	lsls	r1, r2, #27
 8005f3e:	bf44      	itt	mi
 8005f40:	2320      	movmi	r3, #32
 8005f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f46:	0713      	lsls	r3, r2, #28
 8005f48:	bf44      	itt	mi
 8005f4a:	232b      	movmi	r3, #43	; 0x2b
 8005f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f50:	f89a 3000 	ldrb.w	r3, [sl]
 8005f54:	2b2a      	cmp	r3, #42	; 0x2a
 8005f56:	d015      	beq.n	8005f84 <_vfiprintf_r+0x13c>
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f04f 0c0a 	mov.w	ip, #10
 8005f62:	4621      	mov	r1, r4
 8005f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f68:	3b30      	subs	r3, #48	; 0x30
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d94e      	bls.n	800600c <_vfiprintf_r+0x1c4>
 8005f6e:	b1b0      	cbz	r0, 8005f9e <_vfiprintf_r+0x156>
 8005f70:	9207      	str	r2, [sp, #28]
 8005f72:	e014      	b.n	8005f9e <_vfiprintf_r+0x156>
 8005f74:	eba0 0308 	sub.w	r3, r0, r8
 8005f78:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	46a2      	mov	sl, r4
 8005f82:	e7d2      	b.n	8005f2a <_vfiprintf_r+0xe2>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbb      	ittet	lt
 8005f90:	425b      	neglt	r3, r3
 8005f92:	f042 0202 	orrlt.w	r2, r2, #2
 8005f96:	9307      	strge	r3, [sp, #28]
 8005f98:	9307      	strlt	r3, [sp, #28]
 8005f9a:	bfb8      	it	lt
 8005f9c:	9204      	strlt	r2, [sp, #16]
 8005f9e:	7823      	ldrb	r3, [r4, #0]
 8005fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa2:	d10c      	bne.n	8005fbe <_vfiprintf_r+0x176>
 8005fa4:	7863      	ldrb	r3, [r4, #1]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d135      	bne.n	8006016 <_vfiprintf_r+0x1ce>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fba:	3402      	adds	r4, #2
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060a4 <_vfiprintf_r+0x25c>
 8005fc2:	7821      	ldrb	r1, [r4, #0]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fa f902 	bl	80001d0 <memchr>
 8005fcc:	b140      	cbz	r0, 8005fe0 <_vfiprintf_r+0x198>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	eba0 000a 	sub.w	r0, r0, sl
 8005fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	3401      	adds	r4, #1
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	482c      	ldr	r0, [pc, #176]	; (8006098 <_vfiprintf_r+0x250>)
 8005fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fea:	2206      	movs	r2, #6
 8005fec:	f7fa f8f0 	bl	80001d0 <memchr>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d03f      	beq.n	8006074 <_vfiprintf_r+0x22c>
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <_vfiprintf_r+0x254>)
 8005ff6:	bb1b      	cbnz	r3, 8006040 <_vfiprintf_r+0x1f8>
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	3307      	adds	r3, #7
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006006:	443b      	add	r3, r7
 8006008:	9309      	str	r3, [sp, #36]	; 0x24
 800600a:	e767      	b.n	8005edc <_vfiprintf_r+0x94>
 800600c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006010:	460c      	mov	r4, r1
 8006012:	2001      	movs	r0, #1
 8006014:	e7a5      	b.n	8005f62 <_vfiprintf_r+0x11a>
 8006016:	2300      	movs	r3, #0
 8006018:	3401      	adds	r4, #1
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	4619      	mov	r1, r3
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4620      	mov	r0, r4
 8006024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006028:	3a30      	subs	r2, #48	; 0x30
 800602a:	2a09      	cmp	r2, #9
 800602c:	d903      	bls.n	8006036 <_vfiprintf_r+0x1ee>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0c5      	beq.n	8005fbe <_vfiprintf_r+0x176>
 8006032:	9105      	str	r1, [sp, #20]
 8006034:	e7c3      	b.n	8005fbe <_vfiprintf_r+0x176>
 8006036:	fb0c 2101 	mla	r1, ip, r1, r2
 800603a:	4604      	mov	r4, r0
 800603c:	2301      	movs	r3, #1
 800603e:	e7f0      	b.n	8006022 <_vfiprintf_r+0x1da>
 8006040:	ab03      	add	r3, sp, #12
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	462a      	mov	r2, r5
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_vfiprintf_r+0x258>)
 8006048:	a904      	add	r1, sp, #16
 800604a:	4630      	mov	r0, r6
 800604c:	f3af 8000 	nop.w
 8006050:	4607      	mov	r7, r0
 8006052:	1c78      	adds	r0, r7, #1
 8006054:	d1d6      	bne.n	8006004 <_vfiprintf_r+0x1bc>
 8006056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006058:	07d9      	lsls	r1, r3, #31
 800605a:	d405      	bmi.n	8006068 <_vfiprintf_r+0x220>
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	059a      	lsls	r2, r3, #22
 8006060:	d402      	bmi.n	8006068 <_vfiprintf_r+0x220>
 8006062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006064:	f7ff fdb7 	bl	8005bd6 <__retarget_lock_release_recursive>
 8006068:	89ab      	ldrh	r3, [r5, #12]
 800606a:	065b      	lsls	r3, r3, #25
 800606c:	f53f af12 	bmi.w	8005e94 <_vfiprintf_r+0x4c>
 8006070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006072:	e711      	b.n	8005e98 <_vfiprintf_r+0x50>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462a      	mov	r2, r5
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <_vfiprintf_r+0x258>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f880 	bl	8006184 <_printf_i>
 8006084:	e7e4      	b.n	8006050 <_vfiprintf_r+0x208>
 8006086:	bf00      	nop
 8006088:	08006620 	.word	0x08006620
 800608c:	08006640 	.word	0x08006640
 8006090:	08006600 	.word	0x08006600
 8006094:	08006660 	.word	0x08006660
 8006098:	0800666a 	.word	0x0800666a
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005e23 	.word	0x08005e23
 80060a4:	08006666 	.word	0x08006666

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4616      	mov	r6, r2
 80060ae:	4699      	mov	r9, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c4:	4607      	mov	r7, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b10a      	cbz	r2, 80060ce <_printf_common+0x26>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	0699      	lsls	r1, r3, #26
 80060d2:	bf42      	ittt	mi
 80060d4:	6833      	ldrmi	r3, [r6, #0]
 80060d6:	3302      	addmi	r3, #2
 80060d8:	6033      	strmi	r3, [r6, #0]
 80060da:	6825      	ldr	r5, [r4, #0]
 80060dc:	f015 0506 	ands.w	r5, r5, #6
 80060e0:	d106      	bne.n	80060f0 <_printf_common+0x48>
 80060e2:	f104 0a19 	add.w	sl, r4, #25
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	6832      	ldr	r2, [r6, #0]
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc26      	bgt.n	800613e <_printf_common+0x96>
 80060f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f4:	1e13      	subs	r3, r2, #0
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	bf18      	it	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	0692      	lsls	r2, r2, #26
 80060fe:	d42b      	bmi.n	8006158 <_printf_common+0xb0>
 8006100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d01e      	beq.n	800614c <_printf_common+0xa4>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	68e5      	ldr	r5, [r4, #12]
 8006112:	6832      	ldr	r2, [r6, #0]
 8006114:	f003 0306 	and.w	r3, r3, #6
 8006118:	2b04      	cmp	r3, #4
 800611a:	bf08      	it	eq
 800611c:	1aad      	subeq	r5, r5, r2
 800611e:	68a3      	ldr	r3, [r4, #8]
 8006120:	6922      	ldr	r2, [r4, #16]
 8006122:	bf0c      	ite	eq
 8006124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006128:	2500      	movne	r5, #0
 800612a:	4293      	cmp	r3, r2
 800612c:	bfc4      	itt	gt
 800612e:	1a9b      	subgt	r3, r3, r2
 8006130:	18ed      	addgt	r5, r5, r3
 8006132:	2600      	movs	r6, #0
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xc8>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xa8>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4649      	mov	r1, r9
 8006144:	4638      	mov	r0, r7
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xac>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c6      	b.n	80060e6 <_printf_common+0x3e>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	; 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c7      	b.n	8006100 <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4649      	mov	r1, r9
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa4>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x8e>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	4691      	mov	r9, r2
 800618c:	7e27      	ldrb	r7, [r4, #24]
 800618e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006190:	2f78      	cmp	r7, #120	; 0x78
 8006192:	4680      	mov	r8, r0
 8006194:	469a      	mov	sl, r3
 8006196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	; 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d8 	beq.w	8006356 <_printf_i+0x1d2>
 80061a6:	2f58      	cmp	r7, #88	; 0x58
 80061a8:	f000 80a3 	beq.w	80062f2 <_printf_i+0x16e>
 80061ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a001      	add	r0, pc, #4	; (adr r0, 80061c4 <_printf_i+0x40>)
 80061c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800633d 	.word	0x0800633d
 80061f4:	08006261 	.word	0x08006261
 80061f8:	0800631f 	.word	0x0800631f
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	0800635f 	.word	0x0800635f
 8006208:	080061ad 	.word	0x080061ad
 800620c:	08006261 	.word	0x08006261
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	08006327 	.word	0x08006327
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	600a      	str	r2, [r1, #0]
 8006224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e0a3      	b.n	8006378 <_printf_i+0x1f4>
 8006230:	6825      	ldr	r5, [r4, #0]
 8006232:	6808      	ldr	r0, [r1, #0]
 8006234:	062e      	lsls	r6, r5, #24
 8006236:	f100 0304 	add.w	r3, r0, #4
 800623a:	d50a      	bpl.n	8006252 <_printf_i+0xce>
 800623c:	6805      	ldr	r5, [r0, #0]
 800623e:	600b      	str	r3, [r1, #0]
 8006240:	2d00      	cmp	r5, #0
 8006242:	da03      	bge.n	800624c <_printf_i+0xc8>
 8006244:	232d      	movs	r3, #45	; 0x2d
 8006246:	426d      	negs	r5, r5
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	485e      	ldr	r0, [pc, #376]	; (80063c8 <_printf_i+0x244>)
 800624e:	230a      	movs	r3, #10
 8006250:	e019      	b.n	8006286 <_printf_i+0x102>
 8006252:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006256:	6805      	ldr	r5, [r0, #0]
 8006258:	600b      	str	r3, [r1, #0]
 800625a:	bf18      	it	ne
 800625c:	b22d      	sxthne	r5, r5
 800625e:	e7ef      	b.n	8006240 <_printf_i+0xbc>
 8006260:	680b      	ldr	r3, [r1, #0]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	1d18      	adds	r0, r3, #4
 8006266:	6008      	str	r0, [r1, #0]
 8006268:	0628      	lsls	r0, r5, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xec>
 800626c:	681d      	ldr	r5, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0xf2>
 8006270:	0669      	lsls	r1, r5, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xe8>
 8006274:	881d      	ldrh	r5, [r3, #0]
 8006276:	4854      	ldr	r0, [pc, #336]	; (80063c8 <_printf_i+0x244>)
 8006278:	2f6f      	cmp	r7, #111	; 0x6f
 800627a:	bf0c      	ite	eq
 800627c:	2308      	moveq	r3, #8
 800627e:	230a      	movne	r3, #10
 8006280:	2100      	movs	r1, #0
 8006282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006286:	6866      	ldr	r6, [r4, #4]
 8006288:	60a6      	str	r6, [r4, #8]
 800628a:	2e00      	cmp	r6, #0
 800628c:	bfa2      	ittt	ge
 800628e:	6821      	ldrge	r1, [r4, #0]
 8006290:	f021 0104 	bicge.w	r1, r1, #4
 8006294:	6021      	strge	r1, [r4, #0]
 8006296:	b90d      	cbnz	r5, 800629c <_printf_i+0x118>
 8006298:	2e00      	cmp	r6, #0
 800629a:	d04d      	beq.n	8006338 <_printf_i+0x1b4>
 800629c:	4616      	mov	r6, r2
 800629e:	fbb5 f1f3 	udiv	r1, r5, r3
 80062a2:	fb03 5711 	mls	r7, r3, r1, r5
 80062a6:	5dc7      	ldrb	r7, [r0, r7]
 80062a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062ac:	462f      	mov	r7, r5
 80062ae:	42bb      	cmp	r3, r7
 80062b0:	460d      	mov	r5, r1
 80062b2:	d9f4      	bls.n	800629e <_printf_i+0x11a>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10b      	bne.n	80062d0 <_printf_i+0x14c>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07df      	lsls	r7, r3, #31
 80062bc:	d508      	bpl.n	80062d0 <_printf_i+0x14c>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6861      	ldr	r1, [r4, #4]
 80062c2:	4299      	cmp	r1, r3
 80062c4:	bfde      	ittt	le
 80062c6:	2330      	movle	r3, #48	; 0x30
 80062c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062d0:	1b92      	subs	r2, r2, r6
 80062d2:	6122      	str	r2, [r4, #16]
 80062d4:	f8cd a000 	str.w	sl, [sp]
 80062d8:	464b      	mov	r3, r9
 80062da:	aa03      	add	r2, sp, #12
 80062dc:	4621      	mov	r1, r4
 80062de:	4640      	mov	r0, r8
 80062e0:	f7ff fee2 	bl	80060a8 <_printf_common>
 80062e4:	3001      	adds	r0, #1
 80062e6:	d14c      	bne.n	8006382 <_printf_i+0x1fe>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b004      	add	sp, #16
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	4835      	ldr	r0, [pc, #212]	; (80063c8 <_printf_i+0x244>)
 80062f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	680e      	ldr	r6, [r1, #0]
 80062fc:	061f      	lsls	r7, r3, #24
 80062fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006302:	600e      	str	r6, [r1, #0]
 8006304:	d514      	bpl.n	8006330 <_printf_i+0x1ac>
 8006306:	07d9      	lsls	r1, r3, #31
 8006308:	bf44      	itt	mi
 800630a:	f043 0320 	orrmi.w	r3, r3, #32
 800630e:	6023      	strmi	r3, [r4, #0]
 8006310:	b91d      	cbnz	r5, 800631a <_printf_i+0x196>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f023 0320 	bic.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	2310      	movs	r3, #16
 800631c:	e7b0      	b.n	8006280 <_printf_i+0xfc>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f043 0320 	orr.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	2378      	movs	r3, #120	; 0x78
 8006328:	4828      	ldr	r0, [pc, #160]	; (80063cc <_printf_i+0x248>)
 800632a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800632e:	e7e3      	b.n	80062f8 <_printf_i+0x174>
 8006330:	065e      	lsls	r6, r3, #25
 8006332:	bf48      	it	mi
 8006334:	b2ad      	uxthmi	r5, r5
 8006336:	e7e6      	b.n	8006306 <_printf_i+0x182>
 8006338:	4616      	mov	r6, r2
 800633a:	e7bb      	b.n	80062b4 <_printf_i+0x130>
 800633c:	680b      	ldr	r3, [r1, #0]
 800633e:	6826      	ldr	r6, [r4, #0]
 8006340:	6960      	ldr	r0, [r4, #20]
 8006342:	1d1d      	adds	r5, r3, #4
 8006344:	600d      	str	r5, [r1, #0]
 8006346:	0635      	lsls	r5, r6, #24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	d501      	bpl.n	8006350 <_printf_i+0x1cc>
 800634c:	6018      	str	r0, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0x1d2>
 8006350:	0671      	lsls	r1, r6, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0x1c8>
 8006354:	8018      	strh	r0, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	4616      	mov	r6, r2
 800635c:	e7ba      	b.n	80062d4 <_printf_i+0x150>
 800635e:	680b      	ldr	r3, [r1, #0]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	600a      	str	r2, [r1, #0]
 8006364:	681e      	ldr	r6, [r3, #0]
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	4630      	mov	r0, r6
 800636c:	f7f9 ff30 	bl	80001d0 <memchr>
 8006370:	b108      	cbz	r0, 8006376 <_printf_i+0x1f2>
 8006372:	1b80      	subs	r0, r0, r6
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	e7a8      	b.n	80062d4 <_printf_i+0x150>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	4632      	mov	r2, r6
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d0ab      	beq.n	80062e8 <_printf_i+0x164>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	079b      	lsls	r3, r3, #30
 8006394:	d413      	bmi.n	80063be <_printf_i+0x23a>
 8006396:	68e0      	ldr	r0, [r4, #12]
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	4298      	cmp	r0, r3
 800639c:	bfb8      	it	lt
 800639e:	4618      	movlt	r0, r3
 80063a0:	e7a4      	b.n	80062ec <_printf_i+0x168>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4632      	mov	r2, r6
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	47d0      	blx	sl
 80063ac:	3001      	adds	r0, #1
 80063ae:	d09b      	beq.n	80062e8 <_printf_i+0x164>
 80063b0:	3501      	adds	r5, #1
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	9903      	ldr	r1, [sp, #12]
 80063b6:	1a5b      	subs	r3, r3, r1
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dcf2      	bgt.n	80063a2 <_printf_i+0x21e>
 80063bc:	e7eb      	b.n	8006396 <_printf_i+0x212>
 80063be:	2500      	movs	r5, #0
 80063c0:	f104 0619 	add.w	r6, r4, #25
 80063c4:	e7f5      	b.n	80063b2 <_printf_i+0x22e>
 80063c6:	bf00      	nop
 80063c8:	08006671 	.word	0x08006671
 80063cc:	08006682 	.word	0x08006682

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f7fb f936 	bl	800164c <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	2000075c 	.word	0x2000075c

080063f0 <__sread>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	460c      	mov	r4, r1
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	f000 f8a0 	bl	800653c <_read_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	bfab      	itete	ge
 8006400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006402:	89a3      	ldrhlt	r3, [r4, #12]
 8006404:	181b      	addge	r3, r3, r0
 8006406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800640a:	bfac      	ite	ge
 800640c:	6563      	strge	r3, [r4, #84]	; 0x54
 800640e:	81a3      	strhlt	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__swrite>:
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	461f      	mov	r7, r3
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	05db      	lsls	r3, r3, #23
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d505      	bpl.n	8006430 <__swrite+0x1e>
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	2302      	movs	r3, #2
 800642a:	2200      	movs	r2, #0
 800642c:	f000 f868 	bl	8006500 <_lseek_r>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	f000 b817 	b.w	8006478 <_write_r>

0800644a <__sseek>:
 800644a:	b510      	push	{r4, lr}
 800644c:	460c      	mov	r4, r1
 800644e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006452:	f000 f855 	bl	8006500 <_lseek_r>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	bf15      	itete	ne
 800645c:	6560      	strne	r0, [r4, #84]	; 0x54
 800645e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006466:	81a3      	strheq	r3, [r4, #12]
 8006468:	bf18      	it	ne
 800646a:	81a3      	strhne	r3, [r4, #12]
 800646c:	bd10      	pop	{r4, pc}

0800646e <__sclose>:
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 b813 	b.w	800649c <_close_r>
	...

08006478 <_write_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_write_r+0x20>)
 800647c:	4604      	mov	r4, r0
 800647e:	4608      	mov	r0, r1
 8006480:	4611      	mov	r1, r2
 8006482:	2200      	movs	r2, #0
 8006484:	602a      	str	r2, [r5, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	f7fb f88f 	bl	80015aa <_write>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_write_r+0x1e>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_write_r+0x1e>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	2000075c 	.word	0x2000075c

0800649c <_close_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d06      	ldr	r5, [pc, #24]	; (80064b8 <_close_r+0x1c>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	602b      	str	r3, [r5, #0]
 80064a8:	f7fb f89b 	bl	80015e2 <_close>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_close_r+0x1a>
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_close_r+0x1a>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	2000075c 	.word	0x2000075c

080064bc <_fstat_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d07      	ldr	r5, [pc, #28]	; (80064dc <_fstat_r+0x20>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	4611      	mov	r1, r2
 80064c8:	602b      	str	r3, [r5, #0]
 80064ca:	f7fb f896 	bl	80015fa <_fstat>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d102      	bne.n	80064d8 <_fstat_r+0x1c>
 80064d2:	682b      	ldr	r3, [r5, #0]
 80064d4:	b103      	cbz	r3, 80064d8 <_fstat_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	bf00      	nop
 80064dc:	2000075c 	.word	0x2000075c

080064e0 <_isatty_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d06      	ldr	r5, [pc, #24]	; (80064fc <_isatty_r+0x1c>)
 80064e4:	2300      	movs	r3, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fb f895 	bl	800161a <_isatty>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_isatty_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_isatty_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	2000075c 	.word	0x2000075c

08006500 <_lseek_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4d07      	ldr	r5, [pc, #28]	; (8006520 <_lseek_r+0x20>)
 8006504:	4604      	mov	r4, r0
 8006506:	4608      	mov	r0, r1
 8006508:	4611      	mov	r1, r2
 800650a:	2200      	movs	r2, #0
 800650c:	602a      	str	r2, [r5, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	f7fb f88e 	bl	8001630 <_lseek>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_lseek_r+0x1e>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_lseek_r+0x1e>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	2000075c 	.word	0x2000075c

08006524 <__malloc_lock>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__malloc_lock+0x8>)
 8006526:	f7ff bb55 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	20000754 	.word	0x20000754

08006530 <__malloc_unlock>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__malloc_unlock+0x8>)
 8006532:	f7ff bb50 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	20000754 	.word	0x20000754

0800653c <_read_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4d07      	ldr	r5, [pc, #28]	; (800655c <_read_r+0x20>)
 8006540:	4604      	mov	r4, r0
 8006542:	4608      	mov	r0, r1
 8006544:	4611      	mov	r1, r2
 8006546:	2200      	movs	r2, #0
 8006548:	602a      	str	r2, [r5, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	f7fb f810 	bl	8001570 <_read>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_read_r+0x1e>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_read_r+0x1e>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	2000075c 	.word	0x2000075c

08006560 <_init>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr

0800656c <_fini>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr

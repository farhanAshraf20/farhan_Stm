
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b2c  08005b2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b34  08005b34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000000c  08005b48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08005b48  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e309  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb9  00000000  00000000  0003e345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  00041300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00042d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028229  00000000  00000000  00044628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d381  00000000  00000000  0006c851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa078  00000000  00000000  00089bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183c4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007268  00000000  00000000  00183ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005acc 	.word	0x08005acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005acc 	.word	0x08005acc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ffc4 	bl	8001452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f837 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa67 	bl	80009a0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d2:	f000 f885 	bl	80005e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d6:	f000 f8bb 	bl	8000650 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004da:	f000 f8f7 	bl	80006cc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004de:	f000 f91b 	bl	8000718 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f9cf 	bl	8000884 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 f9fd 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004ea:	f000 fa2b 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80004ee:	f000 f951 	bl	8000794 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x74>)
 80004f6:	f003 fbeb 	bl	8003cd0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(CH1_DC < 65535)
 80004fa:	e008      	b.n	800050e <main+0x4e>
	  {
	  TIM3->CCR1 = CH1_DC;
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <main+0x78>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6353      	str	r3, [r2, #52]	; 0x34
	  CH1_DC += 70;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3346      	adds	r3, #70	; 0x46
 8000506:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f001 f817 	bl	800153c <HAL_Delay>
	  while(CH1_DC < 65535)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000514:	4293      	cmp	r3, r2
 8000516:	ddf1      	ble.n	80004fc <main+0x3c>
	  }
	  while(CH1_DC > 0)
 8000518:	e008      	b.n	800052c <main+0x6c>
	  {
	  TIM3->CCR1 = CH1_DC;
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x78>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6353      	str	r3, [r2, #52]	; 0x34
	  CH1_DC -= 70;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3b46      	subs	r3, #70	; 0x46
 8000524:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f001 f808 	bl	800153c <HAL_Delay>
	  while(CH1_DC > 0)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	dcf3      	bgt.n	800051a <main+0x5a>
	  while(CH1_DC < 65535)
 8000532:	e7ec      	b.n	800050e <main+0x4e>
 8000534:	20000560 	.word	0x20000560
 8000538:	40000400 	.word	0x40000400

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 fab6 	bl	8005abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f001 fe8f 	bl	8002284 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 fbd6 	bl	8000d1c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000570:	2310      	movs	r3, #16
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	; 0x60
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800058c:	2328      	movs	r3, #40	; 0x28
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 ff91 	bl	80024c8 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005ac:	f000 fbb6 	bl	8000d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2104      	movs	r1, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fb63 	bl	8002c94 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d4:	f000 fba2 	bl	8000d1c <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3758      	adds	r7, #88	; 0x58
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_DFSDM1_Init+0x68>)
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <MX_DFSDM1_Init+0x6c>)
 80005e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_DFSDM1_Init+0x68>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_DFSDM1_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_DFSDM1_Init+0x68>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_DFSDM1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_DFSDM1_Init+0x68>)
 800060a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000618:	2204      	movs	r2, #4
 800061a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_DFSDM1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000624:	2201      	movs	r2, #1
 8000626:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_DFSDM1_Init+0x68>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_DFSDM1_Init+0x68>)
 8000636:	f001 f8b7 	bl	80017a8 <HAL_DFSDM_ChannelInit>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000640:	f000 fb6c 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000050 	.word	0x20000050
 800064c:	40016020 	.word	0x40016020

08000650 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C2_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C2_Init+0x74>)
 800065c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000660:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_I2C2_Init+0x74>)
 800066a:	2201      	movs	r2, #1
 800066c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_I2C2_Init+0x74>)
 800068e:	f001 fb7c 	bl	8001d8a <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 fb40 	bl	8000d1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C2_Init+0x74>)
 80006a0:	f001 fc02 	bl	8001ea8 <HAL_I2CEx_ConfigAnalogFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006aa:	f000 fb37 	bl	8000d1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C2_Init+0x74>)
 80006b2:	f001 fc44 	bl	8001f3e <HAL_I2CEx_ConfigDigitalFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006bc:	f000 fb2e 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000514 	.word	0x20000514
 80006c8:	40005800 	.word	0x40005800

080006cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <MX_QUADSPI_Init+0x48>)
 80006d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006d8:	2202      	movs	r2, #2
 80006da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006de:	2204      	movs	r2, #4
 80006e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006ea:	2217      	movs	r2, #23
 80006ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006fc:	f001 fe28 	bl	8002350 <HAL_QSPI_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000706:	f000 fb09 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000694 	.word	0x20000694
 8000714:	a0001000 	.word	0xa0001000

08000718 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI3_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI3_Init+0x74>)
 8000732:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000736:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI3_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI3_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI3_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI3_Init+0x74>)
 8000778:	f003 f94e 	bl	8003a18 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 facb 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200005ac 	.word	0x200005ac
 8000790:	40003c00 	.word	0x40003c00

08000794 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	; 0x38
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_TIM3_Init+0xe8>)
 80007c8:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_TIM3_Init+0xec>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_TIM3_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_TIM3_Init+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM3_Init+0xe8>)
 80007da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_TIM3_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_TIM3_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <MX_TIM3_Init+0xe8>)
 80007ee:	f003 f9b6 	bl	8003b5e <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007f8:	f000 fa90 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	4619      	mov	r1, r3
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <MX_TIM3_Init+0xe8>)
 800080a:	f003 fc7b 	bl	8004104 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000814:	f000 fa82 	bl	8000d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_TIM3_Init+0xe8>)
 800081a:	f003 f9f7 	bl	8003c0c <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000824:	f000 fa7a 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_TIM3_Init+0xe8>)
 8000838:	f004 f95e 	bl	8004af8 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000842:	f000 fa6b 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000846:	2360      	movs	r3, #96	; 0x60
 8000848:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM3_Init+0xe8>)
 800085e:	f003 fb3d 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000868:	f000 fa58 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM3_Init+0xe8>)
 800086e:	f000 fbe9 	bl	8001044 <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3738      	adds	r7, #56	; 0x38
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000560 	.word	0x20000560
 8000880:	40000400 	.word	0x40000400

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	f004 f99e 	bl	8004c08 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 fa23 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000610 	.word	0x20000610
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART3_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000928:	f004 f96e 	bl	8004c08 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f9f3 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000088 	.word	0x20000088
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800094e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2206      	movs	r2, #6
 8000954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2202      	movs	r2, #2
 8000960:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	f001 fb25 	bl	8001fd6 <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f9c3 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000010c 	.word	0x2000010c

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	4bbb      	ldr	r3, [pc, #748]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4aba      	ldr	r2, [pc, #744]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4bb8      	ldr	r3, [pc, #736]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4bb5      	ldr	r3, [pc, #724]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4ab4      	ldr	r2, [pc, #720]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4bb2      	ldr	r3, [pc, #712]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4baf      	ldr	r3, [pc, #700]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4aae      	ldr	r2, [pc, #696]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4bac      	ldr	r3, [pc, #688]	; (8000ca4 <MX_GPIO_Init+0x304>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4ba9      	ldr	r3, [pc, #676]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4aa8      	ldr	r2, [pc, #672]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4ba6      	ldr	r3, [pc, #664]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4ba3      	ldr	r3, [pc, #652]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4aa2      	ldr	r2, [pc, #648]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4ba0      	ldr	r3, [pc, #640]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	4b9d      	ldr	r3, [pc, #628]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a9c      	ldr	r2, [pc, #624]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b9a      	ldr	r3, [pc, #616]	; (8000ca4 <MX_GPIO_Init+0x304>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a4c:	4896      	ldr	r0, [pc, #600]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000a4e:	f001 f961 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 f95a 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a60:	2200      	movs	r2, #0
 8000a62:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000a66:	4891      	ldr	r0, [pc, #580]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000a68:	f001 f954 	bl	8001d14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a72:	488f      	ldr	r0, [pc, #572]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000a74:	f001 f94e 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	488c      	ldr	r0, [pc, #560]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000a80:	f001 f948 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a8a:	488a      	ldr	r0, [pc, #552]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000a8c:	f001 f942 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2120      	movs	r1, #32
 8000a94:	4885      	ldr	r0, [pc, #532]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000a96:	f001 f93d 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4882      	ldr	r0, [pc, #520]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000aa0:	f001 f938 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000aa4:	f240 1315 	movw	r3, #277	; 0x115
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	487a      	ldr	r0, [pc, #488]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000abe:	f000 ff7f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ac2:	236a      	movs	r3, #106	; 0x6a
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4874      	ldr	r0, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x308>)
 8000ad8:	f000 ff72 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4870      	ldr	r0, [pc, #448]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000af4:	f000 ff64 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000af8:	233f      	movs	r3, #63	; 0x3f
 8000afa:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000afc:	230b      	movs	r3, #11
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	486a      	ldr	r0, [pc, #424]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000b0c:	f000 ff58 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b10:	2303      	movs	r3, #3
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b20:	2308      	movs	r3, #8
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f000 ff47 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b32:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 ff37 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b52:	2308      	movs	r3, #8
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 ff26 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 ff19 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b8e:	23e0      	movs	r3, #224	; 0xe0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 ff08 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4839      	ldr	r0, [pc, #228]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000bc6:	f000 fefb 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4833      	ldr	r0, [pc, #204]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000bde:	f000 feef 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000be2:	f24f 0324 	movw	r3, #61476	; 0xf024
 8000be6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	482c      	ldr	r0, [pc, #176]	; (8000cac <MX_GPIO_Init+0x30c>)
 8000bfc:	f000 fee0 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c00:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c04:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000c18:	f000 fed2 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c1c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	481e      	ldr	r0, [pc, #120]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000c36:	f000 fec3 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000c54:	f000 feb4 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_GPIO_Init+0x314>)
 8000c70:	f000 fea6 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c84:	2305      	movs	r3, #5
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <MX_GPIO_Init+0x310>)
 8000c90:	f000 fe96 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c94:	2378      	movs	r3, #120	; 0x78
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e009      	b.n	8000cb8 <MX_GPIO_Init+0x318>
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48001000 	.word	0x48001000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000c00 	.word	0x48000c00
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_GPIO_Init+0x374>)
 8000cc6:	f000 fe7b 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd0:	2312      	movs	r3, #18
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0x378>)
 8000ce8:	f000 fe6a 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2017      	movs	r0, #23
 8000cf2:	f000 fd22 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf6:	2017      	movs	r0, #23
 8000cf8:	f000 fd3b 	bl	8001772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2028      	movs	r0, #40	; 0x28
 8000d02:	f000 fd1a 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d06:	2028      	movs	r0, #40	; 0x28
 8000d08:	f000 fd33 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	; 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48000400 	.word	0x48000400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_MspInit+0x44>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6613      	str	r3, [r2, #96]	; 0x60
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_MspInit+0x44>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x44>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6593      	str	r3, [r2, #88]	; 0x58
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x44>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ac      	sub	sp, #176	; 0xb0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2288      	movs	r2, #136	; 0x88
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fe93 	bl	8005abc <memset>
  if(DFSDM1_Init == 0)
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d142      	bne.n	8000e24 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 f976 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000dba:	f7ff ffaf 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dee:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e16:	f000 fdd3 	bl	80019c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a02      	ldr	r2, [pc, #8]	; (8000e2c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e22:	6013      	str	r3, [r2, #0]
  }

}
 8000e24:	bf00      	nop
 8000e26:	37b0      	adds	r7, #176	; 0xb0
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48001000 	.word	0x48001000

08000e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ac      	sub	sp, #176	; 0xb0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2288      	movs	r2, #136	; 0x88
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fe2f 	bl	8005abc <memset>
  if(hi2c->Instance==I2C2)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_I2C_MspInit+0xb0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13b      	bne.n	8000ee0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 f913 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e80:	f7ff ff4c 	bl	8000d1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <HAL_I2C_MspInit+0xb8>)
 8000ec4:	f000 fd7c 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_I2C_MspInit+0xb4>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	37b0      	adds	r7, #176	; 0xb0
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40005800 	.word	0x40005800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_QSPI_MspInit+0x7c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d128      	bne.n	8000f68 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6513      	str	r3, [r2, #80]	; 0x50
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_QSPI_MspInit+0x80>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f46:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f4a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f58:	230a      	movs	r3, #10
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_QSPI_MspInit+0x84>)
 8000f64:	f000 fd2c 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	a0001000 	.word	0xa0001000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48001000 	.word	0x48001000

08000f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_SPI_MspInit+0x7c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d128      	bne.n	8000ff0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_SPI_MspInit+0x80>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_SPI_MspInit+0x84>)
 8000fec:	f000 fce8 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40003c00 	.word	0x40003c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000800 	.word	0x48000800

08001004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0x38>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10b      	bne.n	800102e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_TIM_Base_MspInit+0x3c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_Base_MspInit+0x3c>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_TIM_Base_MspInit+0x3c>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40000400 	.word	0x40000400
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_TIM_MspPostInit+0x64>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d11b      	bne.n	800109e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_TIM_MspPostInit+0x68>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_TIM_MspPostInit+0x68>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_TIM_MspPostInit+0x68>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800107e:	2310      	movs	r3, #16
 8001080:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_TIM_MspPostInit+0x6c>)
 800109a:	f000 fc91 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40000400 	.word	0x40000400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ae      	sub	sp, #184	; 0xb8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2288      	movs	r2, #136	; 0x88
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 fcf1 	bl	8005abc <memset>
  if(huart->Instance==USART1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a42      	ldr	r2, [pc, #264]	; (80011e8 <HAL_UART_MspInit+0x134>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d13b      	bne.n	800115c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010e8:	2300      	movs	r3, #0
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 ffd5 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010fc:	f7ff fe0e 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6613      	str	r3, [r2, #96]	; 0x60
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_UART_MspInit+0x138>)
 800110e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_UART_MspInit+0x138>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_UART_MspInit+0x138>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001148:	2307      	movs	r3, #7
 800114a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001152:	4619      	mov	r1, r3
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <HAL_UART_MspInit+0x13c>)
 8001156:	f000 fc33 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800115a:	e040      	b.n	80011de <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <HAL_UART_MspInit+0x140>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d13b      	bne.n	80011de <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001166:	2304      	movs	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4618      	mov	r0, r3
 8001174:	f001 ff94 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800117e:	f7ff fdcd 	bl	8000d1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_UART_MspInit+0x138>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_UART_MspInit+0x138>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <HAL_UART_MspInit+0x138>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0x138>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011cc:	2307      	movs	r3, #7
 80011ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <HAL_UART_MspInit+0x144>)
 80011da:	f000 fbf1 	bl	80019c0 <HAL_GPIO_Init>
}
 80011de:	bf00      	nop
 80011e0:	37b8      	adds	r7, #184	; 0xb8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40021000 	.word	0x40021000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	40004800 	.word	0x40004800
 80011f8:	48000c00 	.word	0x48000c00

080011fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ac      	sub	sp, #176	; 0xb0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2288      	movs	r2, #136	; 0x88
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 fc4d 	bl	8005abc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122a:	d17c      	bne.n	8001326 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001230:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001232:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001242:	2318      	movs	r3, #24
 8001244:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f001 ff1f 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001268:	f7ff fd58 	bl	8000d1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_PCD_MspInit+0x134>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <HAL_PCD_MspInit+0x134>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_PCD_MspInit+0x134>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f000 fb8d 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c0:	230a      	movs	r3, #10
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f000 fb76 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d114      	bne.n	8001322 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_PCD_MspInit+0x134>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6593      	str	r3, [r2, #88]	; 0x58
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_PCD_MspInit+0x134>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001310:	f001 f80e 	bl	8002330 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_PCD_MspInit+0x134>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_PCD_MspInit+0x134>)
 800131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800131e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001320:	e001      	b.n	8001326 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001322:	f001 f805 	bl	8002330 <HAL_PWREx_EnableVddUSB>
}
 8001326:	bf00      	nop
 8001328:	37b0      	adds	r7, #176	; 0xb0
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f8bc 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800138c:	2020      	movs	r0, #32
 800138e:	f000 fcd9 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001392:	2040      	movs	r0, #64	; 0x40
 8001394:	f000 fcd6 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001398:	2080      	movs	r0, #128	; 0x80
 800139a:	f000 fcd3 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800139e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013a2:	f000 fccf 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013b2:	f000 fcc7 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ba:	f000 fcc3 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c2:	f000 fcbf 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80013c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ca:	f000 fcbb 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013d2:	f000 fcb7 	bl	8001d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001404:	f7ff ffea 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopForever+0x6>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopForever+0xe>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopForever+0x16>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f004 fb21 	bl	8005a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001432:	f7ff f845 	bl	80004c0 <main>

08001436 <LoopForever>:

LoopForever:
    b LoopForever
 8001436:	e7fe      	b.n	8001436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001444:	08005b3c 	.word	0x08005b3c
  ldr r2, =_sbss
 8001448:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800144c:	200006dc 	.word	0x200006dc

08001450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC1_2_IRQHandler>

08001452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f961 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f80e 	bl	8001484 <HAL_InitTick>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	e001      	b.n	8001478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001474:	f7ff fc58 	bl	8000d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001478:	79fb      	ldrb	r3, [r7, #7]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_InitTick+0x6c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_InitTick+0x70>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_InitTick+0x6c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f96d 	bl	800178e <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d809      	bhi.n	80014d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f000 f937 	bl	800173a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_InitTick+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e001      	b.n	80014e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	200006d8 	.word	0x200006d8

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200006d8 	.word	0x200006d8

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0ac      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f8b2 	bl	8001928 <DFSDM_GetChannelFromInstance>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_DFSDM_ChannelInit+0x174>)
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e09f      	b.n	8001914 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff facb 	bl	8000d70 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80017da:	4b51      	ldr	r3, [pc, #324]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a4f      	ldr	r2, [pc, #316]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80017e4:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <HAL_DFSDM_ChannelInit+0x178>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80017f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4948      	ldr	r1, [pc, #288]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a46      	ldr	r2, [pc, #280]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800180c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001810:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	791b      	ldrb	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800181a:	4b42      	ldr	r3, [pc, #264]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	493f      	ldr	r1, [pc, #252]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <HAL_DFSDM_ChannelInit+0x17c>)
 8001832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001836:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001846:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001856:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800185c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 020f 	bic.w	r2, r2, #15
 8001874:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800189c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f002 0207 	and.w	r2, r2, #7
 80018c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f810 	bl	8001928 <DFSDM_GetChannelFromInstance>
 8001908:	4602      	mov	r2, r0
 800190a:	4904      	ldr	r1, [pc, #16]	; (800191c <HAL_DFSDM_ChannelInit+0x174>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000030 	.word	0x20000030
 8001920:	2000002c 	.word	0x2000002c
 8001924:	40016000 	.word	0x40016000

08001928 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d102      	bne.n	800193e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e02b      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <DFSDM_GetChannelFromInstance+0x80>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d102      	bne.n	800194c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e024      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <DFSDM_GetChannelFromInstance+0x84>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e01d      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <DFSDM_GetChannelFromInstance+0x88>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001962:	2304      	movs	r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e016      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d102      	bne.n	8001976 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001970:	2305      	movs	r3, #5
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e00f      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <DFSDM_GetChannelFromInstance+0x90>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d102      	bne.n	8001984 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800197e:	2306      	movs	r3, #6
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e008      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <DFSDM_GetChannelFromInstance+0x94>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800198c:	2307      	movs	r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e001      	b.n	8001996 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40016000 	.word	0x40016000
 80019a8:	40016020 	.word	0x40016020
 80019ac:	40016040 	.word	0x40016040
 80019b0:	40016080 	.word	0x40016080
 80019b4:	400160a0 	.word	0x400160a0
 80019b8:	400160c0 	.word	0x400160c0
 80019bc:	400160e0 	.word	0x400160e0

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e17f      	b.n	8001cd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8171 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d118      	bne.n	8001aa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ac 	beq.w	8001cca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x242>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x23e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x23a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x236>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x232>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x22e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x22a>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x244>
 8001c02:	2300      	movs	r3, #0
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c14:	4937      	ldr	r1, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x334>)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c46:	4a32      	ldr	r2, [pc, #200]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc4:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_GPIO_Init+0x350>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f ae78 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48001000 	.word	0x48001000
 8001d08:	48001400 	.word	0x48001400
 8001d0c:	48001800 	.word	0x48001800
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d006      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f806 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e081      	b.n	8001ea0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f841 	bl	8000e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d104      	bne.n	8001e24 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69d9      	ldr	r1, [r3, #28]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1a      	ldr	r2, [r3, #32]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d138      	bne.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e032      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d139      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e033      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	; 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd8:	b08f      	sub	sp, #60	; 0x3c
 8001fda:	af0a      	add	r7, sp, #40	; 0x28
 8001fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e116      	b.n	8002216 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff f8fa 	bl	80011fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 faa1 	bl	800556e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	687e      	ldr	r6, [r7, #4]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002046:	e885 0003 	stmia.w	r5, {r0, r1}
 800204a:	1d33      	adds	r3, r6, #4
 800204c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f003 fa61 	bl	8005516 <USB_CoreInit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0d7      	b.n	8002216 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f003 fa8f 	bl	8005590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e04a      	b.n	800210e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	333d      	adds	r3, #61	; 0x3d
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	333c      	adds	r3, #60	; 0x3c
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	b298      	uxth	r0, r3
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	3342      	adds	r3, #66	; 0x42
 80020b4:	4602      	mov	r2, r0
 80020b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	333f      	adds	r3, #63	; 0x3f
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3344      	adds	r3, #68	; 0x44
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3348      	adds	r3, #72	; 0x48
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3350      	adds	r3, #80	; 0x50
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	3301      	adds	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3af      	bcc.n	8002078 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e044      	b.n	80021a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	1a9b      	subs	r3, r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002146:	7bfa      	ldrb	r2, [r7, #15]
 8002148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3301      	adds	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d3b5      	bcc.n	800211e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	687e      	ldr	r6, [r7, #4]
 80021ba:	466d      	mov	r5, sp
 80021bc:	f106 0410 	add.w	r4, r6, #16
 80021c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80021d0:	1d33      	adds	r3, r6, #4
 80021d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f003 fa27 	bl	8005628 <USB_DevInit>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e014      	b.n	8002216 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	2b01      	cmp	r3, #1
 8002202:	d102      	bne.n	800220a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f80a 	bl	800221e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fbcf 	bl	80059b2 <USB_DevDisconnect>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800221e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	f043 0303 	orr.w	r3, r3, #3
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_PWREx_GetVoltageRange+0x18>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002292:	d130      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800229c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a0:	d038      	beq.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2232      	movs	r2, #50	; 0x32
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9b      	lsrs	r3, r3, #18
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c8:	e002      	b.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022dc:	d102      	bne.n	80022e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f2      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	d110      	bne.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e00f      	b.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d007      	beq.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800230c:	4a05      	ldr	r2, [pc, #20]	; (8002324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40007000 	.word	0x40007000
 8002328:	20000000 	.word	0x20000000
 800232c:	431bde83 	.word	0x431bde83

08002330 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_PWREx_EnableVddUSB+0x1c>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6053      	str	r3, [r2, #4]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000

08002350 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff f8e4 	bl	8001524 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e063      	b.n	8002430 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe fdb9 	bl	8000ef4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002382:	f241 3188 	movw	r1, #5000	; 0x1388
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f858 	bl	800243c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	3b01      	subs	r3, #1
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f850 	bl	8002458 <QSPI_WaitFlagStateUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d131      	bne.n	8002426 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023cc:	f023 0310 	bic.w	r3, r3, #16
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6852      	ldr	r2, [r2, #4]
 80023d4:	0611      	lsls	r1, r2, #24
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_QSPI_Init+0xe8>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6912      	ldr	r2, [r2, #16]
 80023f2:	0411      	lsls	r1, r2, #16
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6952      	ldr	r2, [r2, #20]
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6992      	ldr	r2, [r2, #24]
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	430b      	orrs	r3, r1
 8002406:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800242e:	7afb      	ldrb	r3, [r7, #11]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	ffe0f8fe 	.word	0xffe0f8fe

0800243c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002468:	e01a      	b.n	80024a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d016      	beq.n	80024a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff f857 	bl	8001524 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2204      	movs	r2, #4
 800248c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e00e      	b.n	80024be <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf14      	ite	ne
 80024ae:	2301      	movne	r3, #1
 80024b0:	2300      	moveq	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1d6      	bne.n	800246a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e3d4      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024da:	4ba1      	ldr	r3, [pc, #644]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e4:	4b9e      	ldr	r3, [pc, #632]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80e4 	beq.w	80026c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_RCC_OscConfig+0x4a>
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	f040 808b 	bne.w	8002620 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 8087 	bne.w	8002620 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e3ac      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_RCC_OscConfig+0x7c>
 800253a:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002542:	e005      	b.n	8002550 <HAL_RCC_OscConfig+0x88>
 8002544:	4b86      	ldr	r3, [pc, #536]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002550:	4293      	cmp	r3, r2
 8002552:	d223      	bcs.n	800259c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fd41 	bl	8002fe0 <RCC_SetFlashLatencyFromMSIRange>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e38d      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002568:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a7c      	ldr	r2, [pc, #496]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800256e:	f043 0308 	orr.w	r3, r3, #8
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4977      	ldr	r1, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4972      	ldr	r1, [pc, #456]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
 800259a:	e025      	b.n	80025e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	496a      	ldr	r1, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ba:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	4965      	ldr	r1, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fd01 	bl	8002fe0 <RCC_SetFlashLatencyFromMSIRange>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e34d      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e8:	f000 fc36 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	495a      	ldr	r1, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x29c>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x2a0>)
 8002606:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <HAL_RCC_OscConfig+0x2a4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe ff39 	bl	8001484 <HAL_InitTick>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d052      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	e331      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d032      	beq.n	800268e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002628:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002634:	f7fe ff76 	bl	8001524 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263c:	f7fe ff72 	bl	8001524 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e31a      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	493b      	ldr	r1, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	4936      	ldr	r1, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
 800268c:	e01a      	b.n	80026c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a33      	ldr	r2, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269a:	f7fe ff43 	bl	8001524 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a2:	f7fe ff3f 	bl	8001524 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e2e7      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x1da>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d074      	beq.n	80027ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x21a>
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d10e      	bne.n	80026fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d10b      	bne.n	80026fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d064      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d160      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e2c4      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x24a>
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a15      	ldr	r2, [pc, #84]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e01d      	b.n	800274e <HAL_RCC_OscConfig+0x286>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x26e>
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x286>
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_RCC_OscConfig+0x298>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01c      	beq.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fee5 	bl	8001524 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275c:	e011      	b.n	8002782 <HAL_RCC_OscConfig+0x2ba>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	08005ae4 	.word	0x08005ae4
 8002768:	20000000 	.word	0x20000000
 800276c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fed8 	bl	8001524 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e280      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	4baf      	ldr	r3, [pc, #700]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x2a8>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fec8 	bl	8001524 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fec4 	bl	8001524 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e26c      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027aa:	4ba5      	ldr	r3, [pc, #660]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x2d0>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d060      	beq.n	8002888 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_OscConfig+0x310>
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d119      	bne.n	8002806 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d116      	bne.n	8002806 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x328>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e249      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4990      	ldr	r1, [pc, #576]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002804:	e040      	b.n	8002888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d023      	beq.n	8002856 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280e:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a8b      	ldr	r2, [pc, #556]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fe83 	bl	8001524 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fe7f 	bl	8001524 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e227      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	497c      	ldr	r1, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e018      	b.n	8002888 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a79      	ldr	r2, [pc, #484]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 800285c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fe5f 	bl	8001524 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe fe5b 	bl	8001524 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e203      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d03c      	beq.n	800290e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289c:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fe3a 	bl	8001524 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b4:	f7fe fe36 	bl	8001524 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1de      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ef      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3ec>
 80028d4:	e01b      	b.n	800290e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80028d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe fe1d 	bl	8001524 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fe19 	bl	8001524 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1c1      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ef      	bne.n	80028ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80a6 	beq.w	8002a68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_OscConfig+0x57c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002954:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x57c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3a      	ldr	r2, [pc, #232]	; (8002a44 <HAL_RCC_OscConfig+0x57c>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002960:	f7fe fde0 	bl	8001524 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe fddc 	bl	8001524 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e184      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCC_OscConfig+0x57c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_RCC_OscConfig+0x4d8>
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299e:	e024      	b.n	80029ea <HAL_RCC_OscConfig+0x522>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d110      	bne.n	80029ca <HAL_RCC_OscConfig+0x502>
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c8:	e00f      	b.n	80029ea <HAL_RCC_OscConfig+0x522>
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fd97 	bl	8001524 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fd93 	bl	8001524 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e139      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ed      	beq.n	80029fa <HAL_RCC_OscConfig+0x532>
 8002a1e:	e01a      	b.n	8002a56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fd80 	bl	8001524 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fd7c 	bl	8001524 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d906      	bls.n	8002a48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e122      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a48:	4b90      	ldr	r3, [pc, #576]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e8      	bne.n	8002a28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	4a8a      	ldr	r2, [pc, #552]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8108 	beq.w	8002c82 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	f040 80d0 	bne.w	8002c1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a7c:	4b83      	ldr	r3, [pc, #524]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d130      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d127      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11f      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002abc:	2a07      	cmp	r2, #7
 8002abe:	bf14      	ite	ne
 8002ac0:	2201      	movne	r2, #1
 8002ac2:	2200      	moveq	r2, #0
 8002ac4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d06e      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d069      	beq.n	8002bcc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b7      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b20:	f7fe fd00 	bl	8001524 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fcfc 	bl	8001524 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0a4      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b46:	4b51      	ldr	r3, [pc, #324]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x7c8>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b60:	0212      	lsls	r2, r2, #8
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b68:	0852      	lsrs	r2, r2, #1
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	0552      	lsls	r2, r2, #21
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0652      	lsls	r2, r2, #25
 8002b7a:	4311      	orrs	r1, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b80:	0912      	lsrs	r2, r2, #4
 8002b82:	0452      	lsls	r2, r2, #17
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4941      	ldr	r1, [pc, #260]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3e      	ldr	r2, [pc, #248]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b98:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a3b      	ldr	r2, [pc, #236]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba4:	f7fe fcbe 	bl	8001524 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe fcba 	bl	8001524 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e062      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bca:	e05a      	b.n	8002c82 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e059      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d152      	bne.n	8002c82 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf4:	f7fe fc96 	bl	8001524 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fc92 	bl	8001524 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e03a      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x734>
 8002c1a:	e032      	b.n	8002c82 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d02d      	beq.n	8002c7e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fc65 	bl	8001524 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fc61 	bl	8001524 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e009      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_OscConfig+0x7c4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x796>
 8002c7c:	e001      	b.n	8002c82 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	f99d808c 	.word	0xf99d808c

08002c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0c8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d910      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f023 0207 	bic.w	r2, r3, #7
 8002cbe:	4961      	ldr	r1, [pc, #388]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0b0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d04c      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cec:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d121      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e09e      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e092      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e086      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e07e      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 0203 	bic.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	493f      	ldr	r1, [pc, #252]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4e:	f7fe fbe9 	bl	8001524 <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d56:	f7fe fbe5 	bl	8001524 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e066      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 020c 	and.w	r2, r3, #12
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d1eb      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	492c      	ldr	r1, [pc, #176]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d210      	bcs.n	8002dcc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4924      	ldr	r1, [pc, #144]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e036      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4918      	ldr	r1, [pc, #96]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4910      	ldr	r1, [pc, #64]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e0a:	f000 f825 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_ClockConfig+0x1b4>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	490c      	ldr	r1, [pc, #48]	; (8002e4c <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	5ccb      	ldrb	r3, [r1, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb28 	bl	8001484 <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e38:	7afb      	ldrb	r3, [r7, #11]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08005ae4 	.word	0x08005ae4
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e66:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d121      	bne.n	8002eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d11e      	bne.n	8002eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e8c:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d102      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e004      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d134      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0xa6>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d003      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0xac>
 8002efc:	e005      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f00:	617b      	str	r3, [r7, #20]
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002f06:	617b      	str	r3, [r7, #20]
      break;
 8002f08:	e002      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	617b      	str	r3, [r7, #20]
      break;
 8002f0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	fb02 f203 	mul.w	r2, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0e5b      	lsrs	r3, r3, #25
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	3301      	adds	r3, #1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f50:	69bb      	ldr	r3, [r7, #24]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08005afc 	.word	0x08005afc
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000000 	.word	0x20000000

08002f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f8c:	f7ff fff0 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08005af4 	.word	0x08005af4

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fb8:	f7ff ffda 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0adb      	lsrs	r3, r3, #11
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08005af4 	.word	0x08005af4

08002fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ff8:	f7ff f936 	bl	8002268 <HAL_PWREx_GetVoltageRange>
 8002ffc:	6178      	str	r0, [r7, #20]
 8002ffe:	e014      	b.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003018:	f7ff f926 	bl	8002268 <HAL_PWREx_GetVoltageRange>
 800301c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003030:	d10b      	bne.n	800304a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d919      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2ba0      	cmp	r3, #160	; 0xa0
 800303c:	d902      	bls.n	8003044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800303e:	2302      	movs	r3, #2
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e013      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003044:	2301      	movs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e010      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d902      	bls.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003050:	2303      	movs	r3, #3
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e00a      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d102      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800305c:	2302      	movs	r3, #2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e004      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d101      	bne.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 0207 	bic.w	r2, r3, #7
 8003074:	4909      	ldr	r1, [pc, #36]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ac:	2300      	movs	r3, #0
 80030ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d041      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030c4:	d02a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ca:	d824      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d0:	d008      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d6:	d81e      	bhi.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e0:	d010      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030e2:	e018      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e4:	4b86      	ldr	r3, [pc, #536]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a85      	ldr	r2, [pc, #532]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f0:	e015      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fabb 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003102:	e00c      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3320      	adds	r3, #32
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fba6 	bl	800385c <RCCEx_PLLSAI2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	74fb      	strb	r3, [r7, #19]
      break;
 800311a:	e000      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800311c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003124:	4b76      	ldr	r3, [pc, #472]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003132:	4973      	ldr	r1, [pc, #460]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800313a:	e001      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d041      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003154:	d02a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800315c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d010      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003172:	e018      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a61      	ldr	r2, [pc, #388]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fa73 	bl	8003674 <RCCEx_PLLSAI1_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003192:	e00c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3320      	adds	r3, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fb5e 	bl	800385c <RCCEx_PLLSAI2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	74fb      	strb	r3, [r7, #19]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b4:	4b52      	ldr	r3, [pc, #328]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c2:	494f      	ldr	r1, [pc, #316]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80a0 	beq.w	800331e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031de:	2300      	movs	r3, #0
 80031e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4a40      	ldr	r2, [pc, #256]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003202:	6593      	str	r3, [r2, #88]	; 0x58
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003210:	2301      	movs	r3, #1
 8003212:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003214:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003220:	f7fe f980 	bl	8001524 <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003226:	e009      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fe f97c 	bl	8001524 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	74fb      	strb	r3, [r7, #19]
        break;
 800323a:	e005      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800323c:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ef      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d15c      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003258:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01f      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	429a      	cmp	r2, r3
 800326a:	d019      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	4a20      	ldr	r2, [pc, #128]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe f93b 	bl	8001524 <HAL_GetTick>
 80032ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b0:	e00b      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fe f937 	bl	8001524 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d902      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	74fb      	strb	r3, [r7, #19]
            break;
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ec      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330c:	7c7b      	ldrb	r3, [r7, #17]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d105      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003312:	4b9e      	ldr	r3, [pc, #632]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	4a9d      	ldr	r2, [pc, #628]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332a:	4b98      	ldr	r3, [pc, #608]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	4994      	ldr	r1, [pc, #592]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334c:	4b8f      	ldr	r3, [pc, #572]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f023 020c 	bic.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	498c      	ldr	r1, [pc, #560]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336e:	4b87      	ldr	r3, [pc, #540]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	4983      	ldr	r1, [pc, #524]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	497b      	ldr	r1, [pc, #492]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c0:	4972      	ldr	r1, [pc, #456]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d4:	4b6d      	ldr	r3, [pc, #436]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	496a      	ldr	r1, [pc, #424]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f6:	4b65      	ldr	r3, [pc, #404]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	4961      	ldr	r1, [pc, #388]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003418:	4b5c      	ldr	r3, [pc, #368]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	4959      	ldr	r1, [pc, #356]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343a:	4b54      	ldr	r3, [pc, #336]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	4950      	ldr	r1, [pc, #320]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345c:	4b4b      	ldr	r3, [pc, #300]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	4948      	ldr	r1, [pc, #288]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	493f      	ldr	r1, [pc, #252]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d028      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ae:	4937      	ldr	r1, [pc, #220]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034be:	d106      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a31      	ldr	r2, [pc, #196]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ca:	60d3      	str	r3, [r2, #12]
 80034cc:	e011      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f8c8 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d028      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	491f      	ldr	r1, [pc, #124]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351c:	d106      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003528:	60d3      	str	r3, [r2, #12]
 800352a:	e011      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003534:	d10c      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f899 	bl	8003674 <RCCEx_PLLSAI1_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02b      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	4908      	ldr	r1, [pc, #32]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d109      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4a02      	ldr	r2, [pc, #8]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003586:	60d3      	str	r3, [r2, #12]
 8003588:	e014      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f867 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02f      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ce:	4928      	ldr	r1, [pc, #160]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035de:	d10d      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f844 	bl	8003674 <RCCEx_PLLSAI1_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d014      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	74bb      	strb	r3, [r7, #18]
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003604:	d10c      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3320      	adds	r3, #32
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f925 	bl	800385c <RCCEx_PLLSAI2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003666:	7cbb      	ldrb	r3, [r7, #18]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000

08003674 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003682:	4b75      	ldr	r3, [pc, #468]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368e:	4b72      	ldr	r3, [pc, #456]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d10d      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
       ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a6:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
       ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d047      	beq.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e044      	b.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x86>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x62>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x74>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b60      	ldr	r3, [pc, #384]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5b      	ldr	r3, [pc, #364]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b57      	ldr	r3, [pc, #348]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b54      	ldr	r3, [pc, #336]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	430b      	orrs	r3, r1
 8003744:	4944      	ldr	r1, [pc, #272]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d17d      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a40      	ldr	r2, [pc, #256]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd fee2 	bl	8001524 <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003762:	e009      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003764:	f7fd fede 	bl	8001524 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d902      	bls.n	8003778 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
        break;
 8003776:	e005      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003778:	4b37      	ldr	r3, [pc, #220]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ef      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d160      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d111      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b31      	ldr	r3, [pc, #196]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0912      	lsrs	r2, r2, #4
 80037a8:	0452      	lsls	r2, r2, #17
 80037aa:	430a      	orrs	r2, r1
 80037ac:	492a      	ldr	r1, [pc, #168]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e027      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d112      	bne.n	80037e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0211      	lsls	r1, r2, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6912      	ldr	r2, [r2, #16]
 80037d0:	0852      	lsrs	r2, r2, #1
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0552      	lsls	r2, r2, #21
 80037d6:	430a      	orrs	r2, r1
 80037d8:	491f      	ldr	r1, [pc, #124]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]
 80037de:	e011      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
 80037f0:	0211      	lsls	r1, r2, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6952      	ldr	r2, [r2, #20]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0652      	lsls	r2, r2, #25
 80037fc:	430a      	orrs	r2, r1
 80037fe:	4916      	ldr	r1, [pc, #88]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a13      	ldr	r2, [pc, #76]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd fe88 	bl	8001524 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003816:	e009      	b.n	800382c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003818:	f7fd fe84 	bl	8001524 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	73fb      	strb	r3, [r7, #15]
          break;
 800382a:	e005      	b.n	8003838 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	4904      	ldr	r1, [pc, #16]	; (8003858 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000

0800385c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d10d      	bne.n	80038a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
       ||
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388e:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
       ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d047      	beq.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e044      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d018      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x86>
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d825      	bhi.n	8003900 <RCCEx_PLLSAI2_Config+0xa4>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x62>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d009      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x74>
 80038bc:	e020      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038be:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e01a      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d116      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e013      	b.n	800390a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e2:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ee:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fe:	e006      	b.n	800390e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e004      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003916:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	430b      	orrs	r3, r1
 800392c:	4939      	ldr	r1, [pc, #228]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d167      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003944:	f7fd fdee 	bl	8001524 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800394a:	e009      	b.n	8003960 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800394c:	f7fd fdea 	bl	8001524 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d902      	bls.n	8003960 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	73fb      	strb	r3, [r7, #15]
        break;
 800395e:	e005      	b.n	800396c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ef      	bne.n	800394c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d14a      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003978:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	0211      	lsls	r1, r2, #8
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	0912      	lsrs	r2, r2, #4
 8003990:	0452      	lsls	r2, r2, #17
 8003992:	430a      	orrs	r2, r1
 8003994:	491f      	ldr	r1, [pc, #124]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	614b      	str	r3, [r1, #20]
 800399a:	e011      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6912      	ldr	r2, [r2, #16]
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4916      	ldr	r1, [pc, #88]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fd fdaa 	bl	8001524 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d4:	f7fd fda6 	bl	8001524 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
          break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4904      	ldr	r1, [pc, #16]	; (8003a14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e095      	b.n	8003b56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3a:	d009      	beq.n	8003a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fa86 	bl	8000f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a90:	d902      	bls.n	8003a98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e002      	b.n	8003a9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aa6:	d007      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	ea42 0103 	orr.w	r1, r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0204 	and.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e049      	b.n	8003c04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd fa3d 	bl	8001004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f000 fb7b 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e049      	b.n	8003cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f841 	bl	8003cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fb24 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d109      	bne.n	8003cf4 <HAL_TIM_PWM_Start+0x24>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e03c      	b.n	8003d6e <HAL_TIM_PWM_Start+0x9e>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d109      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x3e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e02f      	b.n	8003d6e <HAL_TIM_PWM_Start+0x9e>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d109      	bne.n	8003d28 <HAL_TIM_PWM_Start+0x58>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e022      	b.n	8003d6e <HAL_TIM_PWM_Start+0x9e>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d109      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x72>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	bf14      	ite	ne
 8003d3a:	2301      	movne	r3, #1
 8003d3c:	2300      	moveq	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e015      	b.n	8003d6e <HAL_TIM_PWM_Start+0x9e>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d109      	bne.n	8003d5c <HAL_TIM_PWM_Start+0x8c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e008      	b.n	8003d6e <HAL_TIM_PWM_Start+0x9e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e09c      	b.n	8003eb0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_PWM_Start+0xb6>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	e023      	b.n	8003dce <HAL_TIM_PWM_Start+0xfe>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start+0xc6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	e01b      	b.n	8003dce <HAL_TIM_PWM_Start+0xfe>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xd6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	e013      	b.n	8003dce <HAL_TIM_PWM_Start+0xfe>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start+0xe6>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003db4:	e00b      	b.n	8003dce <HAL_TIM_PWM_Start+0xfe>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0xf6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	e003      	b.n	8003dce <HAL_TIM_PWM_Start+0xfe>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	6839      	ldr	r1, [r7, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fe68 	bl	8004aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a35      	ldr	r2, [pc, #212]	; (8003eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_TIM_PWM_Start+0x13e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a34      	ldr	r2, [pc, #208]	; (8003ebc <HAL_TIM_PWM_Start+0x1ec>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <HAL_TIM_PWM_Start+0x13e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a32      	ldr	r2, [pc, #200]	; (8003ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <HAL_TIM_PWM_Start+0x13e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a31      	ldr	r2, [pc, #196]	; (8003ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <HAL_TIM_PWM_Start+0x13e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_PWM_Start+0x142>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_PWM_Start+0x144>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d018      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_TIM_PWM_Start+0x1fc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_TIM_PWM_Start+0x200>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_TIM_PWM_Start+0x204>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <HAL_TIM_PWM_Start+0x1ec>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_PWM_Start+0x19e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d115      	bne.n	8003e9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_TIM_PWM_Start+0x208>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d015      	beq.n	8003eac <HAL_TIM_PWM_Start+0x1dc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d011      	beq.n	8003eac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	e008      	b.n	8003eac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40013400 	.word	0x40013400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e0ff      	b.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b14      	cmp	r3, #20
 8003f06:	f200 80f0 	bhi.w	80040ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	080040eb 	.word	0x080040eb
 8003f18:	080040eb 	.word	0x080040eb
 8003f1c:	080040eb 	.word	0x080040eb
 8003f20:	08003fa5 	.word	0x08003fa5
 8003f24:	080040eb 	.word	0x080040eb
 8003f28:	080040eb 	.word	0x080040eb
 8003f2c:	080040eb 	.word	0x080040eb
 8003f30:	08003fe7 	.word	0x08003fe7
 8003f34:	080040eb 	.word	0x080040eb
 8003f38:	080040eb 	.word	0x080040eb
 8003f3c:	080040eb 	.word	0x080040eb
 8003f40:	08004027 	.word	0x08004027
 8003f44:	080040eb 	.word	0x080040eb
 8003f48:	080040eb 	.word	0x080040eb
 8003f4c:	080040eb 	.word	0x080040eb
 8003f50:	08004069 	.word	0x08004069
 8003f54:	080040eb 	.word	0x080040eb
 8003f58:	080040eb 	.word	0x080040eb
 8003f5c:	080040eb 	.word	0x080040eb
 8003f60:	080040a9 	.word	0x080040a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fa2e 	bl	80043cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	619a      	str	r2, [r3, #24]
      break;
 8003fa2:	e0a5      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fa9e 	bl	80044ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	619a      	str	r2, [r3, #24]
      break;
 8003fe4:	e084      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fb07 	bl	8004600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0208 	orr.w	r2, r2, #8
 8004000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0204 	bic.w	r2, r2, #4
 8004010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69d9      	ldr	r1, [r3, #28]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	61da      	str	r2, [r3, #28]
      break;
 8004024:	e064      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fb6f 	bl	8004710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	021a      	lsls	r2, r3, #8
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	61da      	str	r2, [r3, #28]
      break;
 8004066:	e043      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fbb8 	bl	80047e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0208 	orr.w	r2, r2, #8
 8004082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0204 	bic.w	r2, r2, #4
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040a6:	e023      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fbfc 	bl	80048ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040e8:	e002      	b.n	80040f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
      break;
 80040ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop

08004104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_TIM_ConfigClockSource+0x1c>
 800411c:	2302      	movs	r3, #2
 800411e:	e0b6      	b.n	800428e <HAL_TIM_ConfigClockSource+0x18a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415c:	d03e      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0xd8>
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004162:	f200 8087 	bhi.w	8004274 <HAL_TIM_ConfigClockSource+0x170>
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	f000 8086 	beq.w	800427a <HAL_TIM_ConfigClockSource+0x176>
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d87f      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 8004174:	2b70      	cmp	r3, #112	; 0x70
 8004176:	d01a      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xaa>
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d87b      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 800417c:	2b60      	cmp	r3, #96	; 0x60
 800417e:	d050      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x11e>
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	d877      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 8004184:	2b50      	cmp	r3, #80	; 0x50
 8004186:	d03c      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0xfe>
 8004188:	2b50      	cmp	r3, #80	; 0x50
 800418a:	d873      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 800418c:	2b40      	cmp	r3, #64	; 0x40
 800418e:	d058      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x13e>
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d86f      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 8004194:	2b30      	cmp	r3, #48	; 0x30
 8004196:	d064      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15e>
 8004198:	2b30      	cmp	r3, #48	; 0x30
 800419a:	d86b      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 800419c:	2b20      	cmp	r3, #32
 800419e:	d060      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15e>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d867      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05c      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15e>
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d05a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x15e>
 80041ac:	e062      	b.n	8004274 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f000 fc55 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	609a      	str	r2, [r3, #8]
      break;
 80041da:	e04f      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6899      	ldr	r1, [r3, #8]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f000 fc3e 	bl	8004a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041fe:	609a      	str	r2, [r3, #8]
      break;
 8004200:	e03c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fbb2 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2150      	movs	r1, #80	; 0x50
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fc0b 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004220:	e02c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fbd1 	bl	80049d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2160      	movs	r1, #96	; 0x60
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fbfb 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004240:	e01c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fb92 	bl	8004978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fbeb 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004260:	e00c      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f000 fbe2 	bl	8004a36 <TIM_ITRx_SetConfig>
      break;
 8004272:	e003      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      break;
 8004278:	e000      	b.n	800427c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800427a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a40      	ldr	r2, [pc, #256]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d00f      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00b      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <TIM_Base_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01f      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d01b      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d017      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00f      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <TIM_Base_SetConfig+0x124>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00b      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <TIM_Base_SetConfig+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <TIM_Base_SetConfig+0x12c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <TIM_Base_SetConfig+0x130>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d108      	bne.n	8004344 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <TIM_Base_SetConfig+0x114>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00f      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <TIM_Base_SetConfig+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00b      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <TIM_Base_SetConfig+0x128>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d007      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <TIM_Base_SetConfig+0x12c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0f      	ldr	r2, [pc, #60]	; (80043c8 <TIM_Base_SetConfig+0x130>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40013400 	.word	0x40013400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800

080043cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f023 0201 	bic.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 0302 	bic.w	r3, r3, #2
 8004418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <TIM_OC1_SetConfig+0x10c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00f      	beq.n	800444c <TIM_OC1_SetConfig+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a2b      	ldr	r2, [pc, #172]	; (80044dc <TIM_OC1_SetConfig+0x110>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00b      	beq.n	800444c <TIM_OC1_SetConfig+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <TIM_OC1_SetConfig+0x114>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d007      	beq.n	800444c <TIM_OC1_SetConfig+0x80>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <TIM_OC1_SetConfig+0x118>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_OC1_SetConfig+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <TIM_OC1_SetConfig+0x11c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10c      	bne.n	8004466 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0308 	bic.w	r3, r3, #8
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <TIM_OC1_SetConfig+0x10c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00f      	beq.n	800448e <TIM_OC1_SetConfig+0xc2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <TIM_OC1_SetConfig+0x110>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00b      	beq.n	800448e <TIM_OC1_SetConfig+0xc2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <TIM_OC1_SetConfig+0x114>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <TIM_OC1_SetConfig+0xc2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <TIM_OC1_SetConfig+0x118>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_OC1_SetConfig+0xc2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <TIM_OC1_SetConfig+0x11c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d111      	bne.n	80044b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	621a      	str	r2, [r3, #32]
}
 80044cc:	bf00      	nop
 80044ce:	371c      	adds	r7, #28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800

080044ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	f023 0210 	bic.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0320 	bic.w	r3, r3, #32
 800453a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a28      	ldr	r2, [pc, #160]	; (80045ec <TIM_OC2_SetConfig+0x100>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC2_SetConfig+0x6c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <TIM_OC2_SetConfig+0x104>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10d      	bne.n	8004574 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <TIM_OC2_SetConfig+0x100>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00f      	beq.n	800459c <TIM_OC2_SetConfig+0xb0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <TIM_OC2_SetConfig+0x104>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00b      	beq.n	800459c <TIM_OC2_SetConfig+0xb0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <TIM_OC2_SetConfig+0x108>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_OC2_SetConfig+0xb0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <TIM_OC2_SetConfig+0x10c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC2_SetConfig+0xb0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a19      	ldr	r2, [pc, #100]	; (80045fc <TIM_OC2_SetConfig+0x110>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d113      	bne.n	80045c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800

08004600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <TIM_OC3_SetConfig+0xfc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC3_SetConfig+0x6a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_OC3_SetConfig+0x100>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10d      	bne.n	8004686 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <TIM_OC3_SetConfig+0xfc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00f      	beq.n	80046ae <TIM_OC3_SetConfig+0xae>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <TIM_OC3_SetConfig+0x100>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_OC3_SetConfig+0xae>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <TIM_OC3_SetConfig+0x104>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <TIM_OC3_SetConfig+0xae>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a19      	ldr	r2, [pc, #100]	; (8004708 <TIM_OC3_SetConfig+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0xae>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC3_SetConfig+0x10c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40012c00 	.word	0x40012c00
 8004700:	40013400 	.word	0x40013400
 8004704:	40014000 	.word	0x40014000
 8004708:	40014400 	.word	0x40014400
 800470c:	40014800 	.word	0x40014800

08004710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	031b      	lsls	r3, r3, #12
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <TIM_OC4_SetConfig+0xc0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00f      	beq.n	8004794 <TIM_OC4_SetConfig+0x84>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <TIM_OC4_SetConfig+0xc4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_OC4_SetConfig+0x84>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <TIM_OC4_SetConfig+0xc8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_OC4_SetConfig+0x84>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a15      	ldr	r2, [pc, #84]	; (80047dc <TIM_OC4_SetConfig+0xcc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC4_SetConfig+0x84>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <TIM_OC4_SetConfig+0xd0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800

080047e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a17      	ldr	r2, [pc, #92]	; (8004898 <TIM_OC5_SetConfig+0xb4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00f      	beq.n	800485e <TIM_OC5_SetConfig+0x7a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <TIM_OC5_SetConfig+0xb8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00b      	beq.n	800485e <TIM_OC5_SetConfig+0x7a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <TIM_OC5_SetConfig+0xbc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <TIM_OC5_SetConfig+0x7a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <TIM_OC5_SetConfig+0xc0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_OC5_SetConfig+0x7a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <TIM_OC5_SetConfig+0xc4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d109      	bne.n	8004872 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40013400 	.word	0x40013400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800

080048ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	051b      	lsls	r3, r3, #20
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <TIM_OC6_SetConfig+0xb8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00f      	beq.n	8004928 <TIM_OC6_SetConfig+0x7c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <TIM_OC6_SetConfig+0xbc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_OC6_SetConfig+0x7c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <TIM_OC6_SetConfig+0xc0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_OC6_SetConfig+0x7c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TIM_OC6_SetConfig+0xc4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC6_SetConfig+0x7c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a14      	ldr	r2, [pc, #80]	; (8004974 <TIM_OC6_SetConfig+0xc8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d109      	bne.n	800493c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40013400 	.word	0x40013400
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400
 8004974:	40014800 	.word	0x40014800

08004978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f023 030a 	bic.w	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0210 	bic.w	r2, r3, #16
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	031b      	lsls	r3, r3, #12
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f043 0307 	orr.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1a      	ldr	r2, [r3, #32]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e068      	b.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2e      	ldr	r2, [pc, #184]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d018      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40014000 	.word	0x40014000

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fa42 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f82c 	bl	8004ca4 <UART_SetConfig>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e022      	b.n	8004c9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 faaa 	bl	80051b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb31 	bl	80052fc <UART_CheckIdleState>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4bad      	ldr	r3, [pc, #692]	; (8004f84 <UART_SetConfig+0x2e0>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4aa2      	ldr	r2, [pc, #648]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a99      	ldr	r2, [pc, #612]	; (8004f8c <UART_SetConfig+0x2e8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d121      	bne.n	8004d6e <UART_SetConfig+0xca>
 8004d2a:	4b99      	ldr	r3, [pc, #612]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d817      	bhi.n	8004d68 <UART_SetConfig+0xc4>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x9c>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d57 	.word	0x08004d57
 8004d4c:	08004d63 	.word	0x08004d63
 8004d50:	2301      	movs	r3, #1
 8004d52:	76fb      	strb	r3, [r7, #27]
 8004d54:	e0e7      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d56:	2302      	movs	r3, #2
 8004d58:	76fb      	strb	r3, [r7, #27]
 8004d5a:	e0e4      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	76fb      	strb	r3, [r7, #27]
 8004d60:	e0e1      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d62:	2308      	movs	r3, #8
 8004d64:	76fb      	strb	r3, [r7, #27]
 8004d66:	e0de      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e0db      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a88      	ldr	r2, [pc, #544]	; (8004f94 <UART_SetConfig+0x2f0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d132      	bne.n	8004dde <UART_SetConfig+0x13a>
 8004d78:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d828      	bhi.n	8004dd8 <UART_SetConfig+0x134>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0xe8>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dd9 	.word	0x08004dd9
 8004d94:	08004dd9 	.word	0x08004dd9
 8004d98:	08004dd9 	.word	0x08004dd9
 8004d9c:	08004dcd 	.word	0x08004dcd
 8004da0:	08004dd9 	.word	0x08004dd9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004dd9 	.word	0x08004dd9
 8004dac:	08004dc7 	.word	0x08004dc7
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e0af      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e0ac      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e0a9      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e0a6      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e0a3      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6d      	ldr	r2, [pc, #436]	; (8004f98 <UART_SetConfig+0x2f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d120      	bne.n	8004e2a <UART_SetConfig+0x186>
 8004de8:	4b69      	ldr	r3, [pc, #420]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d013      	beq.n	8004e1e <UART_SetConfig+0x17a>
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	d814      	bhi.n	8004e24 <UART_SetConfig+0x180>
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d009      	beq.n	8004e12 <UART_SetConfig+0x16e>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d810      	bhi.n	8004e24 <UART_SetConfig+0x180>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <UART_SetConfig+0x168>
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d006      	beq.n	8004e18 <UART_SetConfig+0x174>
 8004e0a:	e00b      	b.n	8004e24 <UART_SetConfig+0x180>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	e089      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e12:	2302      	movs	r3, #2
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e086      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e083      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e080      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e24:	2310      	movs	r3, #16
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e07d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5b      	ldr	r2, [pc, #364]	; (8004f9c <UART_SetConfig+0x2f8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d120      	bne.n	8004e76 <UART_SetConfig+0x1d2>
 8004e34:	4b56      	ldr	r3, [pc, #344]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e40:	d013      	beq.n	8004e6a <UART_SetConfig+0x1c6>
 8004e42:	2bc0      	cmp	r3, #192	; 0xc0
 8004e44:	d814      	bhi.n	8004e70 <UART_SetConfig+0x1cc>
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d009      	beq.n	8004e5e <UART_SetConfig+0x1ba>
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d810      	bhi.n	8004e70 <UART_SetConfig+0x1cc>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <UART_SetConfig+0x1b4>
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x1c0>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x1cc>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e063      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e060      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e64:	2304      	movs	r3, #4
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e05d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e05a      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e70:	2310      	movs	r3, #16
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e057      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <UART_SetConfig+0x2fc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d125      	bne.n	8004ecc <UART_SetConfig+0x228>
 8004e80:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8e:	d017      	beq.n	8004ec0 <UART_SetConfig+0x21c>
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e94:	d817      	bhi.n	8004ec6 <UART_SetConfig+0x222>
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9a:	d00b      	beq.n	8004eb4 <UART_SetConfig+0x210>
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d811      	bhi.n	8004ec6 <UART_SetConfig+0x222>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <UART_SetConfig+0x20a>
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	d006      	beq.n	8004eba <UART_SetConfig+0x216>
 8004eac:	e00b      	b.n	8004ec6 <UART_SetConfig+0x222>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	76fb      	strb	r3, [r7, #27]
 8004eb2:	e038      	b.n	8004f26 <UART_SetConfig+0x282>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e035      	b.n	8004f26 <UART_SetConfig+0x282>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e032      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e02f      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e02c      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d125      	bne.n	8004f22 <UART_SetConfig+0x27e>
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee4:	d017      	beq.n	8004f16 <UART_SetConfig+0x272>
 8004ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eea:	d817      	bhi.n	8004f1c <UART_SetConfig+0x278>
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	d00b      	beq.n	8004f0a <UART_SetConfig+0x266>
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	d811      	bhi.n	8004f1c <UART_SetConfig+0x278>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <UART_SetConfig+0x260>
 8004efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f00:	d006      	beq.n	8004f10 <UART_SetConfig+0x26c>
 8004f02:	e00b      	b.n	8004f1c <UART_SetConfig+0x278>
 8004f04:	2300      	movs	r3, #0
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e00d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e00a      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f10:	2304      	movs	r3, #4
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e007      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f16:	2308      	movs	r3, #8
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e004      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e001      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f22:	2310      	movs	r3, #16
 8004f24:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	f040 8087 	bne.w	8005040 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f32:	7efb      	ldrb	r3, [r7, #27]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d837      	bhi.n	8004fa8 <UART_SetConfig+0x304>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x29c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004f73 	.word	0x08004f73
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe f810 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8004f68:	6178      	str	r0, [r7, #20]
        break;
 8004f6a:	e022      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x300>)
 8004f6e:	617b      	str	r3, [r7, #20]
        break;
 8004f70:	e01f      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fd ff71 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8004f76:	6178      	str	r0, [r7, #20]
        break;
 8004f78:	e01b      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	617b      	str	r3, [r7, #20]
        break;
 8004f80:	e017      	b.n	8004fb2 <UART_SetConfig+0x30e>
 8004f82:	bf00      	nop
 8004f84:	efff69f3 	.word	0xefff69f3
 8004f88:	40008000 	.word	0x40008000
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40004400 	.word	0x40004400
 8004f98:	40004800 	.word	0x40004800
 8004f9c:	40004c00 	.word	0x40004c00
 8004fa0:	40005000 	.word	0x40005000
 8004fa4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	76bb      	strb	r3, [r7, #26]
        break;
 8004fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80f1 	beq.w	800519c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d305      	bcc.n	8004fd6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d902      	bls.n	8004fdc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	76bb      	strb	r3, [r7, #26]
 8004fda:	e0df      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	020b      	lsls	r3, r1, #8
 8004fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff2:	0202      	lsls	r2, r0, #8
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	6849      	ldr	r1, [r1, #4]
 8004ff8:	0849      	lsrs	r1, r1, #1
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	1814      	adds	r4, r2, r0
 8005002:	eb43 0501 	adc.w	r5, r3, r1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005026:	d308      	bcc.n	800503a <UART_SetConfig+0x396>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502e:	d204      	bcs.n	800503a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e0b0      	b.n	800519c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	76bb      	strb	r3, [r7, #26]
 800503e:	e0ad      	b.n	800519c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d15b      	bne.n	8005102 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800504a:	7efb      	ldrb	r3, [r7, #27]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d828      	bhi.n	80050a2 <UART_SetConfig+0x3fe>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x3b4>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fd ff84 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8005080:	6178      	str	r0, [r7, #20]
        break;
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fd ff96 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8005088:	6178      	str	r0, [r7, #20]
        break;
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b49      	ldr	r3, [pc, #292]	; (80051b4 <UART_SetConfig+0x510>)
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	e00c      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fd fee1 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8005096:	6178      	str	r0, [r7, #20]
        break;
 8005098:	e008      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	617b      	str	r3, [r7, #20]
        break;
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	76bb      	strb	r3, [r7, #26]
        break;
 80050aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d074      	beq.n	800519c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d916      	bls.n	80050fc <UART_SetConfig+0x458>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d212      	bcs.n	80050fc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f023 030f 	bic.w	r3, r3, #15
 80050de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	89fb      	ldrh	r3, [r7, #14]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	89fa      	ldrh	r2, [r7, #14]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	e04f      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	76bb      	strb	r3, [r7, #26]
 8005100:	e04c      	b.n	800519c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005102:	7efb      	ldrb	r3, [r7, #27]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d828      	bhi.n	800515a <UART_SetConfig+0x4b6>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x46c>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fd ff28 	bl	8002f88 <HAL_RCC_GetPCLK1Freq>
 8005138:	6178      	str	r0, [r7, #20]
        break;
 800513a:	e013      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fd ff3a 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8005140:	6178      	str	r0, [r7, #20]
        break;
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <UART_SetConfig+0x510>)
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	e00c      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fd fe85 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 800514e:	6178      	str	r0, [r7, #20]
        break;
 8005150:	e008      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	617b      	str	r3, [r7, #20]
        break;
 8005158:	e004      	b.n	8005164 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	76bb      	strb	r3, [r7, #26]
        break;
 8005162:	bf00      	nop
    }

    if (pclk != 0U)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085a      	lsrs	r2, r3, #1
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b0f      	cmp	r3, #15
 8005182:	d909      	bls.n	8005198 <UART_SetConfig+0x4f4>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518a:	d205      	bcs.n	8005198 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	00f42400 	.word	0x00f42400

080051b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01a      	beq.n	80052ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d10a      	bne.n	80052ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800530c:	f7fc f90a 	bl	8001524 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10e      	bne.n	800533e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82d 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e023      	b.n	8005386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d10e      	bne.n	800536a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f817 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00d      	b.n	8005386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b09c      	sub	sp, #112	; 0x70
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539e:	e0a5      	b.n	80054ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	f000 80a1 	beq.w	80054ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fc f8bb 	bl	8001524 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13e      	bne.n	800543e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053d4:	667b      	str	r3, [r7, #100]	; 0x64
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053e6:	e841 2300 	strex	r3, r2, [r1]
 80053ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1e6      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	663b      	str	r3, [r7, #96]	; 0x60
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005412:	64ba      	str	r2, [r7, #72]	; 0x48
 8005414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e067      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d04f      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d147      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005464:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800547a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e6      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	613b      	str	r3, [r7, #16]
   return(result);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054b8:	623a      	str	r2, [r7, #32]
 80054ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69f9      	ldr	r1, [r7, #28]
 80054be:	6a3a      	ldr	r2, [r7, #32]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2220      	movs	r2, #32
 80054d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e010      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	f43f af4a 	beq.w	80053a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3770      	adds	r7, #112	; 0x70
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005516:	b084      	sub	sp, #16
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	f107 001c 	add.w	r0, r7, #28
 8005524:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fa6b 	bl	8005a10 <USB_CoreReset>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800553e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005540:	2b00      	cmp	r3, #0
 8005542:	d106      	bne.n	8005552 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
 8005550:	e005      	b.n	800555e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800556a:	b004      	add	sp, #16
 800556c:	4770      	bx	lr

0800556e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 0201 	bic.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d115      	bne.n	80055de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055be:	2001      	movs	r0, #1
 80055c0:	f7fb ffbc 	bl	800153c <HAL_Delay>
      ms++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa12 	bl	80059f4 <USB_GetMode>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d01e      	beq.n	8005614 <USB_SetCurrentMode+0x84>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b31      	cmp	r3, #49	; 0x31
 80055da:	d9f0      	bls.n	80055be <USB_SetCurrentMode+0x2e>
 80055dc:	e01a      	b.n	8005614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d115      	bne.n	8005610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fb ffa3 	bl	800153c <HAL_Delay>
      ms++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9f9 	bl	80059f4 <USB_GetMode>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <USB_SetCurrentMode+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b31      	cmp	r3, #49	; 0x31
 800560c:	d9f0      	bls.n	80055f0 <USB_SetCurrentMode+0x60>
 800560e:	e001      	b.n	8005614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e005      	b.n	8005620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b32      	cmp	r3, #50	; 0x32
 8005618:	d101      	bne.n	800561e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005628:	b084      	sub	sp, #16
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e009      	b.n	800565c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3340      	adds	r3, #64	; 0x40
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	2200      	movs	r2, #0
 8005654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b0e      	cmp	r3, #14
 8005660:	d9f2      	bls.n	8005648 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d11c      	bne.n	80056a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005676:	f043 0302 	orr.w	r3, r3, #2
 800567a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	e005      	b.n	80056ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b4:	461a      	mov	r2, r3
 80056b6:	2300      	movs	r3, #0
 80056b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c0:	4619      	mov	r1, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	461a      	mov	r2, r3
 80056ca:	680b      	ldr	r3, [r1, #0]
 80056cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ce:	2103      	movs	r1, #3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f955 	bl	8005980 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056d6:	2110      	movs	r1, #16
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8f1 	bl	80058c0 <USB_FlushTxFifo>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f91b 	bl	8005924 <USB_FlushRxFifo>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e043      	b.n	80057aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005738:	d118      	bne.n	800576c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	461a      	mov	r2, r3
 800574e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e013      	b.n	800577e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	461a      	mov	r2, r3
 8005764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e008      	b.n	800577e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578a:	461a      	mov	r2, r3
 800578c:	2300      	movs	r3, #0
 800578e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	461a      	mov	r2, r3
 800579e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	3301      	adds	r3, #1
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b7      	bcc.n	8005722 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	e043      	b.n	8005840 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ce:	d118      	bne.n	8005802 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	461a      	mov	r2, r3
 80057e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e013      	b.n	8005814 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e008      	b.n	8005814 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005832:	461a      	mov	r2, r3
 8005834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	d3b7      	bcc.n	80057b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005868:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <USB_DevInit+0x294>)
 800587c:	4313      	orrs	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f043 0208 	orr.w	r2, r3, #8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b6:	b004      	add	sp, #16
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	803c3800 	.word	0x803c3800

080058c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	4a12      	ldr	r2, [pc, #72]	; (8005920 <USB_FlushTxFifo+0x60>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e01a      	b.n	8005914 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	daf3      	bge.n	80058ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	4a08      	ldr	r2, [pc, #32]	; (8005920 <USB_FlushTxFifo+0x60>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e006      	b.n	8005914 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b20      	cmp	r3, #32
 8005910:	d0f1      	beq.n	80058f6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	00030d40 	.word	0x00030d40

08005924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	4a11      	ldr	r2, [pc, #68]	; (800597c <USB_FlushRxFifo+0x58>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e017      	b.n	8005970 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	daf3      	bge.n	8005930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2210      	movs	r2, #16
 8005950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <USB_FlushRxFifo+0x58>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e006      	b.n	8005970 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d0f1      	beq.n	8005952 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	00030d40 	.word	0x00030d40

08005980 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a0:	4313      	orrs	r3, r2
 80059a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0301 	and.w	r3, r3, #1
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <USB_CoreReset+0x60>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d901      	bls.n	8005a2c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e01a      	b.n	8005a62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	daf3      	bge.n	8005a1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <USB_CoreReset+0x60>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e006      	b.n	8005a62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d0f1      	beq.n	8005a44 <USB_CoreReset+0x34>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	00030d40 	.word	0x00030d40

08005a74 <__libc_init_array>:
 8005a74:	b570      	push	{r4, r5, r6, lr}
 8005a76:	4d0d      	ldr	r5, [pc, #52]	; (8005aac <__libc_init_array+0x38>)
 8005a78:	4c0d      	ldr	r4, [pc, #52]	; (8005ab0 <__libc_init_array+0x3c>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	2600      	movs	r6, #0
 8005a80:	42a6      	cmp	r6, r4
 8005a82:	d109      	bne.n	8005a98 <__libc_init_array+0x24>
 8005a84:	4d0b      	ldr	r5, [pc, #44]	; (8005ab4 <__libc_init_array+0x40>)
 8005a86:	4c0c      	ldr	r4, [pc, #48]	; (8005ab8 <__libc_init_array+0x44>)
 8005a88:	f000 f820 	bl	8005acc <_init>
 8005a8c:	1b64      	subs	r4, r4, r5
 8005a8e:	10a4      	asrs	r4, r4, #2
 8005a90:	2600      	movs	r6, #0
 8005a92:	42a6      	cmp	r6, r4
 8005a94:	d105      	bne.n	8005aa2 <__libc_init_array+0x2e>
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9c:	4798      	blx	r3
 8005a9e:	3601      	adds	r6, #1
 8005aa0:	e7ee      	b.n	8005a80 <__libc_init_array+0xc>
 8005aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa6:	4798      	blx	r3
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	e7f2      	b.n	8005a92 <__libc_init_array+0x1e>
 8005aac:	08005b34 	.word	0x08005b34
 8005ab0:	08005b34 	.word	0x08005b34
 8005ab4:	08005b34 	.word	0x08005b34
 8005ab8:	08005b38 	.word	0x08005b38

08005abc <memset>:
 8005abc:	4402      	add	r2, r0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <memset+0xa>
 8005ac4:	4770      	bx	lr
 8005ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aca:	e7f9      	b.n	8005ac0 <memset+0x4>

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr

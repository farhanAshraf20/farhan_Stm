
analog_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a8  080078a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078b0  080078b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  20000070  08007928  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08007928  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002127c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384d  00000000  00000000  0004131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00044b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001910  00000000  00000000  000465e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b144  00000000  00000000  00047ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d90d  00000000  00000000  0007303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001086c2  00000000  00000000  00090949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019900b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a34  00000000  00000000  00199060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800779c 	.word	0x0800779c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800779c 	.word	0x0800779c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 f886 	bl	800167e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f83d 	bl	80005f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000576:	f000 f89d 	bl	80006b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 faa7 	bl	8000acc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800057e:	f000 f93d 	bl	80007fc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000582:	f000 f973 	bl	800086c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000586:	f000 f9af 	bl	80008e8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800058a:	f000 f9d3 	bl	8000934 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800058e:	f000 fa0f 	bl	80009b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000592:	f000 fa3d 	bl	8000a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000596:	f000 fa6b 	bl	8000a70 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800059a:	f000 f8b9 	bl	8000710 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800059e:	217f      	movs	r1, #127	; 0x7f
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <main+0x80>)
 80005a2:	f002 fd8f 	bl	80030c4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&temp_value, 1);
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	2201      	movs	r2, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x80>)
 80005ae:	f001 fe4d 	bl	800224c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <main+0x80>)
 80005b4:	f001 fc84 	bl	8001ec0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80005b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x80>)
 80005be:	f001 fd6d 	bl	800209c <HAL_ADC_PollForConversion>
	  temp_value = HAL_ADC_GetValue(&hadc1);
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <main+0x80>)
 80005c4:	f001 fefe 	bl	80023c4 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	71fb      	strb	r3, [r7, #7]
	  HAL_ADC_Stop(&hadc1);
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x80>)
 80005d0:	f001 fd30 	bl	8002034 <HAL_ADC_Stop>
	  printf("Intensity = %d\n\r", temp_value);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <main+0x84>)
 80005da:	f006 f989 	bl	80068f0 <iprintf>
	  HAL_Delay(30);
 80005de:	201e      	movs	r0, #30
 80005e0:	f001 f8c2 	bl	8001768 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005e4:	e7e5      	b.n	80005b2 <main+0x4a>
 80005e6:	bf00      	nop
 80005e8:	20000634 	.word	0x20000634
 80005ec:	080077b4 	.word	0x080077b4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 f96e 	bl	80068e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f003 fd85 	bl	8004124 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 fbdc 	bl	8000ddc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f003 fd60 	bl	80040e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <SystemClock_Config+0xc0>)
 800062a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xc0>)
 8000630:	f023 0318 	bic.w	r3, r3, #24
 8000634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000638:	2314      	movs	r3, #20
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fe7b 	bl	8004368 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000678:	f000 fbb0 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fa4d 	bl	8004b34 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a0:	f000 fb9c 	bl	8000ddc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a4:	f004 ff36 	bl	8005514 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a8:	bf00      	nop
 80006aa:	3758      	adds	r7, #88	; 0x58
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0a2      	sub	sp, #136	; 0x88
 80006b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2288      	movs	r2, #136	; 0x88
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 f90d 	bl	80068e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006ca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006e0:	2318      	movs	r3, #24
 80006e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e4:	2307      	movs	r3, #7
 80006e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006f0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fc21 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000704:	f000 fb6a 	bl	8000ddc <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3788      	adds	r7, #136	; 0x88
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000734:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <MX_ADC1_Init+0xe4>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073e:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b29      	ldr	r3, [pc, #164]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000752:	2204      	movs	r2, #4
 8000754:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xe0>)
 8000794:	f001 fa3e 	bl	8001c14 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800079e:	f000 fb1d 	bl	8000ddc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007ae:	f002 fce9 	bl	8003184 <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b8:	f000 fb10 	bl	8000ddc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ADC1_Init+0xe8>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	; 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_ADC1_Init+0xe0>)
 80007da:	f001 fe1f 	bl	800241c <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007e4:	f000 fafa 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000634 	.word	0x20000634
 80007f4:	50040000 	.word	0x50040000
 80007f8:	10c00010 	.word	0x10c00010

080007fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <MX_DFSDM1_Init+0x6c>)
 8000804:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000808:	2201      	movs	r2, #1
 800080a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000814:	2202      	movs	r2, #2
 8000816:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_DFSDM1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800082a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000834:	2204      	movs	r2, #4
 8000836:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000840:	2201      	movs	r2, #1
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_DFSDM1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_DFSDM1_Init+0x68>)
 8000852:	f002 fe59 	bl	8003508 <HAL_DFSDM_ChannelInit>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800085c:	f000 fabe 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000c0 	.word	0x200000c0
 8000868:	40016020 	.word	0x40016020

0800086c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000878:	f640 6214 	movw	r2, #3604	; 0xe14
 800087c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000886:	2201      	movs	r2, #1
 8000888:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008aa:	f003 f9ae 	bl	8003c0a <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 fa92 	bl	8000ddc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008bc:	f003 fa34 	bl	8003d28 <HAL_I2CEx_ConfigAnalogFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 fa89 	bl	8000ddc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_I2C2_Init+0x74>)
 80008ce:	f003 fa76 	bl	8003dbe <HAL_I2CEx_ConfigDigitalFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 fa80 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000584 	.word	0x20000584
 80008e4:	40005800 	.word	0x40005800

080008e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_QUADSPI_Init+0x44>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <MX_QUADSPI_Init+0x48>)
 80008f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_QUADSPI_Init+0x44>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_QUADSPI_Init+0x44>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_QUADSPI_Init+0x44>)
 8000900:	2210      	movs	r2, #16
 8000902:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_QUADSPI_Init+0x44>)
 8000906:	2217      	movs	r2, #23
 8000908:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_QUADSPI_Init+0x44>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_QUADSPI_Init+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_QUADSPI_Init+0x44>)
 8000918:	f003 fc6a 	bl	80041f0 <HAL_QSPI_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000922:	f000 fa5b 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000071c 	.word	0x2000071c
 8000930:	a0001000 	.word	0xa0001000

08000934 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_SPI3_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_SPI3_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI3_Init+0x74>)
 800094e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000952:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_SPI3_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI3_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_SPI3_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI3_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_SPI3_Init+0x74>)
 8000994:	f004 ffa0 	bl	80058d8 <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fa1d 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200005d0 	.word	0x200005d0
 80009ac:	40003c00 	.word	0x40003c00

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x58>)
 80009f4:	f005 f813 	bl	8005a1e <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f9ed 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000698 	.word	0x20000698
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART3_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a54:	f004 ffe3 	bl	8005a1e <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f9bd 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000f8 	.word	0x200000f8
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2206      	movs	r2, #6
 8000a80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	f003 f9cf 	bl	8003e56 <HAL_PCD_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f98d 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000017c 	.word	0x2000017c

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4bb9      	ldr	r3, [pc, #740]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4ab8      	ldr	r2, [pc, #736]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4bb6      	ldr	r3, [pc, #728]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4bb3      	ldr	r3, [pc, #716]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4ab2      	ldr	r2, [pc, #712]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4bb0      	ldr	r3, [pc, #704]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4bad      	ldr	r3, [pc, #692]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4aac      	ldr	r2, [pc, #688]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4baa      	ldr	r3, [pc, #680]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4aa6      	ldr	r2, [pc, #664]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4ba4      	ldr	r3, [pc, #656]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4ba1      	ldr	r3, [pc, #644]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4aa0      	ldr	r2, [pc, #640]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b9e      	ldr	r3, [pc, #632]	; (8000dc8 <MX_GPIO_Init+0x2fc>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b60:	489a      	ldr	r0, [pc, #616]	; (8000dcc <MX_GPIO_Init+0x300>)
 8000b62:	f003 f817 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f003 f810 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b74:	2200      	movs	r2, #0
 8000b76:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b7a:	4895      	ldr	r0, [pc, #596]	; (8000dd0 <MX_GPIO_Init+0x304>)
 8000b7c:	f003 f80a 	bl	8003b94 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b86:	4893      	ldr	r0, [pc, #588]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000b88:	f003 f804 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4890      	ldr	r0, [pc, #576]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000b94:	f002 fffe 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b9e:	488e      	ldr	r0, [pc, #568]	; (8000dd8 <MX_GPIO_Init+0x30c>)
 8000ba0:	f002 fff8 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	4889      	ldr	r0, [pc, #548]	; (8000dd0 <MX_GPIO_Init+0x304>)
 8000baa:	f002 fff3 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4886      	ldr	r0, [pc, #536]	; (8000dcc <MX_GPIO_Init+0x300>)
 8000bb4:	f002 ffee 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bb8:	f240 1315 	movw	r3, #277	; 0x115
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	487e      	ldr	r0, [pc, #504]	; (8000dcc <MX_GPIO_Init+0x300>)
 8000bd2:	f002 fe35 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000bd6:	236a      	movs	r3, #106	; 0x6a
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4878      	ldr	r0, [pc, #480]	; (8000dcc <MX_GPIO_Init+0x300>)
 8000bec:	f002 fe28 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4874      	ldr	r0, [pc, #464]	; (8000dd8 <MX_GPIO_Init+0x30c>)
 8000c08:	f002 fe1a 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f002 fe09 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c2e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f002 fdf9 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f002 fde8 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c70:	23e0      	movs	r3, #224	; 0xe0
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c80:	2305      	movs	r3, #5
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f002 fdd7 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	484a      	ldr	r0, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x304>)
 8000ca8:	f002 fdca 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cac:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000cb0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4842      	ldr	r0, [pc, #264]	; (8000dd0 <MX_GPIO_Init+0x304>)
 8000cc6:	f002 fdbb 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000cca:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000cce:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	483c      	ldr	r0, [pc, #240]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000ce2:	f002 fdad 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ce6:	f243 0381 	movw	r3, #12417	; 0x3081
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4835      	ldr	r0, [pc, #212]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000d00:	f002 fd9e 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d04:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0x30c>)
 8000d1e:	f002 fd8f 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d22:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4827      	ldr	r0, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0x30c>)
 8000d3a:	f002 fd81 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000d5a:	f002 fd71 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d5e:	2378      	movs	r3, #120	; 0x78
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <MX_GPIO_Init+0x308>)
 8000d7a:	f002 fd61 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d90:	2304      	movs	r3, #4
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_GPIO_Init+0x304>)
 8000d9c:	f002 fd50 	bl	8003840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2017      	movs	r0, #23
 8000da6:	f002 fb78 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000daa:	2017      	movs	r0, #23
 8000dac:	f002 fb91 	bl	80034d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2028      	movs	r0, #40	; 0x28
 8000db6:	f002 fb70 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dba:	2028      	movs	r0, #40	; 0x28
 8000dbc:	f002 fb89 	bl	80034d2 <HAL_NVIC_EnableIRQ>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48001000 	.word	0x48001000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48000800 	.word	0x48000800

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <HAL_ADC_MspInit+0xd4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d154      	bne.n	8000efc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a2c      	ldr	r2, [pc, #176]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000eb2:	233f      	movs	r3, #63	; 0x3f
 8000eb4:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000ec6:	f002 fcbb 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f002 fcae 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef8:	f002 fca2 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	50040000 	.word	0x50040000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48000400 	.word	0x48000400

08000f14 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ac      	sub	sp, #176	; 0xb0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2288      	movs	r2, #136	; 0x88
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 fcd3 	bl	80068e0 <memset>
  if(DFSDM1_Init == 0)
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d142      	bne.n	8000fc8 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fff4 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff ff3d 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f92:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fac:	2306      	movs	r3, #6
 8000fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fba:	f002 fc41 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fc6:	6013      	str	r3, [r2, #0]
  }

}
 8000fc8:	bf00      	nop
 8000fca:	37b0      	adds	r7, #176	; 0xb0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000008c 	.word	0x2000008c
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48001000 	.word	0x48001000

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ac      	sub	sp, #176	; 0xb0
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2288      	movs	r2, #136	; 0x88
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fc6f 	bl	80068e0 <memset>
  if(hi2c->Instance==I2C2)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <HAL_I2C_MspInit+0xb0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d13b      	bne.n	8001084 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f003 ff91 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f7ff feda 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001064:	4619      	mov	r1, r3
 8001066:	480b      	ldr	r0, [pc, #44]	; (8001094 <HAL_I2C_MspInit+0xb8>)
 8001068:	f002 fbea 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 8001072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001076:	6593      	str	r3, [r2, #88]	; 0x58
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_I2C_MspInit+0xb4>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	37b0      	adds	r7, #176	; 0xb0
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40005800 	.word	0x40005800
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400

08001098 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_QSPI_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d128      	bne.n	800110c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6513      	str	r3, [r2, #80]	; 0x50
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_QSPI_MspInit+0x80>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010ea:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010ee:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010fc:	230a      	movs	r3, #10
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_QSPI_MspInit+0x84>)
 8001108:	f002 fb9a 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	a0001000 	.word	0xa0001000
 8001118:	40021000 	.word	0x40021000
 800111c:	48001000 	.word	0x48001000

08001120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001172:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_SPI_MspInit+0x84>)
 8001190:	f002 fb56 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40003c00 	.word	0x40003c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0ae      	sub	sp, #184	; 0xb8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2288      	movs	r2, #136	; 0x88
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fb89 	bl	80068e0 <memset>
  if(huart->Instance==USART1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a42      	ldr	r2, [pc, #264]	; (80012dc <HAL_UART_MspInit+0x134>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d13b      	bne.n	8001250 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011dc:	2300      	movs	r3, #0
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 feab 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011f0:	f7ff fdf4 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_UART_MspInit+0x138>)
 80011f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f8:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_UART_MspInit+0x138>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_UART_MspInit+0x138>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001210:	4a33      	ldr	r2, [pc, #204]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <HAL_UART_MspInit+0x138>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001246:	4619      	mov	r1, r3
 8001248:	4826      	ldr	r0, [pc, #152]	; (80012e4 <HAL_UART_MspInit+0x13c>)
 800124a:	f002 faf9 	bl	8003840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800124e:	e040      	b.n	80012d2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_UART_MspInit+0x140>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d13b      	bne.n	80012d2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800125a:	2304      	movs	r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800125e:	2300      	movs	r3, #0
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fe6a 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001272:	f7ff fdb3 	bl	8000ddc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x138>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_UART_MspInit+0x138>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x138>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c0:	2307      	movs	r3, #7
 80012c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <HAL_UART_MspInit+0x144>)
 80012ce:	f002 fab7 	bl	8003840 <HAL_GPIO_Init>
}
 80012d2:	bf00      	nop
 80012d4:	37b8      	adds	r7, #184	; 0xb8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	40004800 	.word	0x40004800
 80012ec:	48000c00 	.word	0x48000c00

080012f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001310:	d154      	bne.n	80013bc <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a2b      	ldr	r2, [pc, #172]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f002 fa7d 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001346:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001358:	230a      	movs	r3, #10
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f002 fa6b 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d114      	bne.n	80013b8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013a6:	f002 ff13 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_PCD_MspInit+0xd4>)
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013b6:	e001      	b.n	80013bc <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80013b8:	f002 ff0a 	bl	80041d0 <HAL_PWREx_EnableVddUSB>
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f988 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001420:	2020      	movs	r0, #32
 8001422:	f002 fbcf 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001426:	2040      	movs	r0, #64	; 0x40
 8001428:	f002 fbcc 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800142c:	2080      	movs	r0, #128	; 0x80
 800142e:	f002 fbc9 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001432:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001436:	f002 fbc5 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001442:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001446:	f002 fbbd 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800144a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800144e:	f002 fbb9 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001452:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001456:	f002 fbb5 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800145a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800145e:	f002 fbb1 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001462:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001466:	f002 fbad 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <ITM_SendChar+0x48>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <ITM_SendChar+0x48>)
 8001480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001484:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <ITM_SendChar+0x4c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <ITM_SendChar+0x4c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001492:	bf00      	nop
 8001494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f8      	beq.n	8001494 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	6013      	str	r3, [r2, #0]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000edfc 	.word	0xe000edfc
 80014bc:	e0000e00 	.word	0xe0000e00

080014c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
	}

return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e009      	b.n	8001520 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffab 	bl	8001470 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <_write+0x12>
	}
	return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	605a      	str	r2, [r3, #4]
	return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f005 f95e 	bl	800688c <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20018000 	.word	0x20018000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000090 	.word	0x20000090
 8001604:	20000778 	.word	0x20000778

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ffea 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f005 f91d 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7fe ff83 	bl	8000568 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001670:	080078b8 	.word	0x080078b8
  ldr r2, =_sbss
 8001674:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001678:	20000774 	.word	0x20000774

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>

0800167e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f001 fefb 	bl	8003484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f80e 	bl	80016b0 <HAL_InitTick>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	e001      	b.n	80016a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a0:	f7ff fba2 	bl	8000de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_InitTick+0x6c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_InitTick+0x70>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_InitTick+0x6c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 ff07 	bl	80034ee <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d809      	bhi.n	8001700 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f001 fed1 	bl	800349a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_InitTick+0x74>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e007      	b.n	8001710 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e004      	b.n	8001710 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e001      	b.n	8001710 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	20000760 	.word	0x20000760

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000760 	.word	0x20000760

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	609a      	str	r2, [r3, #8]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3360      	adds	r3, #96	; 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <LL_ADC_SetOffset+0x44>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	4313      	orrs	r3, r2
 8001848:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	03fff000 	.word	0x03fff000

08001860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3360      	adds	r3, #96	; 0x60
 800186e:	461a      	mov	r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3360      	adds	r3, #96	; 0x60
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3330      	adds	r3, #48	; 0x30
 80018f8:	461a      	mov	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	4413      	add	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	211f      	movs	r1, #31
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0e9b      	lsrs	r3, r3, #26
 8001920:	f003 011f 	and.w	r1, r3, #31
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	431a      	orrs	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3314      	adds	r3, #20
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0e5b      	lsrs	r3, r3, #25
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	0d1b      	lsrs	r3, r3, #20
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2107      	movs	r1, #7
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0d1b      	lsrs	r3, r3, #20
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	431a      	orrs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b0:	43db      	mvns	r3, r3
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f003 0318 	and.w	r3, r3, #24
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019bc:	40d9      	lsrs	r1, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	400b      	ands	r3, r1
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	431a      	orrs	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	0007ffff 	.word	0x0007ffff

080019e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6093      	str	r3, [r2, #8]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a50:	d101      	bne.n	8001a56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af0:	f043 0202 	orr.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <LL_ADC_IsEnabled+0x18>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <LL_ADC_IsEnabled+0x1a>
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d101      	bne.n	8001b42 <LL_ADC_IsDisableOngoing+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_ADC_IsDisableOngoing+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b64:	f043 0204 	orr.w	r2, r3, #4
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d101      	bne.n	8001c06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e136      	b.n	8001e9c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff f8f7 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fef1 	bl	8001a3c <LL_ADC_IsDeepPowerDownEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fed7 	bl	8001a18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff0c 	bl	8001a8c <LL_ADC_IsInternalRegulatorEnabled>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fef0 	bl	8001a64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c84:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <HAL_ADC_Init+0x290>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	099b      	lsrs	r3, r3, #6
 8001c8a:	4a87      	ldr	r2, [pc, #540]	; (8001ea8 <HAL_ADC_Init+0x294>)
 8001c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff feee 	bl	8001a8c <LL_ADC_IsInternalRegulatorEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f043 0210 	orr.w	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f043 0201 	orr.w	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff62 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80cf 	bne.w	8001e8a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80cb 	bne.w	8001e8a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cfc:	f043 0202 	orr.w	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fefb 	bl	8001b04 <LL_ADC_IsEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d115      	bne.n	8001d40 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d14:	4865      	ldr	r0, [pc, #404]	; (8001eac <HAL_ADC_Init+0x298>)
 8001d16:	f7ff fef5 	bl	8001b04 <LL_ADC_IsEnabled>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4864      	ldr	r0, [pc, #400]	; (8001eb0 <HAL_ADC_Init+0x29c>)
 8001d1e:	f7ff fef1 	bl	8001b04 <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	431c      	orrs	r4, r3
 8001d26:	4863      	ldr	r0, [pc, #396]	; (8001eb4 <HAL_ADC_Init+0x2a0>)
 8001d28:	f7ff feec 	bl	8001b04 <LL_ADC_IsEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	485f      	ldr	r0, [pc, #380]	; (8001eb8 <HAL_ADC_Init+0x2a4>)
 8001d3c:	f7ff fd38 	bl	80017b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e5b      	ldrb	r3, [r3, #25]
 8001d44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d106      	bne.n	8001d7c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	045b      	lsls	r3, r3, #17
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_ADC_Init+0x2a8>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fef5 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8001db6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff16 	bl	8001bee <LL_ADC_INJ_IsConversionOngoing>
 8001dc2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d13d      	bne.n	8001e46 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d13a      	bne.n	8001e46 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dd4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ddc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dec:	f023 0302 	bic.w	r3, r3, #2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	430b      	orrs	r3, r1
 8001df8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d118      	bne.n	8001e36 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e0e:	f023 0304 	bic.w	r3, r3, #4
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e26:	430a      	orrs	r2, r1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	e007      	b.n	8001e46 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10c      	bne.n	8001e68 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f023 010f 	bic.w	r1, r3, #15
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
 8001e66:	e007      	b.n	8001e78 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 020f 	bic.w	r2, r2, #15
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f023 0303 	bic.w	r3, r3, #3
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
 8001e88:	e007      	b.n	8001e9a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	; 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	053e2d63 	.word	0x053e2d63
 8001eac:	50040000 	.word	0x50040000
 8001eb0:	50040100 	.word	0x50040100
 8001eb4:	50040200 	.word	0x50040200
 8001eb8:	50040300 	.word	0x50040300
 8001ebc:	fff0c007 	.word	0xfff0c007

08001ec0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ec8:	4857      	ldr	r0, [pc, #348]	; (8002028 <HAL_ADC_Start+0x168>)
 8001eca:	f7ff fd89 	bl	80019e0 <LL_ADC_GetMultimode>
 8001ece:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe63 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 809c 	bne.w	800201a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_Start+0x30>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e097      	b.n	8002020 <HAL_ADC_Start+0x160>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 ff3b 	bl	8002d74 <ADC_Enable>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 8083 	bne.w	8002010 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a42      	ldr	r2, [pc, #264]	; (800202c <HAL_ADC_Start+0x16c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d002      	beq.n	8001f2e <HAL_ADC_Start+0x6e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e000      	b.n	8001f30 <HAL_ADC_Start+0x70>
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_ADC_Start+0x170>)
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d002      	beq.n	8001f3e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f56:	d106      	bne.n	8001f66 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f023 0206 	bic.w	r2, r3, #6
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	221c      	movs	r2, #28
 8001f72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_ADC_Start+0x16c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d002      	beq.n	8001f8c <HAL_ADC_Start+0xcc>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_Start+0xce>
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_ADC_Start+0x170>)
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d008      	beq.n	8001fa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d114      	bne.n	8001fd2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fdc0 	bl	8001b50 <LL_ADC_REG_StartConversion>
 8001fd0:	e025      	b.n	800201e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_ADC_Start+0x16c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d002      	beq.n	8001fee <HAL_ADC_Start+0x12e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	e000      	b.n	8001ff0 <HAL_ADC_Start+0x130>
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_ADC_Start+0x170>)
 8001ff0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00f      	beq.n	800201e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002002:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
 800200e:	e006      	b.n	800201e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002018:	e001      	b.n	800201e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	50040300 	.word	0x50040300
 800202c:	50040100 	.word	0x50040100
 8002030:	50040000 	.word	0x50040000

08002034 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_Stop+0x16>
 8002046:	2302      	movs	r3, #2
 8002048:	e023      	b.n	8002092 <HAL_ADC_Stop+0x5e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002052:	2103      	movs	r1, #3
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fdd1 	bl	8002bfc <ADC_ConversionStop>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fee7 	bl	8002e38 <ADC_Disable>
 800206a:	4603      	mov	r3, r0
 800206c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a6:	4866      	ldr	r0, [pc, #408]	; (8002240 <HAL_ADC_PollForConversion+0x1a4>)
 80020a8:	f7ff fc9a 	bl	80019e0 <LL_ADC_GetMultimode>
 80020ac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020b6:	2308      	movs	r3, #8
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e02a      	b.n	8002112 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d002      	beq.n	80020ce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b09      	cmp	r3, #9
 80020cc:	d111      	bne.n	80020f2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0a4      	b.n	8002236 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020ec:	2304      	movs	r3, #4
 80020ee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80020f0:	e00f      	b.n	8002112 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020f2:	4853      	ldr	r0, [pc, #332]	; (8002240 <HAL_ADC_PollForConversion+0x1a4>)
 80020f4:	f7ff fc82 	bl	80019fc <LL_ADC_GetMultiDMATransfer>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e093      	b.n	8002236 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800210e:	2304      	movs	r3, #4
 8002110:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002112:	f7ff fb1d 	bl	8001750 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002118:	e021      	b.n	800215e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d01d      	beq.n	800215e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002122:	f7ff fb15 	bl	8001750 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <HAL_ADC_PollForConversion+0x9c>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d112      	bne.n	800215e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10b      	bne.n	800215e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e06b      	b.n	8002236 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0d6      	beq.n	800211a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fba0 	bl	80018c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01c      	beq.n	80021c2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7e5b      	ldrb	r3, [r3, #25]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d118      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d111      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <HAL_ADC_PollForConversion+0x1a8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d002      	beq.n	80021d2 <HAL_ADC_PollForConversion+0x136>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_PollForConversion+0x138>
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_ADC_PollForConversion+0x1ac>)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	4293      	cmp	r3, r2
 80021da:	d008      	beq.n	80021ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d002      	beq.n	80021ee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	d104      	bne.n	80021f8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e00c      	b.n	8002212 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_ADC_PollForConversion+0x1a8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d002      	beq.n	8002208 <HAL_ADC_PollForConversion+0x16c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e000      	b.n	800220a <HAL_ADC_PollForConversion+0x16e>
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_PollForConversion+0x1ac>)
 800220a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d104      	bne.n	8002222 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2208      	movs	r2, #8
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e008      	b.n	8002234 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	220c      	movs	r2, #12
 8002232:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	50040300 	.word	0x50040300
 8002244:	50040100 	.word	0x50040100
 8002248:	50040000 	.word	0x50040000

0800224c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002258:	4853      	ldr	r0, [pc, #332]	; (80023a8 <HAL_ADC_Start_DMA+0x15c>)
 800225a:	f7ff fbc1 	bl	80019e0 <LL_ADC_GetMultimode>
 800225e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fc9b 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 8093 	bne.w	8002398 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start_DMA+0x34>
 800227c:	2302      	movs	r3, #2
 800227e:	e08e      	b.n	800239e <HAL_ADC_Start_DMA+0x152>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a47      	ldr	r2, [pc, #284]	; (80023ac <HAL_ADC_Start_DMA+0x160>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d008      	beq.n	80022a4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d002      	beq.n	80022a4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d172      	bne.n	800238a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fd65 	bl	8002d74 <ADC_Enable>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d165      	bne.n	8002380 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <HAL_ADC_Start_DMA+0x164>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d002      	beq.n	80022d8 <HAL_ADC_Start_DMA+0x8c>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	e000      	b.n	80022da <HAL_ADC_Start_DMA+0x8e>
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_ADC_Start_DMA+0x168>)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4293      	cmp	r3, r2
 80022e0:	d002      	beq.n	80022e8 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f023 0206 	bic.w	r2, r3, #6
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
 800230c:	e002      	b.n	8002314 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_ADC_Start_DMA+0x16c>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	4a26      	ldr	r2, [pc, #152]	; (80023bc <HAL_ADC_Start_DMA+0x170>)
 8002322:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <HAL_ADC_Start_DMA+0x174>)
 800232a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	221c      	movs	r2, #28
 8002332:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0210 	orr.w	r2, r2, #16
 800234a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3340      	adds	r3, #64	; 0x40
 8002366:	4619      	mov	r1, r3
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f001 f9d8 	bl	8003720 <HAL_DMA_Start_IT>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fbe9 	bl	8001b50 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800237e:	e00d      	b.n	800239c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002388:	e008      	b.n	800239c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002396:	e001      	b.n	800239c <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002398:	2302      	movs	r3, #2
 800239a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	50040300 	.word	0x50040300
 80023ac:	50040200 	.word	0x50040200
 80023b0:	50040100 	.word	0x50040100
 80023b4:	50040000 	.word	0x50040000
 80023b8:	08002ef7 	.word	0x08002ef7
 80023bc:	08002fcf 	.word	0x08002fcf
 80023c0:	08002feb 	.word	0x08002feb

080023c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0b6      	sub	sp, #216	; 0xd8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x22>
 800243a:	2302      	movs	r3, #2
 800243c:	e3c7      	b.n	8002bce <HAL_ADC_ConfigChannel+0x7b2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fba8 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 83a8 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d824      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	3b02      	subs	r3, #2
 8002466:	2b03      	cmp	r3, #3
 8002468:	d81b      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x86>
 800246a:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <HAL_ADC_ConfigChannel+0x54>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	08002481 	.word	0x08002481
 8002474:	08002489 	.word	0x08002489
 8002478:	08002491 	.word	0x08002491
 800247c:	08002499 	.word	0x08002499
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	220c      	movs	r2, #12
 8002484:	605a      	str	r2, [r3, #4]
          break;
 8002486:	e011      	b.n	80024ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2212      	movs	r2, #18
 800248c:	605a      	str	r2, [r3, #4]
          break;
 800248e:	e00d      	b.n	80024ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2218      	movs	r2, #24
 8002494:	605a      	str	r2, [r3, #4]
          break;
 8002496:	e009      	b.n	80024ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249e:	605a      	str	r2, [r3, #4]
          break;
 80024a0:	e004      	b.n	80024ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2206      	movs	r2, #6
 80024a6:	605a      	str	r2, [r3, #4]
          break;
 80024a8:	e000      	b.n	80024ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f7ff fa15 	bl	80018e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fb6c 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 80024c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fb8c 	bl	8001bee <LL_ADC_INJ_IsConversionOngoing>
 80024d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 81a6 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 81a1 	bne.w	8002830 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f7ff fa20 	bl	8001940 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b04      	cmp	r3, #4
 8002520:	d00a      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6919      	ldr	r1, [r3, #16]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002532:	f7ff f971 	bl	8001818 <LL_ADC_SetOffset>
 8002536:	e17b      	b.n	8002830 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f98e 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x148>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff f983 	bl	8001860 <LL_ADC_GetOffsetChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	e01e      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x186>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f978 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800258a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002592:	2320      	movs	r3, #32
 8002594:	e004      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x19e>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	e018      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e004      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80025e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d106      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f947 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f92b 	bl	8001860 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x20e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f920 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	e01e      	b.n	8002668 <HAL_ADC_ConfigChannel+0x24c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f915 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800264c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	e004      	b.n	8002666 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800265c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x264>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	e018      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x296>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002694:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800269c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e004      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80026a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f8e4 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8c8 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x2d4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f8bd 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	e01e      	b.n	800272e <HAL_ADC_ConfigChannel+0x312>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f8b2 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800270e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e004      	b.n	800272c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x32a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	e016      	b.n	8002774 <HAL_ADC_ConfigChannel+0x358>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800275e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800276a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f883 	bl	800188c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f867 	bl	8001860 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x396>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2103      	movs	r1, #3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff f85c 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	e017      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x3c6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f851 	bl	8001860 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80027d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x3de>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0e9b      	lsrs	r3, r3, #26
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	e011      	b.n	800281e <HAL_ADC_ConfigChannel+0x402>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800280a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800280c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800281e:	429a      	cmp	r2, r3
 8002820:	d106      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	2103      	movs	r1, #3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f82e 	bl	800188c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f965 	bl	8001b04 <LL_ADC_IsEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 813f 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f7ff f8a2 	bl	8001998 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a8e      	ldr	r2, [pc, #568]	; (8002a94 <HAL_ADC_ConfigChannel+0x678>)
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 8130 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x46c>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2b09      	cmp	r3, #9
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e019      	b.n	80028bc <HAL_ADC_ConfigChannel+0x4a0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002898:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800289a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80028a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	bf94      	ite	ls
 80028b6:	2301      	movls	r3, #1
 80028b8:	2300      	movhi	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d079      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x4c0>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	3301      	adds	r3, #1
 80028d4:	069b      	lsls	r3, r3, #26
 80028d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028da:	e015      	b.n	8002908 <HAL_ADC_ConfigChannel+0x4ec>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e003      	b.n	8002900 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	069b      	lsls	r3, r3, #26
 8002904:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d109      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x50c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	e017      	b.n	8002958 <HAL_ADC_ConfigChannel+0x53c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e003      	b.n	800294c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	ea42 0103 	orr.w	r1, r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x562>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0e9b      	lsrs	r3, r3, #26
 800296e:	3301      	adds	r3, #1
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	051b      	lsls	r3, r3, #20
 800297c:	e018      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x594>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e003      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b0:	430b      	orrs	r3, r1
 80029b2:	e080      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x5b4>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ce:	e015      	b.n	80029fc <HAL_ADC_ConfigChannel+0x5e0>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x600>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	e017      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x630>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10d      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x65c>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 021f 	and.w	r2, r3, #31
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3b1e      	subs	r3, #30
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a76:	e01d      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x698>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	613b      	str	r3, [r7, #16]
  return result;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002a90:	2320      	movs	r3, #32
 8002a92:	e005      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x684>
 8002a94:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b1e      	subs	r3, #30
 8002aae:	051b      	lsls	r3, r3, #20
 8002ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	6892      	ldr	r2, [r2, #8]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe ff40 	bl	8001940 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d07a      	beq.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002acc:	4843      	ldr	r0, [pc, #268]	; (8002bdc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ace:	f7fe fe95 	bl	80017fc <LL_ADC_GetCommonPathInternalCh>
 8002ad2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a41      	ldr	r2, [pc, #260]	; (8002be0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d12c      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d126      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x6e4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d15d      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4834      	ldr	r0, [pc, #208]	; (8002bdc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b0c:	f7fe fe63 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b10:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_ADC_ConfigChannel+0x7d0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	4a36      	ldr	r2, [pc, #216]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b2a:	e002      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b38:	e040      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2d      	ldr	r2, [pc, #180]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d118      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x75a>
 8002b44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d112      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x748>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d12d      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481b      	ldr	r0, [pc, #108]	; (8002bdc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b70:	f7fe fe31 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	e024      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d120      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d115      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480e      	ldr	r0, [pc, #56]	; (8002bdc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ba2:	f7fe fe18 	bl	80017d6 <LL_ADC_SetCommonPathInternalCh>
 8002ba6:	e00c      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002bba:	e002      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	37d8      	adds	r7, #216	; 0xd8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	80080000 	.word	0x80080000
 8002bdc:	50040300 	.word	0x50040300
 8002be0:	c7520000 	.word	0xc7520000
 8002be4:	50040000 	.word	0x50040000
 8002be8:	50040200 	.word	0x50040200
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	053e2d63 	.word	0x053e2d63
 8002bf4:	cb840000 	.word	0xcb840000
 8002bf8:	80000001 	.word	0x80000001

08002bfc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ffc4 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8002c18:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe ffe5 	bl	8001bee <LL_ADC_INJ_IsConversionOngoing>
 8002c24:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8098 	beq.w	8002d64 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02a      	beq.n	8002c98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7e5b      	ldrb	r3, [r3, #25]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d126      	bne.n	8002c98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7e1b      	ldrb	r3, [r3, #24]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d122      	bne.n	8002c98 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c56:	e014      	b.n	8002c82 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <ADC_ConversionStop+0x174>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d90d      	bls.n	8002c7c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f043 0210 	orr.w	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e074      	b.n	8002d66 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d1e3      	bne.n	8002c58 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d014      	beq.n	8002cc8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe ff7c 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe ff39 	bl	8001b2a <LL_ADC_IsDisableOngoing>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe ff58 	bl	8001b78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d014      	beq.n	8002cf8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe ff8b 	bl	8001bee <LL_ADC_INJ_IsConversionOngoing>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ff21 	bl	8001b2a <LL_ADC_IsDisableOngoing>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe ff67 	bl	8001bc6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d005      	beq.n	8002d0a <ADC_ConversionStop+0x10e>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d105      	bne.n	8002d10 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d04:	230c      	movs	r3, #12
 8002d06:	617b      	str	r3, [r7, #20]
        break;
 8002d08:	e005      	b.n	8002d16 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	617b      	str	r3, [r7, #20]
        break;
 8002d0e:	e002      	b.n	8002d16 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d10:	2304      	movs	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]
        break;
 8002d14:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fd1b 	bl	8001750 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d1c:	e01b      	b.n	8002d56 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d1e:	f7fe fd17 	bl	8001750 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d914      	bls.n	8002d56 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e007      	b.n	8002d66 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1dc      	bne.n	8002d1e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	a33fffff 	.word	0xa33fffff

08002d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe febf 	bl	8001b04 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d14d      	bne.n	8002e28 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <ADC_Enable+0xc0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e039      	b.n	8002e2a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fe7a 	bl	8001ab4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fcc6 	bl	8001750 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc6:	e028      	b.n	8002e1a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fe99 	bl	8001b04 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fe69 	bl	8001ab4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002de2:	f7fe fcb5 	bl	8001750 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d914      	bls.n	8002e1a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d00d      	beq.n	8002e1a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d1cf      	bne.n	8002dc8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	8000003f 	.word	0x8000003f

08002e38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fe70 	bl	8001b2a <LL_ADC_IsDisableOngoing>
 8002e4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fe57 	bl	8001b04 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d047      	beq.n	8002eec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d144      	bne.n	8002eec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030d 	and.w	r3, r3, #13
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10c      	bne.n	8002e8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fe31 	bl	8001adc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e82:	f7fe fc65 	bl	8001750 <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e88:	e029      	b.n	8002ede <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e023      	b.n	8002eee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ea6:	f7fe fc53 	bl	8001750 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d914      	bls.n	8002ede <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f043 0210 	orr.w	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e007      	b.n	8002eee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1dc      	bne.n	8002ea6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d14b      	bne.n	8002fa8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d021      	beq.n	8002f6e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fcc7 	bl	80018c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d032      	beq.n	8002fa0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d12b      	bne.n	8002fa0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d11f      	bne.n	8002fa0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f6c:	e018      	b.n	8002fa0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d111      	bne.n	8002fa0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fa1c 	bl	80023de <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fa6:	e00e      	b.n	8002fc6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fa26 	bl	8002406 <HAL_ADC_ErrorCallback>
}
 8002fba:	e004      	b.n	8002fc6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7ff fa08 	bl	80023f2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f043 0204 	orr.w	r2, r3, #4
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff f9f8 	bl	8002406 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <LL_ADC_IsEnabled>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <LL_ADC_IsEnabled+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_IsEnabled+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_StartCalibration>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003056:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003060:	4313      	orrs	r3, r2
 8003062:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_IsCalibrationOnGoing>:
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800308a:	d101      	bne.n	8003090 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_ADC_REG_IsConversionOngoing>:
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d101      	bne.n	80030b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80030dc:	2302      	movs	r3, #2
 80030de:	e04d      	b.n	800317c <HAL_ADCEx_Calibration_Start+0xb8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fea5 	bl	8002e38 <ADC_Disable>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d136      	bne.n	8003166 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003100:	f023 0302 	bic.w	r3, r3, #2
 8003104:	f043 0202 	orr.w	r2, r3, #2
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6839      	ldr	r1, [r7, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff96 	bl	8003044 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003118:	e014      	b.n	8003144 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003126:	d30d      	bcc.n	8003144 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f023 0312 	bic.w	r3, r3, #18
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e01b      	b.n	800317c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff94 	bl	8003076 <LL_ADC_IsCalibrationOnGoing>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e2      	bne.n	800311a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f023 0303 	bic.w	r3, r3, #3
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
 8003164:	e005      	b.n	8003172 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003184:	b590      	push	{r4, r7, lr}
 8003186:	b09f      	sub	sp, #124	; 0x7c
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e093      	b.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031aa:	2300      	movs	r3, #0
 80031ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031ae:	2300      	movs	r3, #0
 80031b0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e001      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e072      	b.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff59 	bl	800309e <LL_ADC_REG_IsConversionOngoing>
 80031ec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff53 	bl	800309e <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d154      	bne.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80031fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003200:	2b00      	cmp	r3, #0
 8003202:	d151      	bne.n	80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003204:	4b35      	ldr	r3, [pc, #212]	; (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003206:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d02c      	beq.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003222:	035b      	lsls	r3, r3, #13
 8003224:	430b      	orrs	r3, r1
 8003226:	431a      	orrs	r2, r3
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800322c:	4829      	ldr	r0, [pc, #164]	; (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800322e:	f7ff fef6 	bl	800301e <LL_ADC_IsEnabled>
 8003232:	4604      	mov	r4, r0
 8003234:	4828      	ldr	r0, [pc, #160]	; (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003236:	f7ff fef2 	bl	800301e <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	431c      	orrs	r4, r3
 800323e:	4828      	ldr	r0, [pc, #160]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003240:	f7ff feed 	bl	800301e <LL_ADC_IsEnabled>
 8003244:	4603      	mov	r3, r0
 8003246:	4323      	orrs	r3, r4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d137      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	6811      	ldr	r1, [r2, #0]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	430a      	orrs	r2, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003268:	e028      	b.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003276:	4817      	ldr	r0, [pc, #92]	; (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003278:	f7ff fed1 	bl	800301e <LL_ADC_IsEnabled>
 800327c:	4604      	mov	r4, r0
 800327e:	4816      	ldr	r0, [pc, #88]	; (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003280:	f7ff fecd 	bl	800301e <LL_ADC_IsEnabled>
 8003284:	4603      	mov	r3, r0
 8003286:	431c      	orrs	r4, r3
 8003288:	4815      	ldr	r0, [pc, #84]	; (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800328a:	f7ff fec8 	bl	800301e <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	4323      	orrs	r3, r4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d112      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800329e:	f023 030f 	bic.w	r3, r3, #15
 80032a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a6:	e009      	b.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032ba:	e000      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	377c      	adds	r7, #124	; 0x7c
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}
 80032d2:	bf00      	nop
 80032d4:	50040000 	.word	0x50040000
 80032d8:	50040100 	.word	0x50040100
 80032dc:	50040300 	.word	0x50040300
 80032e0:	50040200 	.word	0x50040200

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	db0b      	blt.n	8003372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4907      	ldr	r1, [pc, #28]	; (8003380 <__NVIC_EnableIRQ+0x38>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <__NVIC_SetPriority+0x4c>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4908      	ldr	r1, [pc, #32]	; (80033d4 <__NVIC_SetPriority+0x50>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3b04      	subs	r3, #4
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf28      	it	cs
 80033f6:	2304      	movcs	r3, #4
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b03      	subs	r3, #3
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	401a      	ands	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003420:	f04f 31ff 	mov.w	r1, #4294967295
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43d9      	mvns	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4313      	orrs	r3, r2
         );
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003450:	d301      	bcc.n	8003456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003452:	2301      	movs	r3, #1
 8003454:	e00f      	b.n	8003476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <SysTick_Config+0x40>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345e:	210f      	movs	r1, #15
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7ff ff8e 	bl	8003384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <SysTick_Config+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <SysTick_Config+0x40>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff29 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff3e 	bl	800332c <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff8e 	bl	80033d8 <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5d 	bl	8003384 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff31 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa2 	bl	8003440 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ac      	b.n	8003674 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f8b2 	bl	8003688 <DFSDM_GetChannelFromInstance>
 8003524:	4603      	mov	r3, r0
 8003526:	4a55      	ldr	r2, [pc, #340]	; (800367c <HAL_DFSDM_ChannelInit+0x174>)
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e09f      	b.n	8003674 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7fd fced 	bl	8000f14 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <HAL_DFSDM_ChannelInit+0x178>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_DFSDM_ChannelInit+0x178>)
 8003542:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003544:	4b4e      	ldr	r3, [pc, #312]	; (8003680 <HAL_DFSDM_ChannelInit+0x178>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d125      	bne.n	8003598 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800354c:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 8003552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003556:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003558:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4948      	ldr	r1, [pc, #288]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003566:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 800356c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003570:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	791b      	ldrb	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800357a:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	493f      	ldr	r1, [pc, #252]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_DFSDM_ChannelInit+0x17c>)
 8003592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003596:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80035a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 020f 	bic.w	r2, r2, #15
 80035d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80035fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 0207 	and.w	r2, r2, #7
 8003628:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003654:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f810 	bl	8003688 <DFSDM_GetChannelFromInstance>
 8003668:	4602      	mov	r2, r0
 800366a:	4904      	ldr	r1, [pc, #16]	; (800367c <HAL_DFSDM_ChannelInit+0x174>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000098 	.word	0x20000098
 8003680:	20000094 	.word	0x20000094
 8003684:	40016000 	.word	0x40016000

08003688 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <DFSDM_GetChannelFromInstance+0x7c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d102      	bne.n	800369e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e02b      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <DFSDM_GetChannelFromInstance+0x80>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d102      	bne.n	80036ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e024      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a17      	ldr	r2, [pc, #92]	; (800370c <DFSDM_GetChannelFromInstance+0x84>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d102      	bne.n	80036ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80036b4:	2302      	movs	r3, #2
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e01d      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <DFSDM_GetChannelFromInstance+0x88>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80036c2:	2304      	movs	r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e016      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <DFSDM_GetChannelFromInstance+0x8c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80036d0:	2305      	movs	r3, #5
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e00f      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0f      	ldr	r2, [pc, #60]	; (8003718 <DFSDM_GetChannelFromInstance+0x90>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d102      	bne.n	80036e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80036de:	2306      	movs	r3, #6
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e008      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0d      	ldr	r2, [pc, #52]	; (800371c <DFSDM_GetChannelFromInstance+0x94>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d102      	bne.n	80036f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80036ec:	2307      	movs	r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e001      	b.n	80036f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80036f2:	2303      	movs	r3, #3
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40016000 	.word	0x40016000
 8003708:	40016020 	.word	0x40016020
 800370c:	40016040 	.word	0x40016040
 8003710:	40016080 	.word	0x40016080
 8003714:	400160a0 	.word	0x400160a0
 8003718:	400160c0 	.word	0x400160c0
 800371c:	400160e0 	.word	0x400160e0

08003720 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_DMA_Start_IT+0x20>
 800373c:	2302      	movs	r3, #2
 800373e:	e04b      	b.n	80037d8 <HAL_DMA_Start_IT+0xb8>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d13a      	bne.n	80037ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f831 	bl	80037e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 020e 	orr.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e00f      	b.n	80037b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 020a 	orr.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e005      	b.n	80037d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f003 021c 	and.w	r2, r3, #28
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b10      	cmp	r3, #16
 8003810:	d108      	bne.n	8003824 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003822:	e007      	b.n	8003834 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	e17f      	b.n	8003b50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8171 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d005      	beq.n	8003880 <HAL_GPIO_Init+0x40>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d130      	bne.n	80038e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038b6:	2201      	movs	r2, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 0201 	and.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d118      	bne.n	8003920 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038f4:	2201      	movs	r2, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d017      	beq.n	800395c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	6939      	ldr	r1, [r7, #16]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80ac 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_GPIO_Init+0x330>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	4a5e      	ldr	r2, [pc, #376]	; (8003b70 <HAL_GPIO_Init+0x330>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6613      	str	r3, [r2, #96]	; 0x60
 80039fe:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <HAL_GPIO_Init+0x330>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x242>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	; (8003b78 <HAL_GPIO_Init+0x338>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x23e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4e      	ldr	r2, [pc, #312]	; (8003b7c <HAL_GPIO_Init+0x33c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x23a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	; (8003b80 <HAL_GPIO_Init+0x340>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x236>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	; (8003b84 <HAL_GPIO_Init+0x344>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x232>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	; (8003b88 <HAL_GPIO_Init+0x348>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x22e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_GPIO_Init+0x34c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x22a>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a82:	2300      	movs	r3, #0
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a94:	4937      	ldr	r1, [pc, #220]	; (8003b74 <HAL_GPIO_Init+0x334>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac6:	4a32      	ldr	r2, [pc, #200]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003acc:	4b30      	ldr	r3, [pc, #192]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af0:	4a27      	ldr	r2, [pc, #156]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_GPIO_Init+0x350>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f ae78 	bne.w	8003850 <HAL_GPIO_Init+0x10>
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	48000400 	.word	0x48000400
 8003b7c:	48000800 	.word	0x48000800
 8003b80:	48000c00 	.word	0x48000c00
 8003b84:	48001000 	.word	0x48001000
 8003b88:	48001400 	.word	0x48001400
 8003b8c:	48001800 	.word	0x48001800
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f806 	bl	8003bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e081      	b.n	8003d20 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd f9d3 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d104      	bne.n	8003ca4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69d9      	ldr	r1, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d138      	bne.n	8003db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e032      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d139      	bne.n	8003e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e033      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e58:	b08f      	sub	sp, #60	; 0x3c
 8003e5a:	af0a      	add	r7, sp, #40	; 0x28
 8003e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e116      	b.n	8004096 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fa34 	bl	80012f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f002 fa6d 	bl	8006386 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	687e      	ldr	r6, [r7, #4]
 8003eb4:	466d      	mov	r5, sp
 8003eb6:	f106 0410 	add.w	r4, r6, #16
 8003eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eca:	1d33      	adds	r3, r6, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f002 fa2d 	bl	800632e <USB_CoreInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0d7      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 fa5b 	bl	80063a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e04a      	b.n	8003f8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	333d      	adds	r3, #61	; 0x3d
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	333c      	adds	r3, #60	; 0x3c
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	b298      	uxth	r0, r3
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3342      	adds	r3, #66	; 0x42
 8003f34:	4602      	mov	r2, r0
 8003f36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	333f      	adds	r3, #63	; 0x3f
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3344      	adds	r3, #68	; 0x44
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3348      	adds	r3, #72	; 0x48
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3350      	adds	r3, #80	; 0x50
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3af      	bcc.n	8003ef8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e044      	b.n	8004028 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3301      	adds	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d3b5      	bcc.n	8003f9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	687e      	ldr	r6, [r7, #4]
 800403a:	466d      	mov	r5, sp
 800403c:	f106 0410 	add.w	r4, r6, #16
 8004040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800404c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004050:	1d33      	adds	r3, r6, #4
 8004052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f002 f9f3 	bl	8006440 <USB_DevInit>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e014      	b.n	8004096 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f80a 	bl	800409e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f002 fb9b 	bl	80067ca <USB_DevDisconnect>

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	f043 0303 	orr.w	r3, r3, #3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a04      	ldr	r2, [pc, #16]	; (8004104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40007000 	.word	0x40007000

08004108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <HAL_PWREx_GetVoltageRange+0x18>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004132:	d130      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d038      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2232      	movs	r2, #50	; 0x32
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004168:	e002      	b.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d102      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d110      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e00f      	b.n	80041b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d007      	beq.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000
 80041c8:	20000000 	.word	0x20000000
 80041cc:	431bde83 	.word	0x431bde83

080041d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80041da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041de:	6053      	str	r3, [r2, #4]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40007000 	.word	0x40007000

080041f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041f8:	f7fd faaa 	bl	8001750 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e063      	b.n	80042d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc ff3b 	bl	8001098 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004222:	f241 3188 	movw	r1, #5000	; 0x1388
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f858 	bl	80042dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	3b01      	subs	r3, #1
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	2120      	movs	r1, #32
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f850 	bl	80042f8 <QSPI_WaitFlagStateUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d131      	bne.n	80042c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	0611      	lsls	r1, r2, #24
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68d2      	ldr	r2, [r2, #12]
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_QSPI_Init+0xe8>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	0411      	lsls	r1, r2, #16
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6952      	ldr	r2, [r2, #20]
 8004298:	4311      	orrs	r1, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6992      	ldr	r2, [r2, #24]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80042ce:	7afb      	ldrb	r3, [r7, #11]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	ffe0f8fe 	.word	0xffe0f8fe

080042dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004308:	e01a      	b.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d016      	beq.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fd fa1d 	bl	8001750 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00e      	b.n	800435e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d1d6      	bne.n	800430a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e3d4      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4ba1      	ldr	r3, [pc, #644]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	4b9e      	ldr	r3, [pc, #632]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80e4 	beq.w	8004564 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	f040 808b 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 8087 	bne.w	80044c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b2:	4b93      	ldr	r3, [pc, #588]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_RCC_OscConfig+0x62>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e3ac      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	4b8c      	ldr	r3, [pc, #560]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_RCC_OscConfig+0x7c>
 80043da:	4b89      	ldr	r3, [pc, #548]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_OscConfig+0x88>
 80043e4:	4b86      	ldr	r3, [pc, #536]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d223      	bcs.n	800443c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fd41 	bl	8004e80 <RCC_SetFlashLatencyFromMSIRange>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e38d      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004408:	4b7d      	ldr	r3, [pc, #500]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7c      	ldr	r2, [pc, #496]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800440e:	f043 0308 	orr.w	r3, r3, #8
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b7a      	ldr	r3, [pc, #488]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4977      	ldr	r1, [pc, #476]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004426:	4b76      	ldr	r3, [pc, #472]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	4972      	ldr	r1, [pc, #456]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
 800443a:	e025      	b.n	8004488 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	4b70      	ldr	r3, [pc, #448]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6f      	ldr	r2, [pc, #444]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004442:	f043 0308 	orr.w	r3, r3, #8
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	496a      	ldr	r1, [pc, #424]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445a:	4b69      	ldr	r3, [pc, #420]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4965      	ldr	r1, [pc, #404]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd01 	bl	8004e80 <RCC_SetFlashLatencyFromMSIRange>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e34d      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004488:	f000 fc36 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	495a      	ldr	r1, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x29c>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_OscConfig+0x2a0>)
 80044a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044a8:	4b58      	ldr	r3, [pc, #352]	; (800460c <HAL_RCC_OscConfig+0x2a4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd f8ff 	bl	80016b0 <HAL_InitTick>
 80044b2:	4603      	mov	r3, r0
 80044b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d052      	beq.n	8004562 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	e331      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d032      	beq.n	800452e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4c      	ldr	r2, [pc, #304]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d4:	f7fd f93c 	bl	8001750 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044dc:	f7fd f938 	bl	8001750 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e31a      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ee:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	493b      	ldr	r1, [pc, #236]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004518:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	4936      	ldr	r1, [pc, #216]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
 800452c:	e01a      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800452e:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a33      	ldr	r2, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800453a:	f7fd f909 	bl	8001750 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004542:	f7fd f905 	bl	8001750 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e2e7      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x1da>
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004562:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d074      	beq.n	800465a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b08      	cmp	r3, #8
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x21a>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d10e      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d10b      	bne.n	800459a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d064      	beq.n	8004658 <HAL_RCC_OscConfig+0x2f0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d160      	bne.n	8004658 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e2c4      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x24a>
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	e01d      	b.n	80045ee <HAL_RCC_OscConfig+0x286>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x26e>
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x286>
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a06      	ldr	r2, [pc, #24]	; (8004600 <HAL_RCC_OscConfig+0x298>)
 80045e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01c      	beq.n	8004630 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fd f8ab 	bl	8001750 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fc:	e011      	b.n	8004622 <HAL_RCC_OscConfig+0x2ba>
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	080077c8 	.word	0x080077c8
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd f89e 	bl	8001750 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e280      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004622:	4baf      	ldr	r3, [pc, #700]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x2a8>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd f88e 	bl	8001750 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fd f88a 	bl	8001750 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	; 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e26c      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464a:	4ba5      	ldr	r3, [pc, #660]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0x2d0>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d060      	beq.n	8004728 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d005      	beq.n	8004678 <HAL_RCC_OscConfig+0x310>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d119      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d116      	bne.n	80046a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004678:	4b99      	ldr	r3, [pc, #612]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_OscConfig+0x328>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e249      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004690:	4b93      	ldr	r3, [pc, #588]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	4990      	ldr	r1, [pc, #576]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a4:	e040      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d023      	beq.n	80046f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ae:	4b8c      	ldr	r3, [pc, #560]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a8b      	ldr	r2, [pc, #556]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fd f849 	bl	8001750 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c2:	f7fd f845 	bl	8001750 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e227      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e0:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	497c      	ldr	r1, [pc, #496]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046f6:	4b7a      	ldr	r3, [pc, #488]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a79      	ldr	r2, [pc, #484]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80046fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fd f825 	bl	8001750 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fd f821 	bl	8001750 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e203      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471c:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d03c      	beq.n	80047ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473c:	4b68      	ldr	r3, [pc, #416]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	4a67      	ldr	r2, [pc, #412]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fd f800 	bl	8001750 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fc fffc 	bl	8001750 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1de      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004766:	4b5e      	ldr	r3, [pc, #376]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <HAL_RCC_OscConfig+0x3ec>
 8004774:	e01b      	b.n	80047ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004776:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fc ffe3 	bl	8001750 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478e:	f7fc ffdf 	bl	8001750 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1c1      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a0:	4b4f      	ldr	r3, [pc, #316]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ef      	bne.n	800478e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a6 	beq.w	8004908 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c0:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a43      	ldr	r2, [pc, #268]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCC_OscConfig+0x57c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f4:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <HAL_RCC_OscConfig+0x57c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <HAL_RCC_OscConfig+0x57c>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004800:	f7fc ffa6 	bl	8001750 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fc ffa2 	bl	8001750 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e184      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481a:	4b32      	ldr	r3, [pc, #200]	; (80048e4 <HAL_RCC_OscConfig+0x57c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_RCC_OscConfig+0x4d8>
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483e:	e024      	b.n	800488a <HAL_RCC_OscConfig+0x522>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d110      	bne.n	800486a <HAL_RCC_OscConfig+0x502>
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004858:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004868:	e00f      	b.n	800488a <HAL_RCC_OscConfig+0x522>
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	4a17      	ldr	r2, [pc, #92]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fc ff5d 	bl	8001750 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fc ff59 	bl	8001750 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e139      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_OscConfig+0x578>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ed      	beq.n	800489a <HAL_RCC_OscConfig+0x532>
 80048be:	e01a      	b.n	80048f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fc ff46 	bl	8001750 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c6:	e00f      	b.n	80048e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fc ff42 	bl	8001750 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d906      	bls.n	80048e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e122      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	4b90      	ldr	r3, [pc, #576]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e8      	bne.n	80048c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f6:	7ffb      	ldrb	r3, [r7, #31]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a8a      	ldr	r2, [pc, #552]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8108 	beq.w	8004b22 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	2b02      	cmp	r3, #2
 8004918:	f040 80d0 	bne.w	8004abc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491c:	4b83      	ldr	r3, [pc, #524]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	429a      	cmp	r2, r3
 800492e:	d130      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	3b01      	subs	r3, #1
 800493c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d127      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d11f      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800495c:	2a07      	cmp	r2, #7
 800495e:	bf14      	ite	ne
 8004960:	2201      	movne	r2, #1
 8004962:	2200      	moveq	r2, #0
 8004964:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d109      	bne.n	8004992 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	3b01      	subs	r3, #1
 800498c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d06e      	beq.n	8004a70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0c      	cmp	r3, #12
 8004996:	d069      	beq.n	8004a6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004998:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b7      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b4:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a5c      	ldr	r2, [pc, #368]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c0:	f7fc fec6 	bl	8001750 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fc fec2 	bl	8001750 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0a4      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049da:	4b54      	ldr	r3, [pc, #336]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e6:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <HAL_RCC_OscConfig+0x7c8>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a00:	0212      	lsls	r2, r2, #8
 8004a02:	4311      	orrs	r1, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	0552      	lsls	r2, r2, #21
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	3a01      	subs	r2, #1
 8004a18:	0652      	lsls	r2, r2, #25
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a20:	0912      	lsrs	r2, r2, #4
 8004a22:	0452      	lsls	r2, r2, #17
 8004a24:	430a      	orrs	r2, r1
 8004a26:	4941      	ldr	r1, [pc, #260]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a44:	f7fc fe84 	bl	8001750 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fc fe80 	bl	8001750 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e062      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6a:	e05a      	b.n	8004b22 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e059      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d152      	bne.n	8004b22 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a94:	f7fc fe5c 	bl	8001750 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fc fe58 	bl	8001750 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e03a      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x734>
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d02d      	beq.n	8004b1e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004acc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ace:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ada:	4b14      	ldr	r3, [pc, #80]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ae6:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4a10      	ldr	r2, [pc, #64]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004aec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fc fe2b 	bl	8001750 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fc fe27 	bl	8001750 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e009      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_OscConfig+0x7c4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x796>
 8004b1c:	e001      	b.n	8004b22 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	f99d808c 	.word	0xf99d808c

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0c8      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b66      	ldr	r3, [pc, #408]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d910      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 0207 	bic.w	r2, r3, #7
 8004b5e:	4961      	ldr	r1, [pc, #388]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b0      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d04c      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8c:	4b56      	ldr	r3, [pc, #344]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d121      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e09e      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba4:	4b50      	ldr	r3, [pc, #320]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e092      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bbc:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e086      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bcc:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e07e      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bdc:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 0203 	bic.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	493f      	ldr	r1, [pc, #252]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bee:	f7fc fdaf 	bl	8001750 <HAL_GetTick>
 8004bf2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf6:	f7fc fdab 	bl	8001750 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e066      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0c:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 020c 	and.w	r2, r3, #12
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d1eb      	bne.n	8004bf6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	492c      	ldr	r1, [pc, #176]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d210      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4924      	ldr	r1, [pc, #144]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e036      	b.n	8004cda <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4918      	ldr	r1, [pc, #96]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4910      	ldr	r1, [pc, #64]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004caa:	f000 f825 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b4>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490c      	ldr	r1, [pc, #48]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fcee 	bl	80016b0 <HAL_InitTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	080077c8 	.word	0x080077c8
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	20000004 	.word	0x20000004

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d10:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x34>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d121      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11e      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d38:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d54:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e004      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d7c:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004d7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d134      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCC_GetSysClockFreq+0xac>
 8004d9c:	e005      	b.n	8004daa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004da0:	617b      	str	r3, [r7, #20]
      break;
 8004da2:	e005      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004da6:	617b      	str	r3, [r7, #20]
      break;
 8004da8:	e002      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	617b      	str	r3, [r7, #20]
      break;
 8004dae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	3301      	adds	r3, #1
 8004dbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	fb02 f203 	mul.w	r2, r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd6:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	0e5b      	lsrs	r3, r3, #25
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	3301      	adds	r3, #1
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004df0:	69bb      	ldr	r3, [r7, #24]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3724      	adds	r7, #36	; 0x24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	080077e0 	.word	0x080077e0
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	007a1200 	.word	0x007a1200

08004e10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000000 	.word	0x20000000

08004e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e2c:	f7ff fff0 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4904      	ldr	r1, [pc, #16]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	080077d8 	.word	0x080077d8

08004e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e58:	f7ff ffda 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0adb      	lsrs	r3, r3, #11
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	080077d8 	.word	0x080077d8

08004e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e8c:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e98:	f7ff f936 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004e9c:	6178      	str	r0, [r7, #20]
 8004e9e:	e014      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004eac:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eb8:	f7ff f926 	bl	8004108 <HAL_PWREx_GetVoltageRange>
 8004ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed0:	d10b      	bne.n	8004eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d919      	bls.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2ba0      	cmp	r3, #160	; 0xa0
 8004edc:	d902      	bls.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ede:	2302      	movs	r3, #2
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	e013      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e010      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d902      	bls.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	e00a      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d102      	bne.n	8004f02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004efc:	2302      	movs	r3, #2
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	e004      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b70      	cmp	r3, #112	; 0x70
 8004f06:	d101      	bne.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f08:	2301      	movs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 0207 	bic.w	r2, r3, #7
 8004f14:	4909      	ldr	r1, [pc, #36]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40022000 	.word	0x40022000

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d041      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f64:	d02a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f6a:	d824      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f70:	d008      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f76:	d81e      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f82:	e018      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f84:	4b86      	ldr	r3, [pc, #536]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a85      	ldr	r2, [pc, #532]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f90:	e015      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 facb 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa2:	e00c      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3320      	adds	r3, #32
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fbb6 	bl	800571c <RCCEx_PLLSAI2_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc4:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd2:	4973      	ldr	r1, [pc, #460]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fda:	e001      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d041      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ff4:	d02a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ffa:	d824      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005000:	d008      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005006:	d81e      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005010:	d010      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005012:	e018      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005014:	4b62      	ldr	r3, [pc, #392]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a61      	ldr	r2, [pc, #388]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005020:	e015      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa83 	bl	8005534 <RCCEx_PLLSAI1_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3320      	adds	r3, #32
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb6e 	bl	800571c <RCCEx_PLLSAI2_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	74fb      	strb	r3, [r7, #19]
      break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005054:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005062:	494f      	ldr	r1, [pc, #316]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800506a:	e001      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a0 	beq.w	80051be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005098:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	4a40      	ldr	r2, [pc, #256]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6593      	str	r3, [r2, #88]	; 0x58
 80050a4:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b0:	2301      	movs	r3, #1
 80050b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b4:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c0:	f7fc fb46 	bl	8001750 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c6:	e009      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fc fb42 	bl	8001750 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d902      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	74fb      	strb	r3, [r7, #19]
        break;
 80050da:	e005      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d15c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d019      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d016      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fc fb01 	bl	8001750 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005150:	e00b      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fc fafd 	bl	8001750 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d902      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	74fb      	strb	r3, [r7, #19]
            break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ec      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518e:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005196:	e009      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005198:	7cfb      	ldrb	r3, [r7, #19]
 800519a:	74bb      	strb	r3, [r7, #18]
 800519c:	e006      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ac:	7c7b      	ldrb	r3, [r7, #17]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d105      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b2:	4b9e      	ldr	r3, [pc, #632]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a9d      	ldr	r2, [pc, #628]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ca:	4b98      	ldr	r3, [pc, #608]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f023 0203 	bic.w	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4994      	ldr	r1, [pc, #592]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051ec:	4b8f      	ldr	r3, [pc, #572]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 020c 	bic.w	r2, r3, #12
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	498c      	ldr	r1, [pc, #560]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800520e:	4b87      	ldr	r3, [pc, #540]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4983      	ldr	r1, [pc, #524]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005230:	4b7e      	ldr	r3, [pc, #504]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523e:	497b      	ldr	r1, [pc, #492]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005252:	4b76      	ldr	r3, [pc, #472]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005260:	4972      	ldr	r1, [pc, #456]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005274:	4b6d      	ldr	r3, [pc, #436]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	496a      	ldr	r1, [pc, #424]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005296:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	4961      	ldr	r1, [pc, #388]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052b8:	4b5c      	ldr	r3, [pc, #368]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c6:	4959      	ldr	r1, [pc, #356]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052da:	4b54      	ldr	r3, [pc, #336]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	4950      	ldr	r1, [pc, #320]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	4948      	ldr	r1, [pc, #288]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800531e:	4b43      	ldr	r3, [pc, #268]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	493f      	ldr	r1, [pc, #252]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d028      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005340:	4b3a      	ldr	r3, [pc, #232]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534e:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535e:	d106      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005360:	4b32      	ldr	r3, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a31      	ldr	r2, [pc, #196]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e011      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005376:	d10c      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f8d8 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800539e:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	491f      	ldr	r1, [pc, #124]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053bc:	d106      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053c8:	60d3      	str	r3, [r2, #12]
 80053ca:	e011      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3304      	adds	r3, #4
 80053da:	2101      	movs	r1, #1
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 f8a9 	bl	8005534 <RCCEx_PLLSAI1_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d02b      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	4908      	ldr	r1, [pc, #32]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a02      	ldr	r2, [pc, #8]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
 8005428:	e014      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005438:	d10c      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	2101      	movs	r1, #1
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f877 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02f      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546e:	4928      	ldr	r1, [pc, #160]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547e:	d10d      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f854 	bl	8005534 <RCCEx_PLLSAI1_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	74bb      	strb	r3, [r7, #18]
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3320      	adds	r3, #32
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f935 	bl	800571c <RCCEx_PLLSAI2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054cc:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054da:	490d      	ldr	r1, [pc, #52]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054ee:	4b08      	ldr	r3, [pc, #32]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fe:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005506:	7cbb      	ldrb	r3, [r7, #18]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000

08005514 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000

08005534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005542:	4b75      	ldr	r3, [pc, #468]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800554e:	4b72      	ldr	r3, [pc, #456]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0203 	and.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d10d      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
       ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
       ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d047      	beq.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e044      	b.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d018      	beq.n	80055ba <RCCEx_PLLSAI1_Config+0x86>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d825      	bhi.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d002      	beq.n	8005596 <RCCEx_PLLSAI1_Config+0x62>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d009      	beq.n	80055a8 <RCCEx_PLLSAI1_Config+0x74>
 8005594:	e020      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005596:	4b60      	ldr	r3, [pc, #384]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11d      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a6:	e01a      	b.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055a8:	4b5b      	ldr	r3, [pc, #364]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b8:	e013      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ba:	4b57      	ldr	r3, [pc, #348]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055c6:	4b54      	ldr	r3, [pc, #336]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055d6:	e006      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	e004      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10d      	bne.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ee:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	430b      	orrs	r3, r1
 8005604:	4944      	ldr	r1, [pc, #272]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d17d      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a40      	ldr	r2, [pc, #256]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fc f898 	bl	8001750 <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005624:	f7fc f894 	bl	8001750 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
        break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005638:	4b37      	ldr	r3, [pc, #220]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d160      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d111      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005650:	4b31      	ldr	r3, [pc, #196]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6892      	ldr	r2, [r2, #8]
 8005660:	0211      	lsls	r1, r2, #8
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68d2      	ldr	r2, [r2, #12]
 8005666:	0912      	lsrs	r2, r2, #4
 8005668:	0452      	lsls	r2, r2, #17
 800566a:	430a      	orrs	r2, r1
 800566c:	492a      	ldr	r1, [pc, #168]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	610b      	str	r3, [r1, #16]
 8005672:	e027      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d112      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800567a:	4b27      	ldr	r3, [pc, #156]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005682:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6892      	ldr	r2, [r2, #8]
 800568a:	0211      	lsls	r1, r2, #8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6912      	ldr	r2, [r2, #16]
 8005690:	0852      	lsrs	r2, r2, #1
 8005692:	3a01      	subs	r2, #1
 8005694:	0552      	lsls	r2, r2, #21
 8005696:	430a      	orrs	r2, r1
 8005698:	491f      	ldr	r1, [pc, #124]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
 800569e:	e011      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a0:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6892      	ldr	r2, [r2, #8]
 80056b0:	0211      	lsls	r1, r2, #8
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6952      	ldr	r2, [r2, #20]
 80056b6:	0852      	lsrs	r2, r2, #1
 80056b8:	3a01      	subs	r2, #1
 80056ba:	0652      	lsls	r2, r2, #25
 80056bc:	430a      	orrs	r2, r1
 80056be:	4916      	ldr	r1, [pc, #88]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fc f83e 	bl	8001750 <HAL_GetTick>
 80056d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056d6:	e009      	b.n	80056ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d8:	f7fc f83a 	bl	8001750 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d902      	bls.n	80056ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	73fb      	strb	r3, [r7, #15]
          break;
 80056ea:	e005      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ef      	beq.n	80056d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056fe:	4b06      	ldr	r3, [pc, #24]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4904      	ldr	r1, [pc, #16]	; (8005718 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005708:	4313      	orrs	r3, r2
 800570a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40021000 	.word	0x40021000

0800571c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800572a:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005736:	4b67      	ldr	r3, [pc, #412]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0203 	and.w	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d10d      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
       ||
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800574e:	4b61      	ldr	r3, [pc, #388]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
       ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d047      	beq.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
 8005766:	e044      	b.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d018      	beq.n	80057a2 <RCCEx_PLLSAI2_Config+0x86>
 8005770:	2b03      	cmp	r3, #3
 8005772:	d825      	bhi.n	80057c0 <RCCEx_PLLSAI2_Config+0xa4>
 8005774:	2b01      	cmp	r3, #1
 8005776:	d002      	beq.n	800577e <RCCEx_PLLSAI2_Config+0x62>
 8005778:	2b02      	cmp	r3, #2
 800577a:	d009      	beq.n	8005790 <RCCEx_PLLSAI2_Config+0x74>
 800577c:	e020      	b.n	80057c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11d      	bne.n	80057c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578e:	e01a      	b.n	80057c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	2b00      	cmp	r3, #0
 800579a:	d116      	bne.n	80057ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a0:	e013      	b.n	80057ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ae:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057be:	e006      	b.n	80057ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      break;
 80057c4:	e004      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10d      	bne.n	80057f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	430b      	orrs	r3, r1
 80057ec:	4939      	ldr	r1, [pc, #228]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d167      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057f8:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005804:	f7fb ffa4 	bl	8001750 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800580a:	e009      	b.n	8005820 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800580c:	f7fb ffa0 	bl	8001750 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d902      	bls.n	8005820 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	73fb      	strb	r3, [r7, #15]
        break;
 800581e:	e005      	b.n	800582c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005820:	4b2c      	ldr	r3, [pc, #176]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ef      	bne.n	800580c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d14a      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d111      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005838:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	0211      	lsls	r1, r2, #8
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68d2      	ldr	r2, [r2, #12]
 800584e:	0912      	lsrs	r2, r2, #4
 8005850:	0452      	lsls	r2, r2, #17
 8005852:	430a      	orrs	r2, r1
 8005854:	491f      	ldr	r1, [pc, #124]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	614b      	str	r3, [r1, #20]
 800585a:	e011      	b.n	8005880 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005864:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6892      	ldr	r2, [r2, #8]
 800586c:	0211      	lsls	r1, r2, #8
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6912      	ldr	r2, [r2, #16]
 8005872:	0852      	lsrs	r2, r2, #1
 8005874:	3a01      	subs	r2, #1
 8005876:	0652      	lsls	r2, r2, #25
 8005878:	430a      	orrs	r2, r1
 800587a:	4916      	ldr	r1, [pc, #88]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587c:	4313      	orrs	r3, r2
 800587e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005880:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a13      	ldr	r2, [pc, #76]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fb ff60 	bl	8001750 <HAL_GetTick>
 8005890:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005892:	e009      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005894:	f7fb ff5c 	bl	8001750 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
          break;
 80058a6:	e005      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ef      	beq.n	8005894 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058ba:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4904      	ldr	r1, [pc, #16]	; (80058d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000

080058d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e095      	b.n	8005a16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d108      	bne.n	8005904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058fa:	d009      	beq.n	8005910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	61da      	str	r2, [r3, #28]
 8005902:	e005      	b.n	8005910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d106      	bne.n	8005930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fbf8 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005946:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005950:	d902      	bls.n	8005958 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e002      	b.n	800595e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800595c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005966:	d007      	beq.n	8005978 <HAL_SPI_Init+0xa0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005970:	d002      	beq.n	8005978 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	ea42 0103 	orr.w	r1, r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	f003 0204 	and.w	r2, r3, #4
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80059f4:	ea42 0103 	orr.w	r1, r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e040      	b.n	8005ab2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d106      	bne.n	8005a46 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fbb1 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2224      	movs	r2, #36	; 0x24
 8005a4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f82d 	bl	8005abc <UART_SetConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e022      	b.n	8005ab2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faab 	bl	8005fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fb32 	bl	8006114 <UART_CheckIdleState>
 8005ab0:	4603      	mov	r3, r0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4bad      	ldr	r3, [pc, #692]	; (8005d9c <UART_SetConfig+0x2e0>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4aa2      	ldr	r2, [pc, #648]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a99      	ldr	r2, [pc, #612]	; (8005da4 <UART_SetConfig+0x2e8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d121      	bne.n	8005b86 <UART_SetConfig+0xca>
 8005b42:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d817      	bhi.n	8005b80 <UART_SetConfig+0xc4>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x9c>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b75 	.word	0x08005b75
 8005b60:	08005b6f 	.word	0x08005b6f
 8005b64:	08005b7b 	.word	0x08005b7b
 8005b68:	2301      	movs	r3, #1
 8005b6a:	76fb      	strb	r3, [r7, #27]
 8005b6c:	e0e7      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	76fb      	strb	r3, [r7, #27]
 8005b72:	e0e4      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b74:	2304      	movs	r3, #4
 8005b76:	76fb      	strb	r3, [r7, #27]
 8005b78:	e0e1      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	76fb      	strb	r3, [r7, #27]
 8005b7e:	e0de      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b80:	2310      	movs	r3, #16
 8005b82:	76fb      	strb	r3, [r7, #27]
 8005b84:	e0db      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a88      	ldr	r2, [pc, #544]	; (8005dac <UART_SetConfig+0x2f0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d132      	bne.n	8005bf6 <UART_SetConfig+0x13a>
 8005b90:	4b85      	ldr	r3, [pc, #532]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d828      	bhi.n	8005bf0 <UART_SetConfig+0x134>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0xe8>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bf1 	.word	0x08005bf1
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005bdf 	.word	0x08005bdf
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf1 	.word	0x08005bf1
 8005bd4:	08005beb 	.word	0x08005beb
 8005bd8:	2300      	movs	r3, #0
 8005bda:	76fb      	strb	r3, [r7, #27]
 8005bdc:	e0af      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bde:	2302      	movs	r3, #2
 8005be0:	76fb      	strb	r3, [r7, #27]
 8005be2:	e0ac      	b.n	8005d3e <UART_SetConfig+0x282>
 8005be4:	2304      	movs	r3, #4
 8005be6:	76fb      	strb	r3, [r7, #27]
 8005be8:	e0a9      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bea:	2308      	movs	r3, #8
 8005bec:	76fb      	strb	r3, [r7, #27]
 8005bee:	e0a6      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	76fb      	strb	r3, [r7, #27]
 8005bf4:	e0a3      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6d      	ldr	r2, [pc, #436]	; (8005db0 <UART_SetConfig+0x2f4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d120      	bne.n	8005c42 <UART_SetConfig+0x186>
 8005c00:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c0a:	2b30      	cmp	r3, #48	; 0x30
 8005c0c:	d013      	beq.n	8005c36 <UART_SetConfig+0x17a>
 8005c0e:	2b30      	cmp	r3, #48	; 0x30
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x180>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x16e>
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d810      	bhi.n	8005c3c <UART_SetConfig+0x180>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x168>
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d006      	beq.n	8005c30 <UART_SetConfig+0x174>
 8005c22:	e00b      	b.n	8005c3c <UART_SetConfig+0x180>
 8005c24:	2300      	movs	r3, #0
 8005c26:	76fb      	strb	r3, [r7, #27]
 8005c28:	e089      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	76fb      	strb	r3, [r7, #27]
 8005c2e:	e086      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c30:	2304      	movs	r3, #4
 8005c32:	76fb      	strb	r3, [r7, #27]
 8005c34:	e083      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c36:	2308      	movs	r3, #8
 8005c38:	76fb      	strb	r3, [r7, #27]
 8005c3a:	e080      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	76fb      	strb	r3, [r7, #27]
 8005c40:	e07d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5b      	ldr	r2, [pc, #364]	; (8005db4 <UART_SetConfig+0x2f8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d120      	bne.n	8005c8e <UART_SetConfig+0x1d2>
 8005c4c:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c56:	2bc0      	cmp	r3, #192	; 0xc0
 8005c58:	d013      	beq.n	8005c82 <UART_SetConfig+0x1c6>
 8005c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c5c:	d814      	bhi.n	8005c88 <UART_SetConfig+0x1cc>
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d009      	beq.n	8005c76 <UART_SetConfig+0x1ba>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d810      	bhi.n	8005c88 <UART_SetConfig+0x1cc>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <UART_SetConfig+0x1b4>
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d006      	beq.n	8005c7c <UART_SetConfig+0x1c0>
 8005c6e:	e00b      	b.n	8005c88 <UART_SetConfig+0x1cc>
 8005c70:	2300      	movs	r3, #0
 8005c72:	76fb      	strb	r3, [r7, #27]
 8005c74:	e063      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c76:	2302      	movs	r3, #2
 8005c78:	76fb      	strb	r3, [r7, #27]
 8005c7a:	e060      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	76fb      	strb	r3, [r7, #27]
 8005c80:	e05d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c82:	2308      	movs	r3, #8
 8005c84:	76fb      	strb	r3, [r7, #27]
 8005c86:	e05a      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	76fb      	strb	r3, [r7, #27]
 8005c8c:	e057      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a49      	ldr	r2, [pc, #292]	; (8005db8 <UART_SetConfig+0x2fc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d125      	bne.n	8005ce4 <UART_SetConfig+0x228>
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca6:	d017      	beq.n	8005cd8 <UART_SetConfig+0x21c>
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d817      	bhi.n	8005cde <UART_SetConfig+0x222>
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d00b      	beq.n	8005ccc <UART_SetConfig+0x210>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d811      	bhi.n	8005cde <UART_SetConfig+0x222>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <UART_SetConfig+0x20a>
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d006      	beq.n	8005cd2 <UART_SetConfig+0x216>
 8005cc4:	e00b      	b.n	8005cde <UART_SetConfig+0x222>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	76fb      	strb	r3, [r7, #27]
 8005cca:	e038      	b.n	8005d3e <UART_SetConfig+0x282>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	76fb      	strb	r3, [r7, #27]
 8005cd0:	e035      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	76fb      	strb	r3, [r7, #27]
 8005cd6:	e032      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cd8:	2308      	movs	r3, #8
 8005cda:	76fb      	strb	r3, [r7, #27]
 8005cdc:	e02f      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cde:	2310      	movs	r3, #16
 8005ce0:	76fb      	strb	r3, [r7, #27]
 8005ce2:	e02c      	b.n	8005d3e <UART_SetConfig+0x282>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d125      	bne.n	8005d3a <UART_SetConfig+0x27e>
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cfc:	d017      	beq.n	8005d2e <UART_SetConfig+0x272>
 8005cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d02:	d817      	bhi.n	8005d34 <UART_SetConfig+0x278>
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d00b      	beq.n	8005d22 <UART_SetConfig+0x266>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d811      	bhi.n	8005d34 <UART_SetConfig+0x278>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <UART_SetConfig+0x260>
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d006      	beq.n	8005d28 <UART_SetConfig+0x26c>
 8005d1a:	e00b      	b.n	8005d34 <UART_SetConfig+0x278>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d22:	2302      	movs	r3, #2
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e00a      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e007      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	76fb      	strb	r3, [r7, #27]
 8005d32:	e004      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d34:	2310      	movs	r3, #16
 8005d36:	76fb      	strb	r3, [r7, #27]
 8005d38:	e001      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	f040 8087 	bne.w	8005e58 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d4a:	7efb      	ldrb	r3, [r7, #27]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d837      	bhi.n	8005dc0 <UART_SetConfig+0x304>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x29c>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005dc1 	.word	0x08005dc1
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005dc1 	.word	0x08005dc1
 8005d68:	08005d8b 	.word	0x08005d8b
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005dc1 	.word	0x08005dc1
 8005d74:	08005dc1 	.word	0x08005dc1
 8005d78:	08005d93 	.word	0x08005d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7ff f854 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8005d80:	6178      	str	r0, [r7, #20]
        break;
 8005d82:	e022      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <UART_SetConfig+0x300>)
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e01f      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8a:	f7fe ffb5 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8005d8e:	6178      	str	r0, [r7, #20]
        break;
 8005d90:	e01b      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	617b      	str	r3, [r7, #20]
        break;
 8005d98:	e017      	b.n	8005dca <UART_SetConfig+0x30e>
 8005d9a:	bf00      	nop
 8005d9c:	efff69f3 	.word	0xefff69f3
 8005da0:	40008000 	.word	0x40008000
 8005da4:	40013800 	.word	0x40013800
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40004400 	.word	0x40004400
 8005db0:	40004800 	.word	0x40004800
 8005db4:	40004c00 	.word	0x40004c00
 8005db8:	40005000 	.word	0x40005000
 8005dbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	76bb      	strb	r3, [r7, #26]
        break;
 8005dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80f1 	beq.w	8005fb4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d305      	bcc.n	8005dee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d902      	bls.n	8005df4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	76bb      	strb	r3, [r7, #26]
 8005df2:	e0df      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	020b      	lsls	r3, r1, #8
 8005e06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e0a:	0202      	lsls	r2, r0, #8
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	6849      	ldr	r1, [r1, #4]
 8005e10:	0849      	lsrs	r1, r1, #1
 8005e12:	4608      	mov	r0, r1
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	1814      	adds	r4, r2, r0
 8005e1a:	eb43 0501 	adc.w	r5, r3, r1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	f7fa fa20 	bl	8000270 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4613      	mov	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3e:	d308      	bcc.n	8005e52 <UART_SetConfig+0x396>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e46:	d204      	bcs.n	8005e52 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e0b0      	b.n	8005fb4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	76bb      	strb	r3, [r7, #26]
 8005e56:	e0ad      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d15b      	bne.n	8005f1a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005e62:	7efb      	ldrb	r3, [r7, #27]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d828      	bhi.n	8005eba <UART_SetConfig+0x3fe>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x3b4>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	08005ebb 	.word	0x08005ebb
 8005e80:	08005eab 	.word	0x08005eab
 8005e84:	08005ebb 	.word	0x08005ebb
 8005e88:	08005ebb 	.word	0x08005ebb
 8005e8c:	08005ebb 	.word	0x08005ebb
 8005e90:	08005eb3 	.word	0x08005eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fe ffc8 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8005e98:	6178      	str	r0, [r7, #20]
        break;
 8005e9a:	e013      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e9c:	f7fe ffda 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 8005ea0:	6178      	str	r0, [r7, #20]
        break;
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea4:	4b49      	ldr	r3, [pc, #292]	; (8005fcc <UART_SetConfig+0x510>)
 8005ea6:	617b      	str	r3, [r7, #20]
        break;
 8005ea8:	e00c      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eaa:	f7fe ff25 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8005eae:	6178      	str	r0, [r7, #20]
        break;
 8005eb0:	e008      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	617b      	str	r3, [r7, #20]
        break;
 8005eb8:	e004      	b.n	8005ec4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d074      	beq.n	8005fb4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005a      	lsls	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	d916      	bls.n	8005f14 <UART_SetConfig+0x458>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eec:	d212      	bcs.n	8005f14 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f023 030f 	bic.w	r3, r3, #15
 8005ef6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	89fb      	ldrh	r3, [r7, #14]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	89fa      	ldrh	r2, [r7, #14]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	e04f      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	76bb      	strb	r3, [r7, #26]
 8005f18:	e04c      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f1a:	7efb      	ldrb	r3, [r7, #27]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d828      	bhi.n	8005f72 <UART_SetConfig+0x4b6>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x46c>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	08005f73 	.word	0x08005f73
 8005f38:	08005f63 	.word	0x08005f63
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005f73 	.word	0x08005f73
 8005f44:	08005f73 	.word	0x08005f73
 8005f48:	08005f6b 	.word	0x08005f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fe ff6c 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8005f50:	6178      	str	r0, [r7, #20]
        break;
 8005f52:	e013      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7fe ff7e 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 8005f58:	6178      	str	r0, [r7, #20]
        break;
 8005f5a:	e00f      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <UART_SetConfig+0x510>)
 8005f5e:	617b      	str	r3, [r7, #20]
        break;
 8005f60:	e00c      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f62:	f7fe fec9 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8005f66:	6178      	str	r0, [r7, #20]
        break;
 8005f68:	e008      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6e:	617b      	str	r3, [r7, #20]
        break;
 8005f70:	e004      	b.n	8005f7c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	76bb      	strb	r3, [r7, #26]
        break;
 8005f7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d018      	beq.n	8005fb4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085a      	lsrs	r2, r3, #1
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b0f      	cmp	r3, #15
 8005f9a:	d909      	bls.n	8005fb0 <UART_SetConfig+0x4f4>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d205      	bcs.n	8005fb0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	e001      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	00f42400 	.word	0x00f42400

08005fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ce:	d10a      	bne.n	80060e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006124:	f7fb fb14 	bl	8001750 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10e      	bne.n	8006156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f82d 	bl	80061a6 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e023      	b.n	800619e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d10e      	bne.n	8006182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f817 	bl	80061a6 <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00d      	b.n	800619e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b09c      	sub	sp, #112	; 0x70
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	4613      	mov	r3, r2
 80061b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b6:	e0a5      	b.n	8006304 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	f000 80a1 	beq.w	8006304 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c2:	f7fb fac5 	bl	8001750 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80061d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d13e      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ec:	667b      	str	r3, [r7, #100]	; 0x64
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e6      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	663b      	str	r3, [r7, #96]	; 0x60
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3308      	adds	r3, #8
 8006228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800622a:	64ba      	str	r2, [r7, #72]	; 0x48
 800622c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e067      	b.n	8006326 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d04f      	beq.n	8006304 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006272:	d147      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800627c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
 800629e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	613b      	str	r3, [r7, #16]
   return(result);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062d0:	623a      	str	r2, [r7, #32]
 80062d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	69f9      	ldr	r1, [r7, #28]
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e010      	b.n	8006326 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69da      	ldr	r2, [r3, #28]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4013      	ands	r3, r2
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	429a      	cmp	r2, r3
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	429a      	cmp	r2, r3
 8006320:	f43f af4a 	beq.w	80061b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3770      	adds	r7, #112	; 0x70
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800632e:	b084      	sub	sp, #16
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	f107 001c 	add.w	r0, r7, #28
 800633c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa6b 	bl	8006828 <USB_CoreReset>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	; 0x38
 8006368:	e005      	b.n	8006376 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006382:	b004      	add	sp, #16
 8006384:	4770      	bx	lr

08006386 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d115      	bne.n	80063f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d6:	2001      	movs	r0, #1
 80063d8:	f7fb f9c6 	bl	8001768 <HAL_Delay>
      ms++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa12 	bl	800680c <USB_GetMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d01e      	beq.n	800642c <USB_SetCurrentMode+0x84>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b31      	cmp	r3, #49	; 0x31
 80063f2:	d9f0      	bls.n	80063d6 <USB_SetCurrentMode+0x2e>
 80063f4:	e01a      	b.n	800642c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006408:	2001      	movs	r0, #1
 800640a:	f7fb f9ad 	bl	8001768 <HAL_Delay>
      ms++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f9f9 	bl	800680c <USB_GetMode>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <USB_SetCurrentMode+0x84>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b31      	cmp	r3, #49	; 0x31
 8006424:	d9f0      	bls.n	8006408 <USB_SetCurrentMode+0x60>
 8006426:	e001      	b.n	800642c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e005      	b.n	8006438 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b32      	cmp	r3, #50	; 0x32
 8006430:	d101      	bne.n	8006436 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006440:	b084      	sub	sp, #16
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800644e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e009      	b.n	8006474 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3340      	adds	r3, #64	; 0x40
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	2200      	movs	r2, #0
 800646c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	3301      	adds	r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	2b0e      	cmp	r3, #14
 8006478:	d9f2      	bls.n	8006460 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11c      	bne.n	80064ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e005      	b.n	80064c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064cc:	461a      	mov	r2, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	4619      	mov	r1, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	461a      	mov	r2, r3
 80064e2:	680b      	ldr	r3, [r1, #0]
 80064e4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064e6:	2103      	movs	r1, #3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f955 	bl	8006798 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ee:	2110      	movs	r1, #16
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8f1 	bl	80066d8 <USB_FlushTxFifo>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f91b 	bl	800673c <USB_FlushRxFifo>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	461a      	mov	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006522:	461a      	mov	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	461a      	mov	r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	e043      	b.n	80065c2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006550:	d118      	bne.n	8006584 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	461a      	mov	r2, r3
 8006566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e013      	b.n	8006596 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e008      	b.n	8006596 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	461a      	mov	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	461a      	mov	r2, r3
 80065b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	3301      	adds	r3, #1
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3b7      	bcc.n	800653a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e043      	b.n	8006658 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e6:	d118      	bne.n	800661a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e013      	b.n	800662c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e008      	b.n	800662c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	461a      	mov	r2, r3
 800664c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006650:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	429a      	cmp	r2, r3
 800665e:	d3b7      	bcc.n	80065d0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800666e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006672:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f043 0210 	orr.w	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <USB_DevInit+0x294>)
 8006694:	4313      	orrs	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800669a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f043 0208 	orr.w	r2, r3, #8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d107      	bne.n	80066c2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ce:	b004      	add	sp, #16
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	803c3800 	.word	0x803c3800

080066d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	4a12      	ldr	r2, [pc, #72]	; (8006738 <USB_FlushTxFifo+0x60>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e01a      	b.n	800672c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	daf3      	bge.n	80066e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	019b      	lsls	r3, r3, #6
 8006706:	f043 0220 	orr.w	r2, r3, #32
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <USB_FlushTxFifo+0x60>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e006      	b.n	800672c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	d0f1      	beq.n	800670e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	00030d40 	.word	0x00030d40

0800673c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	4a11      	ldr	r2, [pc, #68]	; (8006794 <USB_FlushRxFifo+0x58>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e017      	b.n	8006788 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	daf3      	bge.n	8006748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2210      	movs	r2, #16
 8006768:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <USB_FlushRxFifo+0x58>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e006      	b.n	8006788 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b10      	cmp	r3, #16
 8006784:	d0f1      	beq.n	800676a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	00030d40 	.word	0x00030d40

08006798 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b8:	4313      	orrs	r3, r2
 80067ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067e4:	f023 0303 	bic.w	r3, r3, #3
 80067e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f003 0301 	and.w	r3, r3, #1
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	4a13      	ldr	r2, [pc, #76]	; (8006888 <USB_CoreReset+0x60>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e01a      	b.n	800687a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	daf3      	bge.n	8006834 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <USB_CoreReset+0x60>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e006      	b.n	800687a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d0f1      	beq.n	800685c <USB_CoreReset+0x34>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	00030d40 	.word	0x00030d40

0800688c <__errno>:
 800688c:	4b01      	ldr	r3, [pc, #4]	; (8006894 <__errno+0x8>)
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	2000000c 	.word	0x2000000c

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 ff76 	bl	800779c <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	080078b0 	.word	0x080078b0
 80068d4:	080078b0 	.word	0x080078b0
 80068d8:	080078b0 	.word	0x080078b0
 80068dc:	080078b4 	.word	0x080078b4

080068e0 <memset>:
 80068e0:	4402      	add	r2, r0
 80068e2:	4603      	mov	r3, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d100      	bne.n	80068ea <memset+0xa>
 80068e8:	4770      	bx	lr
 80068ea:	f803 1b01 	strb.w	r1, [r3], #1
 80068ee:	e7f9      	b.n	80068e4 <memset+0x4>

080068f0 <iprintf>:
 80068f0:	b40f      	push	{r0, r1, r2, r3}
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <iprintf+0x2c>)
 80068f4:	b513      	push	{r0, r1, r4, lr}
 80068f6:	681c      	ldr	r4, [r3, #0]
 80068f8:	b124      	cbz	r4, 8006904 <iprintf+0x14>
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	b913      	cbnz	r3, 8006904 <iprintf+0x14>
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f866 	bl	80069d0 <__sinit>
 8006904:	ab05      	add	r3, sp, #20
 8006906:	9a04      	ldr	r2, [sp, #16]
 8006908:	68a1      	ldr	r1, [r4, #8]
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f983 	bl	8006c18 <_vfiprintf_r>
 8006912:	b002      	add	sp, #8
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	b004      	add	sp, #16
 800691a:	4770      	bx	lr
 800691c:	2000000c 	.word	0x2000000c

08006920 <std>:
 8006920:	2300      	movs	r3, #0
 8006922:	b510      	push	{r4, lr}
 8006924:	4604      	mov	r4, r0
 8006926:	e9c0 3300 	strd	r3, r3, [r0]
 800692a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800692e:	6083      	str	r3, [r0, #8]
 8006930:	8181      	strh	r1, [r0, #12]
 8006932:	6643      	str	r3, [r0, #100]	; 0x64
 8006934:	81c2      	strh	r2, [r0, #14]
 8006936:	6183      	str	r3, [r0, #24]
 8006938:	4619      	mov	r1, r3
 800693a:	2208      	movs	r2, #8
 800693c:	305c      	adds	r0, #92	; 0x5c
 800693e:	f7ff ffcf 	bl	80068e0 <memset>
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <std+0x38>)
 8006944:	6263      	str	r3, [r4, #36]	; 0x24
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <std+0x3c>)
 8006948:	62a3      	str	r3, [r4, #40]	; 0x28
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <std+0x40>)
 800694c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <std+0x44>)
 8006950:	6224      	str	r4, [r4, #32]
 8006952:	6323      	str	r3, [r4, #48]	; 0x30
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	080071c1 	.word	0x080071c1
 800695c:	080071e3 	.word	0x080071e3
 8006960:	0800721b 	.word	0x0800721b
 8006964:	0800723f 	.word	0x0800723f

08006968 <_cleanup_r>:
 8006968:	4901      	ldr	r1, [pc, #4]	; (8006970 <_cleanup_r+0x8>)
 800696a:	f000 b8af 	b.w	8006acc <_fwalk_reent>
 800696e:	bf00      	nop
 8006970:	08007519 	.word	0x08007519

08006974 <__sfmoreglue>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	1e4a      	subs	r2, r1, #1
 8006978:	2568      	movs	r5, #104	; 0x68
 800697a:	4355      	muls	r5, r2
 800697c:	460e      	mov	r6, r1
 800697e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006982:	f000 f8c5 	bl	8006b10 <_malloc_r>
 8006986:	4604      	mov	r4, r0
 8006988:	b140      	cbz	r0, 800699c <__sfmoreglue+0x28>
 800698a:	2100      	movs	r1, #0
 800698c:	e9c0 1600 	strd	r1, r6, [r0]
 8006990:	300c      	adds	r0, #12
 8006992:	60a0      	str	r0, [r4, #8]
 8006994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006998:	f7ff ffa2 	bl	80068e0 <memset>
 800699c:	4620      	mov	r0, r4
 800699e:	bd70      	pop	{r4, r5, r6, pc}

080069a0 <__sfp_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sfp_lock_acquire+0x8>)
 80069a2:	f000 b8b3 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000076c 	.word	0x2000076c

080069ac <__sfp_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sfp_lock_release+0x8>)
 80069ae:	f000 b8ae 	b.w	8006b0e <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	2000076c 	.word	0x2000076c

080069b8 <__sinit_lock_acquire>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__sinit_lock_acquire+0x8>)
 80069ba:	f000 b8a7 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	20000767 	.word	0x20000767

080069c4 <__sinit_lock_release>:
 80069c4:	4801      	ldr	r0, [pc, #4]	; (80069cc <__sinit_lock_release+0x8>)
 80069c6:	f000 b8a2 	b.w	8006b0e <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	20000767 	.word	0x20000767

080069d0 <__sinit>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	f7ff fff0 	bl	80069b8 <__sinit_lock_acquire>
 80069d8:	69a3      	ldr	r3, [r4, #24]
 80069da:	b11b      	cbz	r3, 80069e4 <__sinit+0x14>
 80069dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e0:	f7ff bff0 	b.w	80069c4 <__sinit_lock_release>
 80069e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069e8:	6523      	str	r3, [r4, #80]	; 0x50
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <__sinit+0x68>)
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <__sinit+0x6c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	bf04      	itt	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	61a3      	streq	r3, [r4, #24]
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f820 	bl	8006a40 <__sfp>
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 f81c 	bl	8006a40 <__sfp>
 8006a08:	60a0      	str	r0, [r4, #8]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f818 	bl	8006a40 <__sfp>
 8006a10:	2200      	movs	r2, #0
 8006a12:	60e0      	str	r0, [r4, #12]
 8006a14:	2104      	movs	r1, #4
 8006a16:	6860      	ldr	r0, [r4, #4]
 8006a18:	f7ff ff82 	bl	8006920 <std>
 8006a1c:	68a0      	ldr	r0, [r4, #8]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	2109      	movs	r1, #9
 8006a22:	f7ff ff7d 	bl	8006920 <std>
 8006a26:	68e0      	ldr	r0, [r4, #12]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	2112      	movs	r1, #18
 8006a2c:	f7ff ff78 	bl	8006920 <std>
 8006a30:	2301      	movs	r3, #1
 8006a32:	61a3      	str	r3, [r4, #24]
 8006a34:	e7d2      	b.n	80069dc <__sinit+0xc>
 8006a36:	bf00      	nop
 8006a38:	08007810 	.word	0x08007810
 8006a3c:	08006969 	.word	0x08006969

08006a40 <__sfp>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	4607      	mov	r7, r0
 8006a44:	f7ff ffac 	bl	80069a0 <__sfp_lock_acquire>
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <__sfp+0x84>)
 8006a4a:	681e      	ldr	r6, [r3, #0]
 8006a4c:	69b3      	ldr	r3, [r6, #24]
 8006a4e:	b913      	cbnz	r3, 8006a56 <__sfp+0x16>
 8006a50:	4630      	mov	r0, r6
 8006a52:	f7ff ffbd 	bl	80069d0 <__sinit>
 8006a56:	3648      	adds	r6, #72	; 0x48
 8006a58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	d503      	bpl.n	8006a68 <__sfp+0x28>
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	b30b      	cbz	r3, 8006aa8 <__sfp+0x68>
 8006a64:	6836      	ldr	r6, [r6, #0]
 8006a66:	e7f7      	b.n	8006a58 <__sfp+0x18>
 8006a68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a6c:	b9d5      	cbnz	r5, 8006aa4 <__sfp+0x64>
 8006a6e:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <__sfp+0x88>)
 8006a70:	60e3      	str	r3, [r4, #12]
 8006a72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a76:	6665      	str	r5, [r4, #100]	; 0x64
 8006a78:	f000 f847 	bl	8006b0a <__retarget_lock_init_recursive>
 8006a7c:	f7ff ff96 	bl	80069ac <__sfp_lock_release>
 8006a80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a88:	6025      	str	r5, [r4, #0]
 8006a8a:	61a5      	str	r5, [r4, #24]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a94:	f7ff ff24 	bl	80068e0 <memset>
 8006a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	3468      	adds	r4, #104	; 0x68
 8006aa6:	e7d9      	b.n	8006a5c <__sfp+0x1c>
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff ff62 	bl	8006974 <__sfmoreglue>
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	6030      	str	r0, [r6, #0]
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d1d5      	bne.n	8006a64 <__sfp+0x24>
 8006ab8:	f7ff ff78 	bl	80069ac <__sfp_lock_release>
 8006abc:	230c      	movs	r3, #12
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	e7ee      	b.n	8006aa0 <__sfp+0x60>
 8006ac2:	bf00      	nop
 8006ac4:	08007810 	.word	0x08007810
 8006ac8:	ffff0001 	.word	0xffff0001

08006acc <_fwalk_reent>:
 8006acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	4688      	mov	r8, r1
 8006ad4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ad8:	2700      	movs	r7, #0
 8006ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ade:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae2:	d505      	bpl.n	8006af0 <_fwalk_reent+0x24>
 8006ae4:	6824      	ldr	r4, [r4, #0]
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	d1f7      	bne.n	8006ada <_fwalk_reent+0xe>
 8006aea:	4638      	mov	r0, r7
 8006aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af0:	89ab      	ldrh	r3, [r5, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d907      	bls.n	8006b06 <_fwalk_reent+0x3a>
 8006af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006afa:	3301      	adds	r3, #1
 8006afc:	d003      	beq.n	8006b06 <_fwalk_reent+0x3a>
 8006afe:	4629      	mov	r1, r5
 8006b00:	4630      	mov	r0, r6
 8006b02:	47c0      	blx	r8
 8006b04:	4307      	orrs	r7, r0
 8006b06:	3568      	adds	r5, #104	; 0x68
 8006b08:	e7e9      	b.n	8006ade <_fwalk_reent+0x12>

08006b0a <__retarget_lock_init_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <__retarget_lock_acquire_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <__retarget_lock_release_recursive>:
 8006b0e:	4770      	bx	lr

08006b10 <_malloc_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	1ccd      	adds	r5, r1, #3
 8006b14:	f025 0503 	bic.w	r5, r5, #3
 8006b18:	3508      	adds	r5, #8
 8006b1a:	2d0c      	cmp	r5, #12
 8006b1c:	bf38      	it	cc
 8006b1e:	250c      	movcc	r5, #12
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	4606      	mov	r6, r0
 8006b24:	db01      	blt.n	8006b2a <_malloc_r+0x1a>
 8006b26:	42a9      	cmp	r1, r5
 8006b28:	d903      	bls.n	8006b32 <_malloc_r+0x22>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	2000      	movs	r0, #0
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b32:	f000 fda3 	bl	800767c <__malloc_lock>
 8006b36:	4921      	ldr	r1, [pc, #132]	; (8006bbc <_malloc_r+0xac>)
 8006b38:	680a      	ldr	r2, [r1, #0]
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	b99c      	cbnz	r4, 8006b66 <_malloc_r+0x56>
 8006b3e:	4f20      	ldr	r7, [pc, #128]	; (8006bc0 <_malloc_r+0xb0>)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	b923      	cbnz	r3, 8006b4e <_malloc_r+0x3e>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 fb2a 	bl	80071a0 <_sbrk_r>
 8006b4c:	6038      	str	r0, [r7, #0]
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4630      	mov	r0, r6
 8006b52:	f000 fb25 	bl	80071a0 <_sbrk_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d123      	bne.n	8006ba2 <_malloc_r+0x92>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f000 fd92 	bl	8007688 <__malloc_unlock>
 8006b64:	e7e3      	b.n	8006b2e <_malloc_r+0x1e>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	1b5b      	subs	r3, r3, r5
 8006b6a:	d417      	bmi.n	8006b9c <_malloc_r+0x8c>
 8006b6c:	2b0b      	cmp	r3, #11
 8006b6e:	d903      	bls.n	8006b78 <_malloc_r+0x68>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	441c      	add	r4, r3
 8006b74:	6025      	str	r5, [r4, #0]
 8006b76:	e004      	b.n	8006b82 <_malloc_r+0x72>
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	42a2      	cmp	r2, r4
 8006b7c:	bf0c      	ite	eq
 8006b7e:	600b      	streq	r3, [r1, #0]
 8006b80:	6053      	strne	r3, [r2, #4]
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 fd80 	bl	8007688 <__malloc_unlock>
 8006b88:	f104 000b 	add.w	r0, r4, #11
 8006b8c:	1d23      	adds	r3, r4, #4
 8006b8e:	f020 0007 	bic.w	r0, r0, #7
 8006b92:	1ac2      	subs	r2, r0, r3
 8006b94:	d0cc      	beq.n	8006b30 <_malloc_r+0x20>
 8006b96:	1a1b      	subs	r3, r3, r0
 8006b98:	50a3      	str	r3, [r4, r2]
 8006b9a:	e7c9      	b.n	8006b30 <_malloc_r+0x20>
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	6864      	ldr	r4, [r4, #4]
 8006ba0:	e7cc      	b.n	8006b3c <_malloc_r+0x2c>
 8006ba2:	1cc4      	adds	r4, r0, #3
 8006ba4:	f024 0403 	bic.w	r4, r4, #3
 8006ba8:	42a0      	cmp	r0, r4
 8006baa:	d0e3      	beq.n	8006b74 <_malloc_r+0x64>
 8006bac:	1a21      	subs	r1, r4, r0
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f000 faf6 	bl	80071a0 <_sbrk_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d1dd      	bne.n	8006b74 <_malloc_r+0x64>
 8006bb8:	e7cf      	b.n	8006b5a <_malloc_r+0x4a>
 8006bba:	bf00      	nop
 8006bbc:	200000b8 	.word	0x200000b8
 8006bc0:	200000bc 	.word	0x200000bc

08006bc4 <__sfputc_r>:
 8006bc4:	6893      	ldr	r3, [r2, #8]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	b410      	push	{r4}
 8006bcc:	6093      	str	r3, [r2, #8]
 8006bce:	da08      	bge.n	8006be2 <__sfputc_r+0x1e>
 8006bd0:	6994      	ldr	r4, [r2, #24]
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	db01      	blt.n	8006bda <__sfputc_r+0x16>
 8006bd6:	290a      	cmp	r1, #10
 8006bd8:	d103      	bne.n	8006be2 <__sfputc_r+0x1e>
 8006bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bde:	f000 bb33 	b.w	8007248 <__swbuf_r>
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	1c58      	adds	r0, r3, #1
 8006be6:	6010      	str	r0, [r2, #0]
 8006be8:	7019      	strb	r1, [r3, #0]
 8006bea:	4608      	mov	r0, r1
 8006bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <__sfputs_r>:
 8006bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	18d5      	adds	r5, r2, r3
 8006bfc:	42ac      	cmp	r4, r5
 8006bfe:	d101      	bne.n	8006c04 <__sfputs_r+0x12>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e007      	b.n	8006c14 <__sfputs_r+0x22>
 8006c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c08:	463a      	mov	r2, r7
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ffda 	bl	8006bc4 <__sfputc_r>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d1f3      	bne.n	8006bfc <__sfputs_r+0xa>
 8006c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c18 <_vfiprintf_r>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	b09d      	sub	sp, #116	; 0x74
 8006c20:	4614      	mov	r4, r2
 8006c22:	4698      	mov	r8, r3
 8006c24:	4606      	mov	r6, r0
 8006c26:	b118      	cbz	r0, 8006c30 <_vfiprintf_r+0x18>
 8006c28:	6983      	ldr	r3, [r0, #24]
 8006c2a:	b90b      	cbnz	r3, 8006c30 <_vfiprintf_r+0x18>
 8006c2c:	f7ff fed0 	bl	80069d0 <__sinit>
 8006c30:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <_vfiprintf_r+0x240>)
 8006c32:	429d      	cmp	r5, r3
 8006c34:	d11b      	bne.n	8006c6e <_vfiprintf_r+0x56>
 8006c36:	6875      	ldr	r5, [r6, #4]
 8006c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3a:	07d9      	lsls	r1, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_vfiprintf_r+0x32>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	059a      	lsls	r2, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_vfiprintf_r+0x32>
 8006c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c46:	f7ff ff61 	bl	8006b0c <__retarget_lock_acquire_recursive>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	071b      	lsls	r3, r3, #28
 8006c4e:	d501      	bpl.n	8006c54 <_vfiprintf_r+0x3c>
 8006c50:	692b      	ldr	r3, [r5, #16]
 8006c52:	b9eb      	cbnz	r3, 8006c90 <_vfiprintf_r+0x78>
 8006c54:	4629      	mov	r1, r5
 8006c56:	4630      	mov	r0, r6
 8006c58:	f000 fb5a 	bl	8007310 <__swsetup_r>
 8006c5c:	b1c0      	cbz	r0, 8006c90 <_vfiprintf_r+0x78>
 8006c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c60:	07dc      	lsls	r4, r3, #31
 8006c62:	d50e      	bpl.n	8006c82 <_vfiprintf_r+0x6a>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b01d      	add	sp, #116	; 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	; (8006e5c <_vfiprintf_r+0x244>)
 8006c70:	429d      	cmp	r5, r3
 8006c72:	d101      	bne.n	8006c78 <_vfiprintf_r+0x60>
 8006c74:	68b5      	ldr	r5, [r6, #8]
 8006c76:	e7df      	b.n	8006c38 <_vfiprintf_r+0x20>
 8006c78:	4b79      	ldr	r3, [pc, #484]	; (8006e60 <_vfiprintf_r+0x248>)
 8006c7a:	429d      	cmp	r5, r3
 8006c7c:	bf08      	it	eq
 8006c7e:	68f5      	ldreq	r5, [r6, #12]
 8006c80:	e7da      	b.n	8006c38 <_vfiprintf_r+0x20>
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	0598      	lsls	r0, r3, #22
 8006c86:	d4ed      	bmi.n	8006c64 <_vfiprintf_r+0x4c>
 8006c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c8a:	f7ff ff40 	bl	8006b0e <__retarget_lock_release_recursive>
 8006c8e:	e7e9      	b.n	8006c64 <_vfiprintf_r+0x4c>
 8006c90:	2300      	movs	r3, #0
 8006c92:	9309      	str	r3, [sp, #36]	; 0x24
 8006c94:	2320      	movs	r3, #32
 8006c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9e:	2330      	movs	r3, #48	; 0x30
 8006ca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e64 <_vfiprintf_r+0x24c>
 8006ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ca8:	f04f 0901 	mov.w	r9, #1
 8006cac:	4623      	mov	r3, r4
 8006cae:	469a      	mov	sl, r3
 8006cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb4:	b10a      	cbz	r2, 8006cba <_vfiprintf_r+0xa2>
 8006cb6:	2a25      	cmp	r2, #37	; 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_vfiprintf_r+0x96>
 8006cba:	ebba 0b04 	subs.w	fp, sl, r4
 8006cbe:	d00b      	beq.n	8006cd8 <_vfiprintf_r+0xc0>
 8006cc0:	465b      	mov	r3, fp
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff93 	bl	8006bf2 <__sfputs_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f000 80aa 	beq.w	8006e26 <_vfiprintf_r+0x20e>
 8006cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd4:	445a      	add	r2, fp
 8006cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80a2 	beq.w	8006e26 <_vfiprintf_r+0x20e>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cec:	f10a 0a01 	add.w	sl, sl, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cfa:	4654      	mov	r4, sl
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d02:	4858      	ldr	r0, [pc, #352]	; (8006e64 <_vfiprintf_r+0x24c>)
 8006d04:	f7f9 fa64 	bl	80001d0 <memchr>
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	b9d8      	cbnz	r0, 8006d44 <_vfiprintf_r+0x12c>
 8006d0c:	06d1      	lsls	r1, r2, #27
 8006d0e:	bf44      	itt	mi
 8006d10:	2320      	movmi	r3, #32
 8006d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d16:	0713      	lsls	r3, r2, #28
 8006d18:	bf44      	itt	mi
 8006d1a:	232b      	movmi	r3, #43	; 0x2b
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d20:	f89a 3000 	ldrb.w	r3, [sl]
 8006d24:	2b2a      	cmp	r3, #42	; 0x2a
 8006d26:	d015      	beq.n	8006d54 <_vfiprintf_r+0x13c>
 8006d28:	9a07      	ldr	r2, [sp, #28]
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f04f 0c0a 	mov.w	ip, #10
 8006d32:	4621      	mov	r1, r4
 8006d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d38:	3b30      	subs	r3, #48	; 0x30
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d94e      	bls.n	8006ddc <_vfiprintf_r+0x1c4>
 8006d3e:	b1b0      	cbz	r0, 8006d6e <_vfiprintf_r+0x156>
 8006d40:	9207      	str	r2, [sp, #28]
 8006d42:	e014      	b.n	8006d6e <_vfiprintf_r+0x156>
 8006d44:	eba0 0308 	sub.w	r3, r0, r8
 8006d48:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	46a2      	mov	sl, r4
 8006d52:	e7d2      	b.n	8006cfa <_vfiprintf_r+0xe2>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d19      	adds	r1, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9103      	str	r1, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfbb      	ittet	lt
 8006d60:	425b      	neglt	r3, r3
 8006d62:	f042 0202 	orrlt.w	r2, r2, #2
 8006d66:	9307      	strge	r3, [sp, #28]
 8006d68:	9307      	strlt	r3, [sp, #28]
 8006d6a:	bfb8      	it	lt
 8006d6c:	9204      	strlt	r2, [sp, #16]
 8006d6e:	7823      	ldrb	r3, [r4, #0]
 8006d70:	2b2e      	cmp	r3, #46	; 0x2e
 8006d72:	d10c      	bne.n	8006d8e <_vfiprintf_r+0x176>
 8006d74:	7863      	ldrb	r3, [r4, #1]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	d135      	bne.n	8006de6 <_vfiprintf_r+0x1ce>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9203      	str	r2, [sp, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfb8      	it	lt
 8006d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8a:	3402      	adds	r4, #2
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e74 <_vfiprintf_r+0x25c>
 8006d92:	7821      	ldrb	r1, [r4, #0]
 8006d94:	2203      	movs	r2, #3
 8006d96:	4650      	mov	r0, sl
 8006d98:	f7f9 fa1a 	bl	80001d0 <memchr>
 8006d9c:	b140      	cbz	r0, 8006db0 <_vfiprintf_r+0x198>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	eba0 000a 	sub.w	r0, r0, sl
 8006da4:	fa03 f000 	lsl.w	r0, r3, r0
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	4303      	orrs	r3, r0
 8006dac:	3401      	adds	r4, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db4:	482c      	ldr	r0, [pc, #176]	; (8006e68 <_vfiprintf_r+0x250>)
 8006db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dba:	2206      	movs	r2, #6
 8006dbc:	f7f9 fa08 	bl	80001d0 <memchr>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d03f      	beq.n	8006e44 <_vfiprintf_r+0x22c>
 8006dc4:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <_vfiprintf_r+0x254>)
 8006dc6:	bb1b      	cbnz	r3, 8006e10 <_vfiprintf_r+0x1f8>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	3307      	adds	r3, #7
 8006dcc:	f023 0307 	bic.w	r3, r3, #7
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd6:	443b      	add	r3, r7
 8006dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dda:	e767      	b.n	8006cac <_vfiprintf_r+0x94>
 8006ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de0:	460c      	mov	r4, r1
 8006de2:	2001      	movs	r0, #1
 8006de4:	e7a5      	b.n	8006d32 <_vfiprintf_r+0x11a>
 8006de6:	2300      	movs	r3, #0
 8006de8:	3401      	adds	r4, #1
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	4619      	mov	r1, r3
 8006dee:	f04f 0c0a 	mov.w	ip, #10
 8006df2:	4620      	mov	r0, r4
 8006df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df8:	3a30      	subs	r2, #48	; 0x30
 8006dfa:	2a09      	cmp	r2, #9
 8006dfc:	d903      	bls.n	8006e06 <_vfiprintf_r+0x1ee>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0c5      	beq.n	8006d8e <_vfiprintf_r+0x176>
 8006e02:	9105      	str	r1, [sp, #20]
 8006e04:	e7c3      	b.n	8006d8e <_vfiprintf_r+0x176>
 8006e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e7f0      	b.n	8006df2 <_vfiprintf_r+0x1da>
 8006e10:	ab03      	add	r3, sp, #12
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	462a      	mov	r2, r5
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <_vfiprintf_r+0x258>)
 8006e18:	a904      	add	r1, sp, #16
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f3af 8000 	nop.w
 8006e20:	4607      	mov	r7, r0
 8006e22:	1c78      	adds	r0, r7, #1
 8006e24:	d1d6      	bne.n	8006dd4 <_vfiprintf_r+0x1bc>
 8006e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e28:	07d9      	lsls	r1, r3, #31
 8006e2a:	d405      	bmi.n	8006e38 <_vfiprintf_r+0x220>
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	059a      	lsls	r2, r3, #22
 8006e30:	d402      	bmi.n	8006e38 <_vfiprintf_r+0x220>
 8006e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e34:	f7ff fe6b 	bl	8006b0e <__retarget_lock_release_recursive>
 8006e38:	89ab      	ldrh	r3, [r5, #12]
 8006e3a:	065b      	lsls	r3, r3, #25
 8006e3c:	f53f af12 	bmi.w	8006c64 <_vfiprintf_r+0x4c>
 8006e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e42:	e711      	b.n	8006c68 <_vfiprintf_r+0x50>
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <_vfiprintf_r+0x258>)
 8006e4c:	a904      	add	r1, sp, #16
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f880 	bl	8006f54 <_printf_i>
 8006e54:	e7e4      	b.n	8006e20 <_vfiprintf_r+0x208>
 8006e56:	bf00      	nop
 8006e58:	08007834 	.word	0x08007834
 8006e5c:	08007854 	.word	0x08007854
 8006e60:	08007814 	.word	0x08007814
 8006e64:	08007874 	.word	0x08007874
 8006e68:	0800787e 	.word	0x0800787e
 8006e6c:	00000000 	.word	0x00000000
 8006e70:	08006bf3 	.word	0x08006bf3
 8006e74:	0800787a 	.word	0x0800787a

08006e78 <_printf_common>:
 8006e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	4699      	mov	r9, r3
 8006e80:	688a      	ldr	r2, [r1, #8]
 8006e82:	690b      	ldr	r3, [r1, #16]
 8006e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	bfb8      	it	lt
 8006e8c:	4613      	movlt	r3, r2
 8006e8e:	6033      	str	r3, [r6, #0]
 8006e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e94:	4607      	mov	r7, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	b10a      	cbz	r2, 8006e9e <_printf_common+0x26>
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	0699      	lsls	r1, r3, #26
 8006ea2:	bf42      	ittt	mi
 8006ea4:	6833      	ldrmi	r3, [r6, #0]
 8006ea6:	3302      	addmi	r3, #2
 8006ea8:	6033      	strmi	r3, [r6, #0]
 8006eaa:	6825      	ldr	r5, [r4, #0]
 8006eac:	f015 0506 	ands.w	r5, r5, #6
 8006eb0:	d106      	bne.n	8006ec0 <_printf_common+0x48>
 8006eb2:	f104 0a19 	add.w	sl, r4, #25
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	6832      	ldr	r2, [r6, #0]
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dc26      	bgt.n	8006f0e <_printf_common+0x96>
 8006ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ec4:	1e13      	subs	r3, r2, #0
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	bf18      	it	ne
 8006eca:	2301      	movne	r3, #1
 8006ecc:	0692      	lsls	r2, r2, #26
 8006ece:	d42b      	bmi.n	8006f28 <_printf_common+0xb0>
 8006ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	47c0      	blx	r8
 8006eda:	3001      	adds	r0, #1
 8006edc:	d01e      	beq.n	8006f1c <_printf_common+0xa4>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	68e5      	ldr	r5, [r4, #12]
 8006ee2:	6832      	ldr	r2, [r6, #0]
 8006ee4:	f003 0306 	and.w	r3, r3, #6
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	bf08      	it	eq
 8006eec:	1aad      	subeq	r5, r5, r2
 8006eee:	68a3      	ldr	r3, [r4, #8]
 8006ef0:	6922      	ldr	r2, [r4, #16]
 8006ef2:	bf0c      	ite	eq
 8006ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ef8:	2500      	movne	r5, #0
 8006efa:	4293      	cmp	r3, r2
 8006efc:	bfc4      	itt	gt
 8006efe:	1a9b      	subgt	r3, r3, r2
 8006f00:	18ed      	addgt	r5, r5, r3
 8006f02:	2600      	movs	r6, #0
 8006f04:	341a      	adds	r4, #26
 8006f06:	42b5      	cmp	r5, r6
 8006f08:	d11a      	bne.n	8006f40 <_printf_common+0xc8>
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	e008      	b.n	8006f20 <_printf_common+0xa8>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4652      	mov	r2, sl
 8006f12:	4649      	mov	r1, r9
 8006f14:	4638      	mov	r0, r7
 8006f16:	47c0      	blx	r8
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d103      	bne.n	8006f24 <_printf_common+0xac>
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f24:	3501      	adds	r5, #1
 8006f26:	e7c6      	b.n	8006eb6 <_printf_common+0x3e>
 8006f28:	18e1      	adds	r1, r4, r3
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	2030      	movs	r0, #48	; 0x30
 8006f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f32:	4422      	add	r2, r4
 8006f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	e7c7      	b.n	8006ed0 <_printf_common+0x58>
 8006f40:	2301      	movs	r3, #1
 8006f42:	4622      	mov	r2, r4
 8006f44:	4649      	mov	r1, r9
 8006f46:	4638      	mov	r0, r7
 8006f48:	47c0      	blx	r8
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d0e6      	beq.n	8006f1c <_printf_common+0xa4>
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7d9      	b.n	8006f06 <_printf_common+0x8e>
	...

08006f54 <_printf_i>:
 8006f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	4691      	mov	r9, r2
 8006f5c:	7e27      	ldrb	r7, [r4, #24]
 8006f5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f60:	2f78      	cmp	r7, #120	; 0x78
 8006f62:	4680      	mov	r8, r0
 8006f64:	469a      	mov	sl, r3
 8006f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f6a:	d807      	bhi.n	8006f7c <_printf_i+0x28>
 8006f6c:	2f62      	cmp	r7, #98	; 0x62
 8006f6e:	d80a      	bhi.n	8006f86 <_printf_i+0x32>
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	f000 80d8 	beq.w	8007126 <_printf_i+0x1d2>
 8006f76:	2f58      	cmp	r7, #88	; 0x58
 8006f78:	f000 80a3 	beq.w	80070c2 <_printf_i+0x16e>
 8006f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f84:	e03a      	b.n	8006ffc <_printf_i+0xa8>
 8006f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f8a:	2b15      	cmp	r3, #21
 8006f8c:	d8f6      	bhi.n	8006f7c <_printf_i+0x28>
 8006f8e:	a001      	add	r0, pc, #4	; (adr r0, 8006f94 <_printf_i+0x40>)
 8006f90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f94:	08006fed 	.word	0x08006fed
 8006f98:	08007001 	.word	0x08007001
 8006f9c:	08006f7d 	.word	0x08006f7d
 8006fa0:	08006f7d 	.word	0x08006f7d
 8006fa4:	08006f7d 	.word	0x08006f7d
 8006fa8:	08006f7d 	.word	0x08006f7d
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08006f7d 	.word	0x08006f7d
 8006fb4:	08006f7d 	.word	0x08006f7d
 8006fb8:	08006f7d 	.word	0x08006f7d
 8006fbc:	08006f7d 	.word	0x08006f7d
 8006fc0:	0800710d 	.word	0x0800710d
 8006fc4:	08007031 	.word	0x08007031
 8006fc8:	080070ef 	.word	0x080070ef
 8006fcc:	08006f7d 	.word	0x08006f7d
 8006fd0:	08006f7d 	.word	0x08006f7d
 8006fd4:	0800712f 	.word	0x0800712f
 8006fd8:	08006f7d 	.word	0x08006f7d
 8006fdc:	08007031 	.word	0x08007031
 8006fe0:	08006f7d 	.word	0x08006f7d
 8006fe4:	08006f7d 	.word	0x08006f7d
 8006fe8:	080070f7 	.word	0x080070f7
 8006fec:	680b      	ldr	r3, [r1, #0]
 8006fee:	1d1a      	adds	r2, r3, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	600a      	str	r2, [r1, #0]
 8006ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0a3      	b.n	8007148 <_printf_i+0x1f4>
 8007000:	6825      	ldr	r5, [r4, #0]
 8007002:	6808      	ldr	r0, [r1, #0]
 8007004:	062e      	lsls	r6, r5, #24
 8007006:	f100 0304 	add.w	r3, r0, #4
 800700a:	d50a      	bpl.n	8007022 <_printf_i+0xce>
 800700c:	6805      	ldr	r5, [r0, #0]
 800700e:	600b      	str	r3, [r1, #0]
 8007010:	2d00      	cmp	r5, #0
 8007012:	da03      	bge.n	800701c <_printf_i+0xc8>
 8007014:	232d      	movs	r3, #45	; 0x2d
 8007016:	426d      	negs	r5, r5
 8007018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800701c:	485e      	ldr	r0, [pc, #376]	; (8007198 <_printf_i+0x244>)
 800701e:	230a      	movs	r3, #10
 8007020:	e019      	b.n	8007056 <_printf_i+0x102>
 8007022:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007026:	6805      	ldr	r5, [r0, #0]
 8007028:	600b      	str	r3, [r1, #0]
 800702a:	bf18      	it	ne
 800702c:	b22d      	sxthne	r5, r5
 800702e:	e7ef      	b.n	8007010 <_printf_i+0xbc>
 8007030:	680b      	ldr	r3, [r1, #0]
 8007032:	6825      	ldr	r5, [r4, #0]
 8007034:	1d18      	adds	r0, r3, #4
 8007036:	6008      	str	r0, [r1, #0]
 8007038:	0628      	lsls	r0, r5, #24
 800703a:	d501      	bpl.n	8007040 <_printf_i+0xec>
 800703c:	681d      	ldr	r5, [r3, #0]
 800703e:	e002      	b.n	8007046 <_printf_i+0xf2>
 8007040:	0669      	lsls	r1, r5, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0xe8>
 8007044:	881d      	ldrh	r5, [r3, #0]
 8007046:	4854      	ldr	r0, [pc, #336]	; (8007198 <_printf_i+0x244>)
 8007048:	2f6f      	cmp	r7, #111	; 0x6f
 800704a:	bf0c      	ite	eq
 800704c:	2308      	moveq	r3, #8
 800704e:	230a      	movne	r3, #10
 8007050:	2100      	movs	r1, #0
 8007052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007056:	6866      	ldr	r6, [r4, #4]
 8007058:	60a6      	str	r6, [r4, #8]
 800705a:	2e00      	cmp	r6, #0
 800705c:	bfa2      	ittt	ge
 800705e:	6821      	ldrge	r1, [r4, #0]
 8007060:	f021 0104 	bicge.w	r1, r1, #4
 8007064:	6021      	strge	r1, [r4, #0]
 8007066:	b90d      	cbnz	r5, 800706c <_printf_i+0x118>
 8007068:	2e00      	cmp	r6, #0
 800706a:	d04d      	beq.n	8007108 <_printf_i+0x1b4>
 800706c:	4616      	mov	r6, r2
 800706e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007072:	fb03 5711 	mls	r7, r3, r1, r5
 8007076:	5dc7      	ldrb	r7, [r0, r7]
 8007078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800707c:	462f      	mov	r7, r5
 800707e:	42bb      	cmp	r3, r7
 8007080:	460d      	mov	r5, r1
 8007082:	d9f4      	bls.n	800706e <_printf_i+0x11a>
 8007084:	2b08      	cmp	r3, #8
 8007086:	d10b      	bne.n	80070a0 <_printf_i+0x14c>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	07df      	lsls	r7, r3, #31
 800708c:	d508      	bpl.n	80070a0 <_printf_i+0x14c>
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	6861      	ldr	r1, [r4, #4]
 8007092:	4299      	cmp	r1, r3
 8007094:	bfde      	ittt	le
 8007096:	2330      	movle	r3, #48	; 0x30
 8007098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800709c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070a0:	1b92      	subs	r2, r2, r6
 80070a2:	6122      	str	r2, [r4, #16]
 80070a4:	f8cd a000 	str.w	sl, [sp]
 80070a8:	464b      	mov	r3, r9
 80070aa:	aa03      	add	r2, sp, #12
 80070ac:	4621      	mov	r1, r4
 80070ae:	4640      	mov	r0, r8
 80070b0:	f7ff fee2 	bl	8006e78 <_printf_common>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d14c      	bne.n	8007152 <_printf_i+0x1fe>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295
 80070bc:	b004      	add	sp, #16
 80070be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c2:	4835      	ldr	r0, [pc, #212]	; (8007198 <_printf_i+0x244>)
 80070c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	680e      	ldr	r6, [r1, #0]
 80070cc:	061f      	lsls	r7, r3, #24
 80070ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80070d2:	600e      	str	r6, [r1, #0]
 80070d4:	d514      	bpl.n	8007100 <_printf_i+0x1ac>
 80070d6:	07d9      	lsls	r1, r3, #31
 80070d8:	bf44      	itt	mi
 80070da:	f043 0320 	orrmi.w	r3, r3, #32
 80070de:	6023      	strmi	r3, [r4, #0]
 80070e0:	b91d      	cbnz	r5, 80070ea <_printf_i+0x196>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	f023 0320 	bic.w	r3, r3, #32
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	2310      	movs	r3, #16
 80070ec:	e7b0      	b.n	8007050 <_printf_i+0xfc>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f043 0320 	orr.w	r3, r3, #32
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	2378      	movs	r3, #120	; 0x78
 80070f8:	4828      	ldr	r0, [pc, #160]	; (800719c <_printf_i+0x248>)
 80070fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070fe:	e7e3      	b.n	80070c8 <_printf_i+0x174>
 8007100:	065e      	lsls	r6, r3, #25
 8007102:	bf48      	it	mi
 8007104:	b2ad      	uxthmi	r5, r5
 8007106:	e7e6      	b.n	80070d6 <_printf_i+0x182>
 8007108:	4616      	mov	r6, r2
 800710a:	e7bb      	b.n	8007084 <_printf_i+0x130>
 800710c:	680b      	ldr	r3, [r1, #0]
 800710e:	6826      	ldr	r6, [r4, #0]
 8007110:	6960      	ldr	r0, [r4, #20]
 8007112:	1d1d      	adds	r5, r3, #4
 8007114:	600d      	str	r5, [r1, #0]
 8007116:	0635      	lsls	r5, r6, #24
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	d501      	bpl.n	8007120 <_printf_i+0x1cc>
 800711c:	6018      	str	r0, [r3, #0]
 800711e:	e002      	b.n	8007126 <_printf_i+0x1d2>
 8007120:	0671      	lsls	r1, r6, #25
 8007122:	d5fb      	bpl.n	800711c <_printf_i+0x1c8>
 8007124:	8018      	strh	r0, [r3, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	4616      	mov	r6, r2
 800712c:	e7ba      	b.n	80070a4 <_printf_i+0x150>
 800712e:	680b      	ldr	r3, [r1, #0]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	600a      	str	r2, [r1, #0]
 8007134:	681e      	ldr	r6, [r3, #0]
 8007136:	6862      	ldr	r2, [r4, #4]
 8007138:	2100      	movs	r1, #0
 800713a:	4630      	mov	r0, r6
 800713c:	f7f9 f848 	bl	80001d0 <memchr>
 8007140:	b108      	cbz	r0, 8007146 <_printf_i+0x1f2>
 8007142:	1b80      	subs	r0, r0, r6
 8007144:	6060      	str	r0, [r4, #4]
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	2300      	movs	r3, #0
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007150:	e7a8      	b.n	80070a4 <_printf_i+0x150>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	4632      	mov	r2, r6
 8007156:	4649      	mov	r1, r9
 8007158:	4640      	mov	r0, r8
 800715a:	47d0      	blx	sl
 800715c:	3001      	adds	r0, #1
 800715e:	d0ab      	beq.n	80070b8 <_printf_i+0x164>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	079b      	lsls	r3, r3, #30
 8007164:	d413      	bmi.n	800718e <_printf_i+0x23a>
 8007166:	68e0      	ldr	r0, [r4, #12]
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	4298      	cmp	r0, r3
 800716c:	bfb8      	it	lt
 800716e:	4618      	movlt	r0, r3
 8007170:	e7a4      	b.n	80070bc <_printf_i+0x168>
 8007172:	2301      	movs	r3, #1
 8007174:	4632      	mov	r2, r6
 8007176:	4649      	mov	r1, r9
 8007178:	4640      	mov	r0, r8
 800717a:	47d0      	blx	sl
 800717c:	3001      	adds	r0, #1
 800717e:	d09b      	beq.n	80070b8 <_printf_i+0x164>
 8007180:	3501      	adds	r5, #1
 8007182:	68e3      	ldr	r3, [r4, #12]
 8007184:	9903      	ldr	r1, [sp, #12]
 8007186:	1a5b      	subs	r3, r3, r1
 8007188:	42ab      	cmp	r3, r5
 800718a:	dcf2      	bgt.n	8007172 <_printf_i+0x21e>
 800718c:	e7eb      	b.n	8007166 <_printf_i+0x212>
 800718e:	2500      	movs	r5, #0
 8007190:	f104 0619 	add.w	r6, r4, #25
 8007194:	e7f5      	b.n	8007182 <_printf_i+0x22e>
 8007196:	bf00      	nop
 8007198:	08007885 	.word	0x08007885
 800719c:	08007896 	.word	0x08007896

080071a0 <_sbrk_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d06      	ldr	r5, [pc, #24]	; (80071bc <_sbrk_r+0x1c>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7fa f9f6 	bl	800159c <_sbrk>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_sbrk_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_sbrk_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	20000770 	.word	0x20000770

080071c0 <__sread>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c8:	f000 fab4 	bl	8007734 <_read_r>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	bfab      	itete	ge
 80071d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071d2:	89a3      	ldrhlt	r3, [r4, #12]
 80071d4:	181b      	addge	r3, r3, r0
 80071d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071da:	bfac      	ite	ge
 80071dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80071de:	81a3      	strhlt	r3, [r4, #12]
 80071e0:	bd10      	pop	{r4, pc}

080071e2 <__swrite>:
 80071e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	461f      	mov	r7, r3
 80071e8:	898b      	ldrh	r3, [r1, #12]
 80071ea:	05db      	lsls	r3, r3, #23
 80071ec:	4605      	mov	r5, r0
 80071ee:	460c      	mov	r4, r1
 80071f0:	4616      	mov	r6, r2
 80071f2:	d505      	bpl.n	8007200 <__swrite+0x1e>
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	2302      	movs	r3, #2
 80071fa:	2200      	movs	r2, #0
 80071fc:	f000 f9c8 	bl	8007590 <_lseek_r>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	4632      	mov	r2, r6
 800720e:	463b      	mov	r3, r7
 8007210:	4628      	mov	r0, r5
 8007212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	f000 b869 	b.w	80072ec <_write_r>

0800721a <__sseek>:
 800721a:	b510      	push	{r4, lr}
 800721c:	460c      	mov	r4, r1
 800721e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007222:	f000 f9b5 	bl	8007590 <_lseek_r>
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	bf15      	itete	ne
 800722c:	6560      	strne	r0, [r4, #84]	; 0x54
 800722e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007236:	81a3      	strheq	r3, [r4, #12]
 8007238:	bf18      	it	ne
 800723a:	81a3      	strhne	r3, [r4, #12]
 800723c:	bd10      	pop	{r4, pc}

0800723e <__sclose>:
 800723e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007242:	f000 b8d3 	b.w	80073ec <_close_r>
	...

08007248 <__swbuf_r>:
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	460e      	mov	r6, r1
 800724c:	4614      	mov	r4, r2
 800724e:	4605      	mov	r5, r0
 8007250:	b118      	cbz	r0, 800725a <__swbuf_r+0x12>
 8007252:	6983      	ldr	r3, [r0, #24]
 8007254:	b90b      	cbnz	r3, 800725a <__swbuf_r+0x12>
 8007256:	f7ff fbbb 	bl	80069d0 <__sinit>
 800725a:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <__swbuf_r+0x98>)
 800725c:	429c      	cmp	r4, r3
 800725e:	d12b      	bne.n	80072b8 <__swbuf_r+0x70>
 8007260:	686c      	ldr	r4, [r5, #4]
 8007262:	69a3      	ldr	r3, [r4, #24]
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	071a      	lsls	r2, r3, #28
 800726a:	d52f      	bpl.n	80072cc <__swbuf_r+0x84>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	b36b      	cbz	r3, 80072cc <__swbuf_r+0x84>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	6820      	ldr	r0, [r4, #0]
 8007274:	1ac0      	subs	r0, r0, r3
 8007276:	6963      	ldr	r3, [r4, #20]
 8007278:	b2f6      	uxtb	r6, r6
 800727a:	4283      	cmp	r3, r0
 800727c:	4637      	mov	r7, r6
 800727e:	dc04      	bgt.n	800728a <__swbuf_r+0x42>
 8007280:	4621      	mov	r1, r4
 8007282:	4628      	mov	r0, r5
 8007284:	f000 f948 	bl	8007518 <_fflush_r>
 8007288:	bb30      	cbnz	r0, 80072d8 <__swbuf_r+0x90>
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	3b01      	subs	r3, #1
 800728e:	60a3      	str	r3, [r4, #8]
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	6022      	str	r2, [r4, #0]
 8007296:	701e      	strb	r6, [r3, #0]
 8007298:	6963      	ldr	r3, [r4, #20]
 800729a:	3001      	adds	r0, #1
 800729c:	4283      	cmp	r3, r0
 800729e:	d004      	beq.n	80072aa <__swbuf_r+0x62>
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d506      	bpl.n	80072b4 <__swbuf_r+0x6c>
 80072a6:	2e0a      	cmp	r6, #10
 80072a8:	d104      	bne.n	80072b4 <__swbuf_r+0x6c>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 f933 	bl	8007518 <_fflush_r>
 80072b2:	b988      	cbnz	r0, 80072d8 <__swbuf_r+0x90>
 80072b4:	4638      	mov	r0, r7
 80072b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <__swbuf_r+0x9c>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d101      	bne.n	80072c2 <__swbuf_r+0x7a>
 80072be:	68ac      	ldr	r4, [r5, #8]
 80072c0:	e7cf      	b.n	8007262 <__swbuf_r+0x1a>
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <__swbuf_r+0xa0>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	bf08      	it	eq
 80072c8:	68ec      	ldreq	r4, [r5, #12]
 80072ca:	e7ca      	b.n	8007262 <__swbuf_r+0x1a>
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f81e 	bl	8007310 <__swsetup_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0cb      	beq.n	8007270 <__swbuf_r+0x28>
 80072d8:	f04f 37ff 	mov.w	r7, #4294967295
 80072dc:	e7ea      	b.n	80072b4 <__swbuf_r+0x6c>
 80072de:	bf00      	nop
 80072e0:	08007834 	.word	0x08007834
 80072e4:	08007854 	.word	0x08007854
 80072e8:	08007814 	.word	0x08007814

080072ec <_write_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	; (800730c <_write_r+0x20>)
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fa f8fd 	bl	80014fa <_write>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_write_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_write_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000770 	.word	0x20000770

08007310 <__swsetup_r>:
 8007310:	4b32      	ldr	r3, [pc, #200]	; (80073dc <__swsetup_r+0xcc>)
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	4606      	mov	r6, r0
 8007318:	460c      	mov	r4, r1
 800731a:	b125      	cbz	r5, 8007326 <__swsetup_r+0x16>
 800731c:	69ab      	ldr	r3, [r5, #24]
 800731e:	b913      	cbnz	r3, 8007326 <__swsetup_r+0x16>
 8007320:	4628      	mov	r0, r5
 8007322:	f7ff fb55 	bl	80069d0 <__sinit>
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <__swsetup_r+0xd0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d10f      	bne.n	800734c <__swsetup_r+0x3c>
 800732c:	686c      	ldr	r4, [r5, #4]
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007334:	0719      	lsls	r1, r3, #28
 8007336:	d42c      	bmi.n	8007392 <__swsetup_r+0x82>
 8007338:	06dd      	lsls	r5, r3, #27
 800733a:	d411      	bmi.n	8007360 <__swsetup_r+0x50>
 800733c:	2309      	movs	r3, #9
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	e03e      	b.n	80073ca <__swsetup_r+0xba>
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <__swsetup_r+0xd4>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d101      	bne.n	8007356 <__swsetup_r+0x46>
 8007352:	68ac      	ldr	r4, [r5, #8]
 8007354:	e7eb      	b.n	800732e <__swsetup_r+0x1e>
 8007356:	4b24      	ldr	r3, [pc, #144]	; (80073e8 <__swsetup_r+0xd8>)
 8007358:	429c      	cmp	r4, r3
 800735a:	bf08      	it	eq
 800735c:	68ec      	ldreq	r4, [r5, #12]
 800735e:	e7e6      	b.n	800732e <__swsetup_r+0x1e>
 8007360:	0758      	lsls	r0, r3, #29
 8007362:	d512      	bpl.n	800738a <__swsetup_r+0x7a>
 8007364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007366:	b141      	cbz	r1, 800737a <__swsetup_r+0x6a>
 8007368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800736c:	4299      	cmp	r1, r3
 800736e:	d002      	beq.n	8007376 <__swsetup_r+0x66>
 8007370:	4630      	mov	r0, r6
 8007372:	f000 f98f 	bl	8007694 <_free_r>
 8007376:	2300      	movs	r3, #0
 8007378:	6363      	str	r3, [r4, #52]	; 0x34
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007380:	81a3      	strh	r3, [r4, #12]
 8007382:	2300      	movs	r3, #0
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f043 0308 	orr.w	r3, r3, #8
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	b94b      	cbnz	r3, 80073aa <__swsetup_r+0x9a>
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800739c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a0:	d003      	beq.n	80073aa <__swsetup_r+0x9a>
 80073a2:	4621      	mov	r1, r4
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 f929 	bl	80075fc <__smakebuf_r>
 80073aa:	89a0      	ldrh	r0, [r4, #12]
 80073ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073b0:	f010 0301 	ands.w	r3, r0, #1
 80073b4:	d00a      	beq.n	80073cc <__swsetup_r+0xbc>
 80073b6:	2300      	movs	r3, #0
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	6963      	ldr	r3, [r4, #20]
 80073bc:	425b      	negs	r3, r3
 80073be:	61a3      	str	r3, [r4, #24]
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	b943      	cbnz	r3, 80073d6 <__swsetup_r+0xc6>
 80073c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073c8:	d1ba      	bne.n	8007340 <__swsetup_r+0x30>
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	0781      	lsls	r1, r0, #30
 80073ce:	bf58      	it	pl
 80073d0:	6963      	ldrpl	r3, [r4, #20]
 80073d2:	60a3      	str	r3, [r4, #8]
 80073d4:	e7f4      	b.n	80073c0 <__swsetup_r+0xb0>
 80073d6:	2000      	movs	r0, #0
 80073d8:	e7f7      	b.n	80073ca <__swsetup_r+0xba>
 80073da:	bf00      	nop
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	08007834 	.word	0x08007834
 80073e4:	08007854 	.word	0x08007854
 80073e8:	08007814 	.word	0x08007814

080073ec <_close_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_close_r+0x1c>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7fa f89b 	bl	8001532 <_close>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_close_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_close_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	20000770 	.word	0x20000770

0800740c <__sflush_r>:
 800740c:	898a      	ldrh	r2, [r1, #12]
 800740e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	4605      	mov	r5, r0
 8007414:	0710      	lsls	r0, r2, #28
 8007416:	460c      	mov	r4, r1
 8007418:	d458      	bmi.n	80074cc <__sflush_r+0xc0>
 800741a:	684b      	ldr	r3, [r1, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc05      	bgt.n	800742c <__sflush_r+0x20>
 8007420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	dc02      	bgt.n	800742c <__sflush_r+0x20>
 8007426:	2000      	movs	r0, #0
 8007428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800742e:	2e00      	cmp	r6, #0
 8007430:	d0f9      	beq.n	8007426 <__sflush_r+0x1a>
 8007432:	2300      	movs	r3, #0
 8007434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007438:	682f      	ldr	r7, [r5, #0]
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	d032      	beq.n	80074a4 <__sflush_r+0x98>
 800743e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	075a      	lsls	r2, r3, #29
 8007444:	d505      	bpl.n	8007452 <__sflush_r+0x46>
 8007446:	6863      	ldr	r3, [r4, #4]
 8007448:	1ac0      	subs	r0, r0, r3
 800744a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800744c:	b10b      	cbz	r3, 8007452 <__sflush_r+0x46>
 800744e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007450:	1ac0      	subs	r0, r0, r3
 8007452:	2300      	movs	r3, #0
 8007454:	4602      	mov	r2, r0
 8007456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007458:	6a21      	ldr	r1, [r4, #32]
 800745a:	4628      	mov	r0, r5
 800745c:	47b0      	blx	r6
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	d106      	bne.n	8007472 <__sflush_r+0x66>
 8007464:	6829      	ldr	r1, [r5, #0]
 8007466:	291d      	cmp	r1, #29
 8007468:	d82c      	bhi.n	80074c4 <__sflush_r+0xb8>
 800746a:	4a2a      	ldr	r2, [pc, #168]	; (8007514 <__sflush_r+0x108>)
 800746c:	40ca      	lsrs	r2, r1
 800746e:	07d6      	lsls	r6, r2, #31
 8007470:	d528      	bpl.n	80074c4 <__sflush_r+0xb8>
 8007472:	2200      	movs	r2, #0
 8007474:	6062      	str	r2, [r4, #4]
 8007476:	04d9      	lsls	r1, r3, #19
 8007478:	6922      	ldr	r2, [r4, #16]
 800747a:	6022      	str	r2, [r4, #0]
 800747c:	d504      	bpl.n	8007488 <__sflush_r+0x7c>
 800747e:	1c42      	adds	r2, r0, #1
 8007480:	d101      	bne.n	8007486 <__sflush_r+0x7a>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b903      	cbnz	r3, 8007488 <__sflush_r+0x7c>
 8007486:	6560      	str	r0, [r4, #84]	; 0x54
 8007488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748a:	602f      	str	r7, [r5, #0]
 800748c:	2900      	cmp	r1, #0
 800748e:	d0ca      	beq.n	8007426 <__sflush_r+0x1a>
 8007490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007494:	4299      	cmp	r1, r3
 8007496:	d002      	beq.n	800749e <__sflush_r+0x92>
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f8fb 	bl	8007694 <_free_r>
 800749e:	2000      	movs	r0, #0
 80074a0:	6360      	str	r0, [r4, #52]	; 0x34
 80074a2:	e7c1      	b.n	8007428 <__sflush_r+0x1c>
 80074a4:	6a21      	ldr	r1, [r4, #32]
 80074a6:	2301      	movs	r3, #1
 80074a8:	4628      	mov	r0, r5
 80074aa:	47b0      	blx	r6
 80074ac:	1c41      	adds	r1, r0, #1
 80074ae:	d1c7      	bne.n	8007440 <__sflush_r+0x34>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0c4      	beq.n	8007440 <__sflush_r+0x34>
 80074b6:	2b1d      	cmp	r3, #29
 80074b8:	d001      	beq.n	80074be <__sflush_r+0xb2>
 80074ba:	2b16      	cmp	r3, #22
 80074bc:	d101      	bne.n	80074c2 <__sflush_r+0xb6>
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	e7b1      	b.n	8007426 <__sflush_r+0x1a>
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c8:	81a3      	strh	r3, [r4, #12]
 80074ca:	e7ad      	b.n	8007428 <__sflush_r+0x1c>
 80074cc:	690f      	ldr	r7, [r1, #16]
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	d0a9      	beq.n	8007426 <__sflush_r+0x1a>
 80074d2:	0793      	lsls	r3, r2, #30
 80074d4:	680e      	ldr	r6, [r1, #0]
 80074d6:	bf08      	it	eq
 80074d8:	694b      	ldreq	r3, [r1, #20]
 80074da:	600f      	str	r7, [r1, #0]
 80074dc:	bf18      	it	ne
 80074de:	2300      	movne	r3, #0
 80074e0:	eba6 0807 	sub.w	r8, r6, r7
 80074e4:	608b      	str	r3, [r1, #8]
 80074e6:	f1b8 0f00 	cmp.w	r8, #0
 80074ea:	dd9c      	ble.n	8007426 <__sflush_r+0x1a>
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074f0:	4643      	mov	r3, r8
 80074f2:	463a      	mov	r2, r7
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b0      	blx	r6
 80074f8:	2800      	cmp	r0, #0
 80074fa:	dc06      	bgt.n	800750a <__sflush_r+0xfe>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	e78e      	b.n	8007428 <__sflush_r+0x1c>
 800750a:	4407      	add	r7, r0
 800750c:	eba8 0800 	sub.w	r8, r8, r0
 8007510:	e7e9      	b.n	80074e6 <__sflush_r+0xda>
 8007512:	bf00      	nop
 8007514:	20400001 	.word	0x20400001

08007518 <_fflush_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	b913      	cbnz	r3, 8007528 <_fflush_r+0x10>
 8007522:	2500      	movs	r5, #0
 8007524:	4628      	mov	r0, r5
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	b118      	cbz	r0, 8007532 <_fflush_r+0x1a>
 800752a:	6983      	ldr	r3, [r0, #24]
 800752c:	b90b      	cbnz	r3, 8007532 <_fflush_r+0x1a>
 800752e:	f7ff fa4f 	bl	80069d0 <__sinit>
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <_fflush_r+0x6c>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d11b      	bne.n	8007570 <_fflush_r+0x58>
 8007538:	686c      	ldr	r4, [r5, #4]
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0ef      	beq.n	8007522 <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x3a>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x3a>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f7ff fadd 	bl	8006b0c <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff59 	bl	800740c <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	07da      	lsls	r2, r3, #31
 800755e:	4605      	mov	r5, r0
 8007560:	d4e0      	bmi.n	8007524 <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4dd      	bmi.n	8007524 <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f7ff fad0 	bl	8006b0e <__retarget_lock_release_recursive>
 800756e:	e7d9      	b.n	8007524 <_fflush_r+0xc>
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <_fflush_r+0x70>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <_fflush_r+0x62>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7df      	b.n	800753a <_fflush_r+0x22>
 800757a:	4b04      	ldr	r3, [pc, #16]	; (800758c <_fflush_r+0x74>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7da      	b.n	800753a <_fflush_r+0x22>
 8007584:	08007834 	.word	0x08007834
 8007588:	08007854 	.word	0x08007854
 800758c:	08007814 	.word	0x08007814

08007590 <_lseek_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_lseek_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7f9 ffee 	bl	8001580 <_lseek>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_lseek_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_lseek_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	20000770 	.word	0x20000770

080075b4 <__swhatbuf_r>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	460e      	mov	r6, r1
 80075b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075bc:	2900      	cmp	r1, #0
 80075be:	b096      	sub	sp, #88	; 0x58
 80075c0:	4614      	mov	r4, r2
 80075c2:	461d      	mov	r5, r3
 80075c4:	da07      	bge.n	80075d6 <__swhatbuf_r+0x22>
 80075c6:	2300      	movs	r3, #0
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	89b3      	ldrh	r3, [r6, #12]
 80075cc:	061a      	lsls	r2, r3, #24
 80075ce:	d410      	bmi.n	80075f2 <__swhatbuf_r+0x3e>
 80075d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d4:	e00e      	b.n	80075f4 <__swhatbuf_r+0x40>
 80075d6:	466a      	mov	r2, sp
 80075d8:	f000 f8be 	bl	8007758 <_fstat_r>
 80075dc:	2800      	cmp	r0, #0
 80075de:	dbf2      	blt.n	80075c6 <__swhatbuf_r+0x12>
 80075e0:	9a01      	ldr	r2, [sp, #4]
 80075e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075ea:	425a      	negs	r2, r3
 80075ec:	415a      	adcs	r2, r3
 80075ee:	602a      	str	r2, [r5, #0]
 80075f0:	e7ee      	b.n	80075d0 <__swhatbuf_r+0x1c>
 80075f2:	2340      	movs	r3, #64	; 0x40
 80075f4:	2000      	movs	r0, #0
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	b016      	add	sp, #88	; 0x58
 80075fa:	bd70      	pop	{r4, r5, r6, pc}

080075fc <__smakebuf_r>:
 80075fc:	898b      	ldrh	r3, [r1, #12]
 80075fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007600:	079d      	lsls	r5, r3, #30
 8007602:	4606      	mov	r6, r0
 8007604:	460c      	mov	r4, r1
 8007606:	d507      	bpl.n	8007618 <__smakebuf_r+0x1c>
 8007608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	2301      	movs	r3, #1
 8007612:	6163      	str	r3, [r4, #20]
 8007614:	b002      	add	sp, #8
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	ab01      	add	r3, sp, #4
 800761a:	466a      	mov	r2, sp
 800761c:	f7ff ffca 	bl	80075b4 <__swhatbuf_r>
 8007620:	9900      	ldr	r1, [sp, #0]
 8007622:	4605      	mov	r5, r0
 8007624:	4630      	mov	r0, r6
 8007626:	f7ff fa73 	bl	8006b10 <_malloc_r>
 800762a:	b948      	cbnz	r0, 8007640 <__smakebuf_r+0x44>
 800762c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007630:	059a      	lsls	r2, r3, #22
 8007632:	d4ef      	bmi.n	8007614 <__smakebuf_r+0x18>
 8007634:	f023 0303 	bic.w	r3, r3, #3
 8007638:	f043 0302 	orr.w	r3, r3, #2
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	e7e3      	b.n	8007608 <__smakebuf_r+0xc>
 8007640:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <__smakebuf_r+0x7c>)
 8007642:	62b3      	str	r3, [r6, #40]	; 0x28
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	6020      	str	r0, [r4, #0]
 8007648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	6163      	str	r3, [r4, #20]
 8007652:	9b01      	ldr	r3, [sp, #4]
 8007654:	6120      	str	r0, [r4, #16]
 8007656:	b15b      	cbz	r3, 8007670 <__smakebuf_r+0x74>
 8007658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f88d 	bl	800777c <_isatty_r>
 8007662:	b128      	cbz	r0, 8007670 <__smakebuf_r+0x74>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	89a0      	ldrh	r0, [r4, #12]
 8007672:	4305      	orrs	r5, r0
 8007674:	81a5      	strh	r5, [r4, #12]
 8007676:	e7cd      	b.n	8007614 <__smakebuf_r+0x18>
 8007678:	08006969 	.word	0x08006969

0800767c <__malloc_lock>:
 800767c:	4801      	ldr	r0, [pc, #4]	; (8007684 <__malloc_lock+0x8>)
 800767e:	f7ff ba45 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 8007682:	bf00      	nop
 8007684:	20000768 	.word	0x20000768

08007688 <__malloc_unlock>:
 8007688:	4801      	ldr	r0, [pc, #4]	; (8007690 <__malloc_unlock+0x8>)
 800768a:	f7ff ba40 	b.w	8006b0e <__retarget_lock_release_recursive>
 800768e:	bf00      	nop
 8007690:	20000768 	.word	0x20000768

08007694 <_free_r>:
 8007694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007696:	2900      	cmp	r1, #0
 8007698:	d048      	beq.n	800772c <_free_r+0x98>
 800769a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769e:	9001      	str	r0, [sp, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f1a1 0404 	sub.w	r4, r1, #4
 80076a6:	bfb8      	it	lt
 80076a8:	18e4      	addlt	r4, r4, r3
 80076aa:	f7ff ffe7 	bl	800767c <__malloc_lock>
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <_free_r+0x9c>)
 80076b0:	9801      	ldr	r0, [sp, #4]
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	4615      	mov	r5, r2
 80076b6:	b933      	cbnz	r3, 80076c6 <_free_r+0x32>
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6014      	str	r4, [r2, #0]
 80076bc:	b003      	add	sp, #12
 80076be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076c2:	f7ff bfe1 	b.w	8007688 <__malloc_unlock>
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d90b      	bls.n	80076e2 <_free_r+0x4e>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	1862      	adds	r2, r4, r1
 80076ce:	4293      	cmp	r3, r2
 80076d0:	bf04      	itt	eq
 80076d2:	681a      	ldreq	r2, [r3, #0]
 80076d4:	685b      	ldreq	r3, [r3, #4]
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	bf04      	itt	eq
 80076da:	1852      	addeq	r2, r2, r1
 80076dc:	6022      	streq	r2, [r4, #0]
 80076de:	602c      	str	r4, [r5, #0]
 80076e0:	e7ec      	b.n	80076bc <_free_r+0x28>
 80076e2:	461a      	mov	r2, r3
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	b10b      	cbz	r3, 80076ec <_free_r+0x58>
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	d9fa      	bls.n	80076e2 <_free_r+0x4e>
 80076ec:	6811      	ldr	r1, [r2, #0]
 80076ee:	1855      	adds	r5, r2, r1
 80076f0:	42a5      	cmp	r5, r4
 80076f2:	d10b      	bne.n	800770c <_free_r+0x78>
 80076f4:	6824      	ldr	r4, [r4, #0]
 80076f6:	4421      	add	r1, r4
 80076f8:	1854      	adds	r4, r2, r1
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	6011      	str	r1, [r2, #0]
 80076fe:	d1dd      	bne.n	80076bc <_free_r+0x28>
 8007700:	681c      	ldr	r4, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6053      	str	r3, [r2, #4]
 8007706:	4421      	add	r1, r4
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	e7d7      	b.n	80076bc <_free_r+0x28>
 800770c:	d902      	bls.n	8007714 <_free_r+0x80>
 800770e:	230c      	movs	r3, #12
 8007710:	6003      	str	r3, [r0, #0]
 8007712:	e7d3      	b.n	80076bc <_free_r+0x28>
 8007714:	6825      	ldr	r5, [r4, #0]
 8007716:	1961      	adds	r1, r4, r5
 8007718:	428b      	cmp	r3, r1
 800771a:	bf04      	itt	eq
 800771c:	6819      	ldreq	r1, [r3, #0]
 800771e:	685b      	ldreq	r3, [r3, #4]
 8007720:	6063      	str	r3, [r4, #4]
 8007722:	bf04      	itt	eq
 8007724:	1949      	addeq	r1, r1, r5
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	6054      	str	r4, [r2, #4]
 800772a:	e7c7      	b.n	80076bc <_free_r+0x28>
 800772c:	b003      	add	sp, #12
 800772e:	bd30      	pop	{r4, r5, pc}
 8007730:	200000b8 	.word	0x200000b8

08007734 <_read_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	; (8007754 <_read_r+0x20>)
 8007738:	4604      	mov	r4, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7f9 febc 	bl	80014c0 <_read>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_read_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_read_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20000770 	.word	0x20000770

08007758 <_fstat_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	; (8007778 <_fstat_r+0x20>)
 800775c:	2300      	movs	r3, #0
 800775e:	4604      	mov	r4, r0
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	f7f9 fef0 	bl	800154a <_fstat>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d102      	bne.n	8007774 <_fstat_r+0x1c>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	b103      	cbz	r3, 8007774 <_fstat_r+0x1c>
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	bf00      	nop
 8007778:	20000770 	.word	0x20000770

0800777c <_isatty_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d06      	ldr	r5, [pc, #24]	; (8007798 <_isatty_r+0x1c>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7f9 feef 	bl	800156a <_isatty>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_isatty_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_isatty_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20000770 	.word	0x20000770

0800779c <_init>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr

080077a8 <_fini>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	bf00      	nop
 80077ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ae:	bc08      	pop	{r3}
 80077b0:	469e      	mov	lr, r3
 80077b2:	4770      	bx	lr


bluetoothDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b548  0800b548  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800b548  0800b548  0001b548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b550  0800b550  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b550  0800b550  0001b550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800b558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000164  0800b6bc  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d34  0800b6bc  00020d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000352ec  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bb6  00000000  00000000  00055480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f90  00000000  00000000  0005b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d40  00000000  00000000  0005cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000301b2  00000000  00000000  0005ed08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028130  00000000  00000000  0008eeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bc84  00000000  00000000  000b6fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c2c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f74  00000000  00000000  001c2cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b334 	.word	0x0800b334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800b334 	.word	0x0800b334

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_d2f>:
 8000648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800064c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000650:	bf24      	itt	cs
 8000652:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000656:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800065a:	d90d      	bls.n	8000678 <__aeabi_d2f+0x30>
 800065c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000660:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000664:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000668:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800066c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000670:	bf08      	it	eq
 8000672:	f020 0001 	biceq.w	r0, r0, #1
 8000676:	4770      	bx	lr
 8000678:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800067c:	d121      	bne.n	80006c2 <__aeabi_d2f+0x7a>
 800067e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000682:	bfbc      	itt	lt
 8000684:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000688:	4770      	bxlt	lr
 800068a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000692:	f1c2 0218 	rsb	r2, r2, #24
 8000696:	f1c2 0c20 	rsb	ip, r2, #32
 800069a:	fa10 f30c 	lsls.w	r3, r0, ip
 800069e:	fa20 f002 	lsr.w	r0, r0, r2
 80006a2:	bf18      	it	ne
 80006a4:	f040 0001 	orrne.w	r0, r0, #1
 80006a8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006b0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006b4:	ea40 000c 	orr.w	r0, r0, ip
 80006b8:	fa23 f302 	lsr.w	r3, r3, r2
 80006bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006c0:	e7cc      	b.n	800065c <__aeabi_d2f+0x14>
 80006c2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006c6:	d107      	bne.n	80006d8 <__aeabi_d2f+0x90>
 80006c8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006cc:	bf1e      	ittt	ne
 80006ce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006d2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006d6:	4770      	bxne	lr
 80006d8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <__aeabi_uldivmod>:
 80006e8:	b953      	cbnz	r3, 8000700 <__aeabi_uldivmod+0x18>
 80006ea:	b94a      	cbnz	r2, 8000700 <__aeabi_uldivmod+0x18>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	bf08      	it	eq
 80006f0:	2800      	cmpeq	r0, #0
 80006f2:	bf1c      	itt	ne
 80006f4:	f04f 31ff 	movne.w	r1, #4294967295
 80006f8:	f04f 30ff 	movne.w	r0, #4294967295
 80006fc:	f000 b96e 	b.w	80009dc <__aeabi_idiv0>
 8000700:	f1ad 0c08 	sub.w	ip, sp, #8
 8000704:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000708:	f000 f806 	bl	8000718 <__udivmoddi4>
 800070c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <__udivmoddi4>:
 8000718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800071c:	9d08      	ldr	r5, [sp, #32]
 800071e:	4604      	mov	r4, r0
 8000720:	468c      	mov	ip, r1
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 8083 	bne.w	800082e <__udivmoddi4+0x116>
 8000728:	428a      	cmp	r2, r1
 800072a:	4617      	mov	r7, r2
 800072c:	d947      	bls.n	80007be <__udivmoddi4+0xa6>
 800072e:	fab2 f282 	clz	r2, r2
 8000732:	b142      	cbz	r2, 8000746 <__udivmoddi4+0x2e>
 8000734:	f1c2 0020 	rsb	r0, r2, #32
 8000738:	fa24 f000 	lsr.w	r0, r4, r0
 800073c:	4091      	lsls	r1, r2
 800073e:	4097      	lsls	r7, r2
 8000740:	ea40 0c01 	orr.w	ip, r0, r1
 8000744:	4094      	lsls	r4, r2
 8000746:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800074a:	0c23      	lsrs	r3, r4, #16
 800074c:	fbbc f6f8 	udiv	r6, ip, r8
 8000750:	fa1f fe87 	uxth.w	lr, r7
 8000754:	fb08 c116 	mls	r1, r8, r6, ip
 8000758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800075c:	fb06 f10e 	mul.w	r1, r6, lr
 8000760:	4299      	cmp	r1, r3
 8000762:	d909      	bls.n	8000778 <__udivmoddi4+0x60>
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	f106 30ff 	add.w	r0, r6, #4294967295
 800076a:	f080 8119 	bcs.w	80009a0 <__udivmoddi4+0x288>
 800076e:	4299      	cmp	r1, r3
 8000770:	f240 8116 	bls.w	80009a0 <__udivmoddi4+0x288>
 8000774:	3e02      	subs	r6, #2
 8000776:	443b      	add	r3, r7
 8000778:	1a5b      	subs	r3, r3, r1
 800077a:	b2a4      	uxth	r4, r4
 800077c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000780:	fb08 3310 	mls	r3, r8, r0, r3
 8000784:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000788:	fb00 fe0e 	mul.w	lr, r0, lr
 800078c:	45a6      	cmp	lr, r4
 800078e:	d909      	bls.n	80007a4 <__udivmoddi4+0x8c>
 8000790:	193c      	adds	r4, r7, r4
 8000792:	f100 33ff 	add.w	r3, r0, #4294967295
 8000796:	f080 8105 	bcs.w	80009a4 <__udivmoddi4+0x28c>
 800079a:	45a6      	cmp	lr, r4
 800079c:	f240 8102 	bls.w	80009a4 <__udivmoddi4+0x28c>
 80007a0:	3802      	subs	r0, #2
 80007a2:	443c      	add	r4, r7
 80007a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007a8:	eba4 040e 	sub.w	r4, r4, lr
 80007ac:	2600      	movs	r6, #0
 80007ae:	b11d      	cbz	r5, 80007b8 <__udivmoddi4+0xa0>
 80007b0:	40d4      	lsrs	r4, r2
 80007b2:	2300      	movs	r3, #0
 80007b4:	e9c5 4300 	strd	r4, r3, [r5]
 80007b8:	4631      	mov	r1, r6
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007be:	b902      	cbnz	r2, 80007c2 <__udivmoddi4+0xaa>
 80007c0:	deff      	udf	#255	; 0xff
 80007c2:	fab2 f282 	clz	r2, r2
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d150      	bne.n	800086c <__udivmoddi4+0x154>
 80007ca:	1bcb      	subs	r3, r1, r7
 80007cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007d0:	fa1f f887 	uxth.w	r8, r7
 80007d4:	2601      	movs	r6, #1
 80007d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007da:	0c21      	lsrs	r1, r4, #16
 80007dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e4:	fb08 f30c 	mul.w	r3, r8, ip
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0xe4>
 80007ec:	1879      	adds	r1, r7, r1
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0xe2>
 80007f4:	428b      	cmp	r3, r1
 80007f6:	f200 80e9 	bhi.w	80009cc <__udivmoddi4+0x2b4>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1ac9      	subs	r1, r1, r3
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1110 	mls	r1, lr, r0, r1
 8000808:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x10c>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x10a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80d9 	bhi.w	80009d4 <__udivmoddi4+0x2bc>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e7bf      	b.n	80007ae <__udivmoddi4+0x96>
 800082e:	428b      	cmp	r3, r1
 8000830:	d909      	bls.n	8000846 <__udivmoddi4+0x12e>
 8000832:	2d00      	cmp	r5, #0
 8000834:	f000 80b1 	beq.w	800099a <__udivmoddi4+0x282>
 8000838:	2600      	movs	r6, #0
 800083a:	e9c5 0100 	strd	r0, r1, [r5]
 800083e:	4630      	mov	r0, r6
 8000840:	4631      	mov	r1, r6
 8000842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000846:	fab3 f683 	clz	r6, r3
 800084a:	2e00      	cmp	r6, #0
 800084c:	d14a      	bne.n	80008e4 <__udivmoddi4+0x1cc>
 800084e:	428b      	cmp	r3, r1
 8000850:	d302      	bcc.n	8000858 <__udivmoddi4+0x140>
 8000852:	4282      	cmp	r2, r0
 8000854:	f200 80b8 	bhi.w	80009c8 <__udivmoddi4+0x2b0>
 8000858:	1a84      	subs	r4, r0, r2
 800085a:	eb61 0103 	sbc.w	r1, r1, r3
 800085e:	2001      	movs	r0, #1
 8000860:	468c      	mov	ip, r1
 8000862:	2d00      	cmp	r5, #0
 8000864:	d0a8      	beq.n	80007b8 <__udivmoddi4+0xa0>
 8000866:	e9c5 4c00 	strd	r4, ip, [r5]
 800086a:	e7a5      	b.n	80007b8 <__udivmoddi4+0xa0>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f603 	lsr.w	r6, r0, r3
 8000874:	4097      	lsls	r7, r2
 8000876:	fa01 f002 	lsl.w	r0, r1, r2
 800087a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800087e:	40d9      	lsrs	r1, r3
 8000880:	4330      	orrs	r0, r6
 8000882:	0c03      	lsrs	r3, r0, #16
 8000884:	fbb1 f6fe 	udiv	r6, r1, lr
 8000888:	fa1f f887 	uxth.w	r8, r7
 800088c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000890:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000894:	fb06 f108 	mul.w	r1, r6, r8
 8000898:	4299      	cmp	r1, r3
 800089a:	fa04 f402 	lsl.w	r4, r4, r2
 800089e:	d909      	bls.n	80008b4 <__udivmoddi4+0x19c>
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008a6:	f080 808d 	bcs.w	80009c4 <__udivmoddi4+0x2ac>
 80008aa:	4299      	cmp	r1, r3
 80008ac:	f240 808a 	bls.w	80009c4 <__udivmoddi4+0x2ac>
 80008b0:	3e02      	subs	r6, #2
 80008b2:	443b      	add	r3, r7
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b281      	uxth	r1, r0
 80008b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c4:	fb00 f308 	mul.w	r3, r0, r8
 80008c8:	428b      	cmp	r3, r1
 80008ca:	d907      	bls.n	80008dc <__udivmoddi4+0x1c4>
 80008cc:	1879      	adds	r1, r7, r1
 80008ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80008d2:	d273      	bcs.n	80009bc <__udivmoddi4+0x2a4>
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d971      	bls.n	80009bc <__udivmoddi4+0x2a4>
 80008d8:	3802      	subs	r0, #2
 80008da:	4439      	add	r1, r7
 80008dc:	1acb      	subs	r3, r1, r3
 80008de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008e2:	e778      	b.n	80007d6 <__udivmoddi4+0xbe>
 80008e4:	f1c6 0c20 	rsb	ip, r6, #32
 80008e8:	fa03 f406 	lsl.w	r4, r3, r6
 80008ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80008f0:	431c      	orrs	r4, r3
 80008f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008f6:	fa01 f306 	lsl.w	r3, r1, r6
 80008fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000902:	431f      	orrs	r7, r3
 8000904:	0c3b      	lsrs	r3, r7, #16
 8000906:	fbb1 f9fe 	udiv	r9, r1, lr
 800090a:	fa1f f884 	uxth.w	r8, r4
 800090e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000912:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000916:	fb09 fa08 	mul.w	sl, r9, r8
 800091a:	458a      	cmp	sl, r1
 800091c:	fa02 f206 	lsl.w	r2, r2, r6
 8000920:	fa00 f306 	lsl.w	r3, r0, r6
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x220>
 8000926:	1861      	adds	r1, r4, r1
 8000928:	f109 30ff 	add.w	r0, r9, #4294967295
 800092c:	d248      	bcs.n	80009c0 <__udivmoddi4+0x2a8>
 800092e:	458a      	cmp	sl, r1
 8000930:	d946      	bls.n	80009c0 <__udivmoddi4+0x2a8>
 8000932:	f1a9 0902 	sub.w	r9, r9, #2
 8000936:	4421      	add	r1, r4
 8000938:	eba1 010a 	sub.w	r1, r1, sl
 800093c:	b2bf      	uxth	r7, r7
 800093e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000942:	fb0e 1110 	mls	r1, lr, r0, r1
 8000946:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800094a:	fb00 f808 	mul.w	r8, r0, r8
 800094e:	45b8      	cmp	r8, r7
 8000950:	d907      	bls.n	8000962 <__udivmoddi4+0x24a>
 8000952:	19e7      	adds	r7, r4, r7
 8000954:	f100 31ff 	add.w	r1, r0, #4294967295
 8000958:	d22e      	bcs.n	80009b8 <__udivmoddi4+0x2a0>
 800095a:	45b8      	cmp	r8, r7
 800095c:	d92c      	bls.n	80009b8 <__udivmoddi4+0x2a0>
 800095e:	3802      	subs	r0, #2
 8000960:	4427      	add	r7, r4
 8000962:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000966:	eba7 0708 	sub.w	r7, r7, r8
 800096a:	fba0 8902 	umull	r8, r9, r0, r2
 800096e:	454f      	cmp	r7, r9
 8000970:	46c6      	mov	lr, r8
 8000972:	4649      	mov	r1, r9
 8000974:	d31a      	bcc.n	80009ac <__udivmoddi4+0x294>
 8000976:	d017      	beq.n	80009a8 <__udivmoddi4+0x290>
 8000978:	b15d      	cbz	r5, 8000992 <__udivmoddi4+0x27a>
 800097a:	ebb3 020e 	subs.w	r2, r3, lr
 800097e:	eb67 0701 	sbc.w	r7, r7, r1
 8000982:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000986:	40f2      	lsrs	r2, r6
 8000988:	ea4c 0202 	orr.w	r2, ip, r2
 800098c:	40f7      	lsrs	r7, r6
 800098e:	e9c5 2700 	strd	r2, r7, [r5]
 8000992:	2600      	movs	r6, #0
 8000994:	4631      	mov	r1, r6
 8000996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e70b      	b.n	80007b8 <__udivmoddi4+0xa0>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0x60>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6fd      	b.n	80007a4 <__udivmoddi4+0x8c>
 80009a8:	4543      	cmp	r3, r8
 80009aa:	d2e5      	bcs.n	8000978 <__udivmoddi4+0x260>
 80009ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80009b0:	eb69 0104 	sbc.w	r1, r9, r4
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7df      	b.n	8000978 <__udivmoddi4+0x260>
 80009b8:	4608      	mov	r0, r1
 80009ba:	e7d2      	b.n	8000962 <__udivmoddi4+0x24a>
 80009bc:	4660      	mov	r0, ip
 80009be:	e78d      	b.n	80008dc <__udivmoddi4+0x1c4>
 80009c0:	4681      	mov	r9, r0
 80009c2:	e7b9      	b.n	8000938 <__udivmoddi4+0x220>
 80009c4:	4666      	mov	r6, ip
 80009c6:	e775      	b.n	80008b4 <__udivmoddi4+0x19c>
 80009c8:	4630      	mov	r0, r6
 80009ca:	e74a      	b.n	8000862 <__udivmoddi4+0x14a>
 80009cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009d0:	4439      	add	r1, r7
 80009d2:	e713      	b.n	80007fc <__udivmoddi4+0xe4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	443c      	add	r4, r7
 80009d8:	e724      	b.n	8000824 <__udivmoddi4+0x10c>
 80009da:	bf00      	nop

080009dc <__aeabi_idiv0>:
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af04      	add	r7, sp, #16
  /* Initialize the peripherals and the BLE Stack */
	//-----------------

	//--------------------

  const char *name = "Hierath";
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <MX_BlueNRG_MS_Init+0x138>)
 80009e8:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80009ea:	f000 f8a9 	bl	8000b40 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f002 fdc4 	bl	800357c <BSP_PB_GetState>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <MX_BlueNRG_MS_Init+0x13c>)
 80009fa:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4848      	ldr	r0, [pc, #288]	; (8000b20 <MX_BlueNRG_MS_Init+0x140>)
 8000a00:	f008 ff12 	bl	8009828 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000a04:	1dba      	adds	r2, r7, #6
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f008 fd7f 	bl	8009510 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000a12:	f008 fdc1 	bl	8009598 <hci_reset>
  HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f003 fb66 	bl	80040e8 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000a1c:	7a3b      	ldrb	r3, [r7, #8]
 8000a1e:	2b30      	cmp	r3, #48	; 0x30
 8000a20:	d902      	bls.n	8000a28 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <MX_BlueNRG_MS_Init+0x144>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000a28:	f107 0209 	add.w	r2, r7, #9
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <MX_BlueNRG_MS_Init+0x148>)
 8000a2e:	2106      	movs	r1, #6
 8000a30:	2080      	movs	r0, #128	; 0x80
 8000a32:	f008 fce7 	bl	8009404 <aci_hal_read_config_data>
 8000a36:	4603      	mov	r3, r0
 8000a38:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_BlueNRG_MS_Init+0x148>)
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000a42:	2bc0      	cmp	r3, #192	; 0xc0
 8000a44:	d000      	beq.n	8000a48 <MX_BlueNRG_MS_Init+0x68>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000a46:	e7fe      	b.n	8000a46 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a48:	f008 fa9c 	bl	8008f84 <aci_gatt_init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a50:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <MX_BlueNRG_MS_Init+0x144>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d110      	bne.n	8000a7a <MX_BlueNRG_MS_Init+0x9a>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a58:	f107 020e 	add.w	r2, r7, #14
 8000a5c:	f107 030a 	add.w	r3, r7, #10
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	2207      	movs	r2, #7
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f008 f856 	bl	8008b20 <aci_gap_init_IDB05A1>
 8000a74:	4603      	mov	r3, r0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	e00a      	b.n	8000a90 <MX_BlueNRG_MS_Init+0xb0>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a7a:	f107 030a 	add.w	r3, r7, #10
 8000a7e:	f107 020c 	add.w	r2, r7, #12
 8000a82:	f107 010e 	add.w	r1, r7, #14
 8000a86:	2001      	movs	r0, #1
 8000a88:	f008 f89a 	bl	8008bc0 <aci_gap_init_IDB04A1>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a90:	89fc      	ldrh	r4, [r7, #14]
 8000a92:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f7ff fb9b 	bl	80001d0 <strlen>
 8000a9a:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f008 fbec 	bl	8009286 <aci_gatt_update_char_value>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d000      	beq.n	8000aba <MX_BlueNRG_MS_Init+0xda>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000ab8:	e7fe      	b.n	8000ab8 <MX_BlueNRG_MS_Init+0xd8>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000aba:	2301      	movs	r3, #1
 8000abc:	9303      	str	r3, [sp, #12]
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_BlueNRG_MS_Init+0x14c>)
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2307      	movs	r3, #7
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 f9ae 	bl	8008e32 <aci_gap_set_auth_requirement>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d000      	beq.n	8000ae2 <MX_BlueNRG_MS_Init+0x102>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000ae0:	e7fe      	b.n	8000ae0 <MX_BlueNRG_MS_Init+0x100>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000ae2:	f001 f893 	bl	8001c0c <Add_HWServW2ST_Service>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d000      	beq.n	8000af2 <MX_BlueNRG_MS_Init+0x112>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000af0:	e7fe      	b.n	8000af0 <MX_BlueNRG_MS_Init+0x110>
  }

  ret = Add_SWServW2ST_Service();
 8000af2:	f001 f963 	bl	8001dbc <Add_SWServW2ST_Service>
 8000af6:	4603      	mov	r3, r0
 8000af8:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d000      	beq.n	8000b02 <MX_BlueNRG_MS_Init+0x122>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000b00:	e7fe      	b.n	8000b00 <MX_BlueNRG_MS_Init+0x120>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000b02:	2104      	movs	r1, #4
 8000b04:	2001      	movs	r0, #1
 8000b06:	f008 fcd2 	bl	80094ae <aci_hal_set_tx_power_level>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bdb0      	pop	{r4, r5, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	0800b34c 	.word	0x0800b34c
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	08002379 	.word	0x08002379
 8000b24:	20000180 	.word	0x20000180
 8000b28:	2000064c 	.word	0x2000064c
 8000b2c:	0001e240 	.word	0x0001e240

08000b30 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b34:	f000 f83c 	bl	8000bb0 <User_Process>
  hci_user_evt_proc();
 8000b38:	f008 fff2 	bl	8009b20 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b44:	2101      	movs	r1, #1
 8000b46:	2000      	movs	r0, #0
 8000b48:	f002 fcc4 	bl	80034d4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f002 fc59 	bl	8003404 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f002 fd70 	bl	8003638 <BSP_COM_Init>
  	  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	2230      	movs	r2, #48	; 0x30
 8000b5e:	490f      	ldr	r1, [pc, #60]	; (8000b9c <User_Init+0x5c>)
 8000b60:	480f      	ldr	r0, [pc, #60]	; (8000ba0 <User_Init+0x60>)
 8000b62:	f007 f861 	bl	8007c28 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	222f      	movs	r2, #47	; 0x2f
 8000b6c:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <User_Init+0x64>)
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <User_Init+0x60>)
 8000b70:	f007 f85a 	bl	8007c28 <HAL_UART_Transmit>
    BSP_TSENSOR_Init();
 8000b74:	f003 f8a2 	bl	8003cbc <BSP_TSENSOR_Init>
    HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	490a      	ldr	r1, [pc, #40]	; (8000ba8 <User_Init+0x68>)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <User_Init+0x60>)
 8000b82:	f007 f851 	bl	8007c28 <HAL_UART_Transmit>
    BSP_PSENSOR_Init();
 8000b86:	f003 f86b 	bl	8003c60 <BSP_PSENSOR_Init>
    HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	222d      	movs	r2, #45	; 0x2d
 8000b90:	4906      	ldr	r1, [pc, #24]	; (8000bac <User_Init+0x6c>)
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <User_Init+0x60>)
 8000b94:	f007 f848 	bl	8007c28 <HAL_UART_Transmit>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	20000b58 	.word	0x20000b58
 8000ba4:	20000034 	.word	0x20000034
 8000ba8:	20000064 	.word	0x20000064
 8000bac:	20000094 	.word	0x20000094

08000bb0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <User_Process+0xb8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000bc0:	f001 fb66 	bl	8002290 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <User_Process+0xb8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f002 fc2c 	bl	8003428 <BSP_LED_Toggle>

    if (connected)
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <User_Process+0xbc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d042      	beq.n	8000c5e <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000bd8:	f003 fa7a 	bl	80040d0 <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f009 f96e 	bl	8009ec0 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000be4:	463a      	mov	r2, r7
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f84c 	bl	8000c88 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000bf0:	edd7 7a00 	vldr	s15, [r7]
 8000bf4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000c70 <User_Process+0xc0>
 8000bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bfc:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c10:	ee17 3a90 	vmov	r3, s15
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	ee16 0a90 	vmov	r0, s13
 8000c1c:	f001 faf2 	bl	8002204 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <User_Process+0xc4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8db 	bl	8000de0 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <User_Process+0xc8>)
 8000c2c:	4913      	ldr	r1, [pc, #76]	; (8000c7c <User_Process+0xcc>)
 8000c2e:	4814      	ldr	r0, [pc, #80]	; (8000c80 <User_Process+0xd0>)
 8000c30:	f001 f958 	bl	8001ee4 <Acc_Update>
      Quat_Update(&q_axes);
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <User_Process+0xd4>)
 8000c36:	f001 f9df 	bl	8001ff8 <Quat_Update>

      counter ++;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <User_Process+0xc4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <User_Process+0xc4>)
 8000c42:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <User_Process+0xc4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b28      	cmp	r3, #40	; 0x28
 8000c4a:	d104      	bne.n	8000c56 <User_Process+0xa6>
        counter = 0;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <User_Process+0xc4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000c52:	f000 fee1 	bl	8001a18 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5a:	f003 fa45 	bl	80040e8 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000c1 	.word	0x200000c1
 8000c6c:	200001f8 	.word	0x200001f8
 8000c70:	42c80000 	.word	0x42c80000
 8000c74:	200001f0 	.word	0x200001f0
 8000c78:	20000214 	.word	0x20000214
 8000c7c:	20000208 	.word	0x20000208
 8000c80:	200001fc 	.word	0x200001fc
 8000c84:	20000220 	.word	0x20000220

08000c88 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
		temp_value = BSP_TSENSOR_ReadTemp();
 8000c92:	f003 f82f 	bl	8003cf4 <BSP_TSENSOR_ReadTemp>
 8000c96:	eef0 7a40 	vmov.f32	s15, s0
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <Set_Random_Environmental_Values+0x13c>)
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
		int tmpInt1 = temp_value;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <Set_Random_Environmental_Values+0x13c>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000caa:	ee17 3a90 	vmov	r3, s15
 8000cae:	61fb      	str	r3, [r7, #28]
		float tmpFrac = temp_value - tmpInt1;
 8000cb0:	4b44      	ldr	r3, [pc, #272]	; (8000dc4 <Set_Random_Environmental_Values+0x13c>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	edc7 7a06 	vstr	s15, [r7, #24]
		int tmpInt2 = trunc(tmpFrac * 100);
 8000cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ccc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000dc8 <Set_Random_Environmental_Values+0x140>
 8000cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd4:	ee17 0a90 	vmov	r0, s15
 8000cd8:	f7ff fc36 	bl	8000548 <__aeabi_f2d>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	ec43 2b10 	vmov	d0, r2, r3
 8000ce4:	f00a faf4 	bl	800b2d0 <trunc>
 8000ce8:	ec53 2b10 	vmov	r2, r3, d0
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff fc82 	bl	80005f8 <__aeabi_d2iz>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	617b      	str	r3, [r7, #20]
		*data_t = temp_value;
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <Set_Random_Environmental_Values+0x13c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
		snprintf(str_tmp,100,"\n\r TEMPERATURE = %d.%02d	", tmpInt1, tmpInt2);
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <Set_Random_Environmental_Values+0x144>)
 8000d08:	2164      	movs	r1, #100	; 0x64
 8000d0a:	4831      	ldr	r0, [pc, #196]	; (8000dd0 <Set_Random_Environmental_Values+0x148>)
 8000d0c:	f009 f946 	bl	8009f9c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	2264      	movs	r2, #100	; 0x64
 8000d16:	492e      	ldr	r1, [pc, #184]	; (8000dd0 <Set_Random_Environmental_Values+0x148>)
 8000d18:	482e      	ldr	r0, [pc, #184]	; (8000dd4 <Set_Random_Environmental_Values+0x14c>)
 8000d1a:	f006 ff85 	bl	8007c28 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d22:	f003 f9e1 	bl	80040e8 <HAL_Delay>

		//Pressure
		pres_value = BSP_PSENSOR_ReadPressure();
 8000d26:	f002 ffbb 	bl	8003ca0 <BSP_PSENSOR_ReadPressure>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <Set_Random_Environmental_Values+0x150>)
 8000d30:	edc3 7a00 	vstr	s15, [r3]
		int presInt1 = pres_value;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <Set_Random_Environmental_Values+0x150>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3e:	ee17 3a90 	vmov	r3, s15
 8000d42:	613b      	str	r3, [r7, #16]
		float presFrac = pres_value - presInt1;
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <Set_Random_Environmental_Values+0x150>)
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	ee07 3a90 	vmov	s15, r3
 8000d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d58:	edc7 7a03 	vstr	s15, [r7, #12]
		int presInt2 = trunc(presFrac * 100);
 8000d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d60:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000dc8 <Set_Random_Environmental_Values+0x140>
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	ee17 0a90 	vmov	r0, s15
 8000d6c:	f7ff fbec 	bl	8000548 <__aeabi_f2d>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	ec43 2b10 	vmov	d0, r2, r3
 8000d78:	f00a faaa 	bl	800b2d0 <trunc>
 8000d7c:	ec53 2b10 	vmov	r2, r3, d0
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff fc38 	bl	80005f8 <__aeabi_d2iz>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60bb      	str	r3, [r7, #8]
		*data_p =pres_value ;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <Set_Random_Environmental_Values+0x150>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]

		snprintf(str_tmp,100," Pressure = %d.%02d ", presInt1, presInt2);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <Set_Random_Environmental_Values+0x154>)
 8000d9c:	2164      	movs	r1, #100	; 0x64
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <Set_Random_Environmental_Values+0x148>)
 8000da0:	f009 f8fc 	bl	8009f9c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	2264      	movs	r2, #100	; 0x64
 8000daa:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <Set_Random_Environmental_Values+0x148>)
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <Set_Random_Environmental_Values+0x14c>)
 8000dae:	f006 ff3b 	bl	8007c28 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db6:	f003 f997 	bl	80040e8 <HAL_Delay>

  /*
   * *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;      T sensor emulation
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX;  P sensor emulation
*/}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000184 	.word	0x20000184
 8000dc8:	42c80000 	.word	0x42c80000
 8000dcc:	0800b354 	.word	0x0800b354
 8000dd0:	2000018c 	.word	0x2000018c
 8000dd4:	20000b58 	.word	0x20000b58
 8000dd8:	20000188 	.word	0x20000188
 8000ddc:	0800b370 	.word	0x0800b370

08000de0 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	b0e9      	sub	sp, #420	; 0x1a4
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8000dec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000df0:	2b13      	cmp	r3, #19
 8000df2:	f200 82ef 	bhi.w	80013d4 <Set_Random_Motion_Values+0x5f4>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8000df6:	f009 f891 	bl	8009f1c <rand>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e02:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000e06:	461a      	mov	r2, r3
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	fb02 f501 	mul.w	r5, r2, r1
 8000e10:	fb00 f403 	mul.w	r4, r0, r3
 8000e14:	442c      	add	r4, r5
 8000e16:	fba0 0102 	umull	r0, r1, r0, r2
 8000e1a:	1863      	adds	r3, r4, r1
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	1894      	adds	r4, r2, r2
 8000e24:	65bc      	str	r4, [r7, #88]	; 0x58
 8000e26:	415b      	adcs	r3, r3
 8000e28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e2e:	eb12 0a00 	adds.w	sl, r2, r0
 8000e32:	eb43 0b01 	adc.w	fp, r3, r1
 8000e36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	4650      	mov	r0, sl
 8000e40:	4659      	mov	r1, fp
 8000e42:	f7ff fc51 	bl	80006e8 <__aeabi_uldivmod>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	f112 010a 	adds.w	r1, r2, #10
 8000e4e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000e52:	f143 0300 	adc.w	r3, r3, #0
 8000e56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000e5a:	4be2      	ldr	r3, [pc, #904]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e64:	4413      	add	r3, r2
 8000e66:	461a      	mov	r2, r3
 8000e68:	4bde      	ldr	r3, [pc, #888]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000e6a:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8000e6c:	f009 f856 	bl	8009f1c <rand>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4618      	mov	r0, r3
 8000e74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e78:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	fb02 f501 	mul.w	r5, r2, r1
 8000e86:	fb00 f403 	mul.w	r4, r0, r3
 8000e8a:	442c      	add	r4, r5
 8000e8c:	fba0 8902 	umull	r8, r9, r0, r2
 8000e90:	eb04 0309 	add.w	r3, r4, r9
 8000e94:	4699      	mov	r9, r3
 8000e96:	4642      	mov	r2, r8
 8000e98:	464b      	mov	r3, r9
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	f04f 0100 	mov.w	r1, #0
 8000ea2:	0099      	lsls	r1, r3, #2
 8000ea4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000ea8:	0090      	lsls	r0, r2, #2
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	eb12 0108 	adds.w	r1, r2, r8
 8000eb2:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8000eb6:	eb43 0309 	adc.w	r3, r3, r9
 8000eba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000ebe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8000eca:	f7ff fc0d 	bl	80006e8 <__aeabi_uldivmod>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f06f 0209 	mvn.w	r2, #9
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	1a14      	subs	r4, r2, r0
 8000ee0:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8000ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8000ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000eec:	4bbd      	ldr	r3, [pc, #756]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000ef6:	4413      	add	r3, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4bba      	ldr	r3, [pc, #744]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000efc:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8000efe:	f009 f80d 	bl	8009f1c <rand>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	fb02 f501 	mul.w	r5, r2, r1
 8000f18:	fb00 f403 	mul.w	r4, r0, r3
 8000f1c:	442c      	add	r4, r5
 8000f1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f22:	eb04 0309 	add.w	r3, r4, r9
 8000f26:	4699      	mov	r9, r3
 8000f28:	4642      	mov	r2, r8
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	f04f 0000 	mov.w	r0, #0
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	00d9      	lsls	r1, r3, #3
 8000f36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000f3a:	00d0      	lsls	r0, r2, #3
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	ebb2 0108 	subs.w	r1, r2, r8
 8000f44:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8000f48:	eb63 0309 	sbc.w	r3, r3, r9
 8000f4c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8000f50:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8000f5c:	f7ff fbc4 	bl	80006e8 <__aeabi_uldivmod>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	f112 010a 	adds.w	r1, r2, #10
 8000f68:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8000f6c:	f143 0300 	adc.w	r3, r3, #0
 8000f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000f74:	4b9b      	ldr	r3, [pc, #620]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f7e:	4413      	add	r3, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b98      	ldr	r3, [pc, #608]	; (80011e4 <Set_Random_Motion_Values+0x404>)
 8000f84:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8000f86:	f008 ffc9 	bl	8009f1c <rand>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000f92:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000f96:	461a      	mov	r2, r3
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	fb02 f501 	mul.w	r5, r2, r1
 8000fa0:	fb00 f403 	mul.w	r4, r0, r3
 8000fa4:	442c      	add	r4, r5
 8000fa6:	fba0 2302 	umull	r2, r3, r0, r2
 8000faa:	18e1      	adds	r1, r4, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	1891      	adds	r1, r2, r2
 8000fb0:	6539      	str	r1, [r7, #80]	; 0x50
 8000fb2:	415b      	adcs	r3, r3
 8000fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8000fb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000fba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	f7ff fb91 	bl	80006e8 <__aeabi_uldivmod>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8000fce:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8000fd2:	f143 0300 	adc.w	r3, r3, #0
 8000fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000fda:	4b83      	ldr	r3, [pc, #524]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fe4:	4413      	add	r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 8000fea:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8000fec:	f008 ff96 	bl	8009f1c <rand>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ff8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	fb02 f501 	mul.w	r5, r2, r1
 8001006:	fb00 f403 	mul.w	r4, r0, r3
 800100a:	442c      	add	r4, r5
 800100c:	fba0 2302 	umull	r2, r3, r0, r2
 8001010:	18e1      	adds	r1, r4, r3
 8001012:	460b      	mov	r3, r1
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	f04f 0100 	mov.w	r1, #0
 800101c:	0099      	lsls	r1, r3, #2
 800101e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001022:	0090      	lsls	r0, r2, #2
 8001024:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	f7ff fb5c 	bl	80006e8 <__aeabi_uldivmod>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	1a14      	subs	r4, r2, r0
 8001042:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8001046:	eb63 0301 	sbc.w	r3, r3, r1
 800104a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800104e:	4b66      	ldr	r3, [pc, #408]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	461a      	mov	r2, r3
 8001054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001058:	4413      	add	r3, r2
 800105a:	461a      	mov	r2, r3
 800105c:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 800105e:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001060:	f008 ff5c 	bl	8009f1c <rand>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800106c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001070:	461a      	mov	r2, r3
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	fb02 f501 	mul.w	r5, r2, r1
 800107a:	fb00 f403 	mul.w	r4, r0, r3
 800107e:	442c      	add	r4, r5
 8001080:	fba0 0102 	umull	r0, r1, r0, r2
 8001084:	1863      	adds	r3, r4, r1
 8001086:	4619      	mov	r1, r3
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	1894      	adds	r4, r2, r2
 800108e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001090:	415b      	adcs	r3, r3
 8001092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001098:	1812      	adds	r2, r2, r0
 800109a:	eb41 0303 	adc.w	r3, r1, r3
 800109e:	1891      	adds	r1, r2, r2
 80010a0:	6439      	str	r1, [r7, #64]	; 0x40
 80010a2:	415b      	adcs	r3, r3
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
 80010a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	f7ff fb17 	bl	80006e8 <__aeabi_uldivmod>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80010c2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80010c6:	f143 0300 	adc.w	r3, r3, #0
 80010ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010ce:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010d8:	4413      	add	r3, r2
 80010da:	461a      	mov	r2, r3
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <Set_Random_Motion_Values+0x408>)
 80010de:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80010e0:	f008 ff1c 	bl	8009f1c <rand>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80010ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80010f0:	461a      	mov	r2, r3
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	fb02 f501 	mul.w	r5, r2, r1
 80010fa:	fb00 f403 	mul.w	r4, r0, r3
 80010fe:	442c      	add	r4, r5
 8001100:	fba0 0102 	umull	r0, r1, r0, r2
 8001104:	1863      	adds	r3, r4, r1
 8001106:	4619      	mov	r1, r3
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	1894      	adds	r4, r2, r2
 800110e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001110:	415b      	adcs	r3, r3
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001118:	1814      	adds	r4, r2, r0
 800111a:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800111e:	414b      	adcs	r3, r1
 8001120:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001124:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001130:	f7ff fada 	bl	80006e8 <__aeabi_uldivmod>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	1cd1      	adds	r1, r2, #3
 800113a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800113e:	f143 0300 	adc.w	r3, r3, #0
 8001142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <Set_Random_Motion_Values+0x40c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001150:	4413      	add	r3, r2
 8001152:	461a      	mov	r2, r3
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <Set_Random_Motion_Values+0x40c>)
 8001156:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001158:	f008 fee0 	bl	8009f1c <rand>
 800115c:	4603      	mov	r3, r0
 800115e:	4618      	mov	r0, r3
 8001160:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001164:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001168:	461a      	mov	r2, r3
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	fb02 f501 	mul.w	r5, r2, r1
 8001172:	fb00 f403 	mul.w	r4, r0, r3
 8001176:	442c      	add	r4, r5
 8001178:	fba0 2302 	umull	r2, r3, r0, r2
 800117c:	18e1      	adds	r1, r4, r3
 800117e:	460b      	mov	r3, r1
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	f04f 0100 	mov.w	r1, #0
 8001188:	0099      	lsls	r1, r3, #2
 800118a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800118e:	0090      	lsls	r0, r2, #2
 8001190:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	f7ff faa6 	bl	80006e8 <__aeabi_uldivmod>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f06f 0202 	mvn.w	r2, #2
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	1a14      	subs	r4, r2, r0
 80011ae:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80011b2:	eb63 0301 	sbc.w	r3, r3, r1
 80011b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Set_Random_Motion_Values+0x40c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	461a      	mov	r2, r3
 80011c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <Set_Random_Motion_Values+0x40c>)
 80011ca:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80011cc:	f008 fea6 	bl	8009f1c <rand>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80011dc:	461a      	mov	r2, r3
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	e005      	b.n	80011f0 <Set_Random_Motion_Values+0x410>
 80011e4:	200001fc 	.word	0x200001fc
 80011e8:	20000208 	.word	0x20000208
 80011ec:	20000214 	.word	0x20000214
 80011f0:	fb02 f501 	mul.w	r5, r2, r1
 80011f4:	fb00 f403 	mul.w	r4, r0, r3
 80011f8:	442c      	add	r4, r5
 80011fa:	fba0 8902 	umull	r8, r9, r0, r2
 80011fe:	eb04 0309 	add.w	r3, r4, r9
 8001202:	4699      	mov	r9, r3
 8001204:	4642      	mov	r2, r8
 8001206:	464b      	mov	r3, r9
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	0099      	lsls	r1, r3, #2
 8001212:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001216:	0090      	lsls	r0, r2, #2
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	eb12 0108 	adds.w	r1, r2, r8
 8001220:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8001224:	eb43 0309 	adc.w	r3, r3, r9
 8001228:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800122c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001238:	f7ff fa56 	bl	80006e8 <__aeabi_uldivmod>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	1cd1      	adds	r1, r2, #3
 8001242:	67b9      	str	r1, [r7, #120]	; 0x78
 8001244:	f143 0300 	adc.w	r3, r3, #0
 8001248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800124a:	4b60      	ldr	r3, [pc, #384]	; (80013cc <Set_Random_Motion_Values+0x5ec>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	461a      	mov	r2, r3
 8001250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001252:	4413      	add	r3, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <Set_Random_Motion_Values+0x5ec>)
 8001258:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800125a:	f008 fe5f 	bl	8009f1c <rand>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001266:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800126a:	461a      	mov	r2, r3
 800126c:	f04f 0300 	mov.w	r3, #0
 8001270:	fb02 f501 	mul.w	r5, r2, r1
 8001274:	fb00 f403 	mul.w	r4, r0, r3
 8001278:	442c      	add	r4, r5
 800127a:	fba0 0102 	umull	r0, r1, r0, r2
 800127e:	1863      	adds	r3, r4, r1
 8001280:	4619      	mov	r1, r3
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	1894      	adds	r4, r2, r2
 8001288:	633c      	str	r4, [r7, #48]	; 0x30
 800128a:	415b      	adcs	r3, r3
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001292:	1814      	adds	r4, r2, r0
 8001294:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 8001298:	414b      	adcs	r3, r1
 800129a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800129e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80012aa:	f7ff fa1d 	bl	80006e8 <__aeabi_uldivmod>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80012b6:	6739      	str	r1, [r7, #112]	; 0x70
 80012b8:	f143 0300 	adc.w	r3, r3, #0
 80012bc:	677b      	str	r3, [r7, #116]	; 0x74
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 80012cc:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80012ce:	f008 fe25 	bl	8009f1c <rand>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4618      	mov	r0, r3
 80012d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012da:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80012de:	461a      	mov	r2, r3
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	fb02 f501 	mul.w	r5, r2, r1
 80012e8:	fb00 f403 	mul.w	r4, r0, r3
 80012ec:	192e      	adds	r6, r5, r4
 80012ee:	fba0 4502 	umull	r4, r5, r0, r2
 80012f2:	1973      	adds	r3, r6, r5
 80012f4:	461d      	mov	r5, r3
 80012f6:	4622      	mov	r2, r4
 80012f8:	462b      	mov	r3, r5
 80012fa:	f04f 0000 	mov.w	r0, #0
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	0099      	lsls	r1, r3, #2
 8001304:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001308:	0090      	lsls	r0, r2, #2
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	1911      	adds	r1, r2, r4
 8001310:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8001314:	416b      	adcs	r3, r5
 8001316:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800131a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8001326:	f7ff f9df 	bl	80006e8 <__aeabi_uldivmod>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001332:	66b9      	str	r1, [r7, #104]	; 0x68
 8001334:	f143 0300 	adc.w	r3, r3, #0
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	461a      	mov	r2, r3
 8001340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001342:	4413      	add	r3, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 8001348:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800134a:	f008 fde7 	bl	8009f1c <rand>
 800134e:	4603      	mov	r3, r0
 8001350:	4618      	mov	r0, r3
 8001352:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001356:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800135a:	461a      	mov	r2, r3
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	fb02 f501 	mul.w	r5, r2, r1
 8001364:	fb00 f403 	mul.w	r4, r0, r3
 8001368:	192e      	adds	r6, r5, r4
 800136a:	fba0 4502 	umull	r4, r5, r0, r2
 800136e:	1973      	adds	r3, r6, r5
 8001370:	461d      	mov	r5, r3
 8001372:	4622      	mov	r2, r4
 8001374:	462b      	mov	r3, r5
 8001376:	f04f 0000 	mov.w	r0, #0
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	00d9      	lsls	r1, r3, #3
 8001380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001384:	00d0      	lsls	r0, r2, #3
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	1b11      	subs	r1, r2, r4
 800138c:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8001390:	eb63 0305 	sbc.w	r3, r3, r5
 8001394:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001398:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80013a4:	f7ff f9a0 	bl	80006e8 <__aeabi_uldivmod>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80013b0:	6639      	str	r1, [r7, #96]	; 0x60
 80013b2:	f143 0300 	adc.w	r3, r3, #0
 80013b6:	667b      	str	r3, [r7, #100]	; 0x64
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	461a      	mov	r2, r3
 80013be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <Set_Random_Motion_Values+0x5f0>)
 80013c6:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 80013c8:	e31b      	b.n	8001a02 <Set_Random_Motion_Values+0xc22>
 80013ca:	bf00      	nop
 80013cc:	20000214 	.word	0x20000214
 80013d0:	20000220 	.word	0x20000220
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80013d4:	f008 fda2 	bl	8009f1c <rand>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80013e4:	461a      	mov	r2, r3
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	fb02 f501 	mul.w	r5, r2, r1
 80013ee:	fb00 f403 	mul.w	r4, r0, r3
 80013f2:	442c      	add	r4, r5
 80013f4:	fba0 0102 	umull	r0, r1, r0, r2
 80013f8:	1863      	adds	r3, r4, r1
 80013fa:	4619      	mov	r1, r3
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	1894      	adds	r4, r2, r2
 8001402:	62bc      	str	r4, [r7, #40]	; 0x28
 8001404:	415b      	adcs	r3, r3
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800140c:	eb12 0800 	adds.w	r8, r2, r0
 8001410:	eb43 0901 	adc.w	r9, r3, r1
 8001414:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	4640      	mov	r0, r8
 800141e:	4649      	mov	r1, r9
 8001420:	f7ff f962 	bl	80006e8 <__aeabi_uldivmod>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f06f 0209 	mvn.w	r2, #9
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	1a14      	subs	r4, r2, r0
 8001436:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800143a:	eb63 0301 	sbc.w	r3, r3, r1
 800143e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001442:	4be6      	ldr	r3, [pc, #920]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800144c:	4413      	add	r3, r2
 800144e:	461a      	mov	r2, r3
 8001450:	4be2      	ldr	r3, [pc, #904]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 8001452:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001454:	f008 fd62 	bl	8009f1c <rand>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001460:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001464:	461a      	mov	r2, r3
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	fb02 f501 	mul.w	r5, r2, r1
 800146e:	fb00 f403 	mul.w	r4, r0, r3
 8001472:	442c      	add	r4, r5
 8001474:	fba0 8902 	umull	r8, r9, r0, r2
 8001478:	eb04 0309 	add.w	r3, r4, r9
 800147c:	4699      	mov	r9, r3
 800147e:	4642      	mov	r2, r8
 8001480:	464b      	mov	r3, r9
 8001482:	f04f 0000 	mov.w	r0, #0
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	0099      	lsls	r1, r3, #2
 800148c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001490:	0090      	lsls	r0, r2, #2
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	eb12 0108 	adds.w	r1, r2, r8
 800149a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 800149e:	eb43 0309 	adc.w	r3, r3, r9
 80014a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80014a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80014b2:	f7ff f919 	bl	80006e8 <__aeabi_uldivmod>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	f112 010a 	adds.w	r1, r2, #10
 80014be:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80014c2:	f143 0300 	adc.w	r3, r3, #0
 80014c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014ca:	4bc4      	ldr	r3, [pc, #784]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	4bc0      	ldr	r3, [pc, #768]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 80014da:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80014dc:	f008 fd1e 	bl	8009f1c <rand>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4618      	mov	r0, r3
 80014e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80014e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014ec:	461a      	mov	r2, r3
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	fb02 f501 	mul.w	r5, r2, r1
 80014f6:	fb00 f403 	mul.w	r4, r0, r3
 80014fa:	442c      	add	r4, r5
 80014fc:	fba0 8902 	umull	r8, r9, r0, r2
 8001500:	eb04 0309 	add.w	r3, r4, r9
 8001504:	4699      	mov	r9, r3
 8001506:	4642      	mov	r2, r8
 8001508:	464b      	mov	r3, r9
 800150a:	f04f 0000 	mov.w	r0, #0
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	00d9      	lsls	r1, r3, #3
 8001514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001518:	00d0      	lsls	r0, r2, #3
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ebb2 0108 	subs.w	r1, r2, r8
 8001522:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8001526:	eb63 0309 	sbc.w	r3, r3, r9
 800152a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800152e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800153a:	f7ff f8d5 	bl	80006e8 <__aeabi_uldivmod>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f06f 0209 	mvn.w	r2, #9
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	1a14      	subs	r4, r2, r0
 8001550:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8001554:	eb63 0301 	sbc.w	r3, r3, r1
 8001558:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800155c:	4b9f      	ldr	r3, [pc, #636]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	461a      	mov	r2, r3
 8001562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001566:	4413      	add	r3, r2
 8001568:	461a      	mov	r2, r3
 800156a:	4b9c      	ldr	r3, [pc, #624]	; (80017dc <Set_Random_Motion_Values+0x9fc>)
 800156c:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800156e:	f008 fcd5 	bl	8009f1c <rand>
 8001572:	4603      	mov	r3, r0
 8001574:	4618      	mov	r0, r3
 8001576:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800157a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800157e:	461a      	mov	r2, r3
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	fb02 f501 	mul.w	r5, r2, r1
 8001588:	fb00 f403 	mul.w	r4, r0, r3
 800158c:	442c      	add	r4, r5
 800158e:	fba0 2302 	umull	r2, r3, r0, r2
 8001592:	18e1      	adds	r1, r4, r3
 8001594:	460b      	mov	r3, r1
 8001596:	1891      	adds	r1, r2, r2
 8001598:	6239      	str	r1, [r7, #32]
 800159a:	415b      	adcs	r3, r3
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	f7ff f89d 	bl	80006e8 <__aeabi_uldivmod>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	1a14      	subs	r4, r2, r0
 80015c0:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 80015c4:	eb63 0301 	sbc.w	r3, r3, r1
 80015c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015cc:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015d6:	4413      	add	r3, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4b81      	ldr	r3, [pc, #516]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 80015dc:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80015de:	f008 fc9d 	bl	8009f1c <rand>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80015ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80015ee:	461a      	mov	r2, r3
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	fb02 f501 	mul.w	r5, r2, r1
 80015f8:	fb00 f403 	mul.w	r4, r0, r3
 80015fc:	442c      	add	r4, r5
 80015fe:	fba0 2302 	umull	r2, r3, r0, r2
 8001602:	18e1      	adds	r1, r4, r3
 8001604:	460b      	mov	r3, r1
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	f04f 0100 	mov.w	r1, #0
 800160e:	0099      	lsls	r1, r3, #2
 8001610:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001614:	0090      	lsls	r0, r2, #2
 8001616:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	f7ff f863 	bl	80006e8 <__aeabi_uldivmod>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800162a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800162e:	f143 0300 	adc.w	r3, r3, #0
 8001632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001636:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001640:	4413      	add	r3, r2
 8001642:	461a      	mov	r2, r3
 8001644:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 8001646:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001648:	f008 fc68 	bl	8009f1c <rand>
 800164c:	4603      	mov	r3, r0
 800164e:	4618      	mov	r0, r3
 8001650:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001654:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001658:	461a      	mov	r2, r3
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	fb02 f501 	mul.w	r5, r2, r1
 8001662:	fb00 f403 	mul.w	r4, r0, r3
 8001666:	442c      	add	r4, r5
 8001668:	fba0 0102 	umull	r0, r1, r0, r2
 800166c:	1863      	adds	r3, r4, r1
 800166e:	4619      	mov	r1, r3
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	1894      	adds	r4, r2, r2
 8001676:	61bc      	str	r4, [r7, #24]
 8001678:	415b      	adcs	r3, r3
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001680:	1812      	adds	r2, r2, r0
 8001682:	eb41 0303 	adc.w	r3, r1, r3
 8001686:	1891      	adds	r1, r2, r2
 8001688:	6139      	str	r1, [r7, #16]
 800168a:	415b      	adcs	r3, r3
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	f7ff f823 	bl	80006e8 <__aeabi_uldivmod>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	1a14      	subs	r4, r2, r0
 80016b4:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80016b8:	eb63 0301 	sbc.w	r3, r3, r1
 80016bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	461a      	mov	r2, r3
 80016c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80016ca:	4413      	add	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <Set_Random_Motion_Values+0xa00>)
 80016d0:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80016d2:	f008 fc23 	bl	8009f1c <rand>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80016de:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80016e2:	461a      	mov	r2, r3
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	fb02 f501 	mul.w	r5, r2, r1
 80016ec:	fb00 f403 	mul.w	r4, r0, r3
 80016f0:	442c      	add	r4, r5
 80016f2:	fba0 8902 	umull	r8, r9, r0, r2
 80016f6:	eb04 0309 	add.w	r3, r4, r9
 80016fa:	4699      	mov	r9, r3
 80016fc:	4642      	mov	r2, r8
 80016fe:	464b      	mov	r3, r9
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	00d9      	lsls	r1, r3, #3
 800170a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800170e:	00d0      	lsls	r0, r2, #3
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	ebb2 0108 	subs.w	r1, r2, r8
 8001718:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800171c:	eb63 0309 	sbc.w	r3, r3, r9
 8001720:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001724:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001730:	f7fe ffda 	bl	80006e8 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f06f 0202 	mvn.w	r2, #2
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	1a14      	subs	r4, r2, r0
 8001746:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800174a:	eb63 0301 	sbc.w	r3, r3, r1
 800174e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <Set_Random_Motion_Values+0xa04>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <Set_Random_Motion_Values+0xa04>)
 8001762:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001764:	f008 fbda 	bl	8009f1c <rand>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001770:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001774:	461a      	mov	r2, r3
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	fb02 f501 	mul.w	r5, r2, r1
 800177e:	fb00 f403 	mul.w	r4, r0, r3
 8001782:	442c      	add	r4, r5
 8001784:	fba0 8902 	umull	r8, r9, r0, r2
 8001788:	eb04 0309 	add.w	r3, r4, r9
 800178c:	4699      	mov	r9, r3
 800178e:	4642      	mov	r2, r8
 8001790:	464b      	mov	r3, r9
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	00d9      	lsls	r1, r3, #3
 800179c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017a0:	00d0      	lsls	r0, r2, #3
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	eb12 0108 	adds.w	r1, r2, r8
 80017aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80017ae:	eb43 0309 	adc.w	r3, r3, r9
 80017b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80017b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80017c2:	f7fe ff91 	bl	80006e8 <__aeabi_uldivmod>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	1cd1      	adds	r1, r2, #3
 80017cc:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80017d0:	f143 0300 	adc.w	r3, r3, #0
 80017d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017d8:	e006      	b.n	80017e8 <Set_Random_Motion_Values+0xa08>
 80017da:	bf00      	nop
 80017dc:	200001fc 	.word	0x200001fc
 80017e0:	20000208 	.word	0x20000208
 80017e4:	20000214 	.word	0x20000214
 80017e8:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <Set_Random_Motion_Values+0xc30>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80017f2:	4413      	add	r3, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b86      	ldr	r3, [pc, #536]	; (8001a10 <Set_Random_Motion_Values+0xc30>)
 80017f8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80017fa:	f008 fb8f 	bl	8009f1c <rand>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001806:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800180a:	461a      	mov	r2, r3
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	fb02 f501 	mul.w	r5, r2, r1
 8001814:	fb00 f403 	mul.w	r4, r0, r3
 8001818:	442c      	add	r4, r5
 800181a:	fba0 0102 	umull	r0, r1, r0, r2
 800181e:	1863      	adds	r3, r4, r1
 8001820:	4619      	mov	r1, r3
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	1894      	adds	r4, r2, r2
 8001828:	60bc      	str	r4, [r7, #8]
 800182a:	415b      	adcs	r3, r3
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001832:	1814      	adds	r4, r2, r0
 8001834:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8001838:	414b      	adcs	r3, r1
 800183a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800183e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800184a:	f7fe ff4d 	bl	80006e8 <__aeabi_uldivmod>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f06f 0202 	mvn.w	r2, #2
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	1a14      	subs	r4, r2, r0
 8001860:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8001864:	eb63 0301 	sbc.w	r3, r3, r1
 8001868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800186c:	4b68      	ldr	r3, [pc, #416]	; (8001a10 <Set_Random_Motion_Values+0xc30>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	461a      	mov	r2, r3
 8001872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001876:	4413      	add	r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <Set_Random_Motion_Values+0xc30>)
 800187c:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800187e:	f008 fb4d 	bl	8009f1c <rand>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800188a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	fb02 f501 	mul.w	r5, r2, r1
 8001898:	fb00 f403 	mul.w	r4, r0, r3
 800189c:	442c      	add	r4, r5
 800189e:	fba0 8902 	umull	r8, r9, r0, r2
 80018a2:	eb04 0309 	add.w	r3, r4, r9
 80018a6:	4699      	mov	r9, r3
 80018a8:	4642      	mov	r2, r8
 80018aa:	464b      	mov	r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	00d9      	lsls	r1, r3, #3
 80018b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018ba:	00d0      	lsls	r0, r2, #3
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ebb2 0108 	subs.w	r1, r2, r8
 80018c4:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80018c8:	eb63 0309 	sbc.w	r3, r3, r9
 80018cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80018d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80018dc:	f7fe ff04 	bl	80006e8 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 80018e8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80018ec:	f143 0300 	adc.w	r3, r3, #0
 80018f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4b44      	ldr	r3, [pc, #272]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 8001904:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001906:	f008 fb09 	bl	8009f1c <rand>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001912:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8001916:	4608      	mov	r0, r1
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	fb00 f503 	mul.w	r5, r0, r3
 8001920:	fb02 f401 	mul.w	r4, r2, r1
 8001924:	442c      	add	r4, r5
 8001926:	fba2 0100 	umull	r0, r1, r2, r0
 800192a:	1863      	adds	r3, r4, r1
 800192c:	4619      	mov	r1, r3
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	1894      	adds	r4, r2, r2
 8001934:	603c      	str	r4, [r7, #0]
 8001936:	415b      	adcs	r3, r3
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193e:	1814      	adds	r4, r2, r0
 8001940:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8001944:	414b      	adcs	r3, r1
 8001946:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800194a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001956:	f7fe fec7 	bl	80006e8 <__aeabi_uldivmod>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 8001962:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001966:	f143 0300 	adc.w	r3, r3, #0
 800196a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	461a      	mov	r2, r3
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 800197e:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001980:	f008 facc 	bl	8009f1c <rand>
 8001984:	4603      	mov	r3, r0
 8001986:	4618      	mov	r0, r3
 8001988:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800198c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001990:	461a      	mov	r2, r3
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	fb02 f501 	mul.w	r5, r2, r1
 800199a:	fb00 f403 	mul.w	r4, r0, r3
 800199e:	192e      	adds	r6, r5, r4
 80019a0:	fba0 4502 	umull	r4, r5, r0, r2
 80019a4:	1973      	adds	r3, r6, r5
 80019a6:	461d      	mov	r5, r3
 80019a8:	4622      	mov	r2, r4
 80019aa:	462b      	mov	r3, r5
 80019ac:	f04f 0000 	mov.w	r0, #0
 80019b0:	f04f 0100 	mov.w	r1, #0
 80019b4:	0099      	lsls	r1, r3, #2
 80019b6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019ba:	0090      	lsls	r0, r2, #2
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	1911      	adds	r1, r2, r4
 80019c2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80019c6:	416b      	adcs	r3, r5
 80019c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80019d8:	f7fe fe86 	bl	80006e8 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	f112 010a 	adds.w	r1, r2, #10
 80019e4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80019e8:	f143 0300 	adc.w	r3, r3, #0
 80019ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	461a      	mov	r2, r3
 80019f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019fa:	4413      	add	r3, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <Set_Random_Motion_Values+0xc34>)
 8001a00:	609a      	str	r2, [r3, #8]
}
 8001a02:	bf00      	nop
 8001a04:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000214 	.word	0x20000214
 8001a14:	20000220 	.word	0x20000220

08001a18 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8001a1c:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001a22:	fb83 1302 	smull	r1, r3, r3, r2
 8001a26:	11d9      	asrs	r1, r3, #7
 8001a28:	17d3      	asrs	r3, r2, #31
 8001a2a:	1acb      	subs	r3, r1, r3
 8001a2c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <Reset_Motion_Values+0x2a>
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	425b      	negs	r3, r3
 8001a40:	e000      	b.n	8001a44 <Reset_Motion_Values+0x2c>
 8001a42:	230a      	movs	r3, #10
 8001a44:	4a64      	ldr	r2, [pc, #400]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a46:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a52:	11d9      	asrs	r1, r3, #7
 8001a54:	17d3      	asrs	r3, r2, #31
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <Reset_Motion_Values+0x56>
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	e001      	b.n	8001a72 <Reset_Motion_Values+0x5a>
 8001a6e:	f06f 0309 	mvn.w	r3, #9
 8001a72:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a74:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001a7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a80:	11d9      	asrs	r1, r3, #7
 8001a82:	17d3      	asrs	r3, r2, #31
 8001a84:	1acb      	subs	r3, r1, r3
 8001a86:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <Reset_Motion_Values+0x84>
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	425b      	negs	r3, r3
 8001a9a:	e000      	b.n	8001a9e <Reset_Motion_Values+0x86>
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	4a4e      	ldr	r2, [pc, #312]	; (8001bd8 <Reset_Motion_Values+0x1c0>)
 8001aa0:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001aa8:	fb83 1302 	smull	r1, r3, r3, r2
 8001aac:	11d9      	asrs	r1, r3, #7
 8001aae:	17d3      	asrs	r3, r2, #31
 8001ab0:	1acb      	subs	r3, r1, r3
 8001ab2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <Reset_Motion_Values+0xb0>
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	e000      	b.n	8001aca <Reset_Motion_Values+0xb2>
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	4a45      	ldr	r2, [pc, #276]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001acc:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001ad4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad8:	11d9      	asrs	r1, r3, #7
 8001ada:	17d3      	asrs	r3, r2, #31
 8001adc:	1acb      	subs	r3, r1, r3
 8001ade:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <Reset_Motion_Values+0xdc>
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	425b      	negs	r3, r3
 8001af2:	e001      	b.n	8001af8 <Reset_Motion_Values+0xe0>
 8001af4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001af8:	4a39      	ldr	r2, [pc, #228]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001afa:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001b02:	fb83 1302 	smull	r1, r3, r3, r2
 8001b06:	11d9      	asrs	r1, r3, #7
 8001b08:	17d3      	asrs	r3, r2, #31
 8001b0a:	1acb      	subs	r3, r1, r3
 8001b0c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <Reset_Motion_Values+0x10a>
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	425b      	negs	r3, r3
 8001b20:	e000      	b.n	8001b24 <Reset_Motion_Values+0x10c>
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	4a2e      	ldr	r2, [pc, #184]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001b26:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001b2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b32:	11d9      	asrs	r1, r3, #7
 8001b34:	17d3      	asrs	r3, r2, #31
 8001b36:	1acb      	subs	r3, r1, r3
 8001b38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <Reset_Motion_Values+0x136>
 8001b46:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	e000      	b.n	8001b50 <Reset_Motion_Values+0x138>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001b52:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001b5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b5e:	11d9      	asrs	r1, r3, #7
 8001b60:	17d3      	asrs	r3, r2, #31
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <Reset_Motion_Values+0x162>
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	425b      	negs	r3, r3
 8001b78:	e001      	b.n	8001b7e <Reset_Motion_Values+0x166>
 8001b7a:	f06f 0302 	mvn.w	r3, #2
 8001b7e:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001b80:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <Reset_Motion_Values+0x1c8>)
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <Reset_Motion_Values+0x1c4>)
 8001b88:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8c:	11d9      	asrs	r1, r3, #7
 8001b8e:	17d3      	asrs	r3, r2, #31
 8001b90:	1acb      	subs	r3, r1, r3
 8001b92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d103      	bne.n	8001ba8 <Reset_Motion_Values+0x190>
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	e000      	b.n	8001baa <Reset_Motion_Values+0x192>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <Reset_Motion_Values+0x1cc>)
 8001bac:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bb6:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bc0:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	425b      	negs	r3, r3
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <Reset_Motion_Values+0x1d0>)
 8001bca:	6093      	str	r3, [r2, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	200001fc 	.word	0x200001fc
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	20000208 	.word	0x20000208
 8001be4:	20000214 	.word	0x20000214
 8001be8:	20000220 	.word	0x20000220

08001bec <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <BSP_PB_Callback+0x1c>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	20000181 	.word	0x20000181

08001c0c <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001c0c:	b5b0      	push	{r4, r5, r7, lr}
 8001c0e:	b08c      	sub	sp, #48	; 0x30
 8001c10:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001c12:	231b      	movs	r3, #27
 8001c14:	713b      	strb	r3, [r7, #4]
 8001c16:	23c5      	movs	r3, #197	; 0xc5
 8001c18:	717b      	strb	r3, [r7, #5]
 8001c1a:	23d5      	movs	r3, #213	; 0xd5
 8001c1c:	71bb      	strb	r3, [r7, #6]
 8001c1e:	23a5      	movs	r3, #165	; 0xa5
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	2302      	movs	r3, #2
 8001c24:	723b      	strb	r3, [r7, #8]
 8001c26:	2300      	movs	r3, #0
 8001c28:	727b      	strb	r3, [r7, #9]
 8001c2a:	23b4      	movs	r3, #180	; 0xb4
 8001c2c:	72bb      	strb	r3, [r7, #10]
 8001c2e:	239a      	movs	r3, #154	; 0x9a
 8001c30:	72fb      	strb	r3, [r7, #11]
 8001c32:	23e1      	movs	r3, #225	; 0xe1
 8001c34:	733b      	strb	r3, [r7, #12]
 8001c36:	2311      	movs	r3, #17
 8001c38:	737b      	strb	r3, [r7, #13]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73bb      	strb	r3, [r7, #14]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	2300      	movs	r3, #0
 8001c44:	743b      	strb	r3, [r7, #16]
 8001c46:	2300      	movs	r3, #0
 8001c48:	747b      	strb	r3, [r7, #17]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	74bb      	strb	r3, [r7, #18]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001c52:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <Add_HWServW2ST_Service+0x19c>)
 8001c54:	461d      	mov	r5, r3
 8001c56:	1d3c      	adds	r4, r7, #4
 8001c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5a:	6028      	str	r0, [r5, #0]
 8001c5c:	6069      	str	r1, [r5, #4]
 8001c5e:	60aa      	str	r2, [r5, #8]
 8001c60:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001c62:	4b52      	ldr	r3, [pc, #328]	; (8001dac <Add_HWServW2ST_Service+0x1a0>)
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2310      	movs	r3, #16
 8001c68:	2201      	movs	r2, #1
 8001c6a:	494f      	ldr	r1, [pc, #316]	; (8001da8 <Add_HWServW2ST_Service+0x19c>)
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f007 f9ac 	bl	8008fca <aci_gatt_add_serv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <Add_HWServW2ST_Service+0x74>
    return BLE_STATUS_ERROR;
 8001c7c:	2347      	movs	r3, #71	; 0x47
 8001c7e:	e08e      	b.n	8001d9e <Add_HWServW2ST_Service+0x192>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001c80:	231b      	movs	r3, #27
 8001c82:	713b      	strb	r3, [r7, #4]
 8001c84:	23c5      	movs	r3, #197	; 0xc5
 8001c86:	717b      	strb	r3, [r7, #5]
 8001c88:	23d5      	movs	r3, #213	; 0xd5
 8001c8a:	71bb      	strb	r3, [r7, #6]
 8001c8c:	23a5      	movs	r3, #165	; 0xa5
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	2302      	movs	r3, #2
 8001c92:	723b      	strb	r3, [r7, #8]
 8001c94:	2300      	movs	r3, #0
 8001c96:	727b      	strb	r3, [r7, #9]
 8001c98:	2336      	movs	r3, #54	; 0x36
 8001c9a:	72bb      	strb	r3, [r7, #10]
 8001c9c:	23ac      	movs	r3, #172	; 0xac
 8001c9e:	72fb      	strb	r3, [r7, #11]
 8001ca0:	23e1      	movs	r3, #225	; 0xe1
 8001ca2:	733b      	strb	r3, [r7, #12]
 8001ca4:	2311      	movs	r3, #17
 8001ca6:	737b      	strb	r3, [r7, #13]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73bb      	strb	r3, [r7, #14]
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	743b      	strb	r3, [r7, #16]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	747b      	strb	r3, [r7, #17]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	74bb      	strb	r3, [r7, #18]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8001cc0:	7cbb      	ldrb	r3, [r7, #18]
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8001cca:	7cbb      	ldrb	r3, [r7, #18]
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <Add_HWServW2ST_Service+0x1a4>)
 8001cd6:	461d      	mov	r5, r3
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	6028      	str	r0, [r5, #0]
 8001cde:	6069      	str	r1, [r5, #4]
 8001ce0:	60aa      	str	r2, [r5, #8]
 8001ce2:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <Add_HWServW2ST_Service+0x1a0>)
 8001ce6:	8818      	ldrh	r0, [r3, #0]
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <Add_HWServW2ST_Service+0x1a8>)
 8001cea:	9305      	str	r3, [sp, #20]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9304      	str	r3, [sp, #16]
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	9303      	str	r3, [sp, #12]
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2308      	movs	r3, #8
 8001d02:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <Add_HWServW2ST_Service+0x1a4>)
 8001d04:	2102      	movs	r1, #2
 8001d06:	f007 f9ec 	bl	80090e2 <aci_gatt_add_char>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <Add_HWServW2ST_Service+0x10c>
    return BLE_STATUS_ERROR;
 8001d14:	2347      	movs	r3, #71	; 0x47
 8001d16:	e042      	b.n	8001d9e <Add_HWServW2ST_Service+0x192>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001d18:	231b      	movs	r3, #27
 8001d1a:	713b      	strb	r3, [r7, #4]
 8001d1c:	23c5      	movs	r3, #197	; 0xc5
 8001d1e:	717b      	strb	r3, [r7, #5]
 8001d20:	23d5      	movs	r3, #213	; 0xd5
 8001d22:	71bb      	strb	r3, [r7, #6]
 8001d24:	23a5      	movs	r3, #165	; 0xa5
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	723b      	strb	r3, [r7, #8]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	727b      	strb	r3, [r7, #9]
 8001d30:	2336      	movs	r3, #54	; 0x36
 8001d32:	72bb      	strb	r3, [r7, #10]
 8001d34:	23ac      	movs	r3, #172	; 0xac
 8001d36:	72fb      	strb	r3, [r7, #11]
 8001d38:	23e1      	movs	r3, #225	; 0xe1
 8001d3a:	733b      	strb	r3, [r7, #12]
 8001d3c:	2311      	movs	r3, #17
 8001d3e:	737b      	strb	r3, [r7, #13]
 8001d40:	2301      	movs	r3, #1
 8001d42:	73bb      	strb	r3, [r7, #14]
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	743b      	strb	r3, [r7, #16]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	747b      	strb	r3, [r7, #17]
 8001d50:	23e0      	movs	r3, #224	; 0xe0
 8001d52:	74bb      	strb	r3, [r7, #18]
 8001d54:	2300      	movs	r3, #0
 8001d56:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <Add_HWServW2ST_Service+0x1a4>)
 8001d5a:	461d      	mov	r5, r3
 8001d5c:	1d3c      	adds	r4, r7, #4
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	6028      	str	r0, [r5, #0]
 8001d62:	6069      	str	r1, [r5, #4]
 8001d64:	60aa      	str	r2, [r5, #8]
 8001d66:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <Add_HWServW2ST_Service+0x1a0>)
 8001d6a:	8818      	ldrh	r0, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <Add_HWServW2ST_Service+0x1ac>)
 8001d6e:	9305      	str	r3, [sp, #20]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9304      	str	r3, [sp, #16]
 8001d74:	2310      	movs	r3, #16
 8001d76:	9303      	str	r3, [sp, #12]
 8001d78:	2304      	movs	r3, #4
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2310      	movs	r3, #16
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2314      	movs	r3, #20
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <Add_HWServW2ST_Service+0x1a4>)
 8001d88:	2102      	movs	r1, #2
 8001d8a:	f007 f9aa 	bl	80090e2 <aci_gatt_add_char>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <Add_HWServW2ST_Service+0x190>
    return BLE_STATUS_ERROR;
 8001d98:	2347      	movs	r3, #71	; 0x47
 8001d9a:	e000      	b.n	8001d9e <Add_HWServW2ST_Service+0x192>

  return BLE_STATUS_SUCCESS;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000670 	.word	0x20000670
 8001dac:	2000066a 	.word	0x2000066a
 8001db0:	20000658 	.word	0x20000658
 8001db4:	20000654 	.word	0x20000654
 8001db8:	2000066c 	.word	0x2000066c

08001dbc <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8001dc6:	231b      	movs	r3, #27
 8001dc8:	703b      	strb	r3, [r7, #0]
 8001dca:	23c5      	movs	r3, #197	; 0xc5
 8001dcc:	707b      	strb	r3, [r7, #1]
 8001dce:	23d5      	movs	r3, #213	; 0xd5
 8001dd0:	70bb      	strb	r3, [r7, #2]
 8001dd2:	23a5      	movs	r3, #165	; 0xa5
 8001dd4:	70fb      	strb	r3, [r7, #3]
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	713b      	strb	r3, [r7, #4]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	717b      	strb	r3, [r7, #5]
 8001dde:	23b4      	movs	r3, #180	; 0xb4
 8001de0:	71bb      	strb	r3, [r7, #6]
 8001de2:	239a      	movs	r3, #154	; 0x9a
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	23e1      	movs	r3, #225	; 0xe1
 8001de8:	723b      	strb	r3, [r7, #8]
 8001dea:	2311      	movs	r3, #17
 8001dec:	727b      	strb	r3, [r7, #9]
 8001dee:	2302      	movs	r3, #2
 8001df0:	72bb      	strb	r3, [r7, #10]
 8001df2:	2300      	movs	r3, #0
 8001df4:	72fb      	strb	r3, [r7, #11]
 8001df6:	2300      	movs	r3, #0
 8001df8:	733b      	strb	r3, [r7, #12]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	737b      	strb	r3, [r7, #13]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73bb      	strb	r3, [r7, #14]
 8001e02:	2300      	movs	r3, #0
 8001e04:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <Add_SWServW2ST_Service+0x118>)
 8001e08:	461d      	mov	r5, r3
 8001e0a:	463c      	mov	r4, r7
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	6028      	str	r0, [r5, #0]
 8001e10:	6069      	str	r1, [r5, #4]
 8001e12:	60aa      	str	r2, [r5, #8]
 8001e14:	60eb      	str	r3, [r5, #12]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <Add_SWServW2ST_Service+0x11c>)
 8001e28:	9200      	str	r2, [sp, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <Add_SWServW2ST_Service+0x118>)
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f007 f8cb 	bl	8008fca <aci_gatt_add_serv>
 8001e34:	4603      	mov	r3, r0
 8001e36:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d141      	bne.n	8001ec2 <Add_SWServW2ST_Service+0x106>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001e3e:	231b      	movs	r3, #27
 8001e40:	703b      	strb	r3, [r7, #0]
 8001e42:	23c5      	movs	r3, #197	; 0xc5
 8001e44:	707b      	strb	r3, [r7, #1]
 8001e46:	23d5      	movs	r3, #213	; 0xd5
 8001e48:	70bb      	strb	r3, [r7, #2]
 8001e4a:	23a5      	movs	r3, #165	; 0xa5
 8001e4c:	70fb      	strb	r3, [r7, #3]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	713b      	strb	r3, [r7, #4]
 8001e52:	2300      	movs	r3, #0
 8001e54:	717b      	strb	r3, [r7, #5]
 8001e56:	2336      	movs	r3, #54	; 0x36
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	23ac      	movs	r3, #172	; 0xac
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	23e1      	movs	r3, #225	; 0xe1
 8001e60:	723b      	strb	r3, [r7, #8]
 8001e62:	2311      	movs	r3, #17
 8001e64:	727b      	strb	r3, [r7, #9]
 8001e66:	2301      	movs	r3, #1
 8001e68:	72bb      	strb	r3, [r7, #10]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	72fb      	strb	r3, [r7, #11]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	733b      	strb	r3, [r7, #12]
 8001e72:	2301      	movs	r3, #1
 8001e74:	737b      	strb	r3, [r7, #13]
 8001e76:	2300      	movs	r3, #0
 8001e78:	73bb      	strb	r3, [r7, #14]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <Add_SWServW2ST_Service+0x120>)
 8001e80:	461d      	mov	r5, r3
 8001e82:	463c      	mov	r4, r7
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	6028      	str	r0, [r5, #0]
 8001e88:	6069      	str	r1, [r5, #4]
 8001e8a:	60aa      	str	r2, [r5, #8]
 8001e8c:	60eb      	str	r3, [r5, #12]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <Add_SWServW2ST_Service+0x11c>)
 8001e90:	8818      	ldrh	r0, [r3, #0]
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <Add_SWServW2ST_Service+0x124>)
 8001e94:	9305      	str	r3, [sp, #20]
 8001e96:	2300      	movs	r3, #0
 8001e98:	9304      	str	r3, [sp, #16]
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	9303      	str	r3, [sp, #12]
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	9302      	str	r3, [sp, #8]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2308      	movs	r3, #8
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <Add_SWServW2ST_Service+0x120>)
 8001eae:	2102      	movs	r1, #2
 8001eb0:	f007 f917 	bl	80090e2 <aci_gatt_add_char>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <Add_SWServW2ST_Service+0x10a>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e003      	b.n	8001eca <Add_SWServW2ST_Service+0x10e>
    goto fail;
 8001ec2:	bf00      	nop
 8001ec4:	e000      	b.n	8001ec8 <Add_SWServW2ST_Service+0x10c>
    goto fail;
 8001ec6:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001ec8:	2347      	movs	r3, #71	; 0x47
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000670 	.word	0x20000670
 8001ed8:	20000668 	.word	0x20000668
 8001edc:	20000658 	.word	0x20000658
 8001ee0:	20000656 	.word	0x20000656

08001ee4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001ef0:	f002 f8ee 	bl	80040d0 <HAL_GetTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	743b      	strb	r3, [r7, #16]
 8001efc:	f002 f8e8 	bl	80040d0 <HAL_GetTick>
 8001f00:	4603      	mov	r3, r0
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	74bb      	strb	r3, [r7, #18]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	425b      	negs	r3, r3
 8001f1a:	121b      	asrs	r3, r3, #8
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	753b      	strb	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	121b      	asrs	r3, r3, #8
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	425b      	negs	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	75bb      	strb	r3, [r7, #22]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	425b      	negs	r3, r3
 8001f44:	121b      	asrs	r3, r3, #8
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	763b      	strb	r3, [r7, #24]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	121b      	asrs	r3, r3, #8
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	76bb      	strb	r3, [r7, #26]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	121b      	asrs	r3, r3, #8
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	773b      	strb	r3, [r7, #28]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	121b      	asrs	r3, r3, #8
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	77bb      	strb	r3, [r7, #30]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	121b      	asrs	r3, r3, #8
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f887 3020 	strb.w	r3, [r7, #32]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	121b      	asrs	r3, r3, #8
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	121b      	asrs	r3, r3, #8
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <Acc_Update+0x10c>)
 8001fc0:	8818      	ldrh	r0, [r3, #0]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <Acc_Update+0x110>)
 8001fc4:	8819      	ldrh	r1, [r3, #0]
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2314      	movs	r3, #20
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f007 f959 	bl	8009286 <aci_gatt_update_char_value>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001fe2:	2347      	movs	r3, #71	; 0x47
 8001fe4:	e000      	b.n	8001fe8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	2000066a 	.word	0x2000066a
 8001ff4:	2000066c 	.word	0x2000066c

08001ff8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002000:	f002 f866 	bl	80040d0 <HAL_GetTick>
 8002004:	4603      	mov	r3, r0
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	733b      	strb	r3, [r7, #12]
 800200c:	f002 f860 	bl	80040d0 <HAL_GetTick>
 8002010:	4603      	mov	r3, r0
 8002012:	0adb      	lsrs	r3, r3, #11
 8002014:	b2db      	uxtb	r3, r3
 8002016:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73bb      	strb	r3, [r7, #14]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	121b      	asrs	r3, r3, #8
 8002026:	b2db      	uxtb	r3, r3
 8002028:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	743b      	strb	r3, [r7, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	121b      	asrs	r3, r3, #8
 8002038:	b2db      	uxtb	r3, r3
 800203a:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	74bb      	strb	r3, [r7, #18]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	121b      	asrs	r3, r3, #8
 800204a:	b2db      	uxtb	r3, r3
 800204c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <Quat_Update+0x84>)
 8002050:	8818      	ldrh	r0, [r3, #0]
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <Quat_Update+0x88>)
 8002054:	8819      	ldrh	r1, [r3, #0]
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2308      	movs	r3, #8
 800205e:	2200      	movs	r2, #0
 8002060:	f007 f911 	bl	8009286 <aci_gatt_update_char_value>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800206e:	2347      	movs	r3, #71	; 0x47
 8002070:	e000      	b.n	8002074 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000668 	.word	0x20000668
 8002080:	20000656 	.word	0x20000656

08002084 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002088:	b088      	sub	sp, #32
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	81fb      	strh	r3, [r7, #14]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002090:	89fa      	ldrh	r2, [r7, #14]
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <Read_Request_CB+0x15c>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	429a      	cmp	r2, r3
 800209a:	d105      	bne.n	80020a8 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <Read_Request_CB+0x160>)
 800209e:	4952      	ldr	r1, [pc, #328]	; (80021e8 <Read_Request_CB+0x164>)
 80020a0:	4852      	ldr	r0, [pc, #328]	; (80021ec <Read_Request_CB+0x168>)
 80020a2:	f7ff ff1f 	bl	8001ee4 <Acc_Update>
 80020a6:	e08a      	b.n	80021be <Read_Request_CB+0x13a>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80020a8:	89fa      	ldrh	r2, [r7, #14]
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <Read_Request_CB+0x16c>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	429a      	cmp	r2, r3
 80020b2:	f040 8084 	bne.w	80021be <Read_Request_CB+0x13a>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80020b6:	f007 ff31 	bl	8009f1c <rand>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461c      	mov	r4, r3
 80020be:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020d4:	0090      	lsls	r0, r2, #2
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	eb12 0a04 	adds.w	sl, r2, r4
 80020de:	eb43 0b05 	adc.w	fp, r3, r5
 80020e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	4650      	mov	r0, sl
 80020ec:	4659      	mov	r1, fp
 80020ee:	f7fe fafb 	bl	80006e8 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fa47 	bl	800058c <__aeabi_ul2d>
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <Read_Request_CB+0x170>)
 8002104:	f7fe f8c2 	bl	800028c <__adddf3>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fa9a 	bl	8000648 <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	61fb      	str	r3, [r7, #28]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002118:	f007 ff00 	bl	8009f1c <rand>
 800211c:	4603      	mov	r3, r0
 800211e:	461c      	mov	r4, r3
 8002120:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002124:	4622      	mov	r2, r4
 8002126:	462b      	mov	r3, r5
 8002128:	1891      	adds	r1, r2, r2
 800212a:	6039      	str	r1, [r7, #0]
 800212c:	415b      	adcs	r3, r3
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002134:	1912      	adds	r2, r2, r4
 8002136:	eb45 0303 	adc.w	r3, r5, r3
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	1812      	adds	r2, r2, r0
 800214c:	eb41 0303 	adc.w	r3, r1, r3
 8002150:	eb12 0804 	adds.w	r8, r2, r4
 8002154:	eb43 0905 	adc.w	r9, r3, r5
 8002158:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	4640      	mov	r0, r8
 8002162:	4649      	mov	r1, r9
 8002164:	f7fe fac0 	bl	80006e8 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f7fe fa0c 	bl	800058c <__aeabi_ul2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <Read_Request_CB+0x174>)
 800217a:	f7fe f887 	bl	800028c <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fa5f 	bl	8000648 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	61bb      	str	r3, [r7, #24]
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800218e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002192:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021fc <Read_Request_CB+0x178>
 8002196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800219e:	edd7 7a07 	vldr	s15, [r7, #28]
 80021a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ae:	ee17 3a90 	vmov	r3, s15
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	ee16 0a90 	vmov	r0, s13
 80021ba:	f000 f823 	bl	8002204 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <Read_Request_CB+0x17c>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <Read_Request_CB+0x150>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <Read_Request_CB+0x17c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f007 f8ed 	bl	80093aa <aci_gatt_allow_read>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021de:	bf00      	nop
 80021e0:	2000066c 	.word	0x2000066c
 80021e4:	20000214 	.word	0x20000214
 80021e8:	20000208 	.word	0x20000208
 80021ec:	200001fc 	.word	0x200001fc
 80021f0:	20000654 	.word	0x20000654
 80021f4:	403b0000 	.word	0x403b0000
 80021f8:	408f4000 	.word	0x408f4000
 80021fc:	42c80000 	.word	0x42c80000
 8002200:	200001f4 	.word	0x200001f4

08002204 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002210:	f001 ff5e 	bl	80040d0 <HAL_GetTick>
 8002214:	4603      	mov	r3, r0
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	733b      	strb	r3, [r7, #12]
 800221c:	f001 ff58 	bl	80040d0 <HAL_GetTick>
 8002220:	4603      	mov	r3, r0
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	b2db      	uxtb	r3, r3
 8002226:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	73bb      	strb	r3, [r7, #14]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	121b      	asrs	r3, r3, #8
 8002232:	b2db      	uxtb	r3, r3
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	141b      	asrs	r3, r3, #16
 800223a:	b2db      	uxtb	r3, r3
 800223c:	743b      	strb	r3, [r7, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	161b      	asrs	r3, r3, #24
 8002242:	b2db      	uxtb	r3, r3
 8002244:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	74bb      	strb	r3, [r7, #18]
 800224c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002250:	121b      	asrs	r3, r3, #8
 8002252:	b21b      	sxth	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <BlueMS_Environmental_Update+0x84>)
 800225a:	8818      	ldrh	r0, [r3, #0]
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <BlueMS_Environmental_Update+0x88>)
 800225e:	8819      	ldrh	r1, [r3, #0]
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2308      	movs	r3, #8
 8002268:	2200      	movs	r2, #0
 800226a:	f007 f80c 	bl	8009286 <aci_gatt_update_char_value>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002278:	2347      	movs	r3, #71	; 0x47
 800227a:	e000      	b.n	800227e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000066a 	.word	0x2000066a
 800228c:	20000654 	.word	0x20000654

08002290 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b092      	sub	sp, #72	; 0x48
 8002294:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002296:	4a36      	ldr	r2, [pc, #216]	; (8002370 <Set_DeviceConnectable+0xe0>)
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a0:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80022a4:	2302      	movs	r3, #2
 80022a6:	703b      	strb	r3, [r7, #0]
 80022a8:	230a      	movs	r3, #10
 80022aa:	707b      	strb	r3, [r7, #1]
 80022ac:	2300      	movs	r3, #0
 80022ae:	70bb      	strb	r3, [r7, #2]
 80022b0:	2308      	movs	r3, #8
 80022b2:	70fb      	strb	r3, [r7, #3]
 80022b4:	2309      	movs	r3, #9
 80022b6:	713b      	strb	r3, [r7, #4]
 80022b8:	2348      	movs	r3, #72	; 0x48
 80022ba:	717b      	strb	r3, [r7, #5]
 80022bc:	2349      	movs	r3, #73	; 0x49
 80022be:	71bb      	strb	r3, [r7, #6]
 80022c0:	2345      	movs	r3, #69	; 0x45
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	2352      	movs	r3, #82	; 0x52
 80022c6:	723b      	strb	r3, [r7, #8]
 80022c8:	2341      	movs	r3, #65	; 0x41
 80022ca:	727b      	strb	r3, [r7, #9]
 80022cc:	2354      	movs	r3, #84	; 0x54
 80022ce:	72bb      	strb	r3, [r7, #10]
 80022d0:	2348      	movs	r3, #72	; 0x48
 80022d2:	72fb      	strb	r3, [r7, #11]
 80022d4:	230d      	movs	r3, #13
 80022d6:	733b      	strb	r3, [r7, #12]
 80022d8:	23ff      	movs	r3, #255	; 0xff
 80022da:	737b      	strb	r3, [r7, #13]
 80022dc:	2301      	movs	r3, #1
 80022de:	73bb      	strb	r3, [r7, #14]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	2300      	movs	r3, #0
 80022e6:	743b      	strb	r3, [r7, #16]
 80022e8:	23f4      	movs	r3, #244	; 0xf4
 80022ea:	747b      	strb	r3, [r7, #17]
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]
 80022f0:	2300      	movs	r3, #0
 80022f2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <Set_DeviceConnectable+0xe4>)
 80022f6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80022f8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <Set_DeviceConnectable+0xe4>)
 80022fc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80022fe:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <Set_DeviceConnectable+0xe4>)
 8002302:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002304:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <Set_DeviceConnectable+0xe4>)
 8002308:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800230a:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <Set_DeviceConnectable+0xe4>)
 800230e:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002310:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <Set_DeviceConnectable+0xe4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002316:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002318:	7cbb      	ldrb	r3, [r7, #18]
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002322:	2100      	movs	r1, #0
 8002324:	2000      	movs	r0, #0
 8002326:	f007 f9a3 	bl	8009670 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800232a:	2300      	movs	r3, #0
 800232c:	9306      	str	r3, [sp, #24]
 800232e:	2300      	movs	r3, #0
 8002330:	9305      	str	r3, [sp, #20]
 8002332:	2300      	movs	r3, #0
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	2300      	movs	r3, #0
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2308      	movs	r3, #8
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2300      	movs	r3, #0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800234e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8002352:	2000      	movs	r0, #0
 8002354:	f006 fc7e 	bl	8008c54 <aci_gap_set_discoverable>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800235e:	463b      	mov	r3, r7
 8002360:	4619      	mov	r1, r3
 8002362:	201a      	movs	r0, #26
 8002364:	f006 fdbc 	bl	8008ee0 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800b388 	.word	0x0800b388
 8002374:	2000064c 	.word	0x2000064c

08002378 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	3301      	adds	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d139      	bne.n	8002406 <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d01f      	beq.n	80023da <user_notify+0x62>
 800239a:	2bff      	cmp	r3, #255	; 0xff
 800239c:	dc38      	bgt.n	8002410 <user_notify+0x98>
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d002      	beq.n	80023a8 <user_notify+0x30>
 80023a2:	2b3e      	cmp	r3, #62	; 0x3e
 80023a4:	d003      	beq.n	80023ae <user_notify+0x36>
 80023a6:	e033      	b.n	8002410 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80023a8:	f000 f836 	bl	8002418 <GAP_DisconnectionComplete_CB>
    }
    break;
 80023ac:	e030      	b.n	8002410 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3302      	adds	r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d126      	bne.n	800240a <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1d5a      	adds	r2, r3, #5
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f000 f837 	bl	8002444 <GAP_ConnectionComplete_CB>
        }
        break;
 80023d6:	bf00      	nop
      }
    }
    break;
 80023d8:	e017      	b.n	800240a <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	3302      	adds	r3, #2
 80023de:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	f640 4314 	movw	r3, #3092	; 0xc14
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10e      	bne.n	800240e <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3302      	adds	r3, #2
 80023f4:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	885b      	ldrh	r3, [r3, #2]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe41 	bl	8002084 <Read_Request_CB>
        }
        break;
 8002402:	bf00      	nop
      }

    }
    break;
 8002404:	e003      	b.n	800240e <user_notify+0x96>
    return;
 8002406:	bf00      	nop
 8002408:	e002      	b.n	8002410 <user_notify+0x98>
    break;
 800240a:	bf00      	nop
 800240c:	e000      	b.n	8002410 <user_notify+0x98>
    break;
 800240e:	bf00      	nop
  }
}
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  connected = FALSE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <GAP_DisconnectionComplete_CB+0x20>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <GAP_DisconnectionComplete_CB+0x24>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <GAP_DisconnectionComplete_CB+0x28>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200001f8 	.word	0x200001f8
 800243c:	200000c1 	.word	0x200000c1
 8002440:	200001f6 	.word	0x200001f6

08002444 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <GAP_ConnectionComplete_CB+0x38>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <GAP_ConnectionComplete_CB+0x3c>)
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 800245c:	2305      	movs	r3, #5
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e002      	b.n	8002468 <GAP_ConnectionComplete_CB+0x24>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b01      	subs	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	200001f8 	.word	0x200001f8
 8002480:	200001f4 	.word	0x200001f4

08002484 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HCI_TL_SPI_Init+0x88>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HCI_TL_SPI_Init+0x88>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HCI_TL_SPI_Init+0x88>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	4619      	mov	r1, r3
 80024b8:	4815      	ldr	r0, [pc, #84]	; (8002510 <HCI_TL_SPI_Init+0x8c>)
 80024ba:	f002 f8b5 	bl	8004628 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80024be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f002 f8a5 	bl	8004628 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80024de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4619      	mov	r1, r3
 80024f6:	4807      	ldr	r0, [pc, #28]	; (8002514 <HCI_TL_SPI_Init+0x90>)
 80024f8:	f002 f896 	bl	8004628 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80024fc:	f001 f96e 	bl	80037dc <BSP_SPI3_Init>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	48001000 	.word	0x48001000
 8002514:	48000c00 	.word	0x48000c00

08002518 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800251c:	2140      	movs	r1, #64	; 0x40
 800251e:	4808      	ldr	r0, [pc, #32]	; (8002540 <HCI_TL_SPI_DeInit+0x28>)
 8002520:	f002 fa2c 	bl	800497c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <HCI_TL_SPI_DeInit+0x2c>)
 800252a:	f002 fa27 	bl	800497c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800252e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f002 fa21 	bl	800497c <HAL_GPIO_DeInit>
  return 0;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	48001000 	.word	0x48001000
 8002544:	48000c00 	.word	0x48000c00

08002548 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <HCI_TL_SPI_Reset+0x40>)
 8002554:	f002 fb1e 	bl	8004b94 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f002 fb17 	bl	8004b94 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002566:	2005      	movs	r0, #5
 8002568:	f001 fdbe 	bl	80040e8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f002 fb0d 	bl	8004b94 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800257a:	2005      	movs	r0, #5
 800257c:	f001 fdb4 	bl	80040e8 <HAL_Delay>
  return 0;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	48000c00 	.word	0x48000c00

0800258c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800259c:	23ff      	movs	r3, #255	; 0xff
 800259e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <HCI_TL_SPI_Receive+0xb0>)
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025aa:	6018      	str	r0, [r3, #0]
 80025ac:	3304      	adds	r3, #4
 80025ae:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b6:	4822      	ldr	r0, [pc, #136]	; (8002640 <HCI_TL_SPI_Receive+0xb4>)
 80025b8:	f002 faec 	bl	8004b94 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80025bc:	f107 010c 	add.w	r1, r7, #12
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2205      	movs	r2, #5
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 f938 	bl	800383c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d129      	bne.n	8002626 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80025d2:	7c3b      	ldrb	r3, [r7, #16]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b21b      	sxth	r3, r3
 80025e0:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80025e2:	8bfb      	ldrh	r3, [r7, #30]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01e      	beq.n	8002626 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80025e8:	8bfa      	ldrh	r2, [r7, #30]
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d901      	bls.n	80025f4 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	777b      	strb	r3, [r7, #29]
 80025f8:	e010      	b.n	800261c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80025fa:	f107 011b 	add.w	r1, r7, #27
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	2201      	movs	r2, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f919 	bl	800383c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800260a:	7f7b      	ldrb	r3, [r7, #29]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	7efa      	ldrb	r2, [r7, #27]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002616:	7f7b      	ldrb	r3, [r7, #29]
 8002618:	3301      	adds	r3, #1
 800261a:	777b      	strb	r3, [r7, #29]
 800261c:	7f7b      	ldrb	r3, [r7, #29]
 800261e:	b29b      	uxth	r3, r3
 8002620:	8bfa      	ldrh	r2, [r7, #30]
 8002622:	429a      	cmp	r2, r3
 8002624:	d8e9      	bhi.n	80025fa <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002626:	2201      	movs	r2, #1
 8002628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <HCI_TL_SPI_Receive+0xb4>)
 800262e:	f002 fab1 	bl	8004b94 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002632:	7f7b      	ldrb	r3, [r7, #29]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	0800b390 	.word	0x0800b390
 8002640:	48000c00 	.word	0x48000c00

08002644 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002650:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HCI_TL_SPI_Send+0xa0>)
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265a:	6018      	str	r0, [r3, #0]
 800265c:	3304      	adds	r3, #4
 800265e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002660:	f001 fd36 	bl	80040d0 <HAL_GetTick>
 8002664:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <HCI_TL_SPI_Send+0xa4>)
 8002672:	f002 fa8f 	bl	8004b94 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002676:	f107 0108 	add.w	r1, r7, #8
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	2205      	movs	r2, #5
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f8db 	bl	800383c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002686:	7a3b      	ldrb	r3, [r7, #8]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d10f      	bne.n	80026ac <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 800268c:	7a7b      	ldrb	r3, [r7, #9]
 800268e:	b29b      	uxth	r3, r3
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	429a      	cmp	r2, r3
 8002694:	d806      	bhi.n	80026a4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	461a      	mov	r2, r3
 800269a:	4914      	ldr	r1, [pc, #80]	; (80026ec <HCI_TL_SPI_Send+0xa8>)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f8cd 	bl	800383c <BSP_SPI3_SendRecv>
 80026a2:	e006      	b.n	80026b2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80026a4:	f06f 0301 	mvn.w	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e002      	b.n	80026b2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b8:	480b      	ldr	r0, [pc, #44]	; (80026e8 <HCI_TL_SPI_Send+0xa4>)
 80026ba:	f002 fa6b 	bl	8004b94 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80026be:	f001 fd07 	bl	80040d0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d903      	bls.n	80026d4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80026cc:	f06f 0302 	mvn.w	r3, #2
 80026d0:	61fb      	str	r3, [r7, #28]
      break;
 80026d2:	e002      	b.n	80026da <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	dbc5      	blt.n	8002666 <HCI_TL_SPI_Send+0x22>

  return result;
 80026da:	69fb      	ldr	r3, [r7, #28]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	0800b398 	.word	0x0800b398
 80026e8:	48000c00 	.word	0x48000c00
 80026ec:	2000022c 	.word	0x2000022c

080026f0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <IsDataAvailable+0x1c>)
 80026f8:	f002 fa34 	bl	8004b64 <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	48001000 	.word	0x48001000

08002710 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <hci_tl_lowlevel_init+0x50>)
 8002718:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <hci_tl_lowlevel_init+0x54>)
 800271c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <hci_tl_lowlevel_init+0x58>)
 8002720:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <hci_tl_lowlevel_init+0x5c>)
 8002724:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <hci_tl_lowlevel_init+0x60>)
 8002728:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <hci_tl_lowlevel_init+0x64>)
 800272c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f007 f8bb 	bl	80098ac <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002736:	4910      	ldr	r1, [pc, #64]	; (8002778 <hci_tl_lowlevel_init+0x68>)
 8002738:	4810      	ldr	r0, [pc, #64]	; (800277c <hci_tl_lowlevel_init+0x6c>)
 800273a:	f001 ff31 	bl	80045a0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <hci_tl_lowlevel_init+0x70>)
 8002740:	2100      	movs	r1, #0
 8002742:	480e      	ldr	r0, [pc, #56]	; (800277c <hci_tl_lowlevel_init+0x6c>)
 8002744:	f001 ff12 	bl	800456c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	2017      	movs	r0, #23
 800274e:	f001 fdca 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002752:	2017      	movs	r0, #23
 8002754:	f001 fde3 	bl	800431e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08002485 	.word	0x08002485
 8002764:	08002519 	.word	0x08002519
 8002768:	08002645 	.word	0x08002645
 800276c:	0800258d 	.word	0x0800258d
 8002770:	08002549 	.word	0x08002549
 8002774:	0800387d 	.word	0x0800387d
 8002778:	16000006 	.word	0x16000006
 800277c:	20000680 	.word	0x20000680
 8002780:	08002785 	.word	0x08002785

08002784 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002788:	e005      	b.n	8002796 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800278a:	2000      	movs	r0, #0
 800278c:	f007 f9f4 	bl	8009b78 <hci_notify_asynch_evt>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002796:	f7ff ffab 	bl	80026f0 <IsDataAvailable>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f4      	bne.n	800278a <hci_tl_lowlevel_isr+0x6>
 80027a0:	e000      	b.n	80027a4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80027a2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027aa:	f001 fc28 	bl	8003ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ae:	f000 f811 	bl	80027d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b2:	f000 f93b 	bl	8002a2c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80027b6:	f000 f86f 	bl	8002898 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80027ba:	f000 f8a5 	bl	8002908 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80027be:	f000 f8e1 	bl	8002984 <MX_QUADSPI_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027c2:	f000 f905 	bl	80029d0 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 80027c6:	f7fe f90b 	bl	80009e0 <MX_BlueNRG_MS_Init>
  	  MX_USART1_UART_Init();
 80027ca:	f000 ff73 	bl	80036b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 80027ce:	f7fe f9af 	bl	8000b30 <MX_BlueNRG_MS_Process>
 80027d2:	e7fc      	b.n	80027ce <main+0x28>

080027d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b096      	sub	sp, #88	; 0x58
 80027d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	2244      	movs	r2, #68	; 0x44
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f007 fb64 	bl	8009eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027fa:	f003 f9b1 	bl	8005b60 <HAL_PWREx_ControlVoltageScaling>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002804:	f000 fab4 	bl	8002d70 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002808:	f003 f98c 	bl	8005b24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <SystemClock_Config+0xc0>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	4a20      	ldr	r2, [pc, #128]	; (8002894 <SystemClock_Config+0xc0>)
 8002814:	f023 0318 	bic.w	r3, r3, #24
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800281c:	2314      	movs	r3, #20
 800281e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800282c:	2360      	movs	r3, #96	; 0x60
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002830:	2302      	movs	r3, #2
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002834:	2301      	movs	r3, #1
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800283c:	2328      	movs	r3, #40	; 0x28
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002840:	2307      	movs	r3, #7
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002844:	2302      	movs	r3, #2
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002848:	2302      	movs	r3, #2
 800284a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4618      	mov	r0, r3
 8002852:	f003 faa7 	bl	8005da4 <HAL_RCC_OscConfig>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800285c:	f000 fa88 	bl	8002d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002860:	230f      	movs	r3, #15
 8002862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002864:	2303      	movs	r3, #3
 8002866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	2104      	movs	r1, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fe79 	bl	8006570 <HAL_RCC_ClockConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002884:	f000 fa74 	bl	8002d70 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002888:	f004 fb62 	bl	8006f50 <HAL_RCCEx_EnableMSIPLLMode>
}
 800288c:	bf00      	nop
 800288e:	3758      	adds	r7, #88	; 0x58
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_DFSDM1_Init+0x68>)
 800289e:	4a19      	ldr	r2, [pc, #100]	; (8002904 <MX_DFSDM1_Init+0x6c>)
 80028a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028b0:	2202      	movs	r2, #2
 80028b2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028d0:	2204      	movs	r2, #4
 80028d2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028dc:	2201      	movs	r2, #1
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_DFSDM1_Init+0x68>)
 80028ee:	f001 fd31 	bl	8004354 <HAL_DFSDM_ChannelInit>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80028f8:	f000 fa3a 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000688 	.word	0x20000688
 8002904:	40016020 	.word	0x40016020

08002908 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_I2C2_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <MX_I2C2_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_I2C2_Init+0x74>)
 8002914:	f640 6214 	movw	r2, #3604	; 0xe14
 8002918:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_I2C2_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <MX_I2C2_Init+0x74>)
 8002922:	2201      	movs	r2, #1
 8002924:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_I2C2_Init+0x74>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <MX_I2C2_Init+0x74>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <MX_I2C2_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_I2C2_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_I2C2_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002944:	480d      	ldr	r0, [pc, #52]	; (800297c <MX_I2C2_Init+0x74>)
 8002946:	f002 f97a 	bl	8004c3e <HAL_I2C_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002950:	f000 fa0e 	bl	8002d70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002954:	2100      	movs	r1, #0
 8002956:	4809      	ldr	r0, [pc, #36]	; (800297c <MX_I2C2_Init+0x74>)
 8002958:	f002 ff04 	bl	8005764 <HAL_I2CEx_ConfigAnalogFilter>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002962:	f000 fa05 	bl	8002d70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002966:	2100      	movs	r1, #0
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <MX_I2C2_Init+0x74>)
 800296a:	f002 ff46 	bl	80057fa <HAL_I2CEx_ConfigDigitalFilter>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002974:	f000 f9fc 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000ac8 	.word	0x20000ac8
 8002980:	40005800 	.word	0x40005800

08002984 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <MX_QUADSPI_Init+0x48>)
 800298c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 8002990:	2202      	movs	r2, #2
 8002992:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 8002996:	2204      	movs	r2, #4
 8002998:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 800299c:	2210      	movs	r2, #16
 800299e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 80029a2:	2217      	movs	r2, #23
 80029a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_QUADSPI_Init+0x44>)
 80029b4:	f003 f93a 	bl	8005c2c <HAL_QSPI_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80029be:	f000 f9d7 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000b14 	.word	0x20000b14
 80029cc:	a0001000 	.word	0xa0001000

080029d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029de:	2206      	movs	r2, #6
 80029e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029e4:	2202      	movs	r2, #2
 80029e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029ea:	2202      	movs	r2, #2
 80029ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a12:	4805      	ldr	r0, [pc, #20]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a14:	f002 ff3d 	bl	8005892 <HAL_PCD_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a1e:	f000 f9a7 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200006c0 	.word	0x200006c0

08002a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a42:	4bbd      	ldr	r3, [pc, #756]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4abc      	ldr	r2, [pc, #752]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	4bba      	ldr	r3, [pc, #744]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4bb7      	ldr	r3, [pc, #732]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	4ab6      	ldr	r2, [pc, #728]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a66:	4bb4      	ldr	r3, [pc, #720]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4bb1      	ldr	r3, [pc, #708]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4ab0      	ldr	r2, [pc, #704]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7e:	4bae      	ldr	r3, [pc, #696]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4bab      	ldr	r3, [pc, #684]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4aaa      	ldr	r2, [pc, #680]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	4ba8      	ldr	r3, [pc, #672]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa2:	4ba5      	ldr	r3, [pc, #660]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4aa4      	ldr	r2, [pc, #656]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4ba2      	ldr	r3, [pc, #648]	; (8002d38 <MX_GPIO_Init+0x30c>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002ac0:	489e      	ldr	r0, [pc, #632]	; (8002d3c <MX_GPIO_Init+0x310>)
 8002ac2:	f002 f867 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|VL53L0X_XSHUT_Pin
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f240 2147 	movw	r1, #583	; 0x247
 8002acc:	489c      	ldr	r0, [pc, #624]	; (8002d40 <MX_GPIO_Init+0x314>)
 8002ace:	f002 f861 	bl	8004b94 <HAL_GPIO_WritePin>
                          |LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f248 1104 	movw	r1, #33028	; 0x8104
 8002ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002adc:	f002 f85a 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f24b 0114 	movw	r1, #45076	; 0xb014
 8002ae6:	4897      	ldr	r0, [pc, #604]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002ae8:	f002 f854 	bl	8004b94 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	f241 0181 	movw	r1, #4225	; 0x1081
 8002af2:	4895      	ldr	r0, [pc, #596]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002af4:	f002 f84e 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002af8:	2201      	movs	r2, #1
 8002afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002afe:	4892      	ldr	r0, [pc, #584]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002b00:	f002 f848 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002b04:	2201      	movs	r2, #1
 8002b06:	2120      	movs	r1, #32
 8002b08:	488e      	ldr	r0, [pc, #568]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002b0a:	f002 f843 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2101      	movs	r1, #1
 8002b12:	488a      	ldr	r0, [pc, #552]	; (8002d3c <MX_GPIO_Init+0x310>)
 8002b14:	f002 f83e 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002b18:	f240 1315 	movw	r3, #277	; 0x115
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4882      	ldr	r0, [pc, #520]	; (8002d3c <MX_GPIO_Init+0x310>)
 8002b32:	f001 fd79 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002b36:	236a      	movs	r3, #106	; 0x6a
 8002b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	487c      	ldr	r0, [pc, #496]	; (8002d3c <MX_GPIO_Init+0x310>)
 8002b4c:	f001 fd6c 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 VL53L0X_XSHUT_Pin
                           LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|VL53L0X_XSHUT_Pin
 8002b50:	f240 2347 	movw	r3, #583	; 0x247
 8002b54:	617b      	str	r3, [r7, #20]
                          |LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b56:	2301      	movs	r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4875      	ldr	r0, [pc, #468]	; (8002d40 <MX_GPIO_Init+0x314>)
 8002b6a:	f001 fd5d 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin|ARD_A0_Pin;
 8002b6e:	2338      	movs	r3, #56	; 0x38
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002b72:	230b      	movs	r3, #11
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	486f      	ldr	r0, [pc, #444]	; (8002d40 <MX_GPIO_Init+0x314>)
 8002b82:	f001 fd51 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002b86:	2303      	movs	r3, #3
 8002b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b96:	2308      	movs	r3, #8
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0314 	add.w	r3, r7, #20
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f001 fd40 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002ba8:	f248 1304 	movw	r3, #33028	; 0x8104
 8002bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc4:	f001 fd30 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002bc8:	2308      	movs	r3, #8
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4619      	mov	r1, r3
 8002be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be6:	f001 fd1f 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002bea:	2310      	movs	r3, #16
 8002bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bee:	230b      	movs	r3, #11
 8002bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c00:	f001 fd12 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002c04:	23e0      	movs	r3, #224	; 0xe0
 8002c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c14:	2305      	movs	r3, #5
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c22:	f001 fd01 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002c26:	2301      	movs	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4842      	ldr	r0, [pc, #264]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002c3c:	f001 fcf4 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002c40:	2302      	movs	r3, #2
 8002c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c44:	230b      	movs	r3, #11
 8002c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	483c      	ldr	r0, [pc, #240]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002c54:	f001 fce8 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002c58:	f24b 0334 	movw	r3, #45108	; 0xb034
 8002c5c:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4834      	ldr	r0, [pc, #208]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002c72:	f001 fcd9 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002c76:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002c7a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	482e      	ldr	r0, [pc, #184]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002c8e:	f001 fccb 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002c92:	f243 0381 	movw	r3, #12417	; 0x3081
 8002c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4827      	ldr	r0, [pc, #156]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002cac:	f001 fcbc 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002cb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	481e      	ldr	r0, [pc, #120]	; (8002d40 <MX_GPIO_Init+0x314>)
 8002cc8:	f001 fcae 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cdc:	2305      	movs	r3, #5
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4818      	ldr	r0, [pc, #96]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002ce8:	f001 fc9e 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002cec:	2378      	movs	r3, #120	; 0x78
 8002cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4810      	ldr	r0, [pc, #64]	; (8002d48 <MX_GPIO_Init+0x31c>)
 8002d08:	f001 fc8e 	bl	8004628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d12:	2312      	movs	r3, #18
 8002d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	4806      	ldr	r0, [pc, #24]	; (8002d44 <MX_GPIO_Init+0x318>)
 8002d2a:	f001 fc7d 	bl	8004628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	2017      	movs	r0, #23
 8002d34:	e00a      	b.n	8002d4c <MX_GPIO_Init+0x320>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48001000 	.word	0x48001000
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000400 	.word	0x48000400
 8002d48:	48000c00 	.word	0x48000c00
 8002d4c:	f001 facb 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d50:	2017      	movs	r0, #23
 8002d52:	f001 fae4 	bl	800431e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2028      	movs	r0, #40	; 0x28
 8002d5c:	f001 fac3 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d60:	2028      	movs	r0, #40	; 0x28
 8002d62:	f001 fadc 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 8002d66:	bf00      	nop
 8002d68:	3728      	adds	r7, #40	; 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop

08002d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <Error_Handler+0x8>
	...

08002d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_MspInit+0x44>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_MspInit+0x44>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0ac      	sub	sp, #176	; 0xb0
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2288      	movs	r2, #136	; 0x88
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 f863 	bl	8009eb0 <memset>
  if(DFSDM1_Init == 0)
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d142      	bne.n	8002e78 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fdba 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002e0e:	f7ff ffaf 	bl	8002d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e1e:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002e42:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002e5c:	2306      	movs	r3, #6
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e66:	4619      	mov	r1, r3
 8002e68:	4807      	ldr	r0, [pc, #28]	; (8002e88 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002e6a:	f001 fbdd 	bl	8004628 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a02      	ldr	r2, [pc, #8]	; (8002e80 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002e76:	6013      	str	r3, [r2, #0]
  }

}
 8002e78:	bf00      	nop
 8002e7a:	37b0      	adds	r7, #176	; 0xb0
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000032c 	.word	0x2000032c
 8002e84:	40021000 	.word	0x40021000
 8002e88:	48001000 	.word	0x48001000

08002e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0ac      	sub	sp, #176	; 0xb0
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2288      	movs	r2, #136	; 0x88
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f006 ffff 	bl	8009eb0 <memset>
  if(hi2c->Instance==I2C2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_I2C_MspInit+0xb0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d13b      	bne.n	8002f34 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fd57 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ed4:	f7ff ff4c 	bl	8002d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002ef0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f14:	4619      	mov	r1, r3
 8002f16:	480b      	ldr	r0, [pc, #44]	; (8002f44 <HAL_I2C_MspInit+0xb8>)
 8002f18:	f001 fb86 	bl	8004628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f26:	6593      	str	r3, [r2, #88]	; 0x58
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_I2C_MspInit+0xb4>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f34:	bf00      	nop
 8002f36:	37b0      	adds	r7, #176	; 0xb0
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40005800 	.word	0x40005800
 8002f40:	40021000 	.word	0x40021000
 8002f44:	48000400 	.word	0x48000400

08002f48 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <HAL_I2C_MspDeInit+0x3c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d10f      	bne.n	8002f7a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_I2C_MspDeInit+0x40>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_I2C_MspDeInit+0x40>)
 8002f60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f6a:	4808      	ldr	r0, [pc, #32]	; (8002f8c <HAL_I2C_MspDeInit+0x44>)
 8002f6c:	f001 fd06 	bl	800497c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f74:	4805      	ldr	r0, [pc, #20]	; (8002f8c <HAL_I2C_MspDeInit+0x44>)
 8002f76:	f001 fd01 	bl	800497c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40005800 	.word	0x40005800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	48000400 	.word	0x48000400

08002f90 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_QSPI_MspInit+0x7c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d128      	bne.n	8003004 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb6:	4a16      	ldr	r2, [pc, #88]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6513      	str	r3, [r2, #80]	; 0x50
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fd0:	f043 0310 	orr.w	r3, r3, #16
 8002fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_QSPI_MspInit+0x80>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002fe2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002fe6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <HAL_QSPI_MspInit+0x84>)
 8003000:	f001 fb12 	bl	8004628 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003004:	bf00      	nop
 8003006:	3728      	adds	r7, #40	; 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	a0001000 	.word	0xa0001000
 8003010:	40021000 	.word	0x40021000
 8003014:	48001000 	.word	0x48001000

08003018 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ac      	sub	sp, #176	; 0xb0
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	2288      	movs	r2, #136	; 0x88
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f006 ff39 	bl	8009eb0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003046:	d17c      	bne.n	8003142 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800304c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800304e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003056:	2301      	movs	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800305a:	2301      	movs	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800305e:	2318      	movs	r3, #24
 8003060:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003062:	2307      	movs	r3, #7
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003066:	2302      	movs	r3, #2
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800306a:	2302      	movs	r3, #2
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800306e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fc7f 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003084:	f7ff fe74 	bl	8002d70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003088:	4b30      	ldr	r3, [pc, #192]	; (800314c <HAL_PCD_MspInit+0x134>)
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	4a2f      	ldr	r2, [pc, #188]	; (800314c <HAL_PCD_MspInit+0x134>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003094:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_PCD_MspInit+0x134>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80030a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030b8:	4619      	mov	r1, r3
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f001 fab3 	bl	8004628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80030c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80030c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030dc:	230a      	movs	r3, #10
 80030de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030e6:	4619      	mov	r1, r3
 80030e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ec:	f001 fa9c 	bl	8004628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_PCD_MspInit+0x134>)
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	4a15      	ldr	r2, [pc, #84]	; (800314c <HAL_PCD_MspInit+0x134>)
 80030f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_PCD_MspInit+0x134>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003108:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_PCD_MspInit+0x134>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d114      	bne.n	800313e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_PCD_MspInit+0x134>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_PCD_MspInit+0x134>)
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	6593      	str	r3, [r2, #88]	; 0x58
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_PCD_MspInit+0x134>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800312c:	f002 fd6e 	bl	8005c0c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_PCD_MspInit+0x134>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <HAL_PCD_MspInit+0x134>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800313c:	e001      	b.n	8003142 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800313e:	f002 fd65 	bl	8005c0c <HAL_PWREx_EnableVddUSB>
}
 8003142:	bf00      	nop
 8003144:	37b0      	adds	r7, #176	; 0xb0
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003154:	e7fe      	b.n	8003154 <NMI_Handler+0x4>

08003156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800315a:	e7fe      	b.n	800315a <HardFault_Handler+0x4>

0800315c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <MemManage_Handler+0x4>

08003162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <BusFault_Handler+0x4>

08003168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <UsageFault_Handler+0x4>

0800316e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319c:	f000 ff84 	bl	80040a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80031a8:	2020      	movs	r0, #32
 80031aa:	f001 fd25 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <EXTI9_5_IRQHandler+0x24>)
 80031b0:	f001 fa0a 	bl	80045c8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031b4:	2080      	movs	r0, #128	; 0x80
 80031b6:	f001 fd1f 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031be:	f001 fd1b 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000680 	.word	0x20000680

080031cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80031d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80031d4:	f001 fd10 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80031d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031dc:	f001 fd0c 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80031e0:	4806      	ldr	r0, [pc, #24]	; (80031fc <EXTI15_10_IRQHandler+0x30>)
 80031e2:	f001 f9f1 	bl	80045c8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80031e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031ea:	f001 fd05 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80031ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031f2:	f001 fd01 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200000d0 	.word	0x200000d0

08003200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
	return 1;
 8003204:	2301      	movs	r3, #1
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_kill>:

int _kill(int pid, int sig)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800321a:	f006 fe11 	bl	8009e40 <__errno>
 800321e:	4603      	mov	r3, r0
 8003220:	2216      	movs	r2, #22
 8003222:	601a      	str	r2, [r3, #0]
	return -1;
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_exit>:

void _exit (int status)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ffe7 	bl	8003210 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003242:	e7fe      	b.n	8003242 <_exit+0x12>

08003244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e00a      	b.n	800326c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003256:	f3af 8000 	nop.w
 800325a:	4601      	mov	r1, r0
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	60ba      	str	r2, [r7, #8]
 8003262:	b2ca      	uxtb	r2, r1
 8003264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	3301      	adds	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	dbf0      	blt.n	8003256 <_read+0x12>
	}

return len;
 8003274:	687b      	ldr	r3, [r7, #4]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e009      	b.n	80032a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	60ba      	str	r2, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fa3f 	bl	800371c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dbf1      	blt.n	8003290 <_write+0x12>
	}
	return len;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_close>:

int _close(int file)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	return -1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032de:	605a      	str	r2, [r3, #4]
	return 0;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <_isatty>:

int _isatty(int file)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	return 1;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
	return 0;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <_sbrk+0x5c>)
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <_sbrk+0x60>)
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <_sbrk+0x64>)
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <_sbrk+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <_sbrk+0x64>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d207      	bcs.n	8003360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003350:	f006 fd76 	bl	8009e40 <__errno>
 8003354:	4603      	mov	r3, r0
 8003356:	220c      	movs	r2, #12
 8003358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	e009      	b.n	8003374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <_sbrk+0x64>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_sbrk+0x64>)
 8003370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20018000 	.word	0x20018000
 8003380:	00000400 	.word	0x00000400
 8003384:	20000330 	.word	0x20000330
 8003388:	20000d38 	.word	0x20000d38

0800338c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <SystemInit+0x20>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <SystemInit+0x20>)
 8003398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800339c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <Reset_Handler>:
 80033b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e8 <LoopForever+0x2>
 80033b4:	f7ff ffea 	bl	800338c <SystemInit>
 80033b8:	480c      	ldr	r0, [pc, #48]	; (80033ec <LoopForever+0x6>)
 80033ba:	490d      	ldr	r1, [pc, #52]	; (80033f0 <LoopForever+0xa>)
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <LoopForever+0xe>)
 80033be:	2300      	movs	r3, #0
 80033c0:	e002      	b.n	80033c8 <LoopCopyDataInit>

080033c2 <CopyDataInit>:
 80033c2:	58d4      	ldr	r4, [r2, r3]
 80033c4:	50c4      	str	r4, [r0, r3]
 80033c6:	3304      	adds	r3, #4

080033c8 <LoopCopyDataInit>:
 80033c8:	18c4      	adds	r4, r0, r3
 80033ca:	428c      	cmp	r4, r1
 80033cc:	d3f9      	bcc.n	80033c2 <CopyDataInit>
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <LoopForever+0x12>)
 80033d0:	4c0a      	ldr	r4, [pc, #40]	; (80033fc <LoopForever+0x16>)
 80033d2:	2300      	movs	r3, #0
 80033d4:	e001      	b.n	80033da <LoopFillZerobss>

080033d6 <FillZerobss>:
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	3204      	adds	r2, #4

080033da <LoopFillZerobss>:
 80033da:	42a2      	cmp	r2, r4
 80033dc:	d3fb      	bcc.n	80033d6 <FillZerobss>
 80033de:	f006 fd35 	bl	8009e4c <__libc_init_array>
 80033e2:	f7ff f9e0 	bl	80027a6 <main>

080033e6 <LoopForever>:
 80033e6:	e7fe      	b.n	80033e6 <LoopForever>
 80033e8:	20018000 	.word	0x20018000
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000164 	.word	0x20000164
 80033f4:	0800b558 	.word	0x0800b558
 80033f8:	20000164 	.word	0x20000164
 80033fc:	20000d34 	.word	0x20000d34

08003400 <ADC1_2_IRQHandler>:
 8003400:	e7fe      	b.n	8003400 <ADC1_2_IRQHandler>
	...

08003404 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <BSP_LED_Init+0x20>)
 8003412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003416:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	0800b3e8 	.word	0x0800b3e8

08003428 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <BSP_LED_Toggle+0x28>)
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fbbf 	bl	8004bc4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	200000c8 	.word	0x200000c8

08003454 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003466:	4b19      	ldr	r3, [pc, #100]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	60da      	str	r2, [r3, #12]
 8003480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	4a11      	ldr	r2, [pc, #68]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <LED_USER_GPIO_Init+0x78>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a0:	480b      	ldr	r0, [pc, #44]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 80034a2:	f001 fb77 	bl	8004b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80034a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ac:	2301      	movs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4619      	mov	r1, r3
 80034be:	4804      	ldr	r0, [pc, #16]	; (80034d0 <LED_USER_GPIO_Init+0x7c>)
 80034c0:	f001 f8b2 	bl	8004628 <HAL_GPIO_Init>

}
 80034c4:	bf00      	nop
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	48000400 	.word	0x48000400

080034d4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	460a      	mov	r2, r1
 80034de:	71fb      	strb	r3, [r7, #7]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <BSP_PB_Init+0x94>)
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80034f2:	79bb      	ldrb	r3, [r7, #6]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d132      	bne.n	800355e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <BSP_PB_Init+0x98>)
 80034fe:	441a      	add	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	491b      	ldr	r1, [pc, #108]	; (8003570 <BSP_PB_Init+0x9c>)
 8003504:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f001 f848 	bl	80045a0 <HAL_EXTI_GetHandle>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003516:	f06f 0303 	mvn.w	r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	e01f      	b.n	800355e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <BSP_PB_Init+0x98>)
 8003524:	1898      	adds	r0, r3, r2
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <BSP_PB_Init+0xa0>)
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	461a      	mov	r2, r3
 8003530:	2100      	movs	r1, #0
 8003532:	f001 f81b 	bl	800456c <HAL_EXTI_RegisterCallback>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800353c:	f06f 0303 	mvn.w	r3, #3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e00c      	b.n	800355e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003544:	2028      	movs	r0, #40	; 0x28
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <BSP_PB_Init+0xa4>)
 800354a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354e:	2200      	movs	r2, #0
 8003550:	4619      	mov	r1, r3
 8003552:	f000 fec8 	bl	80042e6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003556:	2328      	movs	r3, #40	; 0x28
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fee0 	bl	800431e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	0800b3ec 	.word	0x0800b3ec
 800356c:	200000d0 	.word	0x200000d0
 8003570:	0800b3f0 	.word	0x0800b3f0
 8003574:	0800b3f4 	.word	0x0800b3f4
 8003578:	0800b3f8 	.word	0x0800b3f8

0800357c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <BSP_PB_GetState+0x34>)
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fae5 	bl	8004b64 <HAL_GPIO_ReadPin>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200000cc 	.word	0x200000cc

080035b4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fe fb17 	bl	8001bec <BSP_PB_Callback>
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <BUTTON_USER_GPIO_Init+0x6c>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800360a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800360e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003610:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	4619      	mov	r1, r3
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <BUTTON_USER_GPIO_Init+0x70>)
 8003622:	f001 f801 	bl	8004628 <HAL_GPIO_Init>

}
 8003626:	bf00      	nop
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	48000800 	.word	0x48000800

08003638 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d903      	bls.n	8003654 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800364c:	f06f 0301 	mvn.w	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e025      	b.n	80036a0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	79fa      	ldrb	r2, [r7, #7]
 8003658:	4914      	ldr	r1, [pc, #80]	; (80036ac <BSP_COM_Init+0x74>)
 800365a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800365e:	4814      	ldr	r0, [pc, #80]	; (80036b0 <BSP_COM_Init+0x78>)
 8003660:	4613      	mov	r3, r2
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 800366c:	79fa      	ldrb	r2, [r7, #7]
 800366e:	4613      	mov	r3, r2
 8003670:	015b      	lsls	r3, r3, #5
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <BSP_COM_Init+0x78>)
 8003678:	4413      	add	r3, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f86a 	bl	8003754 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003680:	79fa      	ldrb	r2, [r7, #7]
 8003682:	4613      	mov	r3, r2
 8003684:	015b      	lsls	r3, r3, #5
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <BSP_COM_Init+0x78>)
 800368c:	4413      	add	r3, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f810 	bl	80036b4 <MX_USART1_UART_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800369a:	f06f 0303 	mvn.w	r3, #3
 800369e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200000d8 	.word	0x200000d8
 80036b0:	20000b58 	.word	0x20000b58

080036b4 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a15      	ldr	r2, [pc, #84]	; (8003718 <MX_USART1_UART_Init+0x64>)
 80036c4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036cc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	220c      	movs	r2, #12
 80036e4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f004 fa3a 	bl	8007b78 <HAL_UART_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40013800 	.word	0x40013800

0800371c <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <__io_putchar+0x30>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4613      	mov	r3, r2
 800372c:	015b      	lsls	r3, r3, #5
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <__io_putchar+0x34>)
 8003734:	1898      	adds	r0, r3, r2
 8003736:	1d39      	adds	r1, r7, #4
 8003738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800373c:	2201      	movs	r2, #1
 800373e:	f004 fa73 	bl	8007c28 <HAL_UART_Transmit>
  return ch;
 8003742:	687b      	ldr	r3, [r7, #4]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000334 	.word	0x20000334
 8003750:	20000b58 	.word	0x20000b58

08003754 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <USART1_MspInit+0x80>)
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <USART1_MspInit+0x80>)
 8003762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003766:	6613      	str	r3, [r2, #96]	; 0x60
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <USART1_MspInit+0x80>)
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <USART1_MspInit+0x80>)
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <USART1_MspInit+0x80>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <USART1_MspInit+0x80>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 800378c:	2340      	movs	r3, #64	; 0x40
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800379c:	2307      	movs	r3, #7
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <USART1_MspInit+0x84>)
 80037a8:	f000 ff3e 	bl	8004628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b8:	2303      	movs	r3, #3
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80037bc:	2307      	movs	r3, #7
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	4804      	ldr	r0, [pc, #16]	; (80037d8 <USART1_MspInit+0x84>)
 80037c8:	f000 ff2e 	bl	8004628 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80037cc:	bf00      	nop
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	48000400 	.word	0x48000400

080037dc <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <BSP_SPI3_Init+0x54>)
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <BSP_SPI3_Init+0x58>)
 80037ea:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <BSP_SPI3_Init+0x5c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	4911      	ldr	r1, [pc, #68]	; (8003838 <BSP_SPI3_Init+0x5c>)
 80037f4:	600a      	str	r2, [r1, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d114      	bne.n	8003824 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80037fa:	480d      	ldr	r0, [pc, #52]	; (8003830 <BSP_SPI3_Init+0x54>)
 80037fc:	f004 f84a 	bl	8007894 <HAL_SPI_GetState>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10e      	bne.n	8003824 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003806:	480a      	ldr	r0, [pc, #40]	; (8003830 <BSP_SPI3_Init+0x54>)
 8003808:	f000 f882 	bl	8003910 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003812:	4807      	ldr	r0, [pc, #28]	; (8003830 <BSP_SPI3_Init+0x54>)
 8003814:	f000 f83a 	bl	800388c <MX_SPI3_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800381e:	f06f 0307 	mvn.w	r3, #7
 8003822:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003824:	687b      	ldr	r3, [r7, #4]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000bdc 	.word	0x20000bdc
 8003834:	40003c00 	.word	0x40003c00
 8003838:	20000338 	.word	0x20000338

0800383c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003854:	9200      	str	r2, [sp, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	4807      	ldr	r0, [pc, #28]	; (8003878 <BSP_SPI3_SendRecv+0x3c>)
 800385c:	f003 fe07 	bl	800746e <HAL_SPI_TransmitReceive>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003866:	f06f 0305 	mvn.w	r3, #5
 800386a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800386c:	697b      	ldr	r3, [r7, #20]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000bdc 	.word	0x20000bdc

0800387c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003880:	f000 fc26 	bl	80040d0 <HAL_GetTick>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <MX_SPI3_Init+0x80>)
 800389c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038b2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2218      	movs	r2, #24
 80038cc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2207      	movs	r2, #7
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2208      	movs	r2, #8
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f003 fd0e 	bl	8007314 <HAL_SPI_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40003c00 	.word	0x40003c00

08003910 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003918:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <SPI3_MspInit+0xa8>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <SPI3_MspInit+0xa8>)
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	6593      	str	r3, [r2, #88]	; 0x58
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <SPI3_MspInit+0xa8>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003930:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <SPI3_MspInit+0xa8>)
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <SPI3_MspInit+0xa8>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <SPI3_MspInit+0xa8>)
 800393e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394e:	2302      	movs	r3, #2
 8003950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	2303      	movs	r3, #3
 8003958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800395a:	2306      	movs	r3, #6
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	4619      	mov	r1, r3
 8003964:	4815      	ldr	r0, [pc, #84]	; (80039bc <SPI3_MspInit+0xac>)
 8003966:	f000 fe5f 	bl	8004628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800396a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003978:	2303      	movs	r3, #3
 800397a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 800397c:	2306      	movs	r3, #6
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	480d      	ldr	r0, [pc, #52]	; (80039bc <SPI3_MspInit+0xac>)
 8003988:	f000 fe4e 	bl	8004628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 800398c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399a:	2303      	movs	r3, #3
 800399c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800399e:	2306      	movs	r3, #6
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <SPI3_MspInit+0xac>)
 80039aa:	f000 fe3d 	bl	8004628 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	48000800 	.word	0x48000800

080039c0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <I2Cx_MspInit+0xa8>)
 80039ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039cc:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <I2Cx_MspInit+0xa8>)
 80039ce:	f043 0302 	orr.w	r3, r3, #2
 80039d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <I2Cx_MspInit+0xa8>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80039e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039e6:	2312      	movs	r3, #18
 80039e8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ee:	2303      	movs	r3, #3
 80039f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80039f2:	2304      	movs	r3, #4
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	481b      	ldr	r0, [pc, #108]	; (8003a6c <I2Cx_MspInit+0xac>)
 80039fe:	f000 fe13 	bl	8004628 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	4818      	ldr	r0, [pc, #96]	; (8003a6c <I2Cx_MspInit+0xac>)
 8003a0a:	f000 fe0d 	bl	8004628 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a30:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <I2Cx_MspInit+0xa8>)
 8003a38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003a3c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	210f      	movs	r1, #15
 8003a42:	2021      	movs	r0, #33	; 0x21
 8003a44:	f000 fc4f 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003a48:	2021      	movs	r0, #33	; 0x21
 8003a4a:	f000 fc68 	bl	800431e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	210f      	movs	r1, #15
 8003a52:	2022      	movs	r0, #34	; 0x22
 8003a54:	f000 fc47 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003a58:	2022      	movs	r0, #34	; 0x22
 8003a5a:	f000 fc60 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	48000400 	.word	0x48000400

08003a70 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <I2Cx_Init+0x54>)
 8003a7c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <I2Cx_Init+0x58>)
 8003a82:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff89 	bl	80039c0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 f8c5 	bl	8004c3e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f001 fe54 	bl	8005764 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40005800 	.word	0x40005800
 8003ac8:	00702681 	.word	0x00702681

08003acc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	72fb      	strb	r3, [r7, #11]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	813b      	strh	r3, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003aea:	7afb      	ldrb	r3, [r7, #11]
 8003aec:	b299      	uxth	r1, r3
 8003aee:	88f8      	ldrh	r0, [r7, #6]
 8003af0:	893a      	ldrh	r2, [r7, #8]
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4603      	mov	r3, r0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 fa6e 	bl	8004fe4 <HAL_I2C_Mem_Read>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b12:	7afb      	ldrb	r3, [r7, #11]
 8003b14:	4619      	mov	r1, r3
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f832 	bl	8003b80 <I2Cx_Error>
  }
  return status;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b08a      	sub	sp, #40	; 0x28
 8003b2a:	af04      	add	r7, sp, #16
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	4608      	mov	r0, r1
 8003b30:	4611      	mov	r1, r2
 8003b32:	461a      	mov	r2, r3
 8003b34:	4603      	mov	r3, r0
 8003b36:	72fb      	strb	r3, [r7, #11]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	813b      	strh	r3, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	b299      	uxth	r1, r3
 8003b48:	88f8      	ldrh	r0, [r7, #6]
 8003b4a:	893a      	ldrh	r2, [r7, #8]
 8003b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f001 f92d 	bl	8004dbc <HAL_I2C_Mem_Write>
 8003b62:	4603      	mov	r3, r0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f805 	bl	8003b80 <I2Cx_Error>
  }
  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 f8e5 	bl	8004d5c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff6c 	bl	8003a70 <I2Cx_Init>
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <SENSOR_IO_Init+0x10>)
 8003ba6:	f7ff ff63 	bl	8003a70 <I2Cx_Init>
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000cc4 	.word	0x20000cc4

08003bb4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	4603      	mov	r3, r0
 8003bbc:	71fb      	strb	r3, [r7, #7]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	71bb      	strb	r3, [r7, #6]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003bc6:	79bb      	ldrb	r3, [r7, #6]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	79f9      	ldrb	r1, [r7, #7]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	1d7b      	adds	r3, r7, #5
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4803      	ldr	r0, [pc, #12]	; (8003be4 <SENSOR_IO_Write+0x30>)
 8003bd8:	f7ff ffa5 	bl	8003b26 <I2Cx_WriteMultiple>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000cc4 	.word	0x20000cc4

08003be8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003bfc:	79bb      	ldrb	r3, [r7, #6]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	79f9      	ldrb	r1, [r7, #7]
 8003c02:	2301      	movs	r3, #1
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	f107 030f 	add.w	r3, r7, #15
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4804      	ldr	r0, [pc, #16]	; (8003c20 <SENSOR_IO_Read+0x38>)
 8003c10:	f7ff ff5c 	bl	8003acc <I2Cx_ReadMultiple>

  return read_value;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000cc4 	.word	0x20000cc4

08003c24 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	603a      	str	r2, [r7, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	460b      	mov	r3, r1
 8003c34:	71bb      	strb	r3, [r7, #6]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003c3a:	79bb      	ldrb	r3, [r7, #6]
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	79f9      	ldrb	r1, [r7, #7]
 8003c40:	88bb      	ldrh	r3, [r7, #4]
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4804      	ldr	r0, [pc, #16]	; (8003c5c <SENSOR_IO_ReadMultiple+0x38>)
 8003c4c:	f7ff ff3e 	bl	8003acc <I2Cx_ReadMultiple>
 8003c50:	4603      	mov	r3, r0
 8003c52:	b29b      	uxth	r3, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000cc4 	.word	0x20000cc4

08003c60 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <BSP_PSENSOR_Init+0x38>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	20ba      	movs	r0, #186	; 0xba
 8003c6c:	4798      	blx	r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2bb1      	cmp	r3, #177	; 0xb1
 8003c72:	d002      	beq.n	8003c7a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	e009      	b.n	8003c8e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <BSP_PSENSOR_Init+0x3c>)
 8003c7c:	4a06      	ldr	r2, [pc, #24]	; (8003c98 <BSP_PSENSOR_Init+0x38>)
 8003c7e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <BSP_PSENSOR_Init+0x3c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	20ba      	movs	r0, #186	; 0xba
 8003c88:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003c8e:	687b      	ldr	r3, [r7, #4]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200000ec 	.word	0x200000ec
 8003c9c:	2000033c 	.word	0x2000033c

08003ca0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <BSP_PSENSOR_ReadPressure+0x18>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	20ba      	movs	r0, #186	; 0xba
 8003cac:	4798      	blx	r3
 8003cae:	eef0 7a40 	vmov.f32	s15, s0
}
 8003cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	2000033c 	.word	0x2000033c

08003cbc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <BSP_TSENSOR_Init+0x30>)
 8003cc8:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <BSP_TSENSOR_Init+0x34>)
 8003cca:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003ccc:	f7ff ff68 	bl	8003ba0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <BSP_TSENSOR_Init+0x30>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	20be      	movs	r0, #190	; 0xbe
 8003cda:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000340 	.word	0x20000340
 8003cf0:	200000dc 	.word	0x200000dc

08003cf4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <BSP_TSENSOR_ReadTemp+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	20be      	movs	r0, #190	; 0xbe
 8003d00:	4798      	blx	r3
 8003d02:	eef0 7a40 	vmov.f32	s15, s0
}
 8003d06:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000340 	.word	0x20000340

08003d10 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2120      	movs	r1, #32
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff60 	bl	8003be8 <SENSOR_IO_Read>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d52:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff29 	bl	8003bb4 <SENSOR_IO_Write>
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b088      	sub	sp, #32
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	b2d8      	uxtb	r0, r3
 8003d78:	f107 0208 	add.w	r2, r7, #8
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	21b2      	movs	r1, #178	; 0xb2
 8003d80:	f7ff ff50 	bl	8003c24 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2135      	movs	r1, #53	; 0x35
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff2c 	bl	8003be8 <SENSOR_IO_Read>
 8003d90:	4603      	mov	r3, r0
 8003d92:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003d94:	7ffb      	ldrb	r3, [r7, #31]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	7a3b      	ldrb	r3, [r7, #8]
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003da8:	7ffb      	ldrb	r3, [r7, #31]
 8003daa:	019b      	lsls	r3, r3, #6
 8003dac:	b21b      	sxth	r3, r3
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	b21a      	sxth	r2, r3
 8003db4:	7a7b      	ldrb	r3, [r7, #9]
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003dbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003dc0:	10db      	asrs	r3, r3, #3
 8003dc2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003dc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003dc8:	10db      	asrs	r3, r3, #3
 8003dca:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	b2d8      	uxtb	r0, r3
 8003dd0:	f107 0208 	add.w	r2, r7, #8
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	21bc      	movs	r1, #188	; 0xbc
 8003dd8:	f7ff ff24 	bl	8003c24 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003ddc:	7a7b      	ldrb	r3, [r7, #9]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	b21a      	sxth	r2, r3
 8003de2:	7a3b      	ldrb	r3, [r7, #8]
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	021b      	lsls	r3, r3, #8
 8003dee:	b21a      	sxth	r2, r3
 8003df0:	7abb      	ldrb	r3, [r7, #10]
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	b2d8      	uxtb	r0, r3
 8003dfc:	f107 0208 	add.w	r2, r7, #8
 8003e00:	2302      	movs	r3, #2
 8003e02:	21aa      	movs	r1, #170	; 0xaa
 8003e04:	f7ff ff0e 	bl	8003c24 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003e08:	7a7b      	ldrb	r3, [r7, #9]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	b21a      	sxth	r2, r3
 8003e0e:	7a3b      	ldrb	r3, [r7, #8]
 8003e10:	b21b      	sxth	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003e16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003e1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003e2c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e54:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e64:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	ee07 3a90 	vmov	s15, r3
}
 8003e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f87b 	bl	8003f80 <LPS22HB_Init>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003ea0:	f7ff fe7e 	bl	8003ba0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	210f      	movs	r1, #15
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe9c 	bl	8003be8 <SENSOR_IO_Read>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	74fb      	strb	r3, [r7, #19]
 8003ed2:	e013      	b.n	8003efc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	3328      	adds	r3, #40	; 0x28
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	7cfc      	ldrb	r4, [r7, #19]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7ff fe80 	bl	8003be8 <SENSOR_IO_Read>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	461a      	mov	r2, r3
 8003eec:	f107 0318 	add.w	r3, r7, #24
 8003ef0:	4423      	add	r3, r4
 8003ef2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	74fb      	strb	r3, [r7, #19]
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d9e8      	bls.n	8003ed4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	74fb      	strb	r3, [r7, #19]
 8003f06:	e010      	b.n	8003f2a <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	f107 0218 	add.w	r2, r7, #24
 8003f0e:	4413      	add	r3, r2
 8003f10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003f14:	461a      	mov	r2, r3
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	3301      	adds	r3, #1
 8003f28:	74fb      	strb	r3, [r7, #19]
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d9eb      	bls.n	8003f08 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da01      	bge.n	8003f56 <LPS22HB_P_ReadPressure+0x96>
 8003f52:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003f56:	131b      	asrs	r3, r3, #12
 8003f58:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f64:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003f7c <LPS22HB_P_ReadPressure+0xbc>
 8003f68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f6c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f70:	eeb0 0a67 	vmov.f32	s0, s15
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	42c80000 	.word	0x42c80000

08003f80 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	211a      	movs	r1, #26
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fe29 	bl	8003be8 <SENSOR_IO_Read>
 8003f96:	4603      	mov	r3, r0
 8003f98:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	211a      	movs	r1, #26
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fdfe 	bl	8003bb4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2110      	movs	r1, #16
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fe12 	bl	8003be8 <SENSOR_IO_Read>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003fd6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	f023 0302 	bic.w	r3, r3, #2
 8003fde:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	2110      	movs	r1, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fddf 	bl	8003bb4 <SENSOR_IO_Write>
}  
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004008:	2003      	movs	r0, #3
 800400a:	f000 f961 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800400e:	2000      	movs	r0, #0
 8004010:	f000 f80e 	bl	8004030 <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	e001      	b.n	8004024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004020:	f7fe feac 	bl	8002d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004024:	79fb      	ldrb	r3, [r7, #7]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_InitTick+0x6c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_InitTick+0x70>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_InitTick+0x6c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004052:	fbb3 f3f1 	udiv	r3, r3, r1
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f96d 	bl	800433a <HAL_SYSTICK_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0f      	cmp	r3, #15
 800406a:	d809      	bhi.n	8004080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800406c:	2200      	movs	r2, #0
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	f000 f937 	bl	80042e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_InitTick+0x74>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e007      	b.n	8004090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e004      	b.n	8004090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	e001      	b.n	8004090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200000fc 	.word	0x200000fc
 80040a0:	200000c4 	.word	0x200000c4
 80040a4:	200000f8 	.word	0x200000f8

080040a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_IncTick+0x20>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_IncTick+0x24>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_IncTick+0x24>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	200000fc 	.word	0x200000fc
 80040cc:	20000d10 	.word	0x20000d10

080040d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return uwTick;
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <HAL_GetTick+0x14>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000d10 	.word	0x20000d10

080040e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7ff ffee 	bl	80040d0 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d005      	beq.n	800410e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_Delay+0x44>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800410e:	bf00      	nop
 8004110:	f7ff ffde 	bl	80040d0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d8f7      	bhi.n	8004110 <HAL_Delay+0x28>
  {
  }
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200000fc 	.word	0x200000fc

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800415c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	60d3      	str	r3, [r2, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff3e 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff8e 	bl	8004224 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5d 	bl	80041d0 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff31 	bl	8004194 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa2 	bl	800428c <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0ac      	b.n	80044c0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f8b2 	bl	80044d4 <DFSDM_GetChannelFromInstance>
 8004370:	4603      	mov	r3, r0
 8004372:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_DFSDM_ChannelInit+0x174>)
 8004374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e09f      	b.n	80044c0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7fe fd1f 	bl	8002dc4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <HAL_DFSDM_ChannelInit+0x178>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a4f      	ldr	r2, [pc, #316]	; (80044cc <HAL_DFSDM_ChannelInit+0x178>)
 800438e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <HAL_DFSDM_ChannelInit+0x178>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d125      	bne.n	80043e4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004398:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a4c      	ldr	r2, [pc, #304]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 800439e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043a2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80043a4:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4948      	ldr	r1, [pc, #288]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a46      	ldr	r2, [pc, #280]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80043bc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	791b      	ldrb	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80043c6:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	493f      	ldr	r1, [pc, #252]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80043d8:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3c      	ldr	r2, [pc, #240]	; (80044d0 <HAL_DFSDM_ChannelInit+0x17c>)
 80043de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80043f2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004402:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004408:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 020f 	bic.w	r2, r2, #15
 8004420:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004448:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f002 0207 	and.w	r2, r2, #7
 8004474:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f810 	bl	80044d4 <DFSDM_GetChannelFromInstance>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_DFSDM_ChannelInit+0x174>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000348 	.word	0x20000348
 80044cc:	20000344 	.word	0x20000344
 80044d0:	40016000 	.word	0x40016000

080044d4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <DFSDM_GetChannelFromInstance+0x7c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	e02b      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a19      	ldr	r2, [pc, #100]	; (8004554 <DFSDM_GetChannelFromInstance+0x80>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d102      	bne.n	80044f8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	e024      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <DFSDM_GetChannelFromInstance+0x84>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d102      	bne.n	8004506 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004500:	2302      	movs	r3, #2
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e01d      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a14      	ldr	r2, [pc, #80]	; (800455c <DFSDM_GetChannelFromInstance+0x88>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d102      	bne.n	8004514 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800450e:	2304      	movs	r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e016      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a12      	ldr	r2, [pc, #72]	; (8004560 <DFSDM_GetChannelFromInstance+0x8c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d102      	bne.n	8004522 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800451c:	2305      	movs	r3, #5
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e00f      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <DFSDM_GetChannelFromInstance+0x90>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d102      	bne.n	8004530 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800452a:	2306      	movs	r3, #6
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e008      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <DFSDM_GetChannelFromInstance+0x94>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d102      	bne.n	800453e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004538:	2307      	movs	r3, #7
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e001      	b.n	8004542 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800453e:	2303      	movs	r3, #3
 8004540:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40016000 	.word	0x40016000
 8004554:	40016020 	.word	0x40016020
 8004558:	40016040 	.word	0x40016040
 800455c:	40016080 	.word	0x40016080
 8004560:	400160a0 	.word	0x400160a0
 8004564:	400160c0 	.word	0x400160c0
 8004568:	400160e0 	.word	0x400160e0

0800456c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	460b      	mov	r3, r1
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800457e:	7afb      	ldrb	r3, [r7, #11]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
      break;
 800458a:	e002      	b.n	8004592 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	75fb      	strb	r3, [r7, #23]
      break;
 8004590:	bf00      	nop
  }

  return status;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e003      	b.n	80045bc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80045ba:	2300      	movs	r3, #0
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2201      	movs	r2, #1
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_EXTI_IRQHandler+0x5c>)
 80045f2:	4413      	add	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4798      	blx	r3
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40010414 	.word	0x40010414

08004628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004636:	e17f      	b.n	8004938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	4013      	ands	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8171 	beq.w	8004932 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d005      	beq.n	8004668 <HAL_GPIO_Init+0x40>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d130      	bne.n	80046ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800469e:	2201      	movs	r2, #1
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0201 	and.w	r2, r3, #1
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d118      	bne.n	8004708 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80046dc:	2201      	movs	r2, #1
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f003 0201 	and.w	r2, r3, #1
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b03      	cmp	r3, #3
 8004712:	d017      	beq.n	8004744 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d123      	bne.n	8004798 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	08da      	lsrs	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3208      	adds	r2, #8
 8004758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	220f      	movs	r2, #15
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	08da      	lsrs	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3208      	adds	r2, #8
 8004792:	6939      	ldr	r1, [r7, #16]
 8004794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 0203 	and.w	r2, r3, #3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80ac 	beq.w	8004932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047da:	4b5f      	ldr	r3, [pc, #380]	; (8004958 <HAL_GPIO_Init+0x330>)
 80047dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047de:	4a5e      	ldr	r2, [pc, #376]	; (8004958 <HAL_GPIO_Init+0x330>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6613      	str	r3, [r2, #96]	; 0x60
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <HAL_GPIO_Init+0x330>)
 80047e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047f2:	4a5a      	ldr	r2, [pc, #360]	; (800495c <HAL_GPIO_Init+0x334>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800481c:	d025      	beq.n	800486a <HAL_GPIO_Init+0x242>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4f      	ldr	r2, [pc, #316]	; (8004960 <HAL_GPIO_Init+0x338>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <HAL_GPIO_Init+0x23e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a4e      	ldr	r2, [pc, #312]	; (8004964 <HAL_GPIO_Init+0x33c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d019      	beq.n	8004862 <HAL_GPIO_Init+0x23a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a4d      	ldr	r2, [pc, #308]	; (8004968 <HAL_GPIO_Init+0x340>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <HAL_GPIO_Init+0x236>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a4c      	ldr	r2, [pc, #304]	; (800496c <HAL_GPIO_Init+0x344>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00d      	beq.n	800485a <HAL_GPIO_Init+0x232>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4b      	ldr	r2, [pc, #300]	; (8004970 <HAL_GPIO_Init+0x348>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_GPIO_Init+0x22e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a4a      	ldr	r2, [pc, #296]	; (8004974 <HAL_GPIO_Init+0x34c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d101      	bne.n	8004852 <HAL_GPIO_Init+0x22a>
 800484e:	2306      	movs	r3, #6
 8004850:	e00c      	b.n	800486c <HAL_GPIO_Init+0x244>
 8004852:	2307      	movs	r3, #7
 8004854:	e00a      	b.n	800486c <HAL_GPIO_Init+0x244>
 8004856:	2305      	movs	r3, #5
 8004858:	e008      	b.n	800486c <HAL_GPIO_Init+0x244>
 800485a:	2304      	movs	r3, #4
 800485c:	e006      	b.n	800486c <HAL_GPIO_Init+0x244>
 800485e:	2303      	movs	r3, #3
 8004860:	e004      	b.n	800486c <HAL_GPIO_Init+0x244>
 8004862:	2302      	movs	r3, #2
 8004864:	e002      	b.n	800486c <HAL_GPIO_Init+0x244>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x244>
 800486a:	2300      	movs	r3, #0
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	f002 0203 	and.w	r2, r2, #3
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	4093      	lsls	r3, r2
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800487c:	4937      	ldr	r1, [pc, #220]	; (800495c <HAL_GPIO_Init+0x334>)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800488a:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_GPIO_Init+0x350>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	43db      	mvns	r3, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ae:	4a32      	ldr	r2, [pc, #200]	; (8004978 <HAL_GPIO_Init+0x350>)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048b4:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_GPIO_Init+0x350>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <HAL_GPIO_Init+0x350>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_GPIO_Init+0x350>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004902:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <HAL_GPIO_Init+0x350>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_GPIO_Init+0x350>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43db      	mvns	r3, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800492c:	4a12      	ldr	r2, [pc, #72]	; (8004978 <HAL_GPIO_Init+0x350>)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	3301      	adds	r3, #1
 8004936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f47f ae78 	bne.w	8004638 <HAL_GPIO_Init+0x10>
  }
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	40010000 	.word	0x40010000
 8004960:	48000400 	.word	0x48000400
 8004964:	48000800 	.word	0x48000800
 8004968:	48000c00 	.word	0x48000c00
 800496c:	48001000 	.word	0x48001000
 8004970:	48001400 	.word	0x48001400
 8004974:	48001800 	.word	0x48001800
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800498a:	e0cd      	b.n	8004b28 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800498c:	2201      	movs	r2, #1
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80c0 	beq.w	8004b22 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049a2:	4a68      	ldr	r2, [pc, #416]	; (8004b44 <HAL_GPIO_DeInit+0x1c8>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049ca:	d025      	beq.n	8004a18 <HAL_GPIO_DeInit+0x9c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a5e      	ldr	r2, [pc, #376]	; (8004b48 <HAL_GPIO_DeInit+0x1cc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d01f      	beq.n	8004a14 <HAL_GPIO_DeInit+0x98>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a5d      	ldr	r2, [pc, #372]	; (8004b4c <HAL_GPIO_DeInit+0x1d0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d019      	beq.n	8004a10 <HAL_GPIO_DeInit+0x94>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a5c      	ldr	r2, [pc, #368]	; (8004b50 <HAL_GPIO_DeInit+0x1d4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_GPIO_DeInit+0x90>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a5b      	ldr	r2, [pc, #364]	; (8004b54 <HAL_GPIO_DeInit+0x1d8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00d      	beq.n	8004a08 <HAL_GPIO_DeInit+0x8c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <HAL_GPIO_DeInit+0x1dc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <HAL_GPIO_DeInit+0x88>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a59      	ldr	r2, [pc, #356]	; (8004b5c <HAL_GPIO_DeInit+0x1e0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_GPIO_DeInit+0x84>
 80049fc:	2306      	movs	r3, #6
 80049fe:	e00c      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a00:	2307      	movs	r3, #7
 8004a02:	e00a      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a04:	2305      	movs	r3, #5
 8004a06:	e008      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e006      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e004      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e002      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_GPIO_DeInit+0x9e>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	f002 0203 	and.w	r2, r2, #3
 8004a20:	0092      	lsls	r2, r2, #2
 8004a22:	4093      	lsls	r3, r2
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d132      	bne.n	8004a90 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a2a:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	494b      	ldr	r1, [pc, #300]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a38:	4b49      	ldr	r3, [pc, #292]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	4947      	ldr	r1, [pc, #284]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	4944      	ldr	r1, [pc, #272]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a54:	4b42      	ldr	r3, [pc, #264]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	4940      	ldr	r1, [pc, #256]	; (8004b60 <HAL_GPIO_DeInit+0x1e4>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a72:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_GPIO_DeInit+0x1c8>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	4830      	ldr	r0, [pc, #192]	; (8004b44 <HAL_GPIO_DeInit+0x1c8>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	400a      	ands	r2, r1
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	2103      	movs	r1, #3
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	08da      	lsrs	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3208      	adds	r2, #8
 8004aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	220f      	movs	r2, #15
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	08d2      	lsrs	r2, r2, #3
 8004ac4:	4019      	ands	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	2103      	movs	r1, #3
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	2101      	movs	r1, #1
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2103      	movs	r1, #3
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	401a      	ands	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b12:	2101      	movs	r1, #1
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3301      	adds	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f af2b 	bne.w	800498c <HAL_GPIO_DeInit+0x10>
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40010000 	.word	0x40010000
 8004b48:	48000400 	.word	0x48000400
 8004b4c:	48000800 	.word	0x48000800
 8004b50:	48000c00 	.word	0x48000c00
 8004b54:	48001000 	.word	0x48001000
 8004b58:	48001400 	.word	0x48001400
 8004b5c:	48001800 	.word	0x48001800
 8004b60:	40010400 	.word	0x40010400

08004b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691a      	ldr	r2, [r3, #16]
 8004b74:	887b      	ldrh	r3, [r7, #2]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
 8004b80:	e001      	b.n	8004b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba4:	787b      	ldrb	r3, [r7, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43d9      	mvns	r1, r3
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	400b      	ands	r3, r1
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	619a      	str	r2, [r3, #24]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c0e:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f806 	bl	8004c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e081      	b.n	8004d54 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fe f911 	bl	8002e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2224      	movs	r2, #36	; 0x24
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	e006      	b.n	8004cc6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cc4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d104      	bne.n	8004cd8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69d9      	ldr	r1, [r3, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1a      	ldr	r2, [r3, #32]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e021      	b.n	8004db2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	; 0x24
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fe f8de 	bl	8002f48 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	817b      	strh	r3, [r7, #10]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	813b      	strh	r3, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	f040 80f9 	bne.w	8004fd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_I2C_Mem_Write+0x34>
 8004dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0ed      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_I2C_Mem_Write+0x4e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e0e6      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e12:	f7ff f95d 	bl	80040d0 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2319      	movs	r3, #25
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fac3 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0d1      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2221      	movs	r2, #33	; 0x21
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2240      	movs	r2, #64	; 0x40
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e5c:	88f8      	ldrh	r0, [r7, #6]
 8004e5e:	893a      	ldrh	r2, [r7, #8]
 8004e60:	8979      	ldrh	r1, [r7, #10]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f9d3 	bl	8005218 <I2C_RequestMemoryWrite>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0a9      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2bff      	cmp	r3, #255	; 0xff
 8004e8c:	d90e      	bls.n	8004eac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	8979      	ldrh	r1, [r7, #10]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fc2b 	bl	8005700 <I2C_TransferConfig>
 8004eaa:	e00f      	b.n	8004ecc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fc1a 	bl	8005700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 faad 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e07b      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d034      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x1c8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d130      	bne.n	8004f84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa3f 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04d      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2bff      	cmp	r3, #255	; 0xff
 8004f44:	d90e      	bls.n	8004f64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	22ff      	movs	r2, #255	; 0xff
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fbcf 	bl	8005700 <I2C_TransferConfig>
 8004f62:	e00f      	b.n	8004f84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	8979      	ldrh	r1, [r7, #10]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fbbe 	bl	8005700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d19e      	bne.n	8004ecc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa8c 	bl	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01a      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_I2C_Mem_Write+0x224>)
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	fe00e800 	.word	0xfe00e800

08004fe4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	813b      	strh	r3, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b20      	cmp	r3, #32
 8005008:	f040 80fd 	bne.w	8005206 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_I2C_Mem_Read+0x34>
 8005012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0f1      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_I2C_Mem_Read+0x4e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ea      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800503a:	f7ff f849 	bl	80040d0 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2319      	movs	r3, #25
 8005046:	2201      	movs	r2, #1
 8005048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f9af 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0d5      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2222      	movs	r2, #34	; 0x22
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800507c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005084:	88f8      	ldrh	r0, [r7, #6]
 8005086:	893a      	ldrh	r2, [r7, #8]
 8005088:	8979      	ldrh	r1, [r7, #10]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4603      	mov	r3, r0
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f913 	bl	80052c0 <I2C_RequestMemoryRead>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0ad      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2bff      	cmp	r3, #255	; 0xff
 80050b4:	d90e      	bls.n	80050d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	22ff      	movs	r2, #255	; 0xff
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	8979      	ldrh	r1, [r7, #10]
 80050c4:	4b52      	ldr	r3, [pc, #328]	; (8005210 <HAL_I2C_Mem_Read+0x22c>)
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fb17 	bl	8005700 <I2C_TransferConfig>
 80050d2:	e00f      	b.n	80050f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	8979      	ldrh	r1, [r7, #10]
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <HAL_I2C_Mem_Read+0x22c>)
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fb06 	bl	8005700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2200      	movs	r2, #0
 80050fc:	2104      	movs	r1, #4
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f956 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07c      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d034      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x1d0>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d130      	bne.n	80051b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f927 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04d      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2bff      	cmp	r3, #255	; 0xff
 8005174:	d90e      	bls.n	8005194 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	b2da      	uxtb	r2, r3
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fab7 	bl	8005700 <I2C_TransferConfig>
 8005192:	e00f      	b.n	80051b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 faa6 	bl	8005700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d19a      	bne.n	80050f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f974 	bl	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e01a      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2220      	movs	r2, #32
 80051d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_I2C_Mem_Read+0x230>)
 80051e6:	400b      	ands	r3, r1
 80051e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
  }
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	80002400 	.word	0x80002400
 8005214:	fe00e800 	.word	0xfe00e800

08005218 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	817b      	strh	r3, [r7, #10]
 800522a:	460b      	mov	r3, r1
 800522c:	813b      	strh	r3, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	8979      	ldrh	r1, [r7, #10]
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <I2C_RequestMemoryWrite+0xa4>)
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fa5d 	bl	8005700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	69b9      	ldr	r1, [r7, #24]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8f0 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e02c      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d105      	bne.n	800526c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005260:	893b      	ldrh	r3, [r7, #8]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	629a      	str	r2, [r3, #40]	; 0x28
 800526a:	e015      	b.n	8005298 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800526c:	893b      	ldrh	r3, [r7, #8]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	b29b      	uxth	r3, r3
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f8d6 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e012      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f884 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	80002000 	.word	0x80002000

080052c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <I2C_RequestMemoryRead+0xa4>)
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa0a 	bl	8005700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	69b9      	ldr	r1, [r7, #24]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f89d 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e02c      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d105      	bne.n	8005312 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005306:	893b      	ldrh	r3, [r7, #8]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
 8005310:	e015      	b.n	800533e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005312:	893b      	ldrh	r3, [r7, #8]
 8005314:	0a1b      	lsrs	r3, r3, #8
 8005316:	b29b      	uxth	r3, r3
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f883 	bl	8005430 <I2C_WaitOnTXISFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e012      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2200      	movs	r2, #0
 8005346:	2140      	movs	r1, #64	; 0x40
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f831 	bl	80053b0 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	80002000 	.word	0x80002000

08005368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d103      	bne.n	8005386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d007      	beq.n	80053a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	619a      	str	r2, [r3, #24]
  }
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c0:	e022      	b.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d01e      	beq.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7fe fe81 	bl	80040d0 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d113      	bne.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e00f      	b.n	8005428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d0cd      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800543c:	e02c      	b.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f870 	bl	8005528 <I2C_IsErrorOccurred>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e02a      	b.n	80054a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005458:	d01e      	beq.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fe fe39 	bl	80040d0 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d113      	bne.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e007      	b.n	80054a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d1cb      	bne.n	800543e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054bc:	e028      	b.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f830 	bl	8005528 <I2C_IsErrorOccurred>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e026      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d2:	f7fe fdfd 	bl	80040d0 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d302      	bcc.n	80054e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d113      	bne.n	8005510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e007      	b.n	8005520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d1cf      	bne.n	80054be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d075      	beq.n	8005640 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2210      	movs	r2, #16
 800555a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800555c:	e056      	b.n	800560c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d052      	beq.n	800560c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fe fdb3 	bl	80040d0 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <I2C_IsErrorOccurred+0x54>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d147      	bne.n	800560c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800558e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800559a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800559e:	d12e      	bne.n	80055fe <I2C_IsErrorOccurred+0xd6>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a6:	d02a      	beq.n	80055fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80055a8:	7cfb      	ldrb	r3, [r7, #19]
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d027      	beq.n	80055fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055be:	f7fe fd87 	bl	80040d0 <HAL_GetTick>
 80055c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c4:	e01b      	b.n	80055fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055c6:	f7fe fd83 	bl	80040d0 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b19      	cmp	r3, #25
 80055d2:	d914      	bls.n	80055fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b20      	cmp	r3, #32
 800560a:	d1dc      	bne.n	80055c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	d003      	beq.n	8005622 <I2C_IsErrorOccurred+0xfa>
 800561a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800561e:	2b00      	cmp	r3, #0
 8005620:	d09d      	beq.n	800555e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2220      	movs	r2, #32
 8005630:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	f043 0308 	orr.w	r3, r3, #8
 800567a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80056ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01c      	beq.n	80056f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff fe56 	bl	8005368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <I2C_IsErrorOccurred+0x1d4>)
 80056c8:	400b      	ands	r3, r1
 80056ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80056f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	fe00e800 	.word	0xfe00e800

08005700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	817b      	strh	r3, [r7, #10]
 800570e:	4613      	mov	r3, r2
 8005710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005712:	897b      	ldrh	r3, [r7, #10]
 8005714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005718:	7a7b      	ldrb	r3, [r7, #9]
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005720:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	4313      	orrs	r3, r2
 800572a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800572e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	0d5b      	lsrs	r3, r3, #21
 800573a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800573e:	4b08      	ldr	r3, [pc, #32]	; (8005760 <I2C_TransferConfig+0x60>)
 8005740:	430b      	orrs	r3, r1
 8005742:	43db      	mvns	r3, r3
 8005744:	ea02 0103 	and.w	r1, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	03ff63ff 	.word	0x03ff63ff

08005764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	d138      	bne.n	80057ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005784:	2302      	movs	r3, #2
 8005786:	e032      	b.n	80057ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	; 0x24
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6819      	ldr	r1, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b20      	cmp	r3, #32
 800580e:	d139      	bne.n	8005884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800581a:	2302      	movs	r3, #2
 800581c:	e033      	b.n	8005886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2224      	movs	r2, #36	; 0x24
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800584c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005894:	b08f      	sub	sp, #60	; 0x3c
 8005896:	af0a      	add	r7, sp, #40	; 0x28
 8005898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e116      	b.n	8005ad2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fd fbaa 	bl	8003018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2203      	movs	r2, #3
 80058c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fe99 	bl	800861a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	687e      	ldr	r6, [r7, #4]
 80058f0:	466d      	mov	r5, sp
 80058f2:	f106 0410 	add.w	r4, r6, #16
 80058f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005902:	e885 0003 	stmia.w	r5, {r0, r1}
 8005906:	1d33      	adds	r3, r6, #4
 8005908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800590a:	6838      	ldr	r0, [r7, #0]
 800590c:	f002 fe59 	bl	80085c2 <USB_CoreInit>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0d7      	b.n	8005ad2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2100      	movs	r1, #0
 8005928:	4618      	mov	r0, r3
 800592a:	f002 fe87 	bl	800863c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	e04a      	b.n	80059ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005934:	7bfa      	ldrb	r2, [r7, #15]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	333d      	adds	r3, #61	; 0x3d
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	333c      	adds	r3, #60	; 0x3c
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800595c:	7bfa      	ldrb	r2, [r7, #15]
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	b298      	uxth	r0, r3
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3342      	adds	r3, #66	; 0x42
 8005970:	4602      	mov	r2, r0
 8005972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	333f      	adds	r3, #63	; 0x3f
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005988:	7bfa      	ldrb	r2, [r7, #15]
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	3344      	adds	r3, #68	; 0x44
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800599c:	7bfa      	ldrb	r2, [r7, #15]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	3348      	adds	r3, #72	; 0x48
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3350      	adds	r3, #80	; 0x50
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	3301      	adds	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d3af      	bcc.n	8005934 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e044      	b.n	8005a64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059da:	7bfa      	ldrb	r2, [r7, #15]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059f0:	7bfa      	ldrb	r2, [r7, #15]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a1c:	7bfa      	ldrb	r2, [r7, #15]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	3301      	adds	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d3b5      	bcc.n	80059da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	687e      	ldr	r6, [r7, #4]
 8005a76:	466d      	mov	r5, sp
 8005a78:	f106 0410 	add.w	r4, r6, #16
 8005a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a88:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a8c:	1d33      	adds	r3, r6, #4
 8005a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f002 fe1f 	bl	80086d4 <USB_DevInit>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e014      	b.n	8005ad2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d102      	bne.n	8005ac6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f80a 	bl	8005ada <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 ffc7 	bl	8008a5e <USB_DevDisconnect>

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ada <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	f043 0303 	orr.w	r3, r3, #3
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40007000 	.word	0x40007000

08005b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b48:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40007000 	.word	0x40007000

08005b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b6e:	d130      	bne.n	8005bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b70:	4b23      	ldr	r3, [pc, #140]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b7c:	d038      	beq.n	8005bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b7e:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2232      	movs	r2, #50	; 0x32
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	4a1b      	ldr	r2, [pc, #108]	; (8005c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0c9b      	lsrs	r3, r3, #18
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba4:	e002      	b.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d102      	bne.n	8005bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f2      	bne.n	8005ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bcc:	d110      	bne.n	8005bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e00f      	b.n	8005bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bde:	d007      	beq.n	8005bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005be8:	4a05      	ldr	r2, [pc, #20]	; (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40007000 	.word	0x40007000
 8005c04:	200000c4 	.word	0x200000c4
 8005c08:	431bde83 	.word	0x431bde83

08005c0c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c1a:	6053      	str	r3, [r2, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40007000 	.word	0x40007000

08005c2c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c34:	f7fe fa4c 	bl	80040d0 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e063      	b.n	8005d0c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7fd f999 	bl	8002f90 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005c5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f858 	bl	8005d18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	021a      	lsls	r2, r3, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2120      	movs	r1, #32
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f850 	bl	8005d34 <QSPI_WaitFlagStateUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d131      	bne.n	8005d02 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6852      	ldr	r2, [r2, #4]
 8005cb0:	0611      	lsls	r1, r2, #24
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	4311      	orrs	r1, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <HAL_QSPI_Init+0xe8>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6912      	ldr	r2, [r2, #16]
 8005cce:	0411      	lsls	r1, r2, #16
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6952      	ldr	r2, [r2, #20]
 8005cd4:	4311      	orrs	r1, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6992      	ldr	r2, [r2, #24]
 8005cda:	4311      	orrs	r1, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	ffe0f8fe 	.word	0xffe0f8fe

08005d18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d44:	e01a      	b.n	8005d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d016      	beq.n	8005d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fe f9bf 	bl	80040d0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2204      	movs	r2, #4
 8005d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	f043 0201 	orr.w	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e00e      	b.n	8005d9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bf14      	ite	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	2300      	moveq	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1d6      	bne.n	8005d46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e3d4      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db6:	4ba1      	ldr	r3, [pc, #644]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80e4 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_RCC_OscConfig+0x4a>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b0c      	cmp	r3, #12
 8005de2:	f040 808b 	bne.w	8005efc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 8087 	bne.w	8005efc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dee:	4b93      	ldr	r3, [pc, #588]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e3ac      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	4b8c      	ldr	r3, [pc, #560]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <HAL_RCC_OscConfig+0x7c>
 8005e16:	4b89      	ldr	r3, [pc, #548]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1e:	e005      	b.n	8005e2c <HAL_RCC_OscConfig+0x88>
 8005e20:	4b86      	ldr	r3, [pc, #536]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d223      	bcs.n	8005e78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fd41 	bl	80068bc <RCC_SetFlashLatencyFromMSIRange>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e38d      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e44:	4b7d      	ldr	r3, [pc, #500]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7c      	ldr	r2, [pc, #496]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e4a:	f043 0308 	orr.w	r3, r3, #8
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	4b7a      	ldr	r3, [pc, #488]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	4977      	ldr	r1, [pc, #476]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e62:	4b76      	ldr	r3, [pc, #472]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	4972      	ldr	r1, [pc, #456]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	604b      	str	r3, [r1, #4]
 8005e76:	e025      	b.n	8005ec4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e78:	4b70      	ldr	r3, [pc, #448]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a6f      	ldr	r2, [pc, #444]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e7e:	f043 0308 	orr.w	r3, r3, #8
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b6d      	ldr	r3, [pc, #436]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	496a      	ldr	r1, [pc, #424]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e96:	4b69      	ldr	r3, [pc, #420]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4965      	ldr	r1, [pc, #404]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fd01 	bl	80068bc <RCC_SetFlashLatencyFromMSIRange>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e34d      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ec4:	f000 fc36 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f003 030f 	and.w	r3, r3, #15
 8005ed4:	495a      	ldr	r1, [pc, #360]	; (8006040 <HAL_RCC_OscConfig+0x29c>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	4a58      	ldr	r2, [pc, #352]	; (8006044 <HAL_RCC_OscConfig+0x2a0>)
 8005ee2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ee4:	4b58      	ldr	r3, [pc, #352]	; (8006048 <HAL_RCC_OscConfig+0x2a4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe f8a1 	bl	8004030 <HAL_InitTick>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d052      	beq.n	8005f9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	e331      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d032      	beq.n	8005f6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f04:	4b4d      	ldr	r3, [pc, #308]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a4c      	ldr	r2, [pc, #304]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f10:	f7fe f8de 	bl	80040d0 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f18:	f7fe f8da 	bl	80040d0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e31a      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f2a:	4b44      	ldr	r3, [pc, #272]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a40      	ldr	r2, [pc, #256]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f3c:	f043 0308 	orr.w	r3, r3, #8
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4b3e      	ldr	r3, [pc, #248]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	493b      	ldr	r1, [pc, #236]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f54:	4b39      	ldr	r3, [pc, #228]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	4936      	ldr	r1, [pc, #216]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	e01a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f6a:	4b34      	ldr	r3, [pc, #208]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a33      	ldr	r2, [pc, #204]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f76:	f7fe f8ab 	bl	80040d0 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f7e:	f7fe f8a7 	bl	80040d0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e2e7      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f0      	bne.n	8005f7e <HAL_RCC_OscConfig+0x1da>
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d074      	beq.n	8006096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d005      	beq.n	8005fbe <HAL_RCC_OscConfig+0x21a>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b0c      	cmp	r3, #12
 8005fb6:	d10e      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d10b      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbe:	4b1f      	ldr	r3, [pc, #124]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d064      	beq.n	8006094 <HAL_RCC_OscConfig+0x2f0>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d160      	bne.n	8006094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e2c4      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fde:	d106      	bne.n	8005fee <HAL_RCC_OscConfig+0x24a>
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e01d      	b.n	800602a <HAL_RCC_OscConfig+0x286>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff6:	d10c      	bne.n	8006012 <HAL_RCC_OscConfig+0x26e>
 8005ff8:	4b10      	ldr	r3, [pc, #64]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0f      	ldr	r2, [pc, #60]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8005ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a0c      	ldr	r2, [pc, #48]	; (800603c <HAL_RCC_OscConfig+0x298>)
 800600a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e00b      	b.n	800602a <HAL_RCC_OscConfig+0x286>
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a09      	ldr	r2, [pc, #36]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8006018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a06      	ldr	r2, [pc, #24]	; (800603c <HAL_RCC_OscConfig+0x298>)
 8006024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006028:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01c      	beq.n	800606c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006032:	f7fe f84d 	bl	80040d0 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006038:	e011      	b.n	800605e <HAL_RCC_OscConfig+0x2ba>
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000
 8006040:	0800b3a0 	.word	0x0800b3a0
 8006044:	200000c4 	.word	0x200000c4
 8006048:	200000f8 	.word	0x200000f8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800604c:	f7fe f840 	bl	80040d0 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b64      	cmp	r3, #100	; 0x64
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e280      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800605e:	4baf      	ldr	r3, [pc, #700]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x2a8>
 800606a:	e014      	b.n	8006096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fe f830 	bl	80040d0 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006074:	f7fe f82c 	bl	80040d0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	; 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e26c      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006086:	4ba5      	ldr	r3, [pc, #660]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x2d0>
 8006092:	e000      	b.n	8006096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d060      	beq.n	8006164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_OscConfig+0x310>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d119      	bne.n	80060e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d116      	bne.n	80060e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b4:	4b99      	ldr	r3, [pc, #612]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_OscConfig+0x328>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e249      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	4b93      	ldr	r3, [pc, #588]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	4990      	ldr	r1, [pc, #576]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e0:	e040      	b.n	8006164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d023      	beq.n	8006132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ea:	4b8c      	ldr	r3, [pc, #560]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a8b      	ldr	r2, [pc, #556]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80060f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fd ffeb 	bl	80040d0 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fe:	f7fd ffe7 	bl	80040d0 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e227      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006110:	4b82      	ldr	r3, [pc, #520]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b7f      	ldr	r3, [pc, #508]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	497c      	ldr	r1, [pc, #496]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	e018      	b.n	8006164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006132:	4b7a      	ldr	r3, [pc, #488]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a79      	ldr	r2, [pc, #484]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fd ffc7 	bl	80040d0 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006146:	f7fd ffc3 	bl	80040d0 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e203      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006158:	4b70      	ldr	r3, [pc, #448]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d03c      	beq.n	80061ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01c      	beq.n	80061b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006178:	4b68      	ldr	r3, [pc, #416]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800617a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800617e:	4a67      	ldr	r2, [pc, #412]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fd ffa2 	bl	80040d0 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006190:	f7fd ff9e 	bl	80040d0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e1de      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061a2:	4b5e      	ldr	r3, [pc, #376]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80061a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ef      	beq.n	8006190 <HAL_RCC_OscConfig+0x3ec>
 80061b0:	e01b      	b.n	80061ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b2:	4b5a      	ldr	r3, [pc, #360]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80061b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b8:	4a58      	ldr	r2, [pc, #352]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fd ff85 	bl	80040d0 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ca:	f7fd ff81 	bl	80040d0 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1c1      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061dc:	4b4f      	ldr	r3, [pc, #316]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ef      	bne.n	80061ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a6 	beq.w	8006344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f8:	2300      	movs	r3, #0
 80061fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061fc:	4b47      	ldr	r3, [pc, #284]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006208:	4b44      	ldr	r3, [pc, #272]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800620e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006212:	6593      	str	r3, [r2, #88]	; 0x58
 8006214:	4b41      	ldr	r3, [pc, #260]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006224:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <HAL_RCC_OscConfig+0x57c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d118      	bne.n	8006262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006230:	4b3b      	ldr	r3, [pc, #236]	; (8006320 <HAL_RCC_OscConfig+0x57c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3a      	ldr	r2, [pc, #232]	; (8006320 <HAL_RCC_OscConfig+0x57c>)
 8006236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623c:	f7fd ff48 	bl	80040d0 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006244:	f7fd ff44 	bl	80040d0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e184      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006256:	4b32      	ldr	r3, [pc, #200]	; (8006320 <HAL_RCC_OscConfig+0x57c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d108      	bne.n	800627c <HAL_RCC_OscConfig+0x4d8>
 800626a:	4b2c      	ldr	r3, [pc, #176]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	4a2a      	ldr	r2, [pc, #168]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800627a:	e024      	b.n	80062c6 <HAL_RCC_OscConfig+0x522>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b05      	cmp	r3, #5
 8006282:	d110      	bne.n	80062a6 <HAL_RCC_OscConfig+0x502>
 8006284:	4b25      	ldr	r3, [pc, #148]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800628c:	f043 0304 	orr.w	r3, r3, #4
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006294:	4b21      	ldr	r3, [pc, #132]	; (800631c <HAL_RCC_OscConfig+0x578>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_RCC_OscConfig+0x578>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062a4:	e00f      	b.n	80062c6 <HAL_RCC_OscConfig+0x522>
 80062a6:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062b6:	4b19      	ldr	r3, [pc, #100]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062bc:	4a17      	ldr	r2, [pc, #92]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ce:	f7fd feff 	bl	80040d0 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d4:	e00a      	b.n	80062ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7fd fefb 	bl	80040d0 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e139      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCC_OscConfig+0x578>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ed      	beq.n	80062d6 <HAL_RCC_OscConfig+0x532>
 80062fa:	e01a      	b.n	8006332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fd fee8 	bl	80040d0 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006302:	e00f      	b.n	8006324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fd fee4 	bl	80040d0 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d906      	bls.n	8006324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e122      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006324:	4b90      	ldr	r3, [pc, #576]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e8      	bne.n	8006304 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d105      	bne.n	8006344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006338:	4b8b      	ldr	r3, [pc, #556]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	4a8a      	ldr	r2, [pc, #552]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006342:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8108 	beq.w	800655e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	2b02      	cmp	r3, #2
 8006354:	f040 80d0 	bne.w	80064f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006358:	4b83      	ldr	r3, [pc, #524]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0203 	and.w	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	429a      	cmp	r2, r3
 800636a:	d130      	bne.n	80063ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	3b01      	subs	r3, #1
 8006378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	429a      	cmp	r2, r3
 800637c:	d127      	bne.n	80063ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d11f      	bne.n	80063ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006398:	2a07      	cmp	r2, #7
 800639a:	bf14      	ite	ne
 800639c:	2201      	movne	r2, #1
 800639e:	2200      	moveq	r2, #0
 80063a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d113      	bne.n	80063ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	3b01      	subs	r3, #1
 80063b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d109      	bne.n	80063ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	3b01      	subs	r3, #1
 80063c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d06e      	beq.n	80064ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d069      	beq.n	80064a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063d4:	4b64      	ldr	r3, [pc, #400]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0b7      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063f0:	4b5d      	ldr	r3, [pc, #372]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a5c      	ldr	r2, [pc, #368]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80063f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063fc:	f7fd fe68 	bl	80040d0 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006404:	f7fd fe64 	bl	80040d0 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e0a4      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006416:	4b54      	ldr	r3, [pc, #336]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006422:	4b51      	ldr	r3, [pc, #324]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	4b51      	ldr	r3, [pc, #324]	; (800656c <HAL_RCC_OscConfig+0x7c8>)
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006432:	3a01      	subs	r2, #1
 8006434:	0112      	lsls	r2, r2, #4
 8006436:	4311      	orrs	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800643c:	0212      	lsls	r2, r2, #8
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006444:	0852      	lsrs	r2, r2, #1
 8006446:	3a01      	subs	r2, #1
 8006448:	0552      	lsls	r2, r2, #21
 800644a:	4311      	orrs	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006450:	0852      	lsrs	r2, r2, #1
 8006452:	3a01      	subs	r2, #1
 8006454:	0652      	lsls	r2, r2, #25
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800645c:	0912      	lsrs	r2, r2, #4
 800645e:	0452      	lsls	r2, r2, #17
 8006460:	430a      	orrs	r2, r1
 8006462:	4941      	ldr	r1, [pc, #260]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006464:	4313      	orrs	r3, r2
 8006466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006468:	4b3f      	ldr	r3, [pc, #252]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3e      	ldr	r2, [pc, #248]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800646e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006474:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4a3b      	ldr	r2, [pc, #236]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800647a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800647e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006480:	f7fd fe26 	bl	80040d0 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006488:	f7fd fe22 	bl	80040d0 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e062      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649a:	4b33      	ldr	r3, [pc, #204]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064a6:	e05a      	b.n	800655e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e059      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ac:	4b2e      	ldr	r3, [pc, #184]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d152      	bne.n	800655e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80064b8:	4b2b      	ldr	r3, [pc, #172]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064c4:	4b28      	ldr	r3, [pc, #160]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4a27      	ldr	r2, [pc, #156]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064d0:	f7fd fdfe 	bl	80040d0 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fd fdfa 	bl	80040d0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e03a      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0f0      	beq.n	80064d8 <HAL_RCC_OscConfig+0x734>
 80064f6:	e032      	b.n	800655e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b0c      	cmp	r3, #12
 80064fc:	d02d      	beq.n	800655a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006508:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	4a13      	ldr	r2, [pc, #76]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	4a10      	ldr	r2, [pc, #64]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 8006528:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800652c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006530:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006532:	f7fd fdcd 	bl	80040d0 <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653a:	f7fd fdc9 	bl	80040d0 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e009      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <HAL_RCC_OscConfig+0x7c4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f0      	bne.n	800653a <HAL_RCC_OscConfig+0x796>
 8006558:	e001      	b.n	800655e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40021000 	.word	0x40021000
 800656c:	f99d808c 	.word	0xf99d808c

08006570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0c8      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006584:	4b66      	ldr	r3, [pc, #408]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d910      	bls.n	80065b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b63      	ldr	r3, [pc, #396]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f023 0207 	bic.w	r2, r3, #7
 800659a:	4961      	ldr	r1, [pc, #388]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b5f      	ldr	r3, [pc, #380]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0b0      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d04c      	beq.n	800665a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d107      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c8:	4b56      	ldr	r3, [pc, #344]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d121      	bne.n	8006618 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e09e      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d107      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065e0:	4b50      	ldr	r3, [pc, #320]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d115      	bne.n	8006618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e092      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065f8:	4b4a      	ldr	r3, [pc, #296]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d109      	bne.n	8006618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e086      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006608:	4b46      	ldr	r3, [pc, #280]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e07e      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006618:	4b42      	ldr	r3, [pc, #264]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f023 0203 	bic.w	r2, r3, #3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	493f      	ldr	r1, [pc, #252]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800662a:	f7fd fd51 	bl	80040d0 <HAL_GetTick>
 800662e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006630:	e00a      	b.n	8006648 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006632:	f7fd fd4d 	bl	80040d0 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e066      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006648:	4b36      	ldr	r3, [pc, #216]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 020c 	and.w	r2, r3, #12
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	429a      	cmp	r2, r3
 8006658:	d1eb      	bne.n	8006632 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d008      	beq.n	8006678 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006666:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	492c      	ldr	r1, [pc, #176]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 8006674:	4313      	orrs	r3, r2
 8006676:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006678:	4b29      	ldr	r3, [pc, #164]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d210      	bcs.n	80066a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b26      	ldr	r3, [pc, #152]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 0207 	bic.w	r2, r3, #7
 800668e:	4924      	ldr	r1, [pc, #144]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_RCC_ClockConfig+0x1b0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e036      	b.n	8006716 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b4:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4918      	ldr	r1, [pc, #96]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d2:	4b14      	ldr	r3, [pc, #80]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4910      	ldr	r1, [pc, #64]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066e6:	f000 f825 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 80066ea:	4602      	mov	r2, r0
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <HAL_RCC_ClockConfig+0x1b4>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	490c      	ldr	r1, [pc, #48]	; (8006728 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	5ccb      	ldrb	r3, [r1, r3]
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006702:	4a0a      	ldr	r2, [pc, #40]	; (800672c <HAL_RCC_ClockConfig+0x1bc>)
 8006704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd fc90 	bl	8004030 <HAL_InitTick>
 8006710:	4603      	mov	r3, r0
 8006712:	72fb      	strb	r3, [r7, #11]

  return status;
 8006714:	7afb      	ldrb	r3, [r7, #11]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40022000 	.word	0x40022000
 8006724:	40021000 	.word	0x40021000
 8006728:	0800b3a0 	.word	0x0800b3a0
 800672c:	200000c4 	.word	0x200000c4
 8006730:	200000f8 	.word	0x200000f8

08006734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006742:	4b3e      	ldr	r3, [pc, #248]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800674c:	4b3b      	ldr	r3, [pc, #236]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_GetSysClockFreq+0x34>
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d121      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d11e      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006774:	4b31      	ldr	r3, [pc, #196]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 8006776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800677a:	0a1b      	lsrs	r3, r3, #8
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e005      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006784:	4b2d      	ldr	r3, [pc, #180]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006790:	4a2b      	ldr	r2, [pc, #172]	; (8006840 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006798:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10d      	bne.n	80067bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d102      	bne.n	80067b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_RCC_GetSysClockFreq+0x110>)
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	e004      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d101      	bne.n	80067bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067b8:	4b23      	ldr	r3, [pc, #140]	; (8006848 <HAL_RCC_GetSysClockFreq+0x114>)
 80067ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b0c      	cmp	r3, #12
 80067c0:	d134      	bne.n	800682c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d003      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0xa6>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d003      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0xac>
 80067d8:	e005      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80067da:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <HAL_RCC_GetSysClockFreq+0x110>)
 80067dc:	617b      	str	r3, [r7, #20]
      break;
 80067de:	e005      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <HAL_RCC_GetSysClockFreq+0x114>)
 80067e2:	617b      	str	r3, [r7, #20]
      break;
 80067e4:	e002      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	617b      	str	r3, [r7, #20]
      break;
 80067ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ec:	4b13      	ldr	r3, [pc, #76]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	3301      	adds	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067fa:	4b10      	ldr	r3, [pc, #64]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	fb02 f203 	mul.w	r2, r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <HAL_RCC_GetSysClockFreq+0x108>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	0e5b      	lsrs	r3, r3, #25
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	3301      	adds	r3, #1
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800682c:	69bb      	ldr	r3, [r7, #24]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3724      	adds	r7, #36	; 0x24
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40021000 	.word	0x40021000
 8006840:	0800b3b8 	.word	0x0800b3b8
 8006844:	00f42400 	.word	0x00f42400
 8006848:	007a1200 	.word	0x007a1200

0800684c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006850:	4b03      	ldr	r3, [pc, #12]	; (8006860 <HAL_RCC_GetHCLKFreq+0x14>)
 8006852:	681b      	ldr	r3, [r3, #0]
}
 8006854:	4618      	mov	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	200000c4 	.word	0x200000c4

08006864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006868:	f7ff fff0 	bl	800684c <HAL_RCC_GetHCLKFreq>
 800686c:	4602      	mov	r2, r0
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	4904      	ldr	r1, [pc, #16]	; (800688c <HAL_RCC_GetPCLK1Freq+0x28>)
 800687a:	5ccb      	ldrb	r3, [r1, r3]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40021000 	.word	0x40021000
 800688c:	0800b3b0 	.word	0x0800b3b0

08006890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006894:	f7ff ffda 	bl	800684c <HAL_RCC_GetHCLKFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	0adb      	lsrs	r3, r3, #11
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	4904      	ldr	r1, [pc, #16]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40021000 	.word	0x40021000
 80068b8:	0800b3b0 	.word	0x0800b3b0

080068bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80068d4:	f7ff f936 	bl	8005b44 <HAL_PWREx_GetVoltageRange>
 80068d8:	6178      	str	r0, [r7, #20]
 80068da:	e014      	b.n	8006906 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	4a24      	ldr	r2, [pc, #144]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e6:	6593      	str	r3, [r2, #88]	; 0x58
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068f4:	f7ff f926 	bl	8005b44 <HAL_PWREx_GetVoltageRange>
 80068f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006904:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690c:	d10b      	bne.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d919      	bls.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2ba0      	cmp	r3, #160	; 0xa0
 8006918:	d902      	bls.n	8006920 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800691a:	2302      	movs	r3, #2
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e013      	b.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006920:	2301      	movs	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	e010      	b.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b80      	cmp	r3, #128	; 0x80
 800692a:	d902      	bls.n	8006932 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800692c:	2303      	movs	r3, #3
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	e00a      	b.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b80      	cmp	r3, #128	; 0x80
 8006936:	d102      	bne.n	800693e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006938:	2302      	movs	r3, #2
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	e004      	b.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d101      	bne.n	8006948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006944:	2301      	movs	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006948:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 0207 	bic.w	r2, r3, #7
 8006950:	4909      	ldr	r1, [pc, #36]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d001      	beq.n	800696a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	40022000 	.word	0x40022000

0800697c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006984:	2300      	movs	r3, #0
 8006986:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006988:	2300      	movs	r3, #0
 800698a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006994:	2b00      	cmp	r3, #0
 8006996:	d041      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069a0:	d02a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80069a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069a6:	d824      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ac:	d008      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b2:	d81e      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069bc:	d010      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069be:	e018      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069c0:	4b86      	ldr	r3, [pc, #536]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a85      	ldr	r2, [pc, #532]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069cc:	e015      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	2100      	movs	r1, #0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 facb 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069de:	e00c      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3320      	adds	r3, #32
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fbb6 	bl	8007158 <RCCEx_PLLSAI2_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069f0:	e003      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	74fb      	strb	r3, [r7, #19]
      break;
 80069f6:	e000      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069fa:	7cfb      	ldrb	r3, [r7, #19]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10b      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a00:	4b76      	ldr	r3, [pc, #472]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0e:	4973      	ldr	r1, [pc, #460]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a16:	e001      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d041      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a30:	d02a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a36:	d824      	bhi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a3c:	d008      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a42:	d81e      	bhi.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a4c:	d010      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a4e:	e018      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a50:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4a61      	ldr	r2, [pc, #388]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a5c:	e015      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fa83 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a6e:	e00c      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3320      	adds	r3, #32
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fb6e 	bl	8007158 <RCCEx_PLLSAI2_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a80:	e003      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	74fb      	strb	r3, [r7, #19]
      break;
 8006a86:	e000      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8a:	7cfb      	ldrb	r3, [r7, #19]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a90:	4b52      	ldr	r3, [pc, #328]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a9e:	494f      	ldr	r1, [pc, #316]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80a0 	beq.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aba:	2300      	movs	r3, #0
 8006abc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006abe:	4b47      	ldr	r3, [pc, #284]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00d      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ad4:	4b41      	ldr	r3, [pc, #260]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	4a40      	ldr	r2, [pc, #256]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ade:	6593      	str	r3, [r2, #88]	; 0x58
 8006ae0:	4b3e      	ldr	r3, [pc, #248]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aec:	2301      	movs	r3, #1
 8006aee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af0:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3a      	ldr	r2, [pc, #232]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006afc:	f7fd fae8 	bl	80040d0 <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b02:	e009      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b04:	f7fd fae4 	bl	80040d0 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d902      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	74fb      	strb	r3, [r7, #19]
        break;
 8006b16:	e005      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b18:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ef      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006b24:	7cfb      	ldrb	r3, [r7, #19]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d15c      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b2a:	4b2c      	ldr	r3, [pc, #176]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01f      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d019      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b48:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b54:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	4a20      	ldr	r2, [pc, #128]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b74:	4a19      	ldr	r2, [pc, #100]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fd faa3 	bl	80040d0 <HAL_GetTick>
 8006b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b8c:	e00b      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8e:	f7fd fa9f 	bl	80040d0 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d902      	bls.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8006ba4:	e006      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ec      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bba:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bca:	4904      	ldr	r1, [pc, #16]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bd2:	e009      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bd4:	7cfb      	ldrb	r3, [r7, #19]
 8006bd6:	74bb      	strb	r3, [r7, #18]
 8006bd8:	e006      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	7cfb      	ldrb	r3, [r7, #19]
 8006be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006be8:	7c7b      	ldrb	r3, [r7, #17]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d105      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bee:	4b9e      	ldr	r3, [pc, #632]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	4a9d      	ldr	r2, [pc, #628]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c06:	4b98      	ldr	r3, [pc, #608]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	f023 0203 	bic.w	r2, r3, #3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	4994      	ldr	r1, [pc, #592]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c28:	4b8f      	ldr	r3, [pc, #572]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2e:	f023 020c 	bic.w	r2, r3, #12
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	498c      	ldr	r1, [pc, #560]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	4983      	ldr	r1, [pc, #524]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c6c:	4b7e      	ldr	r3, [pc, #504]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	497b      	ldr	r1, [pc, #492]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c8e:	4b76      	ldr	r3, [pc, #472]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9c:	4972      	ldr	r1, [pc, #456]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cb0:	4b6d      	ldr	r3, [pc, #436]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	496a      	ldr	r1, [pc, #424]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cd2:	4b65      	ldr	r3, [pc, #404]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	4961      	ldr	r1, [pc, #388]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cf4:	4b5c      	ldr	r3, [pc, #368]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d02:	4959      	ldr	r1, [pc, #356]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d16:	4b54      	ldr	r3, [pc, #336]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	4950      	ldr	r1, [pc, #320]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d38:	4b4b      	ldr	r3, [pc, #300]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d46:	4948      	ldr	r1, [pc, #288]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d5a:	4b43      	ldr	r3, [pc, #268]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	493f      	ldr	r1, [pc, #252]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d028      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d7c:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8a:	4937      	ldr	r1, [pc, #220]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d9a:	d106      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d9c:	4b32      	ldr	r3, [pc, #200]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	4a31      	ldr	r2, [pc, #196]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006da6:	60d3      	str	r3, [r2, #12]
 8006da8:	e011      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db2:	d10c      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	2101      	movs	r1, #1
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f8d8 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dc4:	7cfb      	ldrb	r3, [r7, #19]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006dca:	7cfb      	ldrb	r3, [r7, #19]
 8006dcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de8:	491f      	ldr	r1, [pc, #124]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	4a1a      	ldr	r2, [pc, #104]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e04:	60d3      	str	r3, [r2, #12]
 8006e06:	e011      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e10:	d10c      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2101      	movs	r1, #1
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f8a9 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e22:	7cfb      	ldrb	r3, [r7, #19]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006e28:	7cfb      	ldrb	r3, [r7, #19]
 8006e2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	4908      	ldr	r1, [pc, #32]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e56:	d109      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a02      	ldr	r2, [pc, #8]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e62:	60d3      	str	r3, [r2, #12]
 8006e64:	e014      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e66:	bf00      	nop
 8006e68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f877 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e86:	7cfb      	ldrb	r3, [r7, #19]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d02f      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e9c:	4b2b      	ldr	r3, [pc, #172]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eaa:	4928      	ldr	r1, [pc, #160]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	2102      	movs	r1, #2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f854 	bl	8006f70 <RCCEx_PLLSAI1_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d014      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	74bb      	strb	r3, [r7, #18]
 8006ed6:	e011      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3320      	adds	r3, #32
 8006ee6:	2102      	movs	r1, #2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f935 	bl	8007158 <RCCEx_PLLSAI2_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ef2:	7cfb      	ldrb	r3, [r7, #19]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ef8:	7cfb      	ldrb	r3, [r7, #19]
 8006efa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f08:	4b10      	ldr	r3, [pc, #64]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f16:	490d      	ldr	r1, [pc, #52]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f2a:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f3a:	4904      	ldr	r1, [pc, #16]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f42:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40021000 	.word	0x40021000

08006f50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a04      	ldr	r2, [pc, #16]	; (8006f6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f5a:	f043 0304 	orr.w	r3, r3, #4
 8006f5e:	6013      	str	r3, [r2, #0]
}
 8006f60:	bf00      	nop
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40021000 	.word	0x40021000

08006f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f7e:	4b75      	ldr	r3, [pc, #468]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0303 	and.w	r3, r3, #3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f8a:	4b72      	ldr	r3, [pc, #456]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0203 	and.w	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d10d      	bne.n	8006fb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006fa2:	4b6c      	ldr	r3, [pc, #432]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	091b      	lsrs	r3, r3, #4
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d047      	beq.n	8007046 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	73fb      	strb	r3, [r7, #15]
 8006fba:	e044      	b.n	8007046 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d018      	beq.n	8006ff6 <RCCEx_PLLSAI1_Config+0x86>
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d825      	bhi.n	8007014 <RCCEx_PLLSAI1_Config+0xa4>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d002      	beq.n	8006fd2 <RCCEx_PLLSAI1_Config+0x62>
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d009      	beq.n	8006fe4 <RCCEx_PLLSAI1_Config+0x74>
 8006fd0:	e020      	b.n	8007014 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fd2:	4b60      	ldr	r3, [pc, #384]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d11d      	bne.n	800701a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fe2:	e01a      	b.n	800701a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fe4:	4b5b      	ldr	r3, [pc, #364]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d116      	bne.n	800701e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ff4:	e013      	b.n	800701e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ff6:	4b57      	ldr	r3, [pc, #348]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10f      	bne.n	8007022 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007002:	4b54      	ldr	r3, [pc, #336]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007012:	e006      	b.n	8007022 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e004      	b.n	8007024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800701a:	bf00      	nop
 800701c:	e002      	b.n	8007024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007022:	bf00      	nop
    }

    if(status == HAL_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800702a:	4b4a      	ldr	r3, [pc, #296]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	3b01      	subs	r3, #1
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	430b      	orrs	r3, r1
 8007040:	4944      	ldr	r1, [pc, #272]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007042:	4313      	orrs	r3, r2
 8007044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d17d      	bne.n	8007148 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800704c:	4b41      	ldr	r3, [pc, #260]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a40      	ldr	r2, [pc, #256]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007058:	f7fd f83a 	bl	80040d0 <HAL_GetTick>
 800705c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800705e:	e009      	b.n	8007074 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007060:	f7fd f836 	bl	80040d0 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d902      	bls.n	8007074 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	73fb      	strb	r3, [r7, #15]
        break;
 8007072:	e005      	b.n	8007080 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007074:	4b37      	ldr	r3, [pc, #220]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1ef      	bne.n	8007060 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d160      	bne.n	8007148 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d111      	bne.n	80070b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800708c:	4b31      	ldr	r3, [pc, #196]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6892      	ldr	r2, [r2, #8]
 800709c:	0211      	lsls	r1, r2, #8
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	68d2      	ldr	r2, [r2, #12]
 80070a2:	0912      	lsrs	r2, r2, #4
 80070a4:	0452      	lsls	r2, r2, #17
 80070a6:	430a      	orrs	r2, r1
 80070a8:	492a      	ldr	r1, [pc, #168]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	610b      	str	r3, [r1, #16]
 80070ae:	e027      	b.n	8007100 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d112      	bne.n	80070dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070b6:	4b27      	ldr	r3, [pc, #156]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6892      	ldr	r2, [r2, #8]
 80070c6:	0211      	lsls	r1, r2, #8
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6912      	ldr	r2, [r2, #16]
 80070cc:	0852      	lsrs	r2, r2, #1
 80070ce:	3a01      	subs	r2, #1
 80070d0:	0552      	lsls	r2, r2, #21
 80070d2:	430a      	orrs	r2, r1
 80070d4:	491f      	ldr	r1, [pc, #124]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	610b      	str	r3, [r1, #16]
 80070da:	e011      	b.n	8007100 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070dc:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6892      	ldr	r2, [r2, #8]
 80070ec:	0211      	lsls	r1, r2, #8
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6952      	ldr	r2, [r2, #20]
 80070f2:	0852      	lsrs	r2, r2, #1
 80070f4:	3a01      	subs	r2, #1
 80070f6:	0652      	lsls	r2, r2, #25
 80070f8:	430a      	orrs	r2, r1
 80070fa:	4916      	ldr	r1, [pc, #88]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800710a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710c:	f7fc ffe0 	bl	80040d0 <HAL_GetTick>
 8007110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007112:	e009      	b.n	8007128 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007114:	f7fc ffdc 	bl	80040d0 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d902      	bls.n	8007128 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]
          break;
 8007126:	e005      	b.n	8007134 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0ef      	beq.n	8007114 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800713a:	4b06      	ldr	r3, [pc, #24]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	4904      	ldr	r1, [pc, #16]	; (8007154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007144:	4313      	orrs	r3, r2
 8007146:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000

08007158 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007166:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d018      	beq.n	80071a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007172:	4b67      	ldr	r3, [pc, #412]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0203 	and.w	r2, r3, #3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d10d      	bne.n	800719e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
       ||
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800718a:	4b61      	ldr	r3, [pc, #388]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
       ||
 800719a:	429a      	cmp	r2, r3
 800719c:	d047      	beq.n	800722e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	73fb      	strb	r3, [r7, #15]
 80071a2:	e044      	b.n	800722e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d018      	beq.n	80071de <RCCEx_PLLSAI2_Config+0x86>
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d825      	bhi.n	80071fc <RCCEx_PLLSAI2_Config+0xa4>
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d002      	beq.n	80071ba <RCCEx_PLLSAI2_Config+0x62>
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d009      	beq.n	80071cc <RCCEx_PLLSAI2_Config+0x74>
 80071b8:	e020      	b.n	80071fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071ba:	4b55      	ldr	r3, [pc, #340]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d11d      	bne.n	8007202 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ca:	e01a      	b.n	8007202 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071cc:	4b50      	ldr	r3, [pc, #320]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d116      	bne.n	8007206 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071dc:	e013      	b.n	8007206 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071de:	4b4c      	ldr	r3, [pc, #304]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071ea:	4b49      	ldr	r3, [pc, #292]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071fa:	e006      	b.n	800720a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007200:	e004      	b.n	800720c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007202:	bf00      	nop
 8007204:	e002      	b.n	800720c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800720a:	bf00      	nop
    }

    if(status == HAL_OK)
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007212:	4b3f      	ldr	r3, [pc, #252]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6819      	ldr	r1, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	3b01      	subs	r3, #1
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	430b      	orrs	r3, r1
 8007228:	4939      	ldr	r1, [pc, #228]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800722a:	4313      	orrs	r3, r2
 800722c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d167      	bne.n	8007304 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007234:	4b36      	ldr	r3, [pc, #216]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a35      	ldr	r2, [pc, #212]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800723a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800723e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007240:	f7fc ff46 	bl	80040d0 <HAL_GetTick>
 8007244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007246:	e009      	b.n	800725c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007248:	f7fc ff42 	bl	80040d0 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d902      	bls.n	800725c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	73fb      	strb	r3, [r7, #15]
        break;
 800725a:	e005      	b.n	8007268 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800725c:	4b2c      	ldr	r3, [pc, #176]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1ef      	bne.n	8007248 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d14a      	bne.n	8007304 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d111      	bne.n	8007298 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007274:	4b26      	ldr	r3, [pc, #152]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800727c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6892      	ldr	r2, [r2, #8]
 8007284:	0211      	lsls	r1, r2, #8
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68d2      	ldr	r2, [r2, #12]
 800728a:	0912      	lsrs	r2, r2, #4
 800728c:	0452      	lsls	r2, r2, #17
 800728e:	430a      	orrs	r2, r1
 8007290:	491f      	ldr	r1, [pc, #124]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007292:	4313      	orrs	r3, r2
 8007294:	614b      	str	r3, [r1, #20]
 8007296:	e011      	b.n	80072bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007298:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80072a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6892      	ldr	r2, [r2, #8]
 80072a8:	0211      	lsls	r1, r2, #8
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6912      	ldr	r2, [r2, #16]
 80072ae:	0852      	lsrs	r2, r2, #1
 80072b0:	3a01      	subs	r2, #1
 80072b2:	0652      	lsls	r2, r2, #25
 80072b4:	430a      	orrs	r2, r1
 80072b6:	4916      	ldr	r1, [pc, #88]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80072bc:	4b14      	ldr	r3, [pc, #80]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a13      	ldr	r2, [pc, #76]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c8:	f7fc ff02 	bl	80040d0 <HAL_GetTick>
 80072cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072ce:	e009      	b.n	80072e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072d0:	f7fc fefe 	bl	80040d0 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d902      	bls.n	80072e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	73fb      	strb	r3, [r7, #15]
          break;
 80072e2:	e005      	b.n	80072f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0ef      	beq.n	80072d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80072f6:	4b06      	ldr	r3, [pc, #24]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072f8:	695a      	ldr	r2, [r3, #20]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	4904      	ldr	r1, [pc, #16]	; (8007310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007300:	4313      	orrs	r3, r2
 8007302:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40021000 	.word	0x40021000

08007314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e095      	b.n	8007452 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007336:	d009      	beq.n	800734c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	61da      	str	r2, [r3, #28]
 800733e:	e005      	b.n	800734c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f877 	bl	800745a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007382:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800738c:	d902      	bls.n	8007394 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e002      	b.n	800739a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007398:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073a2:	d007      	beq.n	80073b4 <HAL_SPI_Init+0xa0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	ea42 0103 	orr.w	r1, r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	f003 0204 	and.w	r2, r3, #4
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007430:	ea42 0103 	orr.w	r1, r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b08a      	sub	sp, #40	; 0x28
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800747c:	2301      	movs	r3, #1
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x26>
 8007490:	2302      	movs	r3, #2
 8007492:	e1fb      	b.n	800788c <HAL_SPI_TransmitReceive+0x41e>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800749c:	f7fc fe18 	bl	80040d0 <HAL_GetTick>
 80074a0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074a8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074b0:	887b      	ldrh	r3, [r7, #2]
 80074b2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80074b4:	887b      	ldrh	r3, [r7, #2]
 80074b6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074b8:	7efb      	ldrb	r3, [r7, #27]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d00e      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x6e>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d106      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x66>
 80074ce:	7efb      	ldrb	r3, [r7, #27]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d003      	beq.n	80074dc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80074d4:	2302      	movs	r3, #2
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80074da:	e1cd      	b.n	8007878 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_SPI_TransmitReceive+0x80>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <HAL_SPI_TransmitReceive+0x80>
 80074e8:	887b      	ldrh	r3, [r7, #2]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80074f4:	e1c0      	b.n	8007878 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d003      	beq.n	800750a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2205      	movs	r2, #5
 8007506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	887a      	ldrh	r2, [r7, #2]
 800751a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	887a      	ldrh	r2, [r7, #2]
 8007522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	887a      	ldrh	r2, [r7, #2]
 8007536:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800754c:	d802      	bhi.n	8007554 <HAL_SPI_TransmitReceive+0xe6>
 800754e:	8a3b      	ldrh	r3, [r7, #16]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d908      	bls.n	8007566 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	e007      	b.n	8007576 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d007      	beq.n	8007594 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800759c:	d97c      	bls.n	8007698 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x13e>
 80075a6:	8a7b      	ldrh	r3, [r7, #18]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d169      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	1c9a      	adds	r2, r3, #2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075d0:	e056      	b.n	8007680 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d11b      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x1aa>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x1aa>
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d113      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d11c      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x1f2>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	b292      	uxth	r2, r2
 800763e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800765c:	2301      	movs	r3, #1
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007660:	f7fc fd36 	bl	80040d0 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766c:	429a      	cmp	r2, r3
 800766e:	d807      	bhi.n	8007680 <HAL_SPI_TransmitReceive+0x212>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007676:	d003      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800767e:	e0fb      	b.n	8007878 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1a3      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x164>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d19d      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x164>
 8007696:	e0df      	b.n	8007858 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x23a>
 80076a0:	8a7b      	ldrh	r3, [r7, #18]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	f040 80cb 	bne.w	800783e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d912      	bls.n	80076d8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	1c9a      	adds	r2, r3, #2
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b02      	subs	r3, #2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d6:	e0b2      	b.n	800783e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fe:	e09e      	b.n	800783e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b02      	cmp	r3, #2
 800770c:	d134      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x30a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02f      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x30a>
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2b01      	cmp	r3, #1
 800771c:	d12c      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d912      	bls.n	800774e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	1c9a      	adds	r2, r3, #2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b02      	subs	r3, #2
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800774c:	e012      	b.n	8007774 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776a:	b29b      	uxth	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d148      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x3aa>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d042      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	d923      	bls.n	80077e6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	b292      	uxth	r2, r2
 80077aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	1c9a      	adds	r2, r3, #2
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b02      	subs	r3, #2
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d81f      	bhi.n	8007814 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	e016      	b.n	8007814 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f103 020c 	add.w	r2, r3, #12
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007814:	2301      	movs	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007818:	f7fc fc5a 	bl	80040d0 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007824:	429a      	cmp	r2, r3
 8007826:	d803      	bhi.n	8007830 <HAL_SPI_TransmitReceive+0x3c2>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x3c8>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800783c:	e01c      	b.n	8007878 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	f47f af5b 	bne.w	8007700 <HAL_SPI_TransmitReceive+0x292>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	f47f af54 	bne.w	8007700 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007858:	69fa      	ldr	r2, [r7, #28]
 800785a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f945 	bl	8007aec <SPI_EndRxTxTransaction>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	661a      	str	r2, [r3, #96]	; 0x60
 8007874:	e000      	b.n	8007878 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007876:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	; 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078a2:	b2db      	uxtb	r3, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078c0:	f7fc fc06 	bl	80040d0 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	1a9b      	subs	r3, r3, r2
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078d0:	f7fc fbfe 	bl	80040d0 <HAL_GetTick>
 80078d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078d6:	4b39      	ldr	r3, [pc, #228]	; (80079bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	015b      	lsls	r3, r3, #5
 80078dc:	0d1b      	lsrs	r3, r3, #20
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078e6:	e054      	b.n	8007992 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ee:	d050      	beq.n	8007992 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078f0:	f7fc fbee 	bl	80040d0 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d902      	bls.n	8007906 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d13d      	bne.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791e:	d111      	bne.n	8007944 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007928:	d004      	beq.n	8007934 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007932:	d107      	bne.n	8007944 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794c:	d10f      	bne.n	800796e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800796c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e017      	b.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	3b01      	subs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	bf0c      	ite	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	2300      	movne	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d19b      	bne.n	80078e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	200000c4 	.word	0x200000c4

080079c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079d2:	f7fc fb7d 	bl	80040d0 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80079e2:	f7fc fb75 	bl	80040d0 <HAL_GetTick>
 80079e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079f0:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	00da      	lsls	r2, r3, #3
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	0d1b      	lsrs	r3, r3, #20
 8007a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a08:	e060      	b.n	8007acc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a10:	d107      	bne.n	8007a22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d050      	beq.n	8007acc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a2a:	f7fc fb51 	bl	80040d0 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d902      	bls.n	8007a40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d13d      	bne.n	8007abc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a58:	d111      	bne.n	8007a7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a62:	d004      	beq.n	8007a6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6c:	d107      	bne.n	8007a7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a86:	d10f      	bne.n	8007aa8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aa6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e010      	b.n	8007ade <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d196      	bne.n	8007a0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3728      	adds	r7, #40	; 0x28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200000c4 	.word	0x200000c4

08007aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff ff5b 	bl	80079c0 <SPI_WaitFifoStateUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e027      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2180      	movs	r1, #128	; 0x80
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff fec0 	bl	80078b0 <SPI_WaitFlagStateUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e014      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff ff34 	bl	80079c0 <SPI_WaitFifoStateUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e000      	b.n	8007b70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e040      	b.n	8007c0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f83a 	bl	8007c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	; 0x24
 8007ba4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8ca 	bl	8007d50 <UART_SetConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e022      	b.n	8007c0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb48 	bl	8008264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fbcf 	bl	80083a8 <UART_CheckIdleState>
 8007c0a:	4603      	mov	r3, r0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	f040 8082 	bne.w	8007d46 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_UART_Transmit+0x26>
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e07a      	b.n	8007d48 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_UART_Transmit+0x38>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e073      	b.n	8007d48 <HAL_UART_Transmit+0x120>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2221      	movs	r2, #33	; 0x21
 8007c74:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c76:	f7fc fa2b 	bl	80040d0 <HAL_GetTick>
 8007c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	88fa      	ldrh	r2, [r7, #6]
 8007c80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c94:	d108      	bne.n	8007ca8 <HAL_UART_Transmit+0x80>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	e003      	b.n	8007cb0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007cb8:	e02d      	b.n	8007d16 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2180      	movs	r1, #128	; 0x80
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fbb8 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e039      	b.n	8007d48 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	881a      	ldrh	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ce6:	b292      	uxth	r2, r2
 8007ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	3302      	adds	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e008      	b.n	8007d04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	b292      	uxth	r2, r2
 8007cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3301      	adds	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1cb      	bne.n	8007cba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2140      	movs	r1, #64	; 0x40
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fb84 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e005      	b.n	8007d48 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e000      	b.n	8007d48 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007d46:	2302      	movs	r3, #2
  }
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3720      	adds	r7, #32
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d50:	b5b0      	push	{r4, r5, r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4bad      	ldr	r3, [pc, #692]	; (8008030 <UART_SetConfig+0x2e0>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	69f9      	ldr	r1, [r7, #28]
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4aa2      	ldr	r2, [pc, #648]	; (8008034 <UART_SetConfig+0x2e4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a99      	ldr	r2, [pc, #612]	; (8008038 <UART_SetConfig+0x2e8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d121      	bne.n	8007e1a <UART_SetConfig+0xca>
 8007dd6:	4b99      	ldr	r3, [pc, #612]	; (800803c <UART_SetConfig+0x2ec>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d817      	bhi.n	8007e14 <UART_SetConfig+0xc4>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <UART_SetConfig+0x9c>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007dfd 	.word	0x08007dfd
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e03 	.word	0x08007e03
 8007df8:	08007e0f 	.word	0x08007e0f
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	76fb      	strb	r3, [r7, #27]
 8007e00:	e0e7      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e02:	2302      	movs	r3, #2
 8007e04:	76fb      	strb	r3, [r7, #27]
 8007e06:	e0e4      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	76fb      	strb	r3, [r7, #27]
 8007e0c:	e0e1      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e0e:	2308      	movs	r3, #8
 8007e10:	76fb      	strb	r3, [r7, #27]
 8007e12:	e0de      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e14:	2310      	movs	r3, #16
 8007e16:	76fb      	strb	r3, [r7, #27]
 8007e18:	e0db      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a88      	ldr	r2, [pc, #544]	; (8008040 <UART_SetConfig+0x2f0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d132      	bne.n	8007e8a <UART_SetConfig+0x13a>
 8007e24:	4b85      	ldr	r3, [pc, #532]	; (800803c <UART_SetConfig+0x2ec>)
 8007e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e2a:	f003 030c 	and.w	r3, r3, #12
 8007e2e:	2b0c      	cmp	r3, #12
 8007e30:	d828      	bhi.n	8007e84 <UART_SetConfig+0x134>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <UART_SetConfig+0xe8>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007e85 	.word	0x08007e85
 8007e40:	08007e85 	.word	0x08007e85
 8007e44:	08007e85 	.word	0x08007e85
 8007e48:	08007e79 	.word	0x08007e79
 8007e4c:	08007e85 	.word	0x08007e85
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007e85 	.word	0x08007e85
 8007e58:	08007e73 	.word	0x08007e73
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e85 	.word	0x08007e85
 8007e68:	08007e7f 	.word	0x08007e7f
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	76fb      	strb	r3, [r7, #27]
 8007e70:	e0af      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e72:	2302      	movs	r3, #2
 8007e74:	76fb      	strb	r3, [r7, #27]
 8007e76:	e0ac      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e78:	2304      	movs	r3, #4
 8007e7a:	76fb      	strb	r3, [r7, #27]
 8007e7c:	e0a9      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e7e:	2308      	movs	r3, #8
 8007e80:	76fb      	strb	r3, [r7, #27]
 8007e82:	e0a6      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e84:	2310      	movs	r3, #16
 8007e86:	76fb      	strb	r3, [r7, #27]
 8007e88:	e0a3      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a6d      	ldr	r2, [pc, #436]	; (8008044 <UART_SetConfig+0x2f4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d120      	bne.n	8007ed6 <UART_SetConfig+0x186>
 8007e94:	4b69      	ldr	r3, [pc, #420]	; (800803c <UART_SetConfig+0x2ec>)
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e9e:	2b30      	cmp	r3, #48	; 0x30
 8007ea0:	d013      	beq.n	8007eca <UART_SetConfig+0x17a>
 8007ea2:	2b30      	cmp	r3, #48	; 0x30
 8007ea4:	d814      	bhi.n	8007ed0 <UART_SetConfig+0x180>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d009      	beq.n	8007ebe <UART_SetConfig+0x16e>
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d810      	bhi.n	8007ed0 <UART_SetConfig+0x180>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <UART_SetConfig+0x168>
 8007eb2:	2b10      	cmp	r3, #16
 8007eb4:	d006      	beq.n	8007ec4 <UART_SetConfig+0x174>
 8007eb6:	e00b      	b.n	8007ed0 <UART_SetConfig+0x180>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	76fb      	strb	r3, [r7, #27]
 8007ebc:	e089      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	76fb      	strb	r3, [r7, #27]
 8007ec2:	e086      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	76fb      	strb	r3, [r7, #27]
 8007ec8:	e083      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007eca:	2308      	movs	r3, #8
 8007ecc:	76fb      	strb	r3, [r7, #27]
 8007ece:	e080      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	76fb      	strb	r3, [r7, #27]
 8007ed4:	e07d      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a5b      	ldr	r2, [pc, #364]	; (8008048 <UART_SetConfig+0x2f8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d120      	bne.n	8007f22 <UART_SetConfig+0x1d2>
 8007ee0:	4b56      	ldr	r3, [pc, #344]	; (800803c <UART_SetConfig+0x2ec>)
 8007ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007eea:	2bc0      	cmp	r3, #192	; 0xc0
 8007eec:	d013      	beq.n	8007f16 <UART_SetConfig+0x1c6>
 8007eee:	2bc0      	cmp	r3, #192	; 0xc0
 8007ef0:	d814      	bhi.n	8007f1c <UART_SetConfig+0x1cc>
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d009      	beq.n	8007f0a <UART_SetConfig+0x1ba>
 8007ef6:	2b80      	cmp	r3, #128	; 0x80
 8007ef8:	d810      	bhi.n	8007f1c <UART_SetConfig+0x1cc>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <UART_SetConfig+0x1b4>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d006      	beq.n	8007f10 <UART_SetConfig+0x1c0>
 8007f02:	e00b      	b.n	8007f1c <UART_SetConfig+0x1cc>
 8007f04:	2300      	movs	r3, #0
 8007f06:	76fb      	strb	r3, [r7, #27]
 8007f08:	e063      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	76fb      	strb	r3, [r7, #27]
 8007f0e:	e060      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f10:	2304      	movs	r3, #4
 8007f12:	76fb      	strb	r3, [r7, #27]
 8007f14:	e05d      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f16:	2308      	movs	r3, #8
 8007f18:	76fb      	strb	r3, [r7, #27]
 8007f1a:	e05a      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	76fb      	strb	r3, [r7, #27]
 8007f20:	e057      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a49      	ldr	r2, [pc, #292]	; (800804c <UART_SetConfig+0x2fc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d125      	bne.n	8007f78 <UART_SetConfig+0x228>
 8007f2c:	4b43      	ldr	r3, [pc, #268]	; (800803c <UART_SetConfig+0x2ec>)
 8007f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3a:	d017      	beq.n	8007f6c <UART_SetConfig+0x21c>
 8007f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f40:	d817      	bhi.n	8007f72 <UART_SetConfig+0x222>
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f46:	d00b      	beq.n	8007f60 <UART_SetConfig+0x210>
 8007f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f4c:	d811      	bhi.n	8007f72 <UART_SetConfig+0x222>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <UART_SetConfig+0x20a>
 8007f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f56:	d006      	beq.n	8007f66 <UART_SetConfig+0x216>
 8007f58:	e00b      	b.n	8007f72 <UART_SetConfig+0x222>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	76fb      	strb	r3, [r7, #27]
 8007f5e:	e038      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f60:	2302      	movs	r3, #2
 8007f62:	76fb      	strb	r3, [r7, #27]
 8007f64:	e035      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f66:	2304      	movs	r3, #4
 8007f68:	76fb      	strb	r3, [r7, #27]
 8007f6a:	e032      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	76fb      	strb	r3, [r7, #27]
 8007f70:	e02f      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f72:	2310      	movs	r3, #16
 8007f74:	76fb      	strb	r3, [r7, #27]
 8007f76:	e02c      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <UART_SetConfig+0x2e4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d125      	bne.n	8007fce <UART_SetConfig+0x27e>
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <UART_SetConfig+0x2ec>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f90:	d017      	beq.n	8007fc2 <UART_SetConfig+0x272>
 8007f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f96:	d817      	bhi.n	8007fc8 <UART_SetConfig+0x278>
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9c:	d00b      	beq.n	8007fb6 <UART_SetConfig+0x266>
 8007f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa2:	d811      	bhi.n	8007fc8 <UART_SetConfig+0x278>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d003      	beq.n	8007fb0 <UART_SetConfig+0x260>
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fac:	d006      	beq.n	8007fbc <UART_SetConfig+0x26c>
 8007fae:	e00b      	b.n	8007fc8 <UART_SetConfig+0x278>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	76fb      	strb	r3, [r7, #27]
 8007fb4:	e00d      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	76fb      	strb	r3, [r7, #27]
 8007fba:	e00a      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	76fb      	strb	r3, [r7, #27]
 8007fc0:	e007      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007fc2:	2308      	movs	r3, #8
 8007fc4:	76fb      	strb	r3, [r7, #27]
 8007fc6:	e004      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007fc8:	2310      	movs	r3, #16
 8007fca:	76fb      	strb	r3, [r7, #27]
 8007fcc:	e001      	b.n	8007fd2 <UART_SetConfig+0x282>
 8007fce:	2310      	movs	r3, #16
 8007fd0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a17      	ldr	r2, [pc, #92]	; (8008034 <UART_SetConfig+0x2e4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	f040 8087 	bne.w	80080ec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fde:	7efb      	ldrb	r3, [r7, #27]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d837      	bhi.n	8008054 <UART_SetConfig+0x304>
 8007fe4:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <UART_SetConfig+0x29c>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	08008055 	.word	0x08008055
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008055 	.word	0x08008055
 8007ffc:	0800801f 	.word	0x0800801f
 8008000:	08008055 	.word	0x08008055
 8008004:	08008055 	.word	0x08008055
 8008008:	08008055 	.word	0x08008055
 800800c:	08008027 	.word	0x08008027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008010:	f7fe fc28 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 8008014:	6178      	str	r0, [r7, #20]
        break;
 8008016:	e022      	b.n	800805e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008018:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <UART_SetConfig+0x300>)
 800801a:	617b      	str	r3, [r7, #20]
        break;
 800801c:	e01f      	b.n	800805e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800801e:	f7fe fb89 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8008022:	6178      	str	r0, [r7, #20]
        break;
 8008024:	e01b      	b.n	800805e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800802a:	617b      	str	r3, [r7, #20]
        break;
 800802c:	e017      	b.n	800805e <UART_SetConfig+0x30e>
 800802e:	bf00      	nop
 8008030:	efff69f3 	.word	0xefff69f3
 8008034:	40008000 	.word	0x40008000
 8008038:	40013800 	.word	0x40013800
 800803c:	40021000 	.word	0x40021000
 8008040:	40004400 	.word	0x40004400
 8008044:	40004800 	.word	0x40004800
 8008048:	40004c00 	.word	0x40004c00
 800804c:	40005000 	.word	0x40005000
 8008050:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	76bb      	strb	r3, [r7, #26]
        break;
 800805c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80f1 	beq.w	8008248 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	429a      	cmp	r2, r3
 8008074:	d305      	bcc.n	8008082 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	429a      	cmp	r2, r3
 8008080:	d902      	bls.n	8008088 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	76bb      	strb	r3, [r7, #26]
 8008086:	e0df      	b.n	8008248 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	4618      	mov	r0, r3
 800808c:	f04f 0100 	mov.w	r1, #0
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	020b      	lsls	r3, r1, #8
 800809a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800809e:	0202      	lsls	r2, r0, #8
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	6849      	ldr	r1, [r1, #4]
 80080a4:	0849      	lsrs	r1, r1, #1
 80080a6:	4608      	mov	r0, r1
 80080a8:	f04f 0100 	mov.w	r1, #0
 80080ac:	1814      	adds	r4, r2, r0
 80080ae:	eb43 0501 	adc.w	r5, r3, r1
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 fb12 	bl	80006e8 <__aeabi_uldivmod>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4613      	mov	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080d2:	d308      	bcc.n	80080e6 <UART_SetConfig+0x396>
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080da:	d204      	bcs.n	80080e6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	60da      	str	r2, [r3, #12]
 80080e4:	e0b0      	b.n	8008248 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	76bb      	strb	r3, [r7, #26]
 80080ea:	e0ad      	b.n	8008248 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	d15b      	bne.n	80081ae <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80080f6:	7efb      	ldrb	r3, [r7, #27]
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d828      	bhi.n	800814e <UART_SetConfig+0x3fe>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x3b4>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008129 	.word	0x08008129
 8008108:	08008131 	.word	0x08008131
 800810c:	08008139 	.word	0x08008139
 8008110:	0800814f 	.word	0x0800814f
 8008114:	0800813f 	.word	0x0800813f
 8008118:	0800814f 	.word	0x0800814f
 800811c:	0800814f 	.word	0x0800814f
 8008120:	0800814f 	.word	0x0800814f
 8008124:	08008147 	.word	0x08008147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008128:	f7fe fb9c 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 800812c:	6178      	str	r0, [r7, #20]
        break;
 800812e:	e013      	b.n	8008158 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008130:	f7fe fbae 	bl	8006890 <HAL_RCC_GetPCLK2Freq>
 8008134:	6178      	str	r0, [r7, #20]
        break;
 8008136:	e00f      	b.n	8008158 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008138:	4b49      	ldr	r3, [pc, #292]	; (8008260 <UART_SetConfig+0x510>)
 800813a:	617b      	str	r3, [r7, #20]
        break;
 800813c:	e00c      	b.n	8008158 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800813e:	f7fe faf9 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8008142:	6178      	str	r0, [r7, #20]
        break;
 8008144:	e008      	b.n	8008158 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800814a:	617b      	str	r3, [r7, #20]
        break;
 800814c:	e004      	b.n	8008158 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	76bb      	strb	r3, [r7, #26]
        break;
 8008156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d074      	beq.n	8008248 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	005a      	lsls	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	085b      	lsrs	r3, r3, #1
 8008168:	441a      	add	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008172:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d916      	bls.n	80081a8 <UART_SetConfig+0x458>
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008180:	d212      	bcs.n	80081a8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	b29b      	uxth	r3, r3
 8008186:	f023 030f 	bic.w	r3, r3, #15
 800818a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	085b      	lsrs	r3, r3, #1
 8008190:	b29b      	uxth	r3, r3
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	b29a      	uxth	r2, r3
 8008198:	89fb      	ldrh	r3, [r7, #14]
 800819a:	4313      	orrs	r3, r2
 800819c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	89fa      	ldrh	r2, [r7, #14]
 80081a4:	60da      	str	r2, [r3, #12]
 80081a6:	e04f      	b.n	8008248 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	76bb      	strb	r3, [r7, #26]
 80081ac:	e04c      	b.n	8008248 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ae:	7efb      	ldrb	r3, [r7, #27]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d828      	bhi.n	8008206 <UART_SetConfig+0x4b6>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <UART_SetConfig+0x46c>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	08008207 	.word	0x08008207
 80081cc:	080081f7 	.word	0x080081f7
 80081d0:	08008207 	.word	0x08008207
 80081d4:	08008207 	.word	0x08008207
 80081d8:	08008207 	.word	0x08008207
 80081dc:	080081ff 	.word	0x080081ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e0:	f7fe fb40 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 80081e4:	6178      	str	r0, [r7, #20]
        break;
 80081e6:	e013      	b.n	8008210 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081e8:	f7fe fb52 	bl	8006890 <HAL_RCC_GetPCLK2Freq>
 80081ec:	6178      	str	r0, [r7, #20]
        break;
 80081ee:	e00f      	b.n	8008210 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f0:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <UART_SetConfig+0x510>)
 80081f2:	617b      	str	r3, [r7, #20]
        break;
 80081f4:	e00c      	b.n	8008210 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f6:	f7fe fa9d 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 80081fa:	6178      	str	r0, [r7, #20]
        break;
 80081fc:	e008      	b.n	8008210 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008202:	617b      	str	r3, [r7, #20]
        break;
 8008204:	e004      	b.n	8008210 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	76bb      	strb	r3, [r7, #26]
        break;
 800820e:	bf00      	nop
    }

    if (pclk != 0U)
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	085a      	lsrs	r2, r3, #1
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	441a      	add	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b0f      	cmp	r3, #15
 800822e:	d909      	bls.n	8008244 <UART_SetConfig+0x4f4>
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008236:	d205      	bcs.n	8008244 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	b29a      	uxth	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e001      	b.n	8008248 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008254:	7ebb      	ldrb	r3, [r7, #26]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bdb0      	pop	{r4, r5, r7, pc}
 800825e:	bf00      	nop
 8008260:	00f42400 	.word	0x00f42400

08008264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	f003 0308 	and.w	r3, r3, #8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01a      	beq.n	800837a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008362:	d10a      	bne.n	800837a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083b8:	f7fb fe8a 	bl	80040d0 <HAL_GetTick>
 80083bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d10e      	bne.n	80083ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f82d 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e023      	b.n	8008432 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d10e      	bne.n	8008416 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f817 	bl	800843a <UART_WaitOnFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e00d      	b.n	8008432 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b09c      	sub	sp, #112	; 0x70
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800844a:	e0a5      	b.n	8008598 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800844c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	f000 80a1 	beq.w	8008598 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008456:	f7fb fe3b 	bl	80040d0 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008462:	429a      	cmp	r2, r3
 8008464:	d302      	bcc.n	800846c <UART_WaitOnFlagUntilTimeout+0x32>
 8008466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008468:	2b00      	cmp	r3, #0
 800846a:	d13e      	bne.n	80084ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008480:	667b      	str	r3, [r7, #100]	; 0x64
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800848a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800848c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e6      	bne.n	800846c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3308      	adds	r3, #8
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	663b      	str	r3, [r7, #96]	; 0x60
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084be:	64ba      	str	r2, [r7, #72]	; 0x48
 80084c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e067      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d04f      	beq.n	8008598 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008506:	d147      	bne.n	8008598 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008510:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	461a      	mov	r2, r3
 800852e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
 8008532:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e6      	bne.n	8008512 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	613b      	str	r3, [r7, #16]
   return(result);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 0301 	bic.w	r3, r3, #1
 800855a:	66bb      	str	r3, [r7, #104]	; 0x68
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3308      	adds	r3, #8
 8008562:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008564:	623a      	str	r2, [r7, #32]
 8008566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	6a3a      	ldr	r2, [r7, #32]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	61bb      	str	r3, [r7, #24]
   return(result);
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e010      	b.n	80085ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69da      	ldr	r2, [r3, #28]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4013      	ands	r3, r2
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	f43f af4a 	beq.w	800844c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3770      	adds	r7, #112	; 0x70
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085c2:	b084      	sub	sp, #16
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	f107 001c 	add.w	r0, r7, #28
 80085d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa6b 	bl	8008abc <USB_CoreReset>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80085ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
 80085fc:	e005      	b.n	800860a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008616:	b004      	add	sp, #16
 8008618:	4770      	bx	lr

0800861a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f023 0201 	bic.w	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d115      	bne.n	800868a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800866a:	2001      	movs	r0, #1
 800866c:	f7fb fd3c 	bl	80040e8 <HAL_Delay>
      ms++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa12 	bl	8008aa0 <USB_GetMode>
 800867c:	4603      	mov	r3, r0
 800867e:	2b01      	cmp	r3, #1
 8008680:	d01e      	beq.n	80086c0 <USB_SetCurrentMode+0x84>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b31      	cmp	r3, #49	; 0x31
 8008686:	d9f0      	bls.n	800866a <USB_SetCurrentMode+0x2e>
 8008688:	e01a      	b.n	80086c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d115      	bne.n	80086bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800869c:	2001      	movs	r0, #1
 800869e:	f7fb fd23 	bl	80040e8 <HAL_Delay>
      ms++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f9f9 	bl	8008aa0 <USB_GetMode>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <USB_SetCurrentMode+0x84>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b31      	cmp	r3, #49	; 0x31
 80086b8:	d9f0      	bls.n	800869c <USB_SetCurrentMode+0x60>
 80086ba:	e001      	b.n	80086c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e005      	b.n	80086cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b32      	cmp	r3, #50	; 0x32
 80086c4:	d101      	bne.n	80086ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086d4:	b084      	sub	sp, #16
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	e009      	b.n	8008708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3340      	adds	r3, #64	; 0x40
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	3301      	adds	r3, #1
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b0e      	cmp	r3, #14
 800870c:	d9f2      	bls.n	80086f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11c      	bne.n	800874e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008722:	f043 0302 	orr.w	r3, r3, #2
 8008726:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e005      	b.n	800875a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008760:	461a      	mov	r2, r3
 8008762:	2300      	movs	r3, #0
 8008764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	4619      	mov	r1, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	461a      	mov	r2, r3
 8008776:	680b      	ldr	r3, [r1, #0]
 8008778:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800877a:	2103      	movs	r1, #3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f955 	bl	8008a2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008782:	2110      	movs	r1, #16
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8f1 	bl	800896c <USB_FlushTxFifo>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f91b 	bl	80089d0 <USB_FlushRxFifo>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087aa:	461a      	mov	r2, r3
 80087ac:	2300      	movs	r3, #0
 80087ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	461a      	mov	r2, r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	461a      	mov	r2, r3
 80087c4:	2300      	movs	r3, #0
 80087c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087c8:	2300      	movs	r3, #0
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	e043      	b.n	8008856 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e4:	d118      	bne.n	8008818 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f8:	461a      	mov	r2, r3
 80087fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	e013      	b.n	800882a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880e:	461a      	mov	r2, r3
 8008810:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	e008      	b.n	800882a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008836:	461a      	mov	r2, r3
 8008838:	2300      	movs	r3, #0
 800883a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	461a      	mov	r2, r3
 800884a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800884e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	3301      	adds	r3, #1
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	429a      	cmp	r2, r3
 800885c:	d3b7      	bcc.n	80087ce <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	e043      	b.n	80088ec <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887a:	d118      	bne.n	80088ae <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888e:	461a      	mov	r2, r3
 8008890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e013      	b.n	80088c0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	461a      	mov	r2, r3
 80088a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e008      	b.n	80088c0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	461a      	mov	r2, r3
 80088ce:	2300      	movs	r3, #0
 80088d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088de:	461a      	mov	r2, r3
 80088e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3301      	adds	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d3b7      	bcc.n	8008864 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008906:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008914:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f043 0210 	orr.w	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699a      	ldr	r2, [r3, #24]
 8008926:	4b10      	ldr	r3, [pc, #64]	; (8008968 <USB_DevInit+0x294>)
 8008928:	4313      	orrs	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800892e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	f043 0208 	orr.w	r2, r3, #8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d107      	bne.n	8008956 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800894e:	f043 0304 	orr.w	r3, r3, #4
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008962:	b004      	add	sp, #16
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	803c3800 	.word	0x803c3800

0800896c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3301      	adds	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	4a12      	ldr	r2, [pc, #72]	; (80089cc <USB_FlushTxFifo+0x60>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e01a      	b.n	80089c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	daf3      	bge.n	800897a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	019b      	lsls	r3, r3, #6
 800899a:	f043 0220 	orr.w	r2, r3, #32
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	4a08      	ldr	r2, [pc, #32]	; (80089cc <USB_FlushTxFifo+0x60>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d901      	bls.n	80089b2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e006      	b.n	80089c0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d0f1      	beq.n	80089a2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	00030d40 	.word	0x00030d40

080089d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	4a11      	ldr	r2, [pc, #68]	; (8008a28 <USB_FlushRxFifo+0x58>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d901      	bls.n	80089ec <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e017      	b.n	8008a1c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	daf3      	bge.n	80089dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2210      	movs	r2, #16
 80089fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <USB_FlushRxFifo+0x58>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d901      	bls.n	8008a0e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e006      	b.n	8008a1c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d0f1      	beq.n	80089fe <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	00030d40 	.word	0x00030d40

08008a2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	68f9      	ldr	r1, [r7, #12]
 8008a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a78:	f023 0303 	bic.w	r3, r3, #3
 8008a7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	f003 0301 	and.w	r3, r3, #1
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <USB_CoreReset+0x60>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d901      	bls.n	8008ad8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e01a      	b.n	8008b0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	daf3      	bge.n	8008ac8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	4a09      	ldr	r2, [pc, #36]	; (8008b1c <USB_CoreReset+0x60>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d901      	bls.n	8008b00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e006      	b.n	8008b0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d0f1      	beq.n	8008af0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	00030d40 	.word	0x00030d40

08008b20 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08c      	sub	sp, #48	; 0x30
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	4603      	mov	r3, r0
 8008b2a:	71fb      	strb	r3, [r7, #7]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	71bb      	strb	r3, [r7, #6]
 8008b30:	4613      	mov	r3, r2
 8008b32:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8008b38:	79bb      	ldrb	r3, [r7, #6]
 8008b3a:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8008b3c:	797b      	ldrb	r3, [r7, #5]
 8008b3e:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b40:	f107 030c 	add.w	r3, r7, #12
 8008b44:	2207      	movs	r2, #7
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f001 f9b1 	bl	8009eb0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b4e:	f107 0318 	add.w	r3, r7, #24
 8008b52:	2218      	movs	r2, #24
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 f9aa 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b5c:	233f      	movs	r3, #63	; 0x3f
 8008b5e:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008b60:	238a      	movs	r3, #138	; 0x8a
 8008b62:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008b64:	f107 0314 	add.w	r3, r7, #20
 8008b68:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8008b6e:	f107 030c 	add.w	r3, r7, #12
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008b74:	2307      	movs	r3, #7
 8008b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b78:	f107 0318 	add.w	r3, r7, #24
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 feb4 	bl	80098ec <hci_send_req>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da01      	bge.n	8008b8e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008b8a:	23ff      	movs	r3, #255	; 0xff
 8008b8c:	e014      	b.n	8008bb8 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008b8e:	7b3b      	ldrb	r3, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008b94:	7b3b      	ldrb	r3, [r7, #12]
 8008b96:	e00f      	b.n	8008bb8 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008b98:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008ba2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008bac:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3730      	adds	r7, #48	; 0x30
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08e      	sub	sp, #56	; 0x38
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bd4:	f107 0314 	add.w	r3, r7, #20
 8008bd8:	2207      	movs	r2, #7
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f967 	bl	8009eb0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008be2:	f107 0320 	add.w	r3, r7, #32
 8008be6:	2218      	movs	r2, #24
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 f960 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bf0:	233f      	movs	r3, #63	; 0x3f
 8008bf2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8008bf4:	238a      	movs	r3, #138	; 0x8a
 8008bf6:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8008bf8:	f107 031c 	add.w	r3, r7, #28
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8008bfe:	2301      	movs	r3, #1
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008c02:	f107 0314 	add.w	r3, r7, #20
 8008c06:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8008c08:	2307      	movs	r3, #7
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c0c:	f107 0320 	add.w	r3, r7, #32
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fe6a 	bl	80098ec <hci_send_req>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	da01      	bge.n	8008c22 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008c1e:	23ff      	movs	r3, #255	; 0xff
 8008c20:	e014      	b.n	8008c4c <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008c22:	7d3b      	ldrb	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8008c28:	7d3b      	ldrb	r3, [r7, #20]
 8008c2a:	e00f      	b.n	8008c4c <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008c2c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008c36:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008c40:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3738      	adds	r7, #56	; 0x38
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b095      	sub	sp, #84	; 0x54
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	4623      	mov	r3, r4
 8008c64:	71fb      	strb	r3, [r7, #7]
 8008c66:	4603      	mov	r3, r0
 8008c68:	80bb      	strh	r3, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	807b      	strh	r3, [r7, #2]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8008c78:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008c7c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008c80:	4413      	add	r3, r2
 8008c82:	330e      	adds	r3, #14
 8008c84:	2b28      	cmp	r3, #40	; 0x28
 8008c86:	d901      	bls.n	8008c8c <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8008c88:	2342      	movs	r3, #66	; 0x42
 8008c8a:	e0ce      	b.n	8008e2a <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8008c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008c90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c94:	4413      	add	r3, r2
 8008c96:	79fa      	ldrb	r2, [r7, #7]
 8008c98:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008ca6:	88bb      	ldrh	r3, [r7, #4]
 8008ca8:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008caa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cae:	f107 0208 	add.w	r2, r7, #8
 8008cb2:	4413      	add	r3, r2
 8008cb4:	88ba      	ldrh	r2, [r7, #4]
 8008cb6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008cb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cbc:	3302      	adds	r3, #2
 8008cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008cc2:	887b      	ldrh	r3, [r7, #2]
 8008cc4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008cc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cca:	f107 0208 	add.w	r2, r7, #8
 8008cce:	4413      	add	r3, r2
 8008cd0:	887a      	ldrh	r2, [r7, #2]
 8008cd2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008cd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cd8:	3302      	adds	r3, #2
 8008cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8008cde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ce2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008ce6:	4413      	add	r3, r2
 8008ce8:	79ba      	ldrb	r2, [r7, #6]
 8008cea:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008cee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008cf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008cfc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d00:	4413      	add	r3, r2
 8008d02:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008d06:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8008d14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008d22:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008d26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d34:	f107 0208 	add.w	r2, r7, #8
 8008d38:	4413      	add	r3, r2
 8008d3a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f8a7 	bl	8009e94 <memcpy>
  indx +=  LocalNameLen;
 8008d46:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008d4a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008d4e:	4413      	add	r3, r2
 8008d50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8008d54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008d62:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008d66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008d70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d74:	f107 0208 	add.w	r2, r7, #8
 8008d78:	4413      	add	r3, r2
 8008d7a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008d7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 f887 	bl	8009e94 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008d86:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008d8a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008d8e:	4413      	add	r3, r2
 8008d90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008d94:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008d98:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008d9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008da0:	f107 0208 	add.w	r2, r7, #8
 8008da4:	4413      	add	r3, r2
 8008da6:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8008daa:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008dac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008db0:	3302      	adds	r3, #2
 8008db2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008db6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008dba:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008dbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008dc2:	f107 0208 	add.w	r2, r7, #8
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8008dcc:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008dce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ddc:	2218      	movs	r2, #24
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f865 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008de6:	233f      	movs	r3, #63	; 0x3f
 8008de8:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008dea:	2383      	movs	r3, #131	; 0x83
 8008dec:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8008df4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008df8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8008dfa:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8008e00:	2301      	movs	r3, #1
 8008e02:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008e04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fd6e 	bl	80098ec <hci_send_req>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	da01      	bge.n	8008e1a <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8008e16:	23ff      	movs	r3, #255	; 0xff
 8008e18:	e007      	b.n	8008e2a <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8008e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <aci_gap_set_discoverable+0x1d4>
    return status;
 8008e22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e26:	e000      	b.n	8008e2a <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3754      	adds	r7, #84	; 0x54
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd90      	pop	{r4, r7, pc}

08008e32 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008e32:	b590      	push	{r4, r7, lr}
 8008e34:	b091      	sub	sp, #68	; 0x44
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	603a      	str	r2, [r7, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	71fb      	strb	r3, [r7, #7]
 8008e40:	460b      	mov	r3, r1
 8008e42:	71bb      	strb	r3, [r7, #6]
 8008e44:	4613      	mov	r3, r2
 8008e46:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008e4c:	79bb      	ldrb	r3, [r7, #6]
 8008e4e:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008e50:	79bb      	ldrb	r3, [r7, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	f107 030e 	add.w	r3, r7, #14
 8008e5c:	6814      	ldr	r4, [r2, #0]
 8008e5e:	6850      	ldr	r0, [r2, #4]
 8008e60:	6891      	ldr	r1, [r2, #8]
 8008e62:	68d2      	ldr	r2, [r2, #12]
 8008e64:	601c      	str	r4, [r3, #0]
 8008e66:	6058      	str	r0, [r3, #4]
 8008e68:	6099      	str	r1, [r3, #8]
 8008e6a:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008e6c:	797b      	ldrb	r3, [r7, #5]
 8008e6e:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008e70:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008e74:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008e76:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008e7a:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e80:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8008e84:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008e88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e90:	2218      	movs	r2, #24
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 f80b 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e9a:	233f      	movs	r3, #63	; 0x3f
 8008e9c:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008e9e:	2386      	movs	r3, #134	; 0x86
 8008ea0:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8008ea2:	f107 030c 	add.w	r3, r7, #12
 8008ea6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8008ea8:	231a      	movs	r3, #26
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8008eac:	f107 030b 	add.w	r3, r7, #11
 8008eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fd15 	bl	80098ec <hci_send_req>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da01      	bge.n	8008ecc <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008ec8:	23ff      	movs	r3, #255	; 0xff
 8008eca:	e005      	b.n	8008ed8 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008ecc:	7afb      	ldrb	r3, [r7, #11]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	e000      	b.n	8008ed8 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3744      	adds	r7, #68	; 0x44
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd90      	pop	{r4, r7, pc}

08008ee0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b092      	sub	sp, #72	; 0x48
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	2b1f      	cmp	r3, #31
 8008ef6:	d901      	bls.n	8008efc <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008ef8:	2342      	movs	r3, #66	; 0x42
 8008efa:	e03f      	b.n	8008f7c <aci_gap_update_adv_data+0x9c>

  buffer[indx] = AdvLen;
 8008efc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008f04:	4413      	add	r3, r2
 8008f06:	79fa      	ldrb	r2, [r7, #7]
 8008f08:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008f0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f10:	3301      	adds	r3, #1
 8008f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008f16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f1a:	f107 0208 	add.w	r2, r7, #8
 8008f1e:	4413      	add	r3, r2
 8008f20:	79fa      	ldrb	r2, [r7, #7]
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 ffb5 	bl	8009e94 <memcpy>
  indx +=  AdvLen;
 8008f2a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	4413      	add	r3, r2
 8008f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f3a:	2218      	movs	r2, #24
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 ffb6 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f44:	233f      	movs	r3, #63	; 0x3f
 8008f46:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008f48:	238e      	movs	r3, #142	; 0x8e
 8008f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8008f4c:	f107 0308 	add.w	r3, r7, #8
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8008f52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f56:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &status;
 8008f58:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	643b      	str	r3, [r7, #64]	; 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fcbf 	bl	80098ec <hci_send_req>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da01      	bge.n	8008f78 <aci_gap_update_adv_data+0x98>
    return BLE_STATUS_TIMEOUT;
 8008f74:	23ff      	movs	r3, #255	; 0xff
 8008f76:	e001      	b.n	8008f7c <aci_gap_update_adv_data+0x9c>
    
  return status;
 8008f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3748      	adds	r7, #72	; 0x48
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f8a:	f107 0308 	add.w	r3, r7, #8
 8008f8e:	2218      	movs	r2, #24
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 ff8c 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f98:	233f      	movs	r3, #63	; 0x3f
 8008f9a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008f9c:	f240 1301 	movw	r3, #257	; 0x101
 8008fa0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008fa2:	1dfb      	adds	r3, r7, #7
 8008fa4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008faa:	f107 0308 	add.w	r3, r7, #8
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fc9b 	bl	80098ec <hci_send_req>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da01      	bge.n	8008fc0 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008fbc:	23ff      	movs	r3, #255	; 0xff
 8008fbe:	e000      	b.n	8008fc2 <aci_gatt_init+0x3e>

  return status;
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3720      	adds	r7, #32
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b090      	sub	sp, #64	; 0x40
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	71bb      	strb	r3, [r7, #6]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8008fe8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008fec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ff0:	4413      	add	r3, r2
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008ff8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d103      	bne.n	8009010 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8009008:	2302      	movs	r3, #2
 800900a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800900e:	e002      	b.n	8009016 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8009010:	2310      	movs	r3, #16
 8009012:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009016:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800901a:	f107 020c 	add.w	r2, r7, #12
 800901e:	4413      	add	r3, r2
 8009020:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 ff34 	bl	8009e94 <memcpy>
  indx +=  uuid_len;
 800902c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8009030:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009034:	4413      	add	r3, r2
 8009036:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800903a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800903e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009042:	4413      	add	r3, r2
 8009044:	79ba      	ldrb	r2, [r7, #6]
 8009046:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800904a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800904e:	3301      	adds	r3, #1
 8009050:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8009054:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009058:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800905c:	4413      	add	r3, r2
 800905e:	797a      	ldrb	r2, [r7, #5]
 8009060:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009064:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009068:	3301      	adds	r3, #1
 800906a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800906e:	f107 0320 	add.w	r3, r7, #32
 8009072:	2203      	movs	r2, #3
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f000 ff1a 	bl	8009eb0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800907c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009080:	2218      	movs	r2, #24
 8009082:	2100      	movs	r1, #0
 8009084:	4618      	mov	r0, r3
 8009086:	f000 ff13 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800908a:	233f      	movs	r3, #63	; 0x3f
 800908c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800908e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009092:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8009094:	f107 030c 	add.w	r3, r7, #12
 8009098:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800909a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800909e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80090a0:	f107 0320 	add.w	r3, r7, #32
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80090a6:	2303      	movs	r3, #3
 80090a8:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80090aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fc1b 	bl	80098ec <hci_send_req>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da01      	bge.n	80090c0 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80090bc:	23ff      	movs	r3, #255	; 0xff
 80090be:	e00c      	b.n	80090da <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80090c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <aci_gatt_add_serv+0x104>
    return resp.status;
 80090c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090cc:	e005      	b.n	80090da <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80090ce:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d6:	801a      	strh	r2, [r3, #0]

  return 0;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3740      	adds	r7, #64	; 0x40
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b092      	sub	sp, #72	; 0x48
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	603a      	str	r2, [r7, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	80fb      	strh	r3, [r7, #6]
 80090f0:	460b      	mov	r3, r1
 80090f2:	717b      	strb	r3, [r7, #5]
 80090f4:	4613      	mov	r3, r2
 80090f6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009102:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009106:	f107 020c 	add.w	r2, r7, #12
 800910a:	4413      	add	r3, r2
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009110:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009114:	3302      	adds	r3, #2
 8009116:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800911a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800911e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009122:	4413      	add	r3, r2
 8009124:	797a      	ldrb	r2, [r7, #5]
 8009126:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800912a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800912e:	3301      	adds	r3, #1
 8009130:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009134:	797b      	ldrb	r3, [r7, #5]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d103      	bne.n	8009142 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800913a:	2302      	movs	r3, #2
 800913c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009140:	e002      	b.n	8009148 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8009142:	2310      	movs	r3, #16
 8009144:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009148:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800914c:	f107 020c 	add.w	r2, r7, #12
 8009150:	4413      	add	r3, r2
 8009152:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fe9b 	bl	8009e94 <memcpy>
  indx +=  uuid_len;
 800915e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8009162:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009166:	4413      	add	r3, r2
 8009168:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800916c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009170:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009174:	4413      	add	r3, r2
 8009176:	793a      	ldrb	r2, [r7, #4]
 8009178:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800917c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009180:	3301      	adds	r3, #1
 8009182:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8009186:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800918a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800918e:	4413      	add	r3, r2
 8009190:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009194:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009198:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800919c:	3301      	adds	r3, #1
 800919e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80091a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091aa:	4413      	add	r3, r2
 80091ac:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80091b0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091b8:	3301      	adds	r3, #1
 80091ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80091be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091c6:	4413      	add	r3, r2
 80091c8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80091cc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091d4:	3301      	adds	r3, #1
 80091d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80091da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091e2:	4413      	add	r3, r2
 80091e4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80091e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80091ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091f0:	3301      	adds	r3, #1
 80091f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 80091f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80091fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091fe:	4413      	add	r3, r2
 8009200:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8009204:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009208:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800920c:	3301      	adds	r3, #1
 800920e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009216:	2203      	movs	r2, #3
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fe48 	bl	8009eb0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009224:	2218      	movs	r2, #24
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fe41 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800922e:	233f      	movs	r3, #63	; 0x3f
 8009230:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009232:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009236:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800923e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009242:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8009244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800924a:	2303      	movs	r3, #3
 800924c:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800924e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fb49 	bl	80098ec <hci_send_req>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	da01      	bge.n	8009264 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	e00c      	b.n	800927e <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8009264:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <aci_gatt_add_char+0x190>
    return resp.status;
 800926c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009270:	e005      	b.n	800927e <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8009272:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8009276:	b29a      	uxth	r2, r3
 8009278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927a:	801a      	strh	r2, [r3, #0]

  return 0;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3748      	adds	r7, #72	; 0x48
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009286:	b590      	push	{r4, r7, lr}
 8009288:	b0ab      	sub	sp, #172	; 0xac
 800928a:	af00      	add	r7, sp, #0
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	461a      	mov	r2, r3
 8009294:	4623      	mov	r3, r4
 8009296:	80fb      	strh	r3, [r7, #6]
 8009298:	4603      	mov	r3, r0
 800929a:	80bb      	strh	r3, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
 80092a0:	4613      	mov	r3, r2
 80092a2:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80092aa:	78bb      	ldrb	r3, [r7, #2]
 80092ac:	2b7a      	cmp	r3, #122	; 0x7a
 80092ae:	d901      	bls.n	80092b4 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80092b0:	2342      	movs	r3, #66	; 0x42
 80092b2:	e076      	b.n	80093a2 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80092b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	4413      	add	r3, r2
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80092c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80092ca:	3302      	adds	r3, #2
 80092cc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80092d0:	88bb      	ldrh	r3, [r7, #4]
 80092d2:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80092d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80092d8:	f107 0208 	add.w	r2, r7, #8
 80092dc:	4413      	add	r3, r2
 80092de:	88ba      	ldrh	r2, [r7, #4]
 80092e0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80092e2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80092e6:	3302      	adds	r3, #2
 80092e8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 80092ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80092f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80092f4:	4413      	add	r3, r2
 80092f6:	78fa      	ldrb	r2, [r7, #3]
 80092f8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80092fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009300:	3301      	adds	r3, #1
 8009302:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8009306:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800930a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800930e:	4413      	add	r3, r2
 8009310:	78ba      	ldrb	r2, [r7, #2]
 8009312:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009316:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800931a:	3301      	adds	r3, #1
 800931c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009320:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009324:	f107 0208 	add.w	r2, r7, #8
 8009328:	4413      	add	r3, r2
 800932a:	78ba      	ldrb	r2, [r7, #2]
 800932c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fdaf 	bl	8009e94 <memcpy>
  indx +=  charValueLen;
 8009336:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800933a:	78bb      	ldrb	r3, [r7, #2]
 800933c:	4413      	add	r3, r2
 800933e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009342:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009346:	2218      	movs	r2, #24
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fdb0 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009350:	233f      	movs	r3, #63	; 0x3f
 8009352:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009356:	f44f 7383 	mov.w	r3, #262	; 0x106
 800935a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800935e:	f107 0308 	add.w	r3, r7, #8
 8009362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8009366:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800936a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800936e:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8009372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8009376:	2301      	movs	r3, #1
 8009378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800937c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fab2 	bl	80098ec <hci_send_req>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	da01      	bge.n	8009392 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 800938e:	23ff      	movs	r3, #255	; 0xff
 8009390:	e007      	b.n	80093a2 <aci_gatt_update_char_value+0x11c>

  if (status) {
 8009392:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <aci_gatt_update_char_value+0x11a>
    return status;
 800939a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800939e:	e000      	b.n	80093a2 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	37ac      	adds	r7, #172	; 0xac
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd90      	pop	{r4, r7, pc}

080093aa <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b08a      	sub	sp, #40	; 0x28
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	4603      	mov	r3, r0
 80093b2:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80093b8:	f107 0310 	add.w	r3, r7, #16
 80093bc:	2218      	movs	r2, #24
 80093be:	2100      	movs	r1, #0
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fd75 	bl	8009eb0 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80093c6:	233f      	movs	r3, #63	; 0x3f
 80093c8:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80093ca:	f240 1327 	movw	r3, #295	; 0x127
 80093ce:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 80093d0:	f107 030c 	add.w	r3, r7, #12
 80093d4:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80093d6:	2302      	movs	r3, #2
 80093d8:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 80093da:	f107 030b 	add.w	r3, r7, #11
 80093de:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 80093e0:	2301      	movs	r3, #1
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80093e4:	f107 0310 	add.w	r3, r7, #16
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fa7e 	bl	80098ec <hci_send_req>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da01      	bge.n	80093fa <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 80093f6:	23ff      	movs	r3, #255	; 0xff
 80093f8:	e000      	b.n	80093fc <aci_gatt_allow_read+0x52>

    return status;
 80093fa:	7afb      	ldrb	r3, [r7, #11]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3728      	adds	r7, #40	; 0x28
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b0ac      	sub	sp, #176	; 0xb0
 8009408:	af00      	add	r7, sp, #0
 800940a:	60ba      	str	r2, [r7, #8]
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	460b      	mov	r3, r1
 8009414:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800941c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009420:	2218      	movs	r2, #24
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fd43 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800942a:	233f      	movs	r3, #63	; 0x3f
 800942c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009430:	230d      	movs	r3, #13
 8009432:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  rq.cparam = &cp;
 8009436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800943a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.clen = sizeof(cp);
 800943e:	2301      	movs	r3, #1
 8009440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rparam = &rp;
 8009444:	f107 0314 	add.w	r3, r7, #20
 8009448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  rq.rlen = sizeof(rp);
 800944c:	2380      	movs	r3, #128	; 0x80
 800944e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009452:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fa47 	bl	80098ec <hci_send_req>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	da01      	bge.n	8009468 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009464:	23ff      	movs	r3, #255	; 0xff
 8009466:	e01e      	b.n	80094a6 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009468:	7d3b      	ldrb	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800946e:	7d3b      	ldrb	r3, [r7, #20]
 8009470:	e019      	b.n	80094a6 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009476:	b2db      	uxtb	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	89ba      	ldrh	r2, [r7, #12]
 8009488:	429a      	cmp	r2, r3
 800948a:	d201      	bcs.n	8009490 <aci_hal_read_config_data+0x8c>
 800948c:	89ba      	ldrh	r2, [r7, #12]
 800948e:	e002      	b.n	8009496 <aci_hal_read_config_data+0x92>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	f107 0314 	add.w	r3, r7, #20
 800949a:	3301      	adds	r3, #1
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fcf8 	bl	8009e94 <memcpy>
  
  return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	37b0      	adds	r7, #176	; 0xb0
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b08a      	sub	sp, #40	; 0x28
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	4603      	mov	r3, r0
 80094b6:	460a      	mov	r2, r1
 80094b8:	71fb      	strb	r3, [r7, #7]
 80094ba:	4613      	mov	r3, r2
 80094bc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80094c2:	79bb      	ldrb	r3, [r7, #6]
 80094c4:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094c6:	f107 0310 	add.w	r3, r7, #16
 80094ca:	2218      	movs	r2, #24
 80094cc:	2100      	movs	r1, #0
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fcee 	bl	8009eb0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80094d4:	233f      	movs	r3, #63	; 0x3f
 80094d6:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80094d8:	230f      	movs	r3, #15
 80094da:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80094e2:	2302      	movs	r3, #2
 80094e4:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80094e6:	f107 030b 	add.w	r3, r7, #11
 80094ea:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80094ec:	2301      	movs	r3, #1
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80094f0:	f107 0310 	add.w	r3, r7, #16
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 f9f8 	bl	80098ec <hci_send_req>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	da01      	bge.n	8009506 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009502:	23ff      	movs	r3, #255	; 0xff
 8009504:	e000      	b.n	8009508 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009506:	7afb      	ldrb	r3, [r7, #11]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3728      	adds	r7, #40	; 0x28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b089      	sub	sp, #36	; 0x24
 8009514:	af02      	add	r7, sp, #8
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800951a:	f107 0410 	add.w	r4, r7, #16
 800951e:	f107 0215 	add.w	r2, r7, #21
 8009522:	f107 0112 	add.w	r1, r7, #18
 8009526:	f107 0016 	add.w	r0, r7, #22
 800952a:	f107 030e 	add.w	r3, r7, #14
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4623      	mov	r3, r4
 8009532:	f000 f853 	bl	80095dc <hci_le_read_local_version>
 8009536:	4603      	mov	r3, r0
 8009538:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d126      	bne.n	800958e <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8009540:	8a7b      	ldrh	r3, [r7, #18]
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	b29b      	uxth	r3, r3
 8009546:	b2da      	uxtb	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800954c:	8a7b      	ldrh	r3, [r7, #18]
 800954e:	021b      	lsls	r3, r3, #8
 8009550:	b29a      	uxth	r2, r3
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b21a      	sxth	r2, r3
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	091b      	lsrs	r3, r3, #4
 8009560:	b29b      	uxth	r3, r3
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	b21b      	sxth	r3, r3
 8009566:	b2db      	uxtb	r3, r3
 8009568:	b21b      	sxth	r3, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	b21b      	sxth	r3, r3
 800956e:	b29a      	uxth	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b21a      	sxth	r2, r3
 800957a:	89fb      	ldrh	r3, [r7, #14]
 800957c:	b21b      	sxth	r3, r3
 800957e:	f003 030f 	and.w	r3, r3, #15
 8009582:	b21b      	sxth	r3, r3
 8009584:	4313      	orrs	r3, r2
 8009586:	b21b      	sxth	r3, r3
 8009588:	b29a      	uxth	r2, r3
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800958e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009590:	4618      	mov	r0, r3
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	bd90      	pop	{r4, r7, pc}

08009598 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800959e:	f107 0308 	add.w	r3, r7, #8
 80095a2:	2218      	movs	r2, #24
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fc82 	bl	8009eb0 <memset>
  rq.ogf = OGF_HOST_CTL;
 80095ac:	2303      	movs	r3, #3
 80095ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80095b0:	2303      	movs	r3, #3
 80095b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095b4:	1dfb      	adds	r3, r7, #7
 80095b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095b8:	2301      	movs	r3, #1
 80095ba:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80095bc:	f107 0308 	add.w	r3, r7, #8
 80095c0:	2100      	movs	r1, #0
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f992 	bl	80098ec <hci_send_req>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da01      	bge.n	80095d2 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80095ce:	23ff      	movs	r3, #255	; 0xff
 80095d0:	e000      	b.n	80095d4 <hci_reset+0x3c>
  
  return status;  
 80095d2:	79fb      	ldrb	r3, [r7, #7]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3720      	adds	r7, #32
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08e      	sub	sp, #56	; 0x38
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80095ea:	f107 0314 	add.w	r3, r7, #20
 80095ee:	2209      	movs	r2, #9
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fc5c 	bl	8009eb0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095f8:	f107 0320 	add.w	r3, r7, #32
 80095fc:	2218      	movs	r2, #24
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fc55 	bl	8009eb0 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009606:	2304      	movs	r3, #4
 8009608:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800960a:	2301      	movs	r3, #1
 800960c:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8009616:	f107 0314 	add.w	r3, r7, #20
 800961a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800961c:	2309      	movs	r3, #9
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009620:	f107 0320 	add.w	r3, r7, #32
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f960 	bl	80098ec <hci_send_req>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	da01      	bge.n	8009636 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	e018      	b.n	8009668 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009636:	7d3b      	ldrb	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <hci_le_read_local_version+0x64>
    return resp.status;
 800963c:	7d3b      	ldrb	r3, [r7, #20]
 800963e:	e013      	b.n	8009668 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009640:	7d7a      	ldrb	r2, [r7, #21]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009646:	8afa      	ldrh	r2, [r7, #22]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800964c:	7e3a      	ldrb	r2, [r7, #24]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009652:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009656:	b29a      	uxth	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800965c:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009660:	b29a      	uxth	r2, r3
 8009662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009664:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3738      	adds	r7, #56	; 0x38
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b092      	sub	sp, #72	; 0x48
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	6039      	str	r1, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800967c:	f107 0310 	add.w	r3, r7, #16
 8009680:	2220      	movs	r2, #32
 8009682:	2100      	movs	r1, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fc13 	bl	8009eb0 <memset>
  scan_resp_cp.length = length;
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b1f      	cmp	r3, #31
 8009692:	bf28      	it	cs
 8009694:	231f      	movcs	r3, #31
 8009696:	b2db      	uxtb	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	f107 0310 	add.w	r3, r7, #16
 800969e:	3301      	adds	r3, #1
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fbf6 	bl	8009e94 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096ac:	2218      	movs	r2, #24
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fbfd 	bl	8009eb0 <memset>
  rq.ogf = OGF_LE_CTL;
 80096b6:	2308      	movs	r3, #8
 80096b8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80096ba:	2309      	movs	r3, #9
 80096bc:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80096c4:	2320      	movs	r3, #32
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 80096c8:	f107 030f 	add.w	r3, r7, #15
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80096ce:	2301      	movs	r3, #1
 80096d0:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80096d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096d6:	2100      	movs	r1, #0
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 f907 	bl	80098ec <hci_send_req>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	da01      	bge.n	80096e8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80096e4:	23ff      	movs	r3, #255	; 0xff
 80096e6:	e000      	b.n	80096ea <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3748      	adds	r7, #72	; 0x48
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b085      	sub	sp, #20
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3308      	adds	r3, #8
 80096fe:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b04      	cmp	r3, #4
 8009706:	d001      	beq.n	800970c <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009708:	2301      	movs	r3, #1
 800970a:	e00c      	b.n	8009726 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3302      	adds	r3, #2
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800971a:	3b03      	subs	r3, #3
 800971c:	429a      	cmp	r2, r3
 800971e:	d001      	beq.n	8009724 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009720:	2302      	movs	r3, #2
 8009722:	e000      	b.n	8009726 <verify_packet+0x34>
  
  return 0;      
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b0a6      	sub	sp, #152	; 0x98
 8009738:	af00      	add	r7, sp, #0
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	4603      	mov	r3, r0
 800973e:	81fb      	strh	r3, [r7, #14]
 8009740:	460b      	mov	r3, r1
 8009742:	81bb      	strh	r3, [r7, #12]
 8009744:	4613      	mov	r3, r2
 8009746:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800974c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009750:	b21a      	sxth	r2, r3
 8009752:	89fb      	ldrh	r3, [r7, #14]
 8009754:	029b      	lsls	r3, r3, #10
 8009756:	b21b      	sxth	r3, r3
 8009758:	4313      	orrs	r3, r2
 800975a:	b21b      	sxth	r3, r3
 800975c:	b29b      	uxth	r3, r3
 800975e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009764:	2301      	movs	r3, #1
 8009766:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009768:	f107 0318 	add.w	r3, r7, #24
 800976c:	3301      	adds	r3, #1
 800976e:	461a      	mov	r2, r3
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	8819      	ldrh	r1, [r3, #0]
 8009776:	789b      	ldrb	r3, [r3, #2]
 8009778:	8011      	strh	r1, [r2, #0]
 800977a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800977c:	f107 0318 	add.w	r3, r7, #24
 8009780:	3304      	adds	r3, #4
 8009782:	7afa      	ldrb	r2, [r7, #11]
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fb84 	bl	8009e94 <memcpy>
  
  if (hciContext.io.Send)
 800978c:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <send_cmd+0x7c>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d009      	beq.n	80097a8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009794:	4b06      	ldr	r3, [pc, #24]	; (80097b0 <send_cmd+0x7c>)
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	7afa      	ldrb	r2, [r7, #11]
 800979a:	b292      	uxth	r2, r2
 800979c:	3204      	adds	r2, #4
 800979e:	b291      	uxth	r1, r2
 80097a0:	f107 0218 	add.w	r2, r7, #24
 80097a4:	4610      	mov	r0, r2
 80097a6:	4798      	blx	r3
  }
}
 80097a8:	bf00      	nop
 80097aa:	3798      	adds	r7, #152	; 0x98
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000624 	.word	0x20000624

080097b4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80097be:	e00a      	b.n	80097d6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80097c0:	f107 030c 	add.w	r3, r7, #12
 80097c4:	4619      	mov	r1, r3
 80097c6:	6838      	ldr	r0, [r7, #0]
 80097c8:	f000 faea 	bl	8009da0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa51 	bl	8009c78 <list_insert_head>
  while (!list_is_empty(src_list))
 80097d6:	6838      	ldr	r0, [r7, #0]
 80097d8:	f000 fa2c 	bl	8009c34 <list_is_empty>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0ee      	beq.n	80097c0 <move_list+0xc>
  }
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80097f2:	e009      	b.n	8009808 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80097f4:	1d3b      	adds	r3, r7, #4
 80097f6:	4619      	mov	r1, r3
 80097f8:	4809      	ldr	r0, [pc, #36]	; (8009820 <free_event_list+0x34>)
 80097fa:	f000 faaa 	bl	8009d52 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4619      	mov	r1, r3
 8009802:	4808      	ldr	r0, [pc, #32]	; (8009824 <free_event_list+0x38>)
 8009804:	f000 fa5e 	bl	8009cc4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <free_event_list+0x38>)
 800980a:	f000 faf0 	bl	8009dee <list_get_size>
 800980e:	4603      	mov	r3, r0
 8009810:	2b01      	cmp	r3, #1
 8009812:	ddef      	ble.n	80097f4 <free_event_list+0x8>
  }
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000d1c 	.word	0x20000d1c
 8009824:	20000d14 	.word	0x20000d14

08009828 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009838:	4a18      	ldr	r2, [pc, #96]	; (800989c <hci_init+0x74>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800983e:	4818      	ldr	r0, [pc, #96]	; (80098a0 <hci_init+0x78>)
 8009840:	f000 f9e8 	bl	8009c14 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009844:	4817      	ldr	r0, [pc, #92]	; (80098a4 <hci_init+0x7c>)
 8009846:	f000 f9e5 	bl	8009c14 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800984a:	f7f8 ff61 	bl	8002710 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
 8009852:	e00c      	b.n	800986e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	228c      	movs	r2, #140	; 0x8c
 8009858:	fb02 f303 	mul.w	r3, r2, r3
 800985c:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <hci_init+0x80>)
 800985e:	4413      	add	r3, r2
 8009860:	4619      	mov	r1, r3
 8009862:	480f      	ldr	r0, [pc, #60]	; (80098a0 <hci_init+0x78>)
 8009864:	f000 fa2e 	bl	8009cc4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	3301      	adds	r3, #1
 800986c:	73fb      	strb	r3, [r7, #15]
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	2b04      	cmp	r3, #4
 8009872:	d9ef      	bls.n	8009854 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009874:	4b09      	ldr	r3, [pc, #36]	; (800989c <hci_init+0x74>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <hci_init+0x5c>
 800987c:	4b07      	ldr	r3, [pc, #28]	; (800989c <hci_init+0x74>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2000      	movs	r0, #0
 8009882:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009884:	4b05      	ldr	r3, [pc, #20]	; (800989c <hci_init+0x74>)
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <hci_init+0x6a>
 800988c:	4b03      	ldr	r3, [pc, #12]	; (800989c <hci_init+0x74>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	4798      	blx	r3
}
 8009892:	bf00      	nop
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000624 	.word	0x20000624
 80098a0:	20000d14 	.word	0x20000d14
 80098a4:	20000d1c 	.word	0x20000d1c
 80098a8:	20000368 	.word	0x20000368

080098ac <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a0b      	ldr	r2, [pc, #44]	; (80098e8 <hci_register_io_bus+0x3c>)
 80098ba:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <hci_register_io_bus+0x3c>)
 80098c2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	4a07      	ldr	r2, [pc, #28]	; (80098e8 <hci_register_io_bus+0x3c>)
 80098ca:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <hci_register_io_bus+0x3c>)
 80098d2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	4a03      	ldr	r2, [pc, #12]	; (80098e8 <hci_register_io_bus+0x3c>)
 80098da:	6093      	str	r3, [r2, #8]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000624 	.word	0x20000624

080098ec <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08e      	sub	sp, #56	; 0x38
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009902:	b21a      	sxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	029b      	lsls	r3, r3, #10
 800990a:	b21b      	sxth	r3, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	b21b      	sxth	r3, r3
 8009910:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009916:	f107 0308 	add.w	r3, r7, #8
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f97a 	bl	8009c14 <list_init_head>

  free_event_list();
 8009920:	f7ff ff64 	bl	80097ec <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8818      	ldrh	r0, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8859      	ldrh	r1, [r3, #2]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f7ff fefd 	bl	8009734 <send_cmd>
  
  if (async)
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <hci_send_req+0x58>
  {
    return 0;
 8009940:	2300      	movs	r3, #0
 8009942:	e0e5      	b.n	8009b10 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009944:	f7fa fbc4 	bl	80040d0 <HAL_GetTick>
 8009948:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800994a:	f7fa fbc1 	bl	80040d0 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009958:	f200 80b6 	bhi.w	8009ac8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800995c:	486e      	ldr	r0, [pc, #440]	; (8009b18 <hci_send_req+0x22c>)
 800995e:	f000 f969 	bl	8009c34 <list_is_empty>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d000      	beq.n	800996a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009968:	e7ef      	b.n	800994a <hci_send_req+0x5e>
      {
        break;
 800996a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	4619      	mov	r1, r3
 8009972:	4869      	ldr	r0, [pc, #420]	; (8009b18 <hci_send_req+0x22c>)
 8009974:	f000 f9ed 	bl	8009d52 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	3308      	adds	r3, #8
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b04      	cmp	r3, #4
 8009984:	d17b      	bne.n	8009a7e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	3301      	adds	r3, #1
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3308      	adds	r3, #8
 8009990:	3303      	adds	r3, #3
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800999a:	3b03      	subs	r3, #3
 800999c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b3e      	cmp	r3, #62	; 0x3e
 80099a4:	d04d      	beq.n	8009a42 <hci_send_req+0x156>
 80099a6:	2b3e      	cmp	r3, #62	; 0x3e
 80099a8:	dc6b      	bgt.n	8009a82 <hci_send_req+0x196>
 80099aa:	2b10      	cmp	r3, #16
 80099ac:	f000 808e 	beq.w	8009acc <hci_send_req+0x1e0>
 80099b0:	2b10      	cmp	r3, #16
 80099b2:	dc66      	bgt.n	8009a82 <hci_send_req+0x196>
 80099b4:	2b0e      	cmp	r3, #14
 80099b6:	d024      	beq.n	8009a02 <hci_send_req+0x116>
 80099b8:	2b0f      	cmp	r3, #15
 80099ba:	d162      	bne.n	8009a82 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	885b      	ldrh	r3, [r3, #2]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80099c8:	429a      	cmp	r2, r3
 80099ca:	f040 8081 	bne.w	8009ad0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d004      	beq.n	80099e0 <hci_send_req+0xf4>
          if (cs->status) {
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d053      	beq.n	8009a86 <hci_send_req+0x19a>
            goto failed;
 80099de:	e07a      	b.n	8009ad6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	bf28      	it	cs
 80099ea:	461a      	movcs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6918      	ldr	r0, [r3, #16]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	461a      	mov	r2, r3
 80099fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099fc:	f000 fa4a 	bl	8009e94 <memcpy>
        goto done;
 8009a00:	e07a      	b.n	8009af8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d15f      	bne.n	8009ad4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	3303      	adds	r3, #3
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	3b03      	subs	r3, #3
 8009a1e:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	bf28      	it	cs
 8009a2a:	461a      	movcs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6918      	ldr	r0, [r3, #16]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a3c:	f000 fa2a 	bl	8009e94 <memcpy>
        goto done;
 8009a40:	e05a      	b.n	8009af8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d11a      	bne.n	8009a8a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	695a      	ldr	r2, [r3, #20]
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	bf28      	it	cs
 8009a64:	461a      	movcs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6918      	ldr	r0, [r3, #16]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	1c59      	adds	r1, r3, #1
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f000 fa0c 	bl	8009e94 <memcpy>
        goto done;
 8009a7c:	e03c      	b.n	8009af8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8009a7e:	bf00      	nop
 8009a80:	e004      	b.n	8009a8c <hci_send_req+0x1a0>
        break;
 8009a82:	bf00      	nop
 8009a84:	e002      	b.n	8009a8c <hci_send_req+0x1a0>
          break;
 8009a86:	bf00      	nop
 8009a88:	e000      	b.n	8009a8c <hci_send_req+0x1a0>
          break;
 8009a8a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009a8c:	4823      	ldr	r0, [pc, #140]	; (8009b1c <hci_send_req+0x230>)
 8009a8e:	f000 f8d1 	bl	8009c34 <list_is_empty>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00d      	beq.n	8009ab4 <hci_send_req+0x1c8>
 8009a98:	481f      	ldr	r0, [pc, #124]	; (8009b18 <hci_send_req+0x22c>)
 8009a9a:	f000 f8cb 	bl	8009c34 <list_is_empty>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	481c      	ldr	r0, [pc, #112]	; (8009b1c <hci_send_req+0x230>)
 8009aaa:	f000 f90b 	bl	8009cc4 <list_insert_tail>
      hciReadPacket=NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	e008      	b.n	8009ac6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f901 	bl	8009cc4 <list_insert_tail>
      hciReadPacket=NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
  {
 8009ac6:	e73d      	b.n	8009944 <hci_send_req+0x58>
        goto failed;
 8009ac8:	bf00      	nop
 8009aca:	e004      	b.n	8009ad6 <hci_send_req+0x1ea>
        goto failed;
 8009acc:	bf00      	nop
 8009ace:	e002      	b.n	8009ad6 <hci_send_req+0x1ea>
          goto failed;
 8009ad0:	bf00      	nop
 8009ad2:	e000      	b.n	8009ad6 <hci_send_req+0x1ea>
          goto failed;
 8009ad4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	480e      	ldr	r0, [pc, #56]	; (8009b1c <hci_send_req+0x230>)
 8009ae2:	f000 f8c9 	bl	8009c78 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	4619      	mov	r1, r3
 8009aec:	480a      	ldr	r0, [pc, #40]	; (8009b18 <hci_send_req+0x22c>)
 8009aee:	f7ff fe61 	bl	80097b4 <move_list>

  return -1;
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295
 8009af6:	e00b      	b.n	8009b10 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4619      	mov	r1, r3
 8009afc:	4807      	ldr	r0, [pc, #28]	; (8009b1c <hci_send_req+0x230>)
 8009afe:	f000 f8bb 	bl	8009c78 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009b02:	f107 0308 	add.w	r3, r7, #8
 8009b06:	4619      	mov	r1, r3
 8009b08:	4803      	ldr	r0, [pc, #12]	; (8009b18 <hci_send_req+0x22c>)
 8009b0a:	f7ff fe53 	bl	80097b4 <move_list>

  return 0;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3738      	adds	r7, #56	; 0x38
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	20000d1c 	.word	0x20000d1c
 8009b1c:	20000d14 	.word	0x20000d14

08009b20 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009b2a:	e013      	b.n	8009b54 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009b2c:	1d3b      	adds	r3, r7, #4
 8009b2e:	4619      	mov	r1, r3
 8009b30:	480e      	ldr	r0, [pc, #56]	; (8009b6c <hci_user_evt_proc+0x4c>)
 8009b32:	f000 f90e 	bl	8009d52 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009b36:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <hci_user_evt_proc+0x50>)
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <hci_user_evt_proc+0x50>)
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	3208      	adds	r2, #8
 8009b46:	4610      	mov	r0, r2
 8009b48:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4809      	ldr	r0, [pc, #36]	; (8009b74 <hci_user_evt_proc+0x54>)
 8009b50:	f000 f8b8 	bl	8009cc4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009b54:	4805      	ldr	r0, [pc, #20]	; (8009b6c <hci_user_evt_proc+0x4c>)
 8009b56:	f000 f86d 	bl	8009c34 <list_is_empty>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0e5      	beq.n	8009b2c <hci_user_evt_proc+0xc>
  }
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000d1c 	.word	0x20000d1c
 8009b70:	20000624 	.word	0x20000624
 8009b74:	20000d14 	.word	0x20000d14

08009b78 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009b88:	481f      	ldr	r0, [pc, #124]	; (8009c08 <hci_notify_asynch_evt+0x90>)
 8009b8a:	f000 f853 	bl	8009c34 <list_is_empty>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d132      	bne.n	8009bfa <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009b94:	f107 030c 	add.w	r3, r7, #12
 8009b98:	4619      	mov	r1, r3
 8009b9a:	481b      	ldr	r0, [pc, #108]	; (8009c08 <hci_notify_asynch_evt+0x90>)
 8009b9c:	f000 f8d9 	bl	8009d52 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	; (8009c0c <hci_notify_asynch_evt+0x94>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d02a      	beq.n	8009bfe <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <hci_notify_asynch_evt+0x94>)
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	3208      	adds	r2, #8
 8009bb0:	2180      	movs	r1, #128	; 0x80
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4798      	blx	r3
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009bba:	7cfb      	ldrb	r3, [r7, #19]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d016      	beq.n	8009bee <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	7cfa      	ldrb	r2, [r7, #19]
 8009bc4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff fd91 	bl	80096f2 <verify_packet>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d105      	bne.n	8009be2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	480d      	ldr	r0, [pc, #52]	; (8009c10 <hci_notify_asynch_evt+0x98>)
 8009bdc:	f000 f872 	bl	8009cc4 <list_insert_tail>
 8009be0:	e00d      	b.n	8009bfe <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4619      	mov	r1, r3
 8009be6:	4808      	ldr	r0, [pc, #32]	; (8009c08 <hci_notify_asynch_evt+0x90>)
 8009be8:	f000 f846 	bl	8009c78 <list_insert_head>
 8009bec:	e007      	b.n	8009bfe <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <hci_notify_asynch_evt+0x90>)
 8009bf4:	f000 f840 	bl	8009c78 <list_insert_head>
 8009bf8:	e001      	b.n	8009bfe <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009bfe:	697b      	ldr	r3, [r7, #20]

}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000d14 	.word	0x20000d14
 8009c0c:	20000624 	.word	0x20000624
 8009c10:	20000d1c 	.word	0x20000d1c

08009c14 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	605a      	str	r2, [r3, #4]
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b087      	sub	sp, #28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c40:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c42:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c46:	b672      	cpsid	i
}
 8009c48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d102      	bne.n	8009c5a <list_is_empty+0x26>
  {
    return_value = 1;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
 8009c58:	e001      	b.n	8009c5e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f383 8810 	msr	PRIMASK, r3
}
 8009c68:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c82:	f3ef 8310 	mrs	r3, PRIMASK
 8009c86:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c88:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009c8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c8c:	b672      	cpsid	i
}
 8009c8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	605a      	str	r2, [r3, #4]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f383 8810 	msr	PRIMASK, r3
}
 8009cb6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cce:	f3ef 8310 	mrs	r3, PRIMASK
 8009cd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cd8:	b672      	cpsid	i
}
 8009cda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f383 8810 	msr	PRIMASK, r3
}
 8009d02:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009d04:	bf00      	nop
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d18:	f3ef 8310 	mrs	r3, PRIMASK
 8009d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d22:	b672      	cpsid	i
}
 8009d24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6812      	ldr	r2, [r2, #0]
 8009d2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6852      	ldr	r2, [r2, #4]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f383 8810 	msr	PRIMASK, r3
}
 8009d44:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009d46:	bf00      	nop
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b086      	sub	sp, #24
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d60:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d62:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d66:	b672      	cpsid	i
}
 8009d68:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff ffca 	bl	8009d10 <list_remove_node>
  (*node)->next = NULL;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	605a      	str	r2, [r3, #4]
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f383 8810 	msr	PRIMASK, r3
}
 8009d96:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009d98:	bf00      	nop
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009daa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dae:	60fb      	str	r3, [r7, #12]
  return(result);
 8009db0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009db4:	b672      	cpsid	i
}
 8009db6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff ffa3 	bl	8009d10 <list_remove_node>
  (*node)->next = NULL;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	605a      	str	r2, [r3, #4]
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f383 8810 	msr	PRIMASK, r3
}
 8009de4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009de6:	bf00      	nop
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b089      	sub	sp, #36	; 0x24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfe:	613b      	str	r3, [r7, #16]
  return(result);
 8009e00:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009e02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e04:	b672      	cpsid	i
}
 8009e06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009e0e:	e005      	b.n	8009e1c <list_get_size+0x2e>
  {
    size++;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	3301      	adds	r3, #1
 8009e14:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d1f5      	bne.n	8009e10 <list_get_size+0x22>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f383 8810 	msr	PRIMASK, r3
}
 8009e2e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009e30:	69fb      	ldr	r3, [r7, #28]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3724      	adds	r7, #36	; 0x24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
	...

08009e40 <__errno>:
 8009e40:	4b01      	ldr	r3, [pc, #4]	; (8009e48 <__errno+0x8>)
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000100 	.word	0x20000100

08009e4c <__libc_init_array>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	4d0d      	ldr	r5, [pc, #52]	; (8009e84 <__libc_init_array+0x38>)
 8009e50:	4c0d      	ldr	r4, [pc, #52]	; (8009e88 <__libc_init_array+0x3c>)
 8009e52:	1b64      	subs	r4, r4, r5
 8009e54:	10a4      	asrs	r4, r4, #2
 8009e56:	2600      	movs	r6, #0
 8009e58:	42a6      	cmp	r6, r4
 8009e5a:	d109      	bne.n	8009e70 <__libc_init_array+0x24>
 8009e5c:	4d0b      	ldr	r5, [pc, #44]	; (8009e8c <__libc_init_array+0x40>)
 8009e5e:	4c0c      	ldr	r4, [pc, #48]	; (8009e90 <__libc_init_array+0x44>)
 8009e60:	f001 fa68 	bl	800b334 <_init>
 8009e64:	1b64      	subs	r4, r4, r5
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	2600      	movs	r6, #0
 8009e6a:	42a6      	cmp	r6, r4
 8009e6c:	d105      	bne.n	8009e7a <__libc_init_array+0x2e>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}
 8009e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e74:	4798      	blx	r3
 8009e76:	3601      	adds	r6, #1
 8009e78:	e7ee      	b.n	8009e58 <__libc_init_array+0xc>
 8009e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7e:	4798      	blx	r3
 8009e80:	3601      	adds	r6, #1
 8009e82:	e7f2      	b.n	8009e6a <__libc_init_array+0x1e>
 8009e84:	0800b550 	.word	0x0800b550
 8009e88:	0800b550 	.word	0x0800b550
 8009e8c:	0800b550 	.word	0x0800b550
 8009e90:	0800b554 	.word	0x0800b554

08009e94 <memcpy>:
 8009e94:	440a      	add	r2, r1
 8009e96:	4291      	cmp	r1, r2
 8009e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e9c:	d100      	bne.n	8009ea0 <memcpy+0xc>
 8009e9e:	4770      	bx	lr
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	d1f9      	bne.n	8009ea2 <memcpy+0xe>
 8009eae:	bd10      	pop	{r4, pc}

08009eb0 <memset>:
 8009eb0:	4402      	add	r2, r0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d100      	bne.n	8009eba <memset+0xa>
 8009eb8:	4770      	bx	lr
 8009eba:	f803 1b01 	strb.w	r1, [r3], #1
 8009ebe:	e7f9      	b.n	8009eb4 <memset+0x4>

08009ec0 <srand>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <srand+0x44>)
 8009ec4:	681d      	ldr	r5, [r3, #0]
 8009ec6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009ec8:	4604      	mov	r4, r0
 8009eca:	b9b3      	cbnz	r3, 8009efa <srand+0x3a>
 8009ecc:	2018      	movs	r0, #24
 8009ece:	f000 f8c9 	bl	800a064 <malloc>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	63a8      	str	r0, [r5, #56]	; 0x38
 8009ed6:	b920      	cbnz	r0, 8009ee2 <srand+0x22>
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <srand+0x48>)
 8009eda:	480c      	ldr	r0, [pc, #48]	; (8009f0c <srand+0x4c>)
 8009edc:	2142      	movs	r1, #66	; 0x42
 8009ede:	f000 f891 	bl	800a004 <__assert_func>
 8009ee2:	490b      	ldr	r1, [pc, #44]	; (8009f10 <srand+0x50>)
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <srand+0x54>)
 8009ee6:	e9c0 1300 	strd	r1, r3, [r0]
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <srand+0x58>)
 8009eec:	6083      	str	r3, [r0, #8]
 8009eee:	230b      	movs	r3, #11
 8009ef0:	8183      	strh	r3, [r0, #12]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009efa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009efc:	2200      	movs	r2, #0
 8009efe:	611c      	str	r4, [r3, #16]
 8009f00:	615a      	str	r2, [r3, #20]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000100 	.word	0x20000100
 8009f08:	0800b400 	.word	0x0800b400
 8009f0c:	0800b417 	.word	0x0800b417
 8009f10:	abcd330e 	.word	0xabcd330e
 8009f14:	e66d1234 	.word	0xe66d1234
 8009f18:	0005deec 	.word	0x0005deec

08009f1c <rand>:
 8009f1c:	4b17      	ldr	r3, [pc, #92]	; (8009f7c <rand+0x60>)
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	681c      	ldr	r4, [r3, #0]
 8009f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f24:	b9b3      	cbnz	r3, 8009f54 <rand+0x38>
 8009f26:	2018      	movs	r0, #24
 8009f28:	f000 f89c 	bl	800a064 <malloc>
 8009f2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8009f2e:	b928      	cbnz	r0, 8009f3c <rand+0x20>
 8009f30:	4602      	mov	r2, r0
 8009f32:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <rand+0x64>)
 8009f34:	4813      	ldr	r0, [pc, #76]	; (8009f84 <rand+0x68>)
 8009f36:	214e      	movs	r1, #78	; 0x4e
 8009f38:	f000 f864 	bl	800a004 <__assert_func>
 8009f3c:	4a12      	ldr	r2, [pc, #72]	; (8009f88 <rand+0x6c>)
 8009f3e:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <rand+0x70>)
 8009f40:	e9c0 2300 	strd	r2, r3, [r0]
 8009f44:	4b12      	ldr	r3, [pc, #72]	; (8009f90 <rand+0x74>)
 8009f46:	6083      	str	r3, [r0, #8]
 8009f48:	230b      	movs	r3, #11
 8009f4a:	8183      	strh	r3, [r0, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009f54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f56:	480f      	ldr	r0, [pc, #60]	; (8009f94 <rand+0x78>)
 8009f58:	690a      	ldr	r2, [r1, #16]
 8009f5a:	694b      	ldr	r3, [r1, #20]
 8009f5c:	4c0e      	ldr	r4, [pc, #56]	; (8009f98 <rand+0x7c>)
 8009f5e:	4350      	muls	r0, r2
 8009f60:	fb04 0003 	mla	r0, r4, r3, r0
 8009f64:	fba2 3404 	umull	r3, r4, r2, r4
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	4404      	add	r4, r0
 8009f6c:	f144 0000 	adc.w	r0, r4, #0
 8009f70:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009f74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000100 	.word	0x20000100
 8009f80:	0800b400 	.word	0x0800b400
 8009f84:	0800b417 	.word	0x0800b417
 8009f88:	abcd330e 	.word	0xabcd330e
 8009f8c:	e66d1234 	.word	0xe66d1234
 8009f90:	0005deec 	.word	0x0005deec
 8009f94:	5851f42d 	.word	0x5851f42d
 8009f98:	4c957f2d 	.word	0x4c957f2d

08009f9c <sniprintf>:
 8009f9c:	b40c      	push	{r2, r3}
 8009f9e:	b530      	push	{r4, r5, lr}
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <sniprintf+0x64>)
 8009fa2:	1e0c      	subs	r4, r1, #0
 8009fa4:	681d      	ldr	r5, [r3, #0]
 8009fa6:	b09d      	sub	sp, #116	; 0x74
 8009fa8:	da08      	bge.n	8009fbc <sniprintf+0x20>
 8009faa:	238b      	movs	r3, #139	; 0x8b
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb2:	b01d      	add	sp, #116	; 0x74
 8009fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fb8:	b002      	add	sp, #8
 8009fba:	4770      	bx	lr
 8009fbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009fc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009fc4:	bf14      	ite	ne
 8009fc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009fca:	4623      	moveq	r3, r4
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	9307      	str	r3, [sp, #28]
 8009fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fd4:	9002      	str	r0, [sp, #8]
 8009fd6:	9006      	str	r0, [sp, #24]
 8009fd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fde:	ab21      	add	r3, sp, #132	; 0x84
 8009fe0:	a902      	add	r1, sp, #8
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	f000 f94b 	bl	800a280 <_svfiprintf_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	bfbc      	itt	lt
 8009fee:	238b      	movlt	r3, #139	; 0x8b
 8009ff0:	602b      	strlt	r3, [r5, #0]
 8009ff2:	2c00      	cmp	r4, #0
 8009ff4:	d0dd      	beq.n	8009fb2 <sniprintf+0x16>
 8009ff6:	9b02      	ldr	r3, [sp, #8]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e7d9      	b.n	8009fb2 <sniprintf+0x16>
 8009ffe:	bf00      	nop
 800a000:	20000100 	.word	0x20000100

0800a004 <__assert_func>:
 800a004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a006:	4614      	mov	r4, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <__assert_func+0x2c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4605      	mov	r5, r0
 800a010:	68d8      	ldr	r0, [r3, #12]
 800a012:	b14c      	cbz	r4, 800a028 <__assert_func+0x24>
 800a014:	4b07      	ldr	r3, [pc, #28]	; (800a034 <__assert_func+0x30>)
 800a016:	9100      	str	r1, [sp, #0]
 800a018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a01c:	4906      	ldr	r1, [pc, #24]	; (800a038 <__assert_func+0x34>)
 800a01e:	462b      	mov	r3, r5
 800a020:	f000 f80e 	bl	800a040 <fiprintf>
 800a024:	f000 fdea 	bl	800abfc <abort>
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <__assert_func+0x38>)
 800a02a:	461c      	mov	r4, r3
 800a02c:	e7f3      	b.n	800a016 <__assert_func+0x12>
 800a02e:	bf00      	nop
 800a030:	20000100 	.word	0x20000100
 800a034:	0800b476 	.word	0x0800b476
 800a038:	0800b483 	.word	0x0800b483
 800a03c:	0800b4b1 	.word	0x0800b4b1

0800a040 <fiprintf>:
 800a040:	b40e      	push	{r1, r2, r3}
 800a042:	b503      	push	{r0, r1, lr}
 800a044:	4601      	mov	r1, r0
 800a046:	ab03      	add	r3, sp, #12
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <fiprintf+0x20>)
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	6800      	ldr	r0, [r0, #0]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	f000 fa3f 	bl	800a4d4 <_vfiprintf_r>
 800a056:	b002      	add	sp, #8
 800a058:	f85d eb04 	ldr.w	lr, [sp], #4
 800a05c:	b003      	add	sp, #12
 800a05e:	4770      	bx	lr
 800a060:	20000100 	.word	0x20000100

0800a064 <malloc>:
 800a064:	4b02      	ldr	r3, [pc, #8]	; (800a070 <malloc+0xc>)
 800a066:	4601      	mov	r1, r0
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	f000 b853 	b.w	800a114 <_malloc_r>
 800a06e:	bf00      	nop
 800a070:	20000100 	.word	0x20000100

0800a074 <_free_r>:
 800a074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a076:	2900      	cmp	r1, #0
 800a078:	d048      	beq.n	800a10c <_free_r+0x98>
 800a07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a07e:	9001      	str	r0, [sp, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	f1a1 0404 	sub.w	r4, r1, #4
 800a086:	bfb8      	it	lt
 800a088:	18e4      	addlt	r4, r4, r3
 800a08a:	f000 fff7 	bl	800b07c <__malloc_lock>
 800a08e:	4a20      	ldr	r2, [pc, #128]	; (800a110 <_free_r+0x9c>)
 800a090:	9801      	ldr	r0, [sp, #4]
 800a092:	6813      	ldr	r3, [r2, #0]
 800a094:	4615      	mov	r5, r2
 800a096:	b933      	cbnz	r3, 800a0a6 <_free_r+0x32>
 800a098:	6063      	str	r3, [r4, #4]
 800a09a:	6014      	str	r4, [r2, #0]
 800a09c:	b003      	add	sp, #12
 800a09e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a2:	f000 bff1 	b.w	800b088 <__malloc_unlock>
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	d90b      	bls.n	800a0c2 <_free_r+0x4e>
 800a0aa:	6821      	ldr	r1, [r4, #0]
 800a0ac:	1862      	adds	r2, r4, r1
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	bf04      	itt	eq
 800a0b2:	681a      	ldreq	r2, [r3, #0]
 800a0b4:	685b      	ldreq	r3, [r3, #4]
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	bf04      	itt	eq
 800a0ba:	1852      	addeq	r2, r2, r1
 800a0bc:	6022      	streq	r2, [r4, #0]
 800a0be:	602c      	str	r4, [r5, #0]
 800a0c0:	e7ec      	b.n	800a09c <_free_r+0x28>
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	b10b      	cbz	r3, 800a0cc <_free_r+0x58>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d9fa      	bls.n	800a0c2 <_free_r+0x4e>
 800a0cc:	6811      	ldr	r1, [r2, #0]
 800a0ce:	1855      	adds	r5, r2, r1
 800a0d0:	42a5      	cmp	r5, r4
 800a0d2:	d10b      	bne.n	800a0ec <_free_r+0x78>
 800a0d4:	6824      	ldr	r4, [r4, #0]
 800a0d6:	4421      	add	r1, r4
 800a0d8:	1854      	adds	r4, r2, r1
 800a0da:	42a3      	cmp	r3, r4
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	d1dd      	bne.n	800a09c <_free_r+0x28>
 800a0e0:	681c      	ldr	r4, [r3, #0]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	6053      	str	r3, [r2, #4]
 800a0e6:	4421      	add	r1, r4
 800a0e8:	6011      	str	r1, [r2, #0]
 800a0ea:	e7d7      	b.n	800a09c <_free_r+0x28>
 800a0ec:	d902      	bls.n	800a0f4 <_free_r+0x80>
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	e7d3      	b.n	800a09c <_free_r+0x28>
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	1961      	adds	r1, r4, r5
 800a0f8:	428b      	cmp	r3, r1
 800a0fa:	bf04      	itt	eq
 800a0fc:	6819      	ldreq	r1, [r3, #0]
 800a0fe:	685b      	ldreq	r3, [r3, #4]
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	bf04      	itt	eq
 800a104:	1949      	addeq	r1, r1, r5
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	6054      	str	r4, [r2, #4]
 800a10a:	e7c7      	b.n	800a09c <_free_r+0x28>
 800a10c:	b003      	add	sp, #12
 800a10e:	bd30      	pop	{r4, r5, pc}
 800a110:	20000644 	.word	0x20000644

0800a114 <_malloc_r>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	1ccd      	adds	r5, r1, #3
 800a118:	f025 0503 	bic.w	r5, r5, #3
 800a11c:	3508      	adds	r5, #8
 800a11e:	2d0c      	cmp	r5, #12
 800a120:	bf38      	it	cc
 800a122:	250c      	movcc	r5, #12
 800a124:	2d00      	cmp	r5, #0
 800a126:	4606      	mov	r6, r0
 800a128:	db01      	blt.n	800a12e <_malloc_r+0x1a>
 800a12a:	42a9      	cmp	r1, r5
 800a12c:	d903      	bls.n	800a136 <_malloc_r+0x22>
 800a12e:	230c      	movs	r3, #12
 800a130:	6033      	str	r3, [r6, #0]
 800a132:	2000      	movs	r0, #0
 800a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a136:	f000 ffa1 	bl	800b07c <__malloc_lock>
 800a13a:	4921      	ldr	r1, [pc, #132]	; (800a1c0 <_malloc_r+0xac>)
 800a13c:	680a      	ldr	r2, [r1, #0]
 800a13e:	4614      	mov	r4, r2
 800a140:	b99c      	cbnz	r4, 800a16a <_malloc_r+0x56>
 800a142:	4f20      	ldr	r7, [pc, #128]	; (800a1c4 <_malloc_r+0xb0>)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	b923      	cbnz	r3, 800a152 <_malloc_r+0x3e>
 800a148:	4621      	mov	r1, r4
 800a14a:	4630      	mov	r0, r6
 800a14c:	f000 fc86 	bl	800aa5c <_sbrk_r>
 800a150:	6038      	str	r0, [r7, #0]
 800a152:	4629      	mov	r1, r5
 800a154:	4630      	mov	r0, r6
 800a156:	f000 fc81 	bl	800aa5c <_sbrk_r>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d123      	bne.n	800a1a6 <_malloc_r+0x92>
 800a15e:	230c      	movs	r3, #12
 800a160:	6033      	str	r3, [r6, #0]
 800a162:	4630      	mov	r0, r6
 800a164:	f000 ff90 	bl	800b088 <__malloc_unlock>
 800a168:	e7e3      	b.n	800a132 <_malloc_r+0x1e>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	1b5b      	subs	r3, r3, r5
 800a16e:	d417      	bmi.n	800a1a0 <_malloc_r+0x8c>
 800a170:	2b0b      	cmp	r3, #11
 800a172:	d903      	bls.n	800a17c <_malloc_r+0x68>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	441c      	add	r4, r3
 800a178:	6025      	str	r5, [r4, #0]
 800a17a:	e004      	b.n	800a186 <_malloc_r+0x72>
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	42a2      	cmp	r2, r4
 800a180:	bf0c      	ite	eq
 800a182:	600b      	streq	r3, [r1, #0]
 800a184:	6053      	strne	r3, [r2, #4]
 800a186:	4630      	mov	r0, r6
 800a188:	f000 ff7e 	bl	800b088 <__malloc_unlock>
 800a18c:	f104 000b 	add.w	r0, r4, #11
 800a190:	1d23      	adds	r3, r4, #4
 800a192:	f020 0007 	bic.w	r0, r0, #7
 800a196:	1ac2      	subs	r2, r0, r3
 800a198:	d0cc      	beq.n	800a134 <_malloc_r+0x20>
 800a19a:	1a1b      	subs	r3, r3, r0
 800a19c:	50a3      	str	r3, [r4, r2]
 800a19e:	e7c9      	b.n	800a134 <_malloc_r+0x20>
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	6864      	ldr	r4, [r4, #4]
 800a1a4:	e7cc      	b.n	800a140 <_malloc_r+0x2c>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d0e3      	beq.n	800a178 <_malloc_r+0x64>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f000 fc52 	bl	800aa5c <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d1dd      	bne.n	800a178 <_malloc_r+0x64>
 800a1bc:	e7cf      	b.n	800a15e <_malloc_r+0x4a>
 800a1be:	bf00      	nop
 800a1c0:	20000644 	.word	0x20000644
 800a1c4:	20000648 	.word	0x20000648

0800a1c8 <__ssputs_r>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	688e      	ldr	r6, [r1, #8]
 800a1ce:	429e      	cmp	r6, r3
 800a1d0:	4682      	mov	sl, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	4690      	mov	r8, r2
 800a1d6:	461f      	mov	r7, r3
 800a1d8:	d838      	bhi.n	800a24c <__ssputs_r+0x84>
 800a1da:	898a      	ldrh	r2, [r1, #12]
 800a1dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1e0:	d032      	beq.n	800a248 <__ssputs_r+0x80>
 800a1e2:	6825      	ldr	r5, [r4, #0]
 800a1e4:	6909      	ldr	r1, [r1, #16]
 800a1e6:	eba5 0901 	sub.w	r9, r5, r1
 800a1ea:	6965      	ldr	r5, [r4, #20]
 800a1ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	444b      	add	r3, r9
 800a1f8:	106d      	asrs	r5, r5, #1
 800a1fa:	429d      	cmp	r5, r3
 800a1fc:	bf38      	it	cc
 800a1fe:	461d      	movcc	r5, r3
 800a200:	0553      	lsls	r3, r2, #21
 800a202:	d531      	bpl.n	800a268 <__ssputs_r+0xa0>
 800a204:	4629      	mov	r1, r5
 800a206:	f7ff ff85 	bl	800a114 <_malloc_r>
 800a20a:	4606      	mov	r6, r0
 800a20c:	b950      	cbnz	r0, 800a224 <__ssputs_r+0x5c>
 800a20e:	230c      	movs	r3, #12
 800a210:	f8ca 3000 	str.w	r3, [sl]
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	6921      	ldr	r1, [r4, #16]
 800a226:	464a      	mov	r2, r9
 800a228:	f7ff fe34 	bl	8009e94 <memcpy>
 800a22c:	89a3      	ldrh	r3, [r4, #12]
 800a22e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	6126      	str	r6, [r4, #16]
 800a23a:	6165      	str	r5, [r4, #20]
 800a23c:	444e      	add	r6, r9
 800a23e:	eba5 0509 	sub.w	r5, r5, r9
 800a242:	6026      	str	r6, [r4, #0]
 800a244:	60a5      	str	r5, [r4, #8]
 800a246:	463e      	mov	r6, r7
 800a248:	42be      	cmp	r6, r7
 800a24a:	d900      	bls.n	800a24e <__ssputs_r+0x86>
 800a24c:	463e      	mov	r6, r7
 800a24e:	4632      	mov	r2, r6
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	4641      	mov	r1, r8
 800a254:	f000 fef8 	bl	800b048 <memmove>
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	1b9b      	subs	r3, r3, r6
 800a25e:	4432      	add	r2, r6
 800a260:	60a3      	str	r3, [r4, #8]
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	2000      	movs	r0, #0
 800a266:	e7db      	b.n	800a220 <__ssputs_r+0x58>
 800a268:	462a      	mov	r2, r5
 800a26a:	f000 ff13 	bl	800b094 <_realloc_r>
 800a26e:	4606      	mov	r6, r0
 800a270:	2800      	cmp	r0, #0
 800a272:	d1e1      	bne.n	800a238 <__ssputs_r+0x70>
 800a274:	6921      	ldr	r1, [r4, #16]
 800a276:	4650      	mov	r0, sl
 800a278:	f7ff fefc 	bl	800a074 <_free_r>
 800a27c:	e7c7      	b.n	800a20e <__ssputs_r+0x46>
	...

0800a280 <_svfiprintf_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	4698      	mov	r8, r3
 800a286:	898b      	ldrh	r3, [r1, #12]
 800a288:	061b      	lsls	r3, r3, #24
 800a28a:	b09d      	sub	sp, #116	; 0x74
 800a28c:	4607      	mov	r7, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	4614      	mov	r4, r2
 800a292:	d50e      	bpl.n	800a2b2 <_svfiprintf_r+0x32>
 800a294:	690b      	ldr	r3, [r1, #16]
 800a296:	b963      	cbnz	r3, 800a2b2 <_svfiprintf_r+0x32>
 800a298:	2140      	movs	r1, #64	; 0x40
 800a29a:	f7ff ff3b 	bl	800a114 <_malloc_r>
 800a29e:	6028      	str	r0, [r5, #0]
 800a2a0:	6128      	str	r0, [r5, #16]
 800a2a2:	b920      	cbnz	r0, 800a2ae <_svfiprintf_r+0x2e>
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e0d1      	b.n	800a452 <_svfiprintf_r+0x1d2>
 800a2ae:	2340      	movs	r3, #64	; 0x40
 800a2b0:	616b      	str	r3, [r5, #20]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2c0:	2330      	movs	r3, #48	; 0x30
 800a2c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a46c <_svfiprintf_r+0x1ec>
 800a2c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	4623      	mov	r3, r4
 800a2d0:	469a      	mov	sl, r3
 800a2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2d6:	b10a      	cbz	r2, 800a2dc <_svfiprintf_r+0x5c>
 800a2d8:	2a25      	cmp	r2, #37	; 0x25
 800a2da:	d1f9      	bne.n	800a2d0 <_svfiprintf_r+0x50>
 800a2dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a2e0:	d00b      	beq.n	800a2fa <_svfiprintf_r+0x7a>
 800a2e2:	465b      	mov	r3, fp
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff ff6d 	bl	800a1c8 <__ssputs_r>
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f000 80aa 	beq.w	800a448 <_svfiprintf_r+0x1c8>
 800a2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f6:	445a      	add	r2, fp
 800a2f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 80a2 	beq.w	800a448 <_svfiprintf_r+0x1c8>
 800a304:	2300      	movs	r3, #0
 800a306:	f04f 32ff 	mov.w	r2, #4294967295
 800a30a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a30e:	f10a 0a01 	add.w	sl, sl, #1
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	9307      	str	r3, [sp, #28]
 800a316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a31a:	931a      	str	r3, [sp, #104]	; 0x68
 800a31c:	4654      	mov	r4, sl
 800a31e:	2205      	movs	r2, #5
 800a320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a324:	4851      	ldr	r0, [pc, #324]	; (800a46c <_svfiprintf_r+0x1ec>)
 800a326:	f7f5 ff5b 	bl	80001e0 <memchr>
 800a32a:	9a04      	ldr	r2, [sp, #16]
 800a32c:	b9d8      	cbnz	r0, 800a366 <_svfiprintf_r+0xe6>
 800a32e:	06d0      	lsls	r0, r2, #27
 800a330:	bf44      	itt	mi
 800a332:	2320      	movmi	r3, #32
 800a334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a338:	0711      	lsls	r1, r2, #28
 800a33a:	bf44      	itt	mi
 800a33c:	232b      	movmi	r3, #43	; 0x2b
 800a33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a342:	f89a 3000 	ldrb.w	r3, [sl]
 800a346:	2b2a      	cmp	r3, #42	; 0x2a
 800a348:	d015      	beq.n	800a376 <_svfiprintf_r+0xf6>
 800a34a:	9a07      	ldr	r2, [sp, #28]
 800a34c:	4654      	mov	r4, sl
 800a34e:	2000      	movs	r0, #0
 800a350:	f04f 0c0a 	mov.w	ip, #10
 800a354:	4621      	mov	r1, r4
 800a356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a35a:	3b30      	subs	r3, #48	; 0x30
 800a35c:	2b09      	cmp	r3, #9
 800a35e:	d94e      	bls.n	800a3fe <_svfiprintf_r+0x17e>
 800a360:	b1b0      	cbz	r0, 800a390 <_svfiprintf_r+0x110>
 800a362:	9207      	str	r2, [sp, #28]
 800a364:	e014      	b.n	800a390 <_svfiprintf_r+0x110>
 800a366:	eba0 0308 	sub.w	r3, r0, r8
 800a36a:	fa09 f303 	lsl.w	r3, r9, r3
 800a36e:	4313      	orrs	r3, r2
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	46a2      	mov	sl, r4
 800a374:	e7d2      	b.n	800a31c <_svfiprintf_r+0x9c>
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	1d19      	adds	r1, r3, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	9103      	str	r1, [sp, #12]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	bfbb      	ittet	lt
 800a382:	425b      	neglt	r3, r3
 800a384:	f042 0202 	orrlt.w	r2, r2, #2
 800a388:	9307      	strge	r3, [sp, #28]
 800a38a:	9307      	strlt	r3, [sp, #28]
 800a38c:	bfb8      	it	lt
 800a38e:	9204      	strlt	r2, [sp, #16]
 800a390:	7823      	ldrb	r3, [r4, #0]
 800a392:	2b2e      	cmp	r3, #46	; 0x2e
 800a394:	d10c      	bne.n	800a3b0 <_svfiprintf_r+0x130>
 800a396:	7863      	ldrb	r3, [r4, #1]
 800a398:	2b2a      	cmp	r3, #42	; 0x2a
 800a39a:	d135      	bne.n	800a408 <_svfiprintf_r+0x188>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	1d1a      	adds	r2, r3, #4
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	9203      	str	r2, [sp, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bfb8      	it	lt
 800a3a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ac:	3402      	adds	r4, #2
 800a3ae:	9305      	str	r3, [sp, #20]
 800a3b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a47c <_svfiprintf_r+0x1fc>
 800a3b4:	7821      	ldrb	r1, [r4, #0]
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	f7f5 ff11 	bl	80001e0 <memchr>
 800a3be:	b140      	cbz	r0, 800a3d2 <_svfiprintf_r+0x152>
 800a3c0:	2340      	movs	r3, #64	; 0x40
 800a3c2:	eba0 000a 	sub.w	r0, r0, sl
 800a3c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	4303      	orrs	r3, r0
 800a3ce:	3401      	adds	r4, #1
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d6:	4826      	ldr	r0, [pc, #152]	; (800a470 <_svfiprintf_r+0x1f0>)
 800a3d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3dc:	2206      	movs	r2, #6
 800a3de:	f7f5 feff 	bl	80001e0 <memchr>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d038      	beq.n	800a458 <_svfiprintf_r+0x1d8>
 800a3e6:	4b23      	ldr	r3, [pc, #140]	; (800a474 <_svfiprintf_r+0x1f4>)
 800a3e8:	bb1b      	cbnz	r3, 800a432 <_svfiprintf_r+0x1b2>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	3307      	adds	r3, #7
 800a3ee:	f023 0307 	bic.w	r3, r3, #7
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	9303      	str	r3, [sp, #12]
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	4433      	add	r3, r6
 800a3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fc:	e767      	b.n	800a2ce <_svfiprintf_r+0x4e>
 800a3fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a402:	460c      	mov	r4, r1
 800a404:	2001      	movs	r0, #1
 800a406:	e7a5      	b.n	800a354 <_svfiprintf_r+0xd4>
 800a408:	2300      	movs	r3, #0
 800a40a:	3401      	adds	r4, #1
 800a40c:	9305      	str	r3, [sp, #20]
 800a40e:	4619      	mov	r1, r3
 800a410:	f04f 0c0a 	mov.w	ip, #10
 800a414:	4620      	mov	r0, r4
 800a416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a41a:	3a30      	subs	r2, #48	; 0x30
 800a41c:	2a09      	cmp	r2, #9
 800a41e:	d903      	bls.n	800a428 <_svfiprintf_r+0x1a8>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0c5      	beq.n	800a3b0 <_svfiprintf_r+0x130>
 800a424:	9105      	str	r1, [sp, #20]
 800a426:	e7c3      	b.n	800a3b0 <_svfiprintf_r+0x130>
 800a428:	fb0c 2101 	mla	r1, ip, r1, r2
 800a42c:	4604      	mov	r4, r0
 800a42e:	2301      	movs	r3, #1
 800a430:	e7f0      	b.n	800a414 <_svfiprintf_r+0x194>
 800a432:	ab03      	add	r3, sp, #12
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	462a      	mov	r2, r5
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <_svfiprintf_r+0x1f8>)
 800a43a:	a904      	add	r1, sp, #16
 800a43c:	4638      	mov	r0, r7
 800a43e:	f3af 8000 	nop.w
 800a442:	1c42      	adds	r2, r0, #1
 800a444:	4606      	mov	r6, r0
 800a446:	d1d6      	bne.n	800a3f6 <_svfiprintf_r+0x176>
 800a448:	89ab      	ldrh	r3, [r5, #12]
 800a44a:	065b      	lsls	r3, r3, #25
 800a44c:	f53f af2c 	bmi.w	800a2a8 <_svfiprintf_r+0x28>
 800a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a452:	b01d      	add	sp, #116	; 0x74
 800a454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a458:	ab03      	add	r3, sp, #12
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	462a      	mov	r2, r5
 800a45e:	4b06      	ldr	r3, [pc, #24]	; (800a478 <_svfiprintf_r+0x1f8>)
 800a460:	a904      	add	r1, sp, #16
 800a462:	4638      	mov	r0, r7
 800a464:	f000 f9d4 	bl	800a810 <_printf_i>
 800a468:	e7eb      	b.n	800a442 <_svfiprintf_r+0x1c2>
 800a46a:	bf00      	nop
 800a46c:	0800b4b2 	.word	0x0800b4b2
 800a470:	0800b4bc 	.word	0x0800b4bc
 800a474:	00000000 	.word	0x00000000
 800a478:	0800a1c9 	.word	0x0800a1c9
 800a47c:	0800b4b8 	.word	0x0800b4b8

0800a480 <__sfputc_r>:
 800a480:	6893      	ldr	r3, [r2, #8]
 800a482:	3b01      	subs	r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	b410      	push	{r4}
 800a488:	6093      	str	r3, [r2, #8]
 800a48a:	da08      	bge.n	800a49e <__sfputc_r+0x1e>
 800a48c:	6994      	ldr	r4, [r2, #24]
 800a48e:	42a3      	cmp	r3, r4
 800a490:	db01      	blt.n	800a496 <__sfputc_r+0x16>
 800a492:	290a      	cmp	r1, #10
 800a494:	d103      	bne.n	800a49e <__sfputc_r+0x1e>
 800a496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49a:	f000 baef 	b.w	800aa7c <__swbuf_r>
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	1c58      	adds	r0, r3, #1
 800a4a2:	6010      	str	r0, [r2, #0]
 800a4a4:	7019      	strb	r1, [r3, #0]
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <__sfputs_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	460f      	mov	r7, r1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	18d5      	adds	r5, r2, r3
 800a4b8:	42ac      	cmp	r4, r5
 800a4ba:	d101      	bne.n	800a4c0 <__sfputs_r+0x12>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	e007      	b.n	800a4d0 <__sfputs_r+0x22>
 800a4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c4:	463a      	mov	r2, r7
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ffda 	bl	800a480 <__sfputc_r>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d1f3      	bne.n	800a4b8 <__sfputs_r+0xa>
 800a4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4d4 <_vfiprintf_r>:
 800a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d8:	460d      	mov	r5, r1
 800a4da:	b09d      	sub	sp, #116	; 0x74
 800a4dc:	4614      	mov	r4, r2
 800a4de:	4698      	mov	r8, r3
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	b118      	cbz	r0, 800a4ec <_vfiprintf_r+0x18>
 800a4e4:	6983      	ldr	r3, [r0, #24]
 800a4e6:	b90b      	cbnz	r3, 800a4ec <_vfiprintf_r+0x18>
 800a4e8:	f000 fcaa 	bl	800ae40 <__sinit>
 800a4ec:	4b89      	ldr	r3, [pc, #548]	; (800a714 <_vfiprintf_r+0x240>)
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	d11b      	bne.n	800a52a <_vfiprintf_r+0x56>
 800a4f2:	6875      	ldr	r5, [r6, #4]
 800a4f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4f6:	07d9      	lsls	r1, r3, #31
 800a4f8:	d405      	bmi.n	800a506 <_vfiprintf_r+0x32>
 800a4fa:	89ab      	ldrh	r3, [r5, #12]
 800a4fc:	059a      	lsls	r2, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_vfiprintf_r+0x32>
 800a500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a502:	f000 fd3b 	bl	800af7c <__retarget_lock_acquire_recursive>
 800a506:	89ab      	ldrh	r3, [r5, #12]
 800a508:	071b      	lsls	r3, r3, #28
 800a50a:	d501      	bpl.n	800a510 <_vfiprintf_r+0x3c>
 800a50c:	692b      	ldr	r3, [r5, #16]
 800a50e:	b9eb      	cbnz	r3, 800a54c <_vfiprintf_r+0x78>
 800a510:	4629      	mov	r1, r5
 800a512:	4630      	mov	r0, r6
 800a514:	f000 fb04 	bl	800ab20 <__swsetup_r>
 800a518:	b1c0      	cbz	r0, 800a54c <_vfiprintf_r+0x78>
 800a51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a51c:	07dc      	lsls	r4, r3, #31
 800a51e:	d50e      	bpl.n	800a53e <_vfiprintf_r+0x6a>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	b01d      	add	sp, #116	; 0x74
 800a526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52a:	4b7b      	ldr	r3, [pc, #492]	; (800a718 <_vfiprintf_r+0x244>)
 800a52c:	429d      	cmp	r5, r3
 800a52e:	d101      	bne.n	800a534 <_vfiprintf_r+0x60>
 800a530:	68b5      	ldr	r5, [r6, #8]
 800a532:	e7df      	b.n	800a4f4 <_vfiprintf_r+0x20>
 800a534:	4b79      	ldr	r3, [pc, #484]	; (800a71c <_vfiprintf_r+0x248>)
 800a536:	429d      	cmp	r5, r3
 800a538:	bf08      	it	eq
 800a53a:	68f5      	ldreq	r5, [r6, #12]
 800a53c:	e7da      	b.n	800a4f4 <_vfiprintf_r+0x20>
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	0598      	lsls	r0, r3, #22
 800a542:	d4ed      	bmi.n	800a520 <_vfiprintf_r+0x4c>
 800a544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a546:	f000 fd1a 	bl	800af7e <__retarget_lock_release_recursive>
 800a54a:	e7e9      	b.n	800a520 <_vfiprintf_r+0x4c>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9309      	str	r3, [sp, #36]	; 0x24
 800a550:	2320      	movs	r3, #32
 800a552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a556:	f8cd 800c 	str.w	r8, [sp, #12]
 800a55a:	2330      	movs	r3, #48	; 0x30
 800a55c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a720 <_vfiprintf_r+0x24c>
 800a560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a564:	f04f 0901 	mov.w	r9, #1
 800a568:	4623      	mov	r3, r4
 800a56a:	469a      	mov	sl, r3
 800a56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a570:	b10a      	cbz	r2, 800a576 <_vfiprintf_r+0xa2>
 800a572:	2a25      	cmp	r2, #37	; 0x25
 800a574:	d1f9      	bne.n	800a56a <_vfiprintf_r+0x96>
 800a576:	ebba 0b04 	subs.w	fp, sl, r4
 800a57a:	d00b      	beq.n	800a594 <_vfiprintf_r+0xc0>
 800a57c:	465b      	mov	r3, fp
 800a57e:	4622      	mov	r2, r4
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ff93 	bl	800a4ae <__sfputs_r>
 800a588:	3001      	adds	r0, #1
 800a58a:	f000 80aa 	beq.w	800a6e2 <_vfiprintf_r+0x20e>
 800a58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a590:	445a      	add	r2, fp
 800a592:	9209      	str	r2, [sp, #36]	; 0x24
 800a594:	f89a 3000 	ldrb.w	r3, [sl]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80a2 	beq.w	800a6e2 <_vfiprintf_r+0x20e>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5a8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b6:	4654      	mov	r4, sl
 800a5b8:	2205      	movs	r2, #5
 800a5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5be:	4858      	ldr	r0, [pc, #352]	; (800a720 <_vfiprintf_r+0x24c>)
 800a5c0:	f7f5 fe0e 	bl	80001e0 <memchr>
 800a5c4:	9a04      	ldr	r2, [sp, #16]
 800a5c6:	b9d8      	cbnz	r0, 800a600 <_vfiprintf_r+0x12c>
 800a5c8:	06d1      	lsls	r1, r2, #27
 800a5ca:	bf44      	itt	mi
 800a5cc:	2320      	movmi	r3, #32
 800a5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d2:	0713      	lsls	r3, r2, #28
 800a5d4:	bf44      	itt	mi
 800a5d6:	232b      	movmi	r3, #43	; 0x2b
 800a5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e2:	d015      	beq.n	800a610 <_vfiprintf_r+0x13c>
 800a5e4:	9a07      	ldr	r2, [sp, #28]
 800a5e6:	4654      	mov	r4, sl
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f4:	3b30      	subs	r3, #48	; 0x30
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d94e      	bls.n	800a698 <_vfiprintf_r+0x1c4>
 800a5fa:	b1b0      	cbz	r0, 800a62a <_vfiprintf_r+0x156>
 800a5fc:	9207      	str	r2, [sp, #28]
 800a5fe:	e014      	b.n	800a62a <_vfiprintf_r+0x156>
 800a600:	eba0 0308 	sub.w	r3, r0, r8
 800a604:	fa09 f303 	lsl.w	r3, r9, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	46a2      	mov	sl, r4
 800a60e:	e7d2      	b.n	800a5b6 <_vfiprintf_r+0xe2>
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	1d19      	adds	r1, r3, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	9103      	str	r1, [sp, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bfbb      	ittet	lt
 800a61c:	425b      	neglt	r3, r3
 800a61e:	f042 0202 	orrlt.w	r2, r2, #2
 800a622:	9307      	strge	r3, [sp, #28]
 800a624:	9307      	strlt	r3, [sp, #28]
 800a626:	bfb8      	it	lt
 800a628:	9204      	strlt	r2, [sp, #16]
 800a62a:	7823      	ldrb	r3, [r4, #0]
 800a62c:	2b2e      	cmp	r3, #46	; 0x2e
 800a62e:	d10c      	bne.n	800a64a <_vfiprintf_r+0x176>
 800a630:	7863      	ldrb	r3, [r4, #1]
 800a632:	2b2a      	cmp	r3, #42	; 0x2a
 800a634:	d135      	bne.n	800a6a2 <_vfiprintf_r+0x1ce>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	1d1a      	adds	r2, r3, #4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	9203      	str	r2, [sp, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfb8      	it	lt
 800a642:	f04f 33ff 	movlt.w	r3, #4294967295
 800a646:	3402      	adds	r4, #2
 800a648:	9305      	str	r3, [sp, #20]
 800a64a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a730 <_vfiprintf_r+0x25c>
 800a64e:	7821      	ldrb	r1, [r4, #0]
 800a650:	2203      	movs	r2, #3
 800a652:	4650      	mov	r0, sl
 800a654:	f7f5 fdc4 	bl	80001e0 <memchr>
 800a658:	b140      	cbz	r0, 800a66c <_vfiprintf_r+0x198>
 800a65a:	2340      	movs	r3, #64	; 0x40
 800a65c:	eba0 000a 	sub.w	r0, r0, sl
 800a660:	fa03 f000 	lsl.w	r0, r3, r0
 800a664:	9b04      	ldr	r3, [sp, #16]
 800a666:	4303      	orrs	r3, r0
 800a668:	3401      	adds	r4, #1
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a670:	482c      	ldr	r0, [pc, #176]	; (800a724 <_vfiprintf_r+0x250>)
 800a672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a676:	2206      	movs	r2, #6
 800a678:	f7f5 fdb2 	bl	80001e0 <memchr>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d03f      	beq.n	800a700 <_vfiprintf_r+0x22c>
 800a680:	4b29      	ldr	r3, [pc, #164]	; (800a728 <_vfiprintf_r+0x254>)
 800a682:	bb1b      	cbnz	r3, 800a6cc <_vfiprintf_r+0x1f8>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	3307      	adds	r3, #7
 800a688:	f023 0307 	bic.w	r3, r3, #7
 800a68c:	3308      	adds	r3, #8
 800a68e:	9303      	str	r3, [sp, #12]
 800a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a692:	443b      	add	r3, r7
 800a694:	9309      	str	r3, [sp, #36]	; 0x24
 800a696:	e767      	b.n	800a568 <_vfiprintf_r+0x94>
 800a698:	fb0c 3202 	mla	r2, ip, r2, r3
 800a69c:	460c      	mov	r4, r1
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7a5      	b.n	800a5ee <_vfiprintf_r+0x11a>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	3401      	adds	r4, #1
 800a6a6:	9305      	str	r3, [sp, #20]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	f04f 0c0a 	mov.w	ip, #10
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b4:	3a30      	subs	r2, #48	; 0x30
 800a6b6:	2a09      	cmp	r2, #9
 800a6b8:	d903      	bls.n	800a6c2 <_vfiprintf_r+0x1ee>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0c5      	beq.n	800a64a <_vfiprintf_r+0x176>
 800a6be:	9105      	str	r1, [sp, #20]
 800a6c0:	e7c3      	b.n	800a64a <_vfiprintf_r+0x176>
 800a6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e7f0      	b.n	800a6ae <_vfiprintf_r+0x1da>
 800a6cc:	ab03      	add	r3, sp, #12
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	4b16      	ldr	r3, [pc, #88]	; (800a72c <_vfiprintf_r+0x258>)
 800a6d4:	a904      	add	r1, sp, #16
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f3af 8000 	nop.w
 800a6dc:	4607      	mov	r7, r0
 800a6de:	1c78      	adds	r0, r7, #1
 800a6e0:	d1d6      	bne.n	800a690 <_vfiprintf_r+0x1bc>
 800a6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e4:	07d9      	lsls	r1, r3, #31
 800a6e6:	d405      	bmi.n	800a6f4 <_vfiprintf_r+0x220>
 800a6e8:	89ab      	ldrh	r3, [r5, #12]
 800a6ea:	059a      	lsls	r2, r3, #22
 800a6ec:	d402      	bmi.n	800a6f4 <_vfiprintf_r+0x220>
 800a6ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6f0:	f000 fc45 	bl	800af7e <__retarget_lock_release_recursive>
 800a6f4:	89ab      	ldrh	r3, [r5, #12]
 800a6f6:	065b      	lsls	r3, r3, #25
 800a6f8:	f53f af12 	bmi.w	800a520 <_vfiprintf_r+0x4c>
 800a6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6fe:	e711      	b.n	800a524 <_vfiprintf_r+0x50>
 800a700:	ab03      	add	r3, sp, #12
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	462a      	mov	r2, r5
 800a706:	4b09      	ldr	r3, [pc, #36]	; (800a72c <_vfiprintf_r+0x258>)
 800a708:	a904      	add	r1, sp, #16
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 f880 	bl	800a810 <_printf_i>
 800a710:	e7e4      	b.n	800a6dc <_vfiprintf_r+0x208>
 800a712:	bf00      	nop
 800a714:	0800b508 	.word	0x0800b508
 800a718:	0800b528 	.word	0x0800b528
 800a71c:	0800b4e8 	.word	0x0800b4e8
 800a720:	0800b4b2 	.word	0x0800b4b2
 800a724:	0800b4bc 	.word	0x0800b4bc
 800a728:	00000000 	.word	0x00000000
 800a72c:	0800a4af 	.word	0x0800a4af
 800a730:	0800b4b8 	.word	0x0800b4b8

0800a734 <_printf_common>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	4616      	mov	r6, r2
 800a73a:	4699      	mov	r9, r3
 800a73c:	688a      	ldr	r2, [r1, #8]
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a744:	4293      	cmp	r3, r2
 800a746:	bfb8      	it	lt
 800a748:	4613      	movlt	r3, r2
 800a74a:	6033      	str	r3, [r6, #0]
 800a74c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a750:	4607      	mov	r7, r0
 800a752:	460c      	mov	r4, r1
 800a754:	b10a      	cbz	r2, 800a75a <_printf_common+0x26>
 800a756:	3301      	adds	r3, #1
 800a758:	6033      	str	r3, [r6, #0]
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	0699      	lsls	r1, r3, #26
 800a75e:	bf42      	ittt	mi
 800a760:	6833      	ldrmi	r3, [r6, #0]
 800a762:	3302      	addmi	r3, #2
 800a764:	6033      	strmi	r3, [r6, #0]
 800a766:	6825      	ldr	r5, [r4, #0]
 800a768:	f015 0506 	ands.w	r5, r5, #6
 800a76c:	d106      	bne.n	800a77c <_printf_common+0x48>
 800a76e:	f104 0a19 	add.w	sl, r4, #25
 800a772:	68e3      	ldr	r3, [r4, #12]
 800a774:	6832      	ldr	r2, [r6, #0]
 800a776:	1a9b      	subs	r3, r3, r2
 800a778:	42ab      	cmp	r3, r5
 800a77a:	dc26      	bgt.n	800a7ca <_printf_common+0x96>
 800a77c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a780:	1e13      	subs	r3, r2, #0
 800a782:	6822      	ldr	r2, [r4, #0]
 800a784:	bf18      	it	ne
 800a786:	2301      	movne	r3, #1
 800a788:	0692      	lsls	r2, r2, #26
 800a78a:	d42b      	bmi.n	800a7e4 <_printf_common+0xb0>
 800a78c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a790:	4649      	mov	r1, r9
 800a792:	4638      	mov	r0, r7
 800a794:	47c0      	blx	r8
 800a796:	3001      	adds	r0, #1
 800a798:	d01e      	beq.n	800a7d8 <_printf_common+0xa4>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	68e5      	ldr	r5, [r4, #12]
 800a79e:	6832      	ldr	r2, [r6, #0]
 800a7a0:	f003 0306 	and.w	r3, r3, #6
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	bf08      	it	eq
 800a7a8:	1aad      	subeq	r5, r5, r2
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	bf0c      	ite	eq
 800a7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b4:	2500      	movne	r5, #0
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	bfc4      	itt	gt
 800a7ba:	1a9b      	subgt	r3, r3, r2
 800a7bc:	18ed      	addgt	r5, r5, r3
 800a7be:	2600      	movs	r6, #0
 800a7c0:	341a      	adds	r4, #26
 800a7c2:	42b5      	cmp	r5, r6
 800a7c4:	d11a      	bne.n	800a7fc <_printf_common+0xc8>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e008      	b.n	800a7dc <_printf_common+0xa8>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4652      	mov	r2, sl
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	47c0      	blx	r8
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d103      	bne.n	800a7e0 <_printf_common+0xac>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e0:	3501      	adds	r5, #1
 800a7e2:	e7c6      	b.n	800a772 <_printf_common+0x3e>
 800a7e4:	18e1      	adds	r1, r4, r3
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	2030      	movs	r0, #48	; 0x30
 800a7ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ee:	4422      	add	r2, r4
 800a7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	e7c7      	b.n	800a78c <_printf_common+0x58>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4622      	mov	r2, r4
 800a800:	4649      	mov	r1, r9
 800a802:	4638      	mov	r0, r7
 800a804:	47c0      	blx	r8
 800a806:	3001      	adds	r0, #1
 800a808:	d0e6      	beq.n	800a7d8 <_printf_common+0xa4>
 800a80a:	3601      	adds	r6, #1
 800a80c:	e7d9      	b.n	800a7c2 <_printf_common+0x8e>
	...

0800a810 <_printf_i>:
 800a810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	460c      	mov	r4, r1
 800a816:	4691      	mov	r9, r2
 800a818:	7e27      	ldrb	r7, [r4, #24]
 800a81a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a81c:	2f78      	cmp	r7, #120	; 0x78
 800a81e:	4680      	mov	r8, r0
 800a820:	469a      	mov	sl, r3
 800a822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a826:	d807      	bhi.n	800a838 <_printf_i+0x28>
 800a828:	2f62      	cmp	r7, #98	; 0x62
 800a82a:	d80a      	bhi.n	800a842 <_printf_i+0x32>
 800a82c:	2f00      	cmp	r7, #0
 800a82e:	f000 80d8 	beq.w	800a9e2 <_printf_i+0x1d2>
 800a832:	2f58      	cmp	r7, #88	; 0x58
 800a834:	f000 80a3 	beq.w	800a97e <_printf_i+0x16e>
 800a838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a83c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a840:	e03a      	b.n	800a8b8 <_printf_i+0xa8>
 800a842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a846:	2b15      	cmp	r3, #21
 800a848:	d8f6      	bhi.n	800a838 <_printf_i+0x28>
 800a84a:	a001      	add	r0, pc, #4	; (adr r0, 800a850 <_printf_i+0x40>)
 800a84c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a850:	0800a8a9 	.word	0x0800a8a9
 800a854:	0800a8bd 	.word	0x0800a8bd
 800a858:	0800a839 	.word	0x0800a839
 800a85c:	0800a839 	.word	0x0800a839
 800a860:	0800a839 	.word	0x0800a839
 800a864:	0800a839 	.word	0x0800a839
 800a868:	0800a8bd 	.word	0x0800a8bd
 800a86c:	0800a839 	.word	0x0800a839
 800a870:	0800a839 	.word	0x0800a839
 800a874:	0800a839 	.word	0x0800a839
 800a878:	0800a839 	.word	0x0800a839
 800a87c:	0800a9c9 	.word	0x0800a9c9
 800a880:	0800a8ed 	.word	0x0800a8ed
 800a884:	0800a9ab 	.word	0x0800a9ab
 800a888:	0800a839 	.word	0x0800a839
 800a88c:	0800a839 	.word	0x0800a839
 800a890:	0800a9eb 	.word	0x0800a9eb
 800a894:	0800a839 	.word	0x0800a839
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a839 	.word	0x0800a839
 800a8a0:	0800a839 	.word	0x0800a839
 800a8a4:	0800a9b3 	.word	0x0800a9b3
 800a8a8:	680b      	ldr	r3, [r1, #0]
 800a8aa:	1d1a      	adds	r2, r3, #4
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	600a      	str	r2, [r1, #0]
 800a8b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e0a3      	b.n	800aa04 <_printf_i+0x1f4>
 800a8bc:	6825      	ldr	r5, [r4, #0]
 800a8be:	6808      	ldr	r0, [r1, #0]
 800a8c0:	062e      	lsls	r6, r5, #24
 800a8c2:	f100 0304 	add.w	r3, r0, #4
 800a8c6:	d50a      	bpl.n	800a8de <_printf_i+0xce>
 800a8c8:	6805      	ldr	r5, [r0, #0]
 800a8ca:	600b      	str	r3, [r1, #0]
 800a8cc:	2d00      	cmp	r5, #0
 800a8ce:	da03      	bge.n	800a8d8 <_printf_i+0xc8>
 800a8d0:	232d      	movs	r3, #45	; 0x2d
 800a8d2:	426d      	negs	r5, r5
 800a8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d8:	485e      	ldr	r0, [pc, #376]	; (800aa54 <_printf_i+0x244>)
 800a8da:	230a      	movs	r3, #10
 800a8dc:	e019      	b.n	800a912 <_printf_i+0x102>
 800a8de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a8e2:	6805      	ldr	r5, [r0, #0]
 800a8e4:	600b      	str	r3, [r1, #0]
 800a8e6:	bf18      	it	ne
 800a8e8:	b22d      	sxthne	r5, r5
 800a8ea:	e7ef      	b.n	800a8cc <_printf_i+0xbc>
 800a8ec:	680b      	ldr	r3, [r1, #0]
 800a8ee:	6825      	ldr	r5, [r4, #0]
 800a8f0:	1d18      	adds	r0, r3, #4
 800a8f2:	6008      	str	r0, [r1, #0]
 800a8f4:	0628      	lsls	r0, r5, #24
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0xec>
 800a8f8:	681d      	ldr	r5, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0xf2>
 800a8fc:	0669      	lsls	r1, r5, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0xe8>
 800a900:	881d      	ldrh	r5, [r3, #0]
 800a902:	4854      	ldr	r0, [pc, #336]	; (800aa54 <_printf_i+0x244>)
 800a904:	2f6f      	cmp	r7, #111	; 0x6f
 800a906:	bf0c      	ite	eq
 800a908:	2308      	moveq	r3, #8
 800a90a:	230a      	movne	r3, #10
 800a90c:	2100      	movs	r1, #0
 800a90e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a912:	6866      	ldr	r6, [r4, #4]
 800a914:	60a6      	str	r6, [r4, #8]
 800a916:	2e00      	cmp	r6, #0
 800a918:	bfa2      	ittt	ge
 800a91a:	6821      	ldrge	r1, [r4, #0]
 800a91c:	f021 0104 	bicge.w	r1, r1, #4
 800a920:	6021      	strge	r1, [r4, #0]
 800a922:	b90d      	cbnz	r5, 800a928 <_printf_i+0x118>
 800a924:	2e00      	cmp	r6, #0
 800a926:	d04d      	beq.n	800a9c4 <_printf_i+0x1b4>
 800a928:	4616      	mov	r6, r2
 800a92a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a92e:	fb03 5711 	mls	r7, r3, r1, r5
 800a932:	5dc7      	ldrb	r7, [r0, r7]
 800a934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a938:	462f      	mov	r7, r5
 800a93a:	42bb      	cmp	r3, r7
 800a93c:	460d      	mov	r5, r1
 800a93e:	d9f4      	bls.n	800a92a <_printf_i+0x11a>
 800a940:	2b08      	cmp	r3, #8
 800a942:	d10b      	bne.n	800a95c <_printf_i+0x14c>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	07df      	lsls	r7, r3, #31
 800a948:	d508      	bpl.n	800a95c <_printf_i+0x14c>
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6861      	ldr	r1, [r4, #4]
 800a94e:	4299      	cmp	r1, r3
 800a950:	bfde      	ittt	le
 800a952:	2330      	movle	r3, #48	; 0x30
 800a954:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a95c:	1b92      	subs	r2, r2, r6
 800a95e:	6122      	str	r2, [r4, #16]
 800a960:	f8cd a000 	str.w	sl, [sp]
 800a964:	464b      	mov	r3, r9
 800a966:	aa03      	add	r2, sp, #12
 800a968:	4621      	mov	r1, r4
 800a96a:	4640      	mov	r0, r8
 800a96c:	f7ff fee2 	bl	800a734 <_printf_common>
 800a970:	3001      	adds	r0, #1
 800a972:	d14c      	bne.n	800aa0e <_printf_i+0x1fe>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b004      	add	sp, #16
 800a97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97e:	4835      	ldr	r0, [pc, #212]	; (800aa54 <_printf_i+0x244>)
 800a980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	680e      	ldr	r6, [r1, #0]
 800a988:	061f      	lsls	r7, r3, #24
 800a98a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a98e:	600e      	str	r6, [r1, #0]
 800a990:	d514      	bpl.n	800a9bc <_printf_i+0x1ac>
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	bf44      	itt	mi
 800a996:	f043 0320 	orrmi.w	r3, r3, #32
 800a99a:	6023      	strmi	r3, [r4, #0]
 800a99c:	b91d      	cbnz	r5, 800a9a6 <_printf_i+0x196>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	f023 0320 	bic.w	r3, r3, #32
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	2310      	movs	r3, #16
 800a9a8:	e7b0      	b.n	800a90c <_printf_i+0xfc>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	f043 0320 	orr.w	r3, r3, #32
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	2378      	movs	r3, #120	; 0x78
 800a9b4:	4828      	ldr	r0, [pc, #160]	; (800aa58 <_printf_i+0x248>)
 800a9b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9ba:	e7e3      	b.n	800a984 <_printf_i+0x174>
 800a9bc:	065e      	lsls	r6, r3, #25
 800a9be:	bf48      	it	mi
 800a9c0:	b2ad      	uxthmi	r5, r5
 800a9c2:	e7e6      	b.n	800a992 <_printf_i+0x182>
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	e7bb      	b.n	800a940 <_printf_i+0x130>
 800a9c8:	680b      	ldr	r3, [r1, #0]
 800a9ca:	6826      	ldr	r6, [r4, #0]
 800a9cc:	6960      	ldr	r0, [r4, #20]
 800a9ce:	1d1d      	adds	r5, r3, #4
 800a9d0:	600d      	str	r5, [r1, #0]
 800a9d2:	0635      	lsls	r5, r6, #24
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	d501      	bpl.n	800a9dc <_printf_i+0x1cc>
 800a9d8:	6018      	str	r0, [r3, #0]
 800a9da:	e002      	b.n	800a9e2 <_printf_i+0x1d2>
 800a9dc:	0671      	lsls	r1, r6, #25
 800a9de:	d5fb      	bpl.n	800a9d8 <_printf_i+0x1c8>
 800a9e0:	8018      	strh	r0, [r3, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	4616      	mov	r6, r2
 800a9e8:	e7ba      	b.n	800a960 <_printf_i+0x150>
 800a9ea:	680b      	ldr	r3, [r1, #0]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	600a      	str	r2, [r1, #0]
 800a9f0:	681e      	ldr	r6, [r3, #0]
 800a9f2:	6862      	ldr	r2, [r4, #4]
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7f5 fbf2 	bl	80001e0 <memchr>
 800a9fc:	b108      	cbz	r0, 800aa02 <_printf_i+0x1f2>
 800a9fe:	1b80      	subs	r0, r0, r6
 800aa00:	6060      	str	r0, [r4, #4]
 800aa02:	6863      	ldr	r3, [r4, #4]
 800aa04:	6123      	str	r3, [r4, #16]
 800aa06:	2300      	movs	r3, #0
 800aa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa0c:	e7a8      	b.n	800a960 <_printf_i+0x150>
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	4632      	mov	r2, r6
 800aa12:	4649      	mov	r1, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	47d0      	blx	sl
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d0ab      	beq.n	800a974 <_printf_i+0x164>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	079b      	lsls	r3, r3, #30
 800aa20:	d413      	bmi.n	800aa4a <_printf_i+0x23a>
 800aa22:	68e0      	ldr	r0, [r4, #12]
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	4298      	cmp	r0, r3
 800aa28:	bfb8      	it	lt
 800aa2a:	4618      	movlt	r0, r3
 800aa2c:	e7a4      	b.n	800a978 <_printf_i+0x168>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	4632      	mov	r2, r6
 800aa32:	4649      	mov	r1, r9
 800aa34:	4640      	mov	r0, r8
 800aa36:	47d0      	blx	sl
 800aa38:	3001      	adds	r0, #1
 800aa3a:	d09b      	beq.n	800a974 <_printf_i+0x164>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	68e3      	ldr	r3, [r4, #12]
 800aa40:	9903      	ldr	r1, [sp, #12]
 800aa42:	1a5b      	subs	r3, r3, r1
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dcf2      	bgt.n	800aa2e <_printf_i+0x21e>
 800aa48:	e7eb      	b.n	800aa22 <_printf_i+0x212>
 800aa4a:	2500      	movs	r5, #0
 800aa4c:	f104 0619 	add.w	r6, r4, #25
 800aa50:	e7f5      	b.n	800aa3e <_printf_i+0x22e>
 800aa52:	bf00      	nop
 800aa54:	0800b4c3 	.word	0x0800b4c3
 800aa58:	0800b4d4 	.word	0x0800b4d4

0800aa5c <_sbrk_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d06      	ldr	r5, [pc, #24]	; (800aa78 <_sbrk_r+0x1c>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	f7f8 fc5a 	bl	8003320 <_sbrk>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_sbrk_r+0x1a>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_sbrk_r+0x1a>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20000d30 	.word	0x20000d30

0800aa7c <__swbuf_r>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	460e      	mov	r6, r1
 800aa80:	4614      	mov	r4, r2
 800aa82:	4605      	mov	r5, r0
 800aa84:	b118      	cbz	r0, 800aa8e <__swbuf_r+0x12>
 800aa86:	6983      	ldr	r3, [r0, #24]
 800aa88:	b90b      	cbnz	r3, 800aa8e <__swbuf_r+0x12>
 800aa8a:	f000 f9d9 	bl	800ae40 <__sinit>
 800aa8e:	4b21      	ldr	r3, [pc, #132]	; (800ab14 <__swbuf_r+0x98>)
 800aa90:	429c      	cmp	r4, r3
 800aa92:	d12b      	bne.n	800aaec <__swbuf_r+0x70>
 800aa94:	686c      	ldr	r4, [r5, #4]
 800aa96:	69a3      	ldr	r3, [r4, #24]
 800aa98:	60a3      	str	r3, [r4, #8]
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	071a      	lsls	r2, r3, #28
 800aa9e:	d52f      	bpl.n	800ab00 <__swbuf_r+0x84>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	b36b      	cbz	r3, 800ab00 <__swbuf_r+0x84>
 800aaa4:	6923      	ldr	r3, [r4, #16]
 800aaa6:	6820      	ldr	r0, [r4, #0]
 800aaa8:	1ac0      	subs	r0, r0, r3
 800aaaa:	6963      	ldr	r3, [r4, #20]
 800aaac:	b2f6      	uxtb	r6, r6
 800aaae:	4283      	cmp	r3, r0
 800aab0:	4637      	mov	r7, r6
 800aab2:	dc04      	bgt.n	800aabe <__swbuf_r+0x42>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f92e 	bl	800ad18 <_fflush_r>
 800aabc:	bb30      	cbnz	r0, 800ab0c <__swbuf_r+0x90>
 800aabe:	68a3      	ldr	r3, [r4, #8]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	60a3      	str	r3, [r4, #8]
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	6022      	str	r2, [r4, #0]
 800aaca:	701e      	strb	r6, [r3, #0]
 800aacc:	6963      	ldr	r3, [r4, #20]
 800aace:	3001      	adds	r0, #1
 800aad0:	4283      	cmp	r3, r0
 800aad2:	d004      	beq.n	800aade <__swbuf_r+0x62>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	07db      	lsls	r3, r3, #31
 800aad8:	d506      	bpl.n	800aae8 <__swbuf_r+0x6c>
 800aada:	2e0a      	cmp	r6, #10
 800aadc:	d104      	bne.n	800aae8 <__swbuf_r+0x6c>
 800aade:	4621      	mov	r1, r4
 800aae0:	4628      	mov	r0, r5
 800aae2:	f000 f919 	bl	800ad18 <_fflush_r>
 800aae6:	b988      	cbnz	r0, 800ab0c <__swbuf_r+0x90>
 800aae8:	4638      	mov	r0, r7
 800aaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaec:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <__swbuf_r+0x9c>)
 800aaee:	429c      	cmp	r4, r3
 800aaf0:	d101      	bne.n	800aaf6 <__swbuf_r+0x7a>
 800aaf2:	68ac      	ldr	r4, [r5, #8]
 800aaf4:	e7cf      	b.n	800aa96 <__swbuf_r+0x1a>
 800aaf6:	4b09      	ldr	r3, [pc, #36]	; (800ab1c <__swbuf_r+0xa0>)
 800aaf8:	429c      	cmp	r4, r3
 800aafa:	bf08      	it	eq
 800aafc:	68ec      	ldreq	r4, [r5, #12]
 800aafe:	e7ca      	b.n	800aa96 <__swbuf_r+0x1a>
 800ab00:	4621      	mov	r1, r4
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f80c 	bl	800ab20 <__swsetup_r>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d0cb      	beq.n	800aaa4 <__swbuf_r+0x28>
 800ab0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab10:	e7ea      	b.n	800aae8 <__swbuf_r+0x6c>
 800ab12:	bf00      	nop
 800ab14:	0800b508 	.word	0x0800b508
 800ab18:	0800b528 	.word	0x0800b528
 800ab1c:	0800b4e8 	.word	0x0800b4e8

0800ab20 <__swsetup_r>:
 800ab20:	4b32      	ldr	r3, [pc, #200]	; (800abec <__swsetup_r+0xcc>)
 800ab22:	b570      	push	{r4, r5, r6, lr}
 800ab24:	681d      	ldr	r5, [r3, #0]
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b125      	cbz	r5, 800ab36 <__swsetup_r+0x16>
 800ab2c:	69ab      	ldr	r3, [r5, #24]
 800ab2e:	b913      	cbnz	r3, 800ab36 <__swsetup_r+0x16>
 800ab30:	4628      	mov	r0, r5
 800ab32:	f000 f985 	bl	800ae40 <__sinit>
 800ab36:	4b2e      	ldr	r3, [pc, #184]	; (800abf0 <__swsetup_r+0xd0>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d10f      	bne.n	800ab5c <__swsetup_r+0x3c>
 800ab3c:	686c      	ldr	r4, [r5, #4]
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab44:	0719      	lsls	r1, r3, #28
 800ab46:	d42c      	bmi.n	800aba2 <__swsetup_r+0x82>
 800ab48:	06dd      	lsls	r5, r3, #27
 800ab4a:	d411      	bmi.n	800ab70 <__swsetup_r+0x50>
 800ab4c:	2309      	movs	r3, #9
 800ab4e:	6033      	str	r3, [r6, #0]
 800ab50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	e03e      	b.n	800abda <__swsetup_r+0xba>
 800ab5c:	4b25      	ldr	r3, [pc, #148]	; (800abf4 <__swsetup_r+0xd4>)
 800ab5e:	429c      	cmp	r4, r3
 800ab60:	d101      	bne.n	800ab66 <__swsetup_r+0x46>
 800ab62:	68ac      	ldr	r4, [r5, #8]
 800ab64:	e7eb      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab66:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <__swsetup_r+0xd8>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	bf08      	it	eq
 800ab6c:	68ec      	ldreq	r4, [r5, #12]
 800ab6e:	e7e6      	b.n	800ab3e <__swsetup_r+0x1e>
 800ab70:	0758      	lsls	r0, r3, #29
 800ab72:	d512      	bpl.n	800ab9a <__swsetup_r+0x7a>
 800ab74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab76:	b141      	cbz	r1, 800ab8a <__swsetup_r+0x6a>
 800ab78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	d002      	beq.n	800ab86 <__swsetup_r+0x66>
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7ff fa77 	bl	800a074 <_free_r>
 800ab86:	2300      	movs	r3, #0
 800ab88:	6363      	str	r3, [r4, #52]	; 0x34
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	6063      	str	r3, [r4, #4]
 800ab96:	6923      	ldr	r3, [r4, #16]
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f043 0308 	orr.w	r3, r3, #8
 800aba0:	81a3      	strh	r3, [r4, #12]
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	b94b      	cbnz	r3, 800abba <__swsetup_r+0x9a>
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb0:	d003      	beq.n	800abba <__swsetup_r+0x9a>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 fa07 	bl	800afc8 <__smakebuf_r>
 800abba:	89a0      	ldrh	r0, [r4, #12]
 800abbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc0:	f010 0301 	ands.w	r3, r0, #1
 800abc4:	d00a      	beq.n	800abdc <__swsetup_r+0xbc>
 800abc6:	2300      	movs	r3, #0
 800abc8:	60a3      	str	r3, [r4, #8]
 800abca:	6963      	ldr	r3, [r4, #20]
 800abcc:	425b      	negs	r3, r3
 800abce:	61a3      	str	r3, [r4, #24]
 800abd0:	6923      	ldr	r3, [r4, #16]
 800abd2:	b943      	cbnz	r3, 800abe6 <__swsetup_r+0xc6>
 800abd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abd8:	d1ba      	bne.n	800ab50 <__swsetup_r+0x30>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	0781      	lsls	r1, r0, #30
 800abde:	bf58      	it	pl
 800abe0:	6963      	ldrpl	r3, [r4, #20]
 800abe2:	60a3      	str	r3, [r4, #8]
 800abe4:	e7f4      	b.n	800abd0 <__swsetup_r+0xb0>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e7f7      	b.n	800abda <__swsetup_r+0xba>
 800abea:	bf00      	nop
 800abec:	20000100 	.word	0x20000100
 800abf0:	0800b508 	.word	0x0800b508
 800abf4:	0800b528 	.word	0x0800b528
 800abf8:	0800b4e8 	.word	0x0800b4e8

0800abfc <abort>:
 800abfc:	b508      	push	{r3, lr}
 800abfe:	2006      	movs	r0, #6
 800ac00:	f000 fa96 	bl	800b130 <raise>
 800ac04:	2001      	movs	r0, #1
 800ac06:	f7f8 fb13 	bl	8003230 <_exit>
	...

0800ac0c <__sflush_r>:
 800ac0c:	898a      	ldrh	r2, [r1, #12]
 800ac0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	4605      	mov	r5, r0
 800ac14:	0710      	lsls	r0, r2, #28
 800ac16:	460c      	mov	r4, r1
 800ac18:	d458      	bmi.n	800accc <__sflush_r+0xc0>
 800ac1a:	684b      	ldr	r3, [r1, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dc05      	bgt.n	800ac2c <__sflush_r+0x20>
 800ac20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dc02      	bgt.n	800ac2c <__sflush_r+0x20>
 800ac26:	2000      	movs	r0, #0
 800ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac2e:	2e00      	cmp	r6, #0
 800ac30:	d0f9      	beq.n	800ac26 <__sflush_r+0x1a>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac38:	682f      	ldr	r7, [r5, #0]
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	d032      	beq.n	800aca4 <__sflush_r+0x98>
 800ac3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	075a      	lsls	r2, r3, #29
 800ac44:	d505      	bpl.n	800ac52 <__sflush_r+0x46>
 800ac46:	6863      	ldr	r3, [r4, #4]
 800ac48:	1ac0      	subs	r0, r0, r3
 800ac4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac4c:	b10b      	cbz	r3, 800ac52 <__sflush_r+0x46>
 800ac4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac50:	1ac0      	subs	r0, r0, r3
 800ac52:	2300      	movs	r3, #0
 800ac54:	4602      	mov	r2, r0
 800ac56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac58:	6a21      	ldr	r1, [r4, #32]
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b0      	blx	r6
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	d106      	bne.n	800ac72 <__sflush_r+0x66>
 800ac64:	6829      	ldr	r1, [r5, #0]
 800ac66:	291d      	cmp	r1, #29
 800ac68:	d82c      	bhi.n	800acc4 <__sflush_r+0xb8>
 800ac6a:	4a2a      	ldr	r2, [pc, #168]	; (800ad14 <__sflush_r+0x108>)
 800ac6c:	40ca      	lsrs	r2, r1
 800ac6e:	07d6      	lsls	r6, r2, #31
 800ac70:	d528      	bpl.n	800acc4 <__sflush_r+0xb8>
 800ac72:	2200      	movs	r2, #0
 800ac74:	6062      	str	r2, [r4, #4]
 800ac76:	04d9      	lsls	r1, r3, #19
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	6022      	str	r2, [r4, #0]
 800ac7c:	d504      	bpl.n	800ac88 <__sflush_r+0x7c>
 800ac7e:	1c42      	adds	r2, r0, #1
 800ac80:	d101      	bne.n	800ac86 <__sflush_r+0x7a>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	b903      	cbnz	r3, 800ac88 <__sflush_r+0x7c>
 800ac86:	6560      	str	r0, [r4, #84]	; 0x54
 800ac88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac8a:	602f      	str	r7, [r5, #0]
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d0ca      	beq.n	800ac26 <__sflush_r+0x1a>
 800ac90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac94:	4299      	cmp	r1, r3
 800ac96:	d002      	beq.n	800ac9e <__sflush_r+0x92>
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f7ff f9eb 	bl	800a074 <_free_r>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	6360      	str	r0, [r4, #52]	; 0x34
 800aca2:	e7c1      	b.n	800ac28 <__sflush_r+0x1c>
 800aca4:	6a21      	ldr	r1, [r4, #32]
 800aca6:	2301      	movs	r3, #1
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b0      	blx	r6
 800acac:	1c41      	adds	r1, r0, #1
 800acae:	d1c7      	bne.n	800ac40 <__sflush_r+0x34>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0c4      	beq.n	800ac40 <__sflush_r+0x34>
 800acb6:	2b1d      	cmp	r3, #29
 800acb8:	d001      	beq.n	800acbe <__sflush_r+0xb2>
 800acba:	2b16      	cmp	r3, #22
 800acbc:	d101      	bne.n	800acc2 <__sflush_r+0xb6>
 800acbe:	602f      	str	r7, [r5, #0]
 800acc0:	e7b1      	b.n	800ac26 <__sflush_r+0x1a>
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	e7ad      	b.n	800ac28 <__sflush_r+0x1c>
 800accc:	690f      	ldr	r7, [r1, #16]
 800acce:	2f00      	cmp	r7, #0
 800acd0:	d0a9      	beq.n	800ac26 <__sflush_r+0x1a>
 800acd2:	0793      	lsls	r3, r2, #30
 800acd4:	680e      	ldr	r6, [r1, #0]
 800acd6:	bf08      	it	eq
 800acd8:	694b      	ldreq	r3, [r1, #20]
 800acda:	600f      	str	r7, [r1, #0]
 800acdc:	bf18      	it	ne
 800acde:	2300      	movne	r3, #0
 800ace0:	eba6 0807 	sub.w	r8, r6, r7
 800ace4:	608b      	str	r3, [r1, #8]
 800ace6:	f1b8 0f00 	cmp.w	r8, #0
 800acea:	dd9c      	ble.n	800ac26 <__sflush_r+0x1a>
 800acec:	6a21      	ldr	r1, [r4, #32]
 800acee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acf0:	4643      	mov	r3, r8
 800acf2:	463a      	mov	r2, r7
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b0      	blx	r6
 800acf8:	2800      	cmp	r0, #0
 800acfa:	dc06      	bgt.n	800ad0a <__sflush_r+0xfe>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	f04f 30ff 	mov.w	r0, #4294967295
 800ad08:	e78e      	b.n	800ac28 <__sflush_r+0x1c>
 800ad0a:	4407      	add	r7, r0
 800ad0c:	eba8 0800 	sub.w	r8, r8, r0
 800ad10:	e7e9      	b.n	800ace6 <__sflush_r+0xda>
 800ad12:	bf00      	nop
 800ad14:	20400001 	.word	0x20400001

0800ad18 <_fflush_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	690b      	ldr	r3, [r1, #16]
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	460c      	mov	r4, r1
 800ad20:	b913      	cbnz	r3, 800ad28 <_fflush_r+0x10>
 800ad22:	2500      	movs	r5, #0
 800ad24:	4628      	mov	r0, r5
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	b118      	cbz	r0, 800ad32 <_fflush_r+0x1a>
 800ad2a:	6983      	ldr	r3, [r0, #24]
 800ad2c:	b90b      	cbnz	r3, 800ad32 <_fflush_r+0x1a>
 800ad2e:	f000 f887 	bl	800ae40 <__sinit>
 800ad32:	4b14      	ldr	r3, [pc, #80]	; (800ad84 <_fflush_r+0x6c>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	d11b      	bne.n	800ad70 <_fflush_r+0x58>
 800ad38:	686c      	ldr	r4, [r5, #4]
 800ad3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0ef      	beq.n	800ad22 <_fflush_r+0xa>
 800ad42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad44:	07d0      	lsls	r0, r2, #31
 800ad46:	d404      	bmi.n	800ad52 <_fflush_r+0x3a>
 800ad48:	0599      	lsls	r1, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_fflush_r+0x3a>
 800ad4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad4e:	f000 f915 	bl	800af7c <__retarget_lock_acquire_recursive>
 800ad52:	4628      	mov	r0, r5
 800ad54:	4621      	mov	r1, r4
 800ad56:	f7ff ff59 	bl	800ac0c <__sflush_r>
 800ad5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad5c:	07da      	lsls	r2, r3, #31
 800ad5e:	4605      	mov	r5, r0
 800ad60:	d4e0      	bmi.n	800ad24 <_fflush_r+0xc>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	059b      	lsls	r3, r3, #22
 800ad66:	d4dd      	bmi.n	800ad24 <_fflush_r+0xc>
 800ad68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad6a:	f000 f908 	bl	800af7e <__retarget_lock_release_recursive>
 800ad6e:	e7d9      	b.n	800ad24 <_fflush_r+0xc>
 800ad70:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <_fflush_r+0x70>)
 800ad72:	429c      	cmp	r4, r3
 800ad74:	d101      	bne.n	800ad7a <_fflush_r+0x62>
 800ad76:	68ac      	ldr	r4, [r5, #8]
 800ad78:	e7df      	b.n	800ad3a <_fflush_r+0x22>
 800ad7a:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <_fflush_r+0x74>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	bf08      	it	eq
 800ad80:	68ec      	ldreq	r4, [r5, #12]
 800ad82:	e7da      	b.n	800ad3a <_fflush_r+0x22>
 800ad84:	0800b508 	.word	0x0800b508
 800ad88:	0800b528 	.word	0x0800b528
 800ad8c:	0800b4e8 	.word	0x0800b4e8

0800ad90 <std>:
 800ad90:	2300      	movs	r3, #0
 800ad92:	b510      	push	{r4, lr}
 800ad94:	4604      	mov	r4, r0
 800ad96:	e9c0 3300 	strd	r3, r3, [r0]
 800ad9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad9e:	6083      	str	r3, [r0, #8]
 800ada0:	8181      	strh	r1, [r0, #12]
 800ada2:	6643      	str	r3, [r0, #100]	; 0x64
 800ada4:	81c2      	strh	r2, [r0, #14]
 800ada6:	6183      	str	r3, [r0, #24]
 800ada8:	4619      	mov	r1, r3
 800adaa:	2208      	movs	r2, #8
 800adac:	305c      	adds	r0, #92	; 0x5c
 800adae:	f7ff f87f 	bl	8009eb0 <memset>
 800adb2:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <std+0x38>)
 800adb4:	6263      	str	r3, [r4, #36]	; 0x24
 800adb6:	4b05      	ldr	r3, [pc, #20]	; (800adcc <std+0x3c>)
 800adb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <std+0x40>)
 800adbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adbe:	4b05      	ldr	r3, [pc, #20]	; (800add4 <std+0x44>)
 800adc0:	6224      	str	r4, [r4, #32]
 800adc2:	6323      	str	r3, [r4, #48]	; 0x30
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	bf00      	nop
 800adc8:	0800b169 	.word	0x0800b169
 800adcc:	0800b18b 	.word	0x0800b18b
 800add0:	0800b1c3 	.word	0x0800b1c3
 800add4:	0800b1e7 	.word	0x0800b1e7

0800add8 <_cleanup_r>:
 800add8:	4901      	ldr	r1, [pc, #4]	; (800ade0 <_cleanup_r+0x8>)
 800adda:	f000 b8af 	b.w	800af3c <_fwalk_reent>
 800adde:	bf00      	nop
 800ade0:	0800ad19 	.word	0x0800ad19

0800ade4 <__sfmoreglue>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	1e4a      	subs	r2, r1, #1
 800ade8:	2568      	movs	r5, #104	; 0x68
 800adea:	4355      	muls	r5, r2
 800adec:	460e      	mov	r6, r1
 800adee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adf2:	f7ff f98f 	bl	800a114 <_malloc_r>
 800adf6:	4604      	mov	r4, r0
 800adf8:	b140      	cbz	r0, 800ae0c <__sfmoreglue+0x28>
 800adfa:	2100      	movs	r1, #0
 800adfc:	e9c0 1600 	strd	r1, r6, [r0]
 800ae00:	300c      	adds	r0, #12
 800ae02:	60a0      	str	r0, [r4, #8]
 800ae04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae08:	f7ff f852 	bl	8009eb0 <memset>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}

0800ae10 <__sfp_lock_acquire>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sfp_lock_acquire+0x8>)
 800ae12:	f000 b8b3 	b.w	800af7c <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	20000d2c 	.word	0x20000d2c

0800ae1c <__sfp_lock_release>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__sfp_lock_release+0x8>)
 800ae1e:	f000 b8ae 	b.w	800af7e <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	20000d2c 	.word	0x20000d2c

0800ae28 <__sinit_lock_acquire>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__sinit_lock_acquire+0x8>)
 800ae2a:	f000 b8a7 	b.w	800af7c <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20000d27 	.word	0x20000d27

0800ae34 <__sinit_lock_release>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__sinit_lock_release+0x8>)
 800ae36:	f000 b8a2 	b.w	800af7e <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000d27 	.word	0x20000d27

0800ae40 <__sinit>:
 800ae40:	b510      	push	{r4, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	f7ff fff0 	bl	800ae28 <__sinit_lock_acquire>
 800ae48:	69a3      	ldr	r3, [r4, #24]
 800ae4a:	b11b      	cbz	r3, 800ae54 <__sinit+0x14>
 800ae4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae50:	f7ff bff0 	b.w	800ae34 <__sinit_lock_release>
 800ae54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae58:	6523      	str	r3, [r4, #80]	; 0x50
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <__sinit+0x68>)
 800ae5c:	4a13      	ldr	r2, [pc, #76]	; (800aeac <__sinit+0x6c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	bf04      	itt	eq
 800ae66:	2301      	moveq	r3, #1
 800ae68:	61a3      	streq	r3, [r4, #24]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f820 	bl	800aeb0 <__sfp>
 800ae70:	6060      	str	r0, [r4, #4]
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 f81c 	bl	800aeb0 <__sfp>
 800ae78:	60a0      	str	r0, [r4, #8]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 f818 	bl	800aeb0 <__sfp>
 800ae80:	2200      	movs	r2, #0
 800ae82:	60e0      	str	r0, [r4, #12]
 800ae84:	2104      	movs	r1, #4
 800ae86:	6860      	ldr	r0, [r4, #4]
 800ae88:	f7ff ff82 	bl	800ad90 <std>
 800ae8c:	68a0      	ldr	r0, [r4, #8]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	2109      	movs	r1, #9
 800ae92:	f7ff ff7d 	bl	800ad90 <std>
 800ae96:	68e0      	ldr	r0, [r4, #12]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	2112      	movs	r1, #18
 800ae9c:	f7ff ff78 	bl	800ad90 <std>
 800aea0:	2301      	movs	r3, #1
 800aea2:	61a3      	str	r3, [r4, #24]
 800aea4:	e7d2      	b.n	800ae4c <__sinit+0xc>
 800aea6:	bf00      	nop
 800aea8:	0800b3fc 	.word	0x0800b3fc
 800aeac:	0800add9 	.word	0x0800add9

0800aeb0 <__sfp>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	f7ff ffac 	bl	800ae10 <__sfp_lock_acquire>
 800aeb8:	4b1e      	ldr	r3, [pc, #120]	; (800af34 <__sfp+0x84>)
 800aeba:	681e      	ldr	r6, [r3, #0]
 800aebc:	69b3      	ldr	r3, [r6, #24]
 800aebe:	b913      	cbnz	r3, 800aec6 <__sfp+0x16>
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff ffbd 	bl	800ae40 <__sinit>
 800aec6:	3648      	adds	r6, #72	; 0x48
 800aec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aecc:	3b01      	subs	r3, #1
 800aece:	d503      	bpl.n	800aed8 <__sfp+0x28>
 800aed0:	6833      	ldr	r3, [r6, #0]
 800aed2:	b30b      	cbz	r3, 800af18 <__sfp+0x68>
 800aed4:	6836      	ldr	r6, [r6, #0]
 800aed6:	e7f7      	b.n	800aec8 <__sfp+0x18>
 800aed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aedc:	b9d5      	cbnz	r5, 800af14 <__sfp+0x64>
 800aede:	4b16      	ldr	r3, [pc, #88]	; (800af38 <__sfp+0x88>)
 800aee0:	60e3      	str	r3, [r4, #12]
 800aee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aee6:	6665      	str	r5, [r4, #100]	; 0x64
 800aee8:	f000 f847 	bl	800af7a <__retarget_lock_init_recursive>
 800aeec:	f7ff ff96 	bl	800ae1c <__sfp_lock_release>
 800aef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aef8:	6025      	str	r5, [r4, #0]
 800aefa:	61a5      	str	r5, [r4, #24]
 800aefc:	2208      	movs	r2, #8
 800aefe:	4629      	mov	r1, r5
 800af00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af04:	f7fe ffd4 	bl	8009eb0 <memset>
 800af08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af10:	4620      	mov	r0, r4
 800af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af14:	3468      	adds	r4, #104	; 0x68
 800af16:	e7d9      	b.n	800aecc <__sfp+0x1c>
 800af18:	2104      	movs	r1, #4
 800af1a:	4638      	mov	r0, r7
 800af1c:	f7ff ff62 	bl	800ade4 <__sfmoreglue>
 800af20:	4604      	mov	r4, r0
 800af22:	6030      	str	r0, [r6, #0]
 800af24:	2800      	cmp	r0, #0
 800af26:	d1d5      	bne.n	800aed4 <__sfp+0x24>
 800af28:	f7ff ff78 	bl	800ae1c <__sfp_lock_release>
 800af2c:	230c      	movs	r3, #12
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	e7ee      	b.n	800af10 <__sfp+0x60>
 800af32:	bf00      	nop
 800af34:	0800b3fc 	.word	0x0800b3fc
 800af38:	ffff0001 	.word	0xffff0001

0800af3c <_fwalk_reent>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4606      	mov	r6, r0
 800af42:	4688      	mov	r8, r1
 800af44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af48:	2700      	movs	r7, #0
 800af4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af4e:	f1b9 0901 	subs.w	r9, r9, #1
 800af52:	d505      	bpl.n	800af60 <_fwalk_reent+0x24>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d1f7      	bne.n	800af4a <_fwalk_reent+0xe>
 800af5a:	4638      	mov	r0, r7
 800af5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af60:	89ab      	ldrh	r3, [r5, #12]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d907      	bls.n	800af76 <_fwalk_reent+0x3a>
 800af66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6a:	3301      	adds	r3, #1
 800af6c:	d003      	beq.n	800af76 <_fwalk_reent+0x3a>
 800af6e:	4629      	mov	r1, r5
 800af70:	4630      	mov	r0, r6
 800af72:	47c0      	blx	r8
 800af74:	4307      	orrs	r7, r0
 800af76:	3568      	adds	r5, #104	; 0x68
 800af78:	e7e9      	b.n	800af4e <_fwalk_reent+0x12>

0800af7a <__retarget_lock_init_recursive>:
 800af7a:	4770      	bx	lr

0800af7c <__retarget_lock_acquire_recursive>:
 800af7c:	4770      	bx	lr

0800af7e <__retarget_lock_release_recursive>:
 800af7e:	4770      	bx	lr

0800af80 <__swhatbuf_r>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	460e      	mov	r6, r1
 800af84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af88:	2900      	cmp	r1, #0
 800af8a:	b096      	sub	sp, #88	; 0x58
 800af8c:	4614      	mov	r4, r2
 800af8e:	461d      	mov	r5, r3
 800af90:	da07      	bge.n	800afa2 <__swhatbuf_r+0x22>
 800af92:	2300      	movs	r3, #0
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	89b3      	ldrh	r3, [r6, #12]
 800af98:	061a      	lsls	r2, r3, #24
 800af9a:	d410      	bmi.n	800afbe <__swhatbuf_r+0x3e>
 800af9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa0:	e00e      	b.n	800afc0 <__swhatbuf_r+0x40>
 800afa2:	466a      	mov	r2, sp
 800afa4:	f000 f946 	bl	800b234 <_fstat_r>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	dbf2      	blt.n	800af92 <__swhatbuf_r+0x12>
 800afac:	9a01      	ldr	r2, [sp, #4]
 800afae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afb6:	425a      	negs	r2, r3
 800afb8:	415a      	adcs	r2, r3
 800afba:	602a      	str	r2, [r5, #0]
 800afbc:	e7ee      	b.n	800af9c <__swhatbuf_r+0x1c>
 800afbe:	2340      	movs	r3, #64	; 0x40
 800afc0:	2000      	movs	r0, #0
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	b016      	add	sp, #88	; 0x58
 800afc6:	bd70      	pop	{r4, r5, r6, pc}

0800afc8 <__smakebuf_r>:
 800afc8:	898b      	ldrh	r3, [r1, #12]
 800afca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afcc:	079d      	lsls	r5, r3, #30
 800afce:	4606      	mov	r6, r0
 800afd0:	460c      	mov	r4, r1
 800afd2:	d507      	bpl.n	800afe4 <__smakebuf_r+0x1c>
 800afd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	2301      	movs	r3, #1
 800afde:	6163      	str	r3, [r4, #20]
 800afe0:	b002      	add	sp, #8
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	ab01      	add	r3, sp, #4
 800afe6:	466a      	mov	r2, sp
 800afe8:	f7ff ffca 	bl	800af80 <__swhatbuf_r>
 800afec:	9900      	ldr	r1, [sp, #0]
 800afee:	4605      	mov	r5, r0
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff f88f 	bl	800a114 <_malloc_r>
 800aff6:	b948      	cbnz	r0, 800b00c <__smakebuf_r+0x44>
 800aff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affc:	059a      	lsls	r2, r3, #22
 800affe:	d4ef      	bmi.n	800afe0 <__smakebuf_r+0x18>
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	f043 0302 	orr.w	r3, r3, #2
 800b008:	81a3      	strh	r3, [r4, #12]
 800b00a:	e7e3      	b.n	800afd4 <__smakebuf_r+0xc>
 800b00c:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <__smakebuf_r+0x7c>)
 800b00e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	9b00      	ldr	r3, [sp, #0]
 800b01c:	6163      	str	r3, [r4, #20]
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	6120      	str	r0, [r4, #16]
 800b022:	b15b      	cbz	r3, 800b03c <__smakebuf_r+0x74>
 800b024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b028:	4630      	mov	r0, r6
 800b02a:	f000 f915 	bl	800b258 <_isatty_r>
 800b02e:	b128      	cbz	r0, 800b03c <__smakebuf_r+0x74>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	f023 0303 	bic.w	r3, r3, #3
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	89a0      	ldrh	r0, [r4, #12]
 800b03e:	4305      	orrs	r5, r0
 800b040:	81a5      	strh	r5, [r4, #12]
 800b042:	e7cd      	b.n	800afe0 <__smakebuf_r+0x18>
 800b044:	0800add9 	.word	0x0800add9

0800b048 <memmove>:
 800b048:	4288      	cmp	r0, r1
 800b04a:	b510      	push	{r4, lr}
 800b04c:	eb01 0402 	add.w	r4, r1, r2
 800b050:	d902      	bls.n	800b058 <memmove+0x10>
 800b052:	4284      	cmp	r4, r0
 800b054:	4623      	mov	r3, r4
 800b056:	d807      	bhi.n	800b068 <memmove+0x20>
 800b058:	1e43      	subs	r3, r0, #1
 800b05a:	42a1      	cmp	r1, r4
 800b05c:	d008      	beq.n	800b070 <memmove+0x28>
 800b05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b062:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b066:	e7f8      	b.n	800b05a <memmove+0x12>
 800b068:	4402      	add	r2, r0
 800b06a:	4601      	mov	r1, r0
 800b06c:	428a      	cmp	r2, r1
 800b06e:	d100      	bne.n	800b072 <memmove+0x2a>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b07a:	e7f7      	b.n	800b06c <memmove+0x24>

0800b07c <__malloc_lock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_lock+0x8>)
 800b07e:	f7ff bf7d 	b.w	800af7c <__retarget_lock_acquire_recursive>
 800b082:	bf00      	nop
 800b084:	20000d28 	.word	0x20000d28

0800b088 <__malloc_unlock>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__malloc_unlock+0x8>)
 800b08a:	f7ff bf78 	b.w	800af7e <__retarget_lock_release_recursive>
 800b08e:	bf00      	nop
 800b090:	20000d28 	.word	0x20000d28

0800b094 <_realloc_r>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	4607      	mov	r7, r0
 800b098:	4614      	mov	r4, r2
 800b09a:	460e      	mov	r6, r1
 800b09c:	b921      	cbnz	r1, 800b0a8 <_realloc_r+0x14>
 800b09e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	f7ff b836 	b.w	800a114 <_malloc_r>
 800b0a8:	b922      	cbnz	r2, 800b0b4 <_realloc_r+0x20>
 800b0aa:	f7fe ffe3 	bl	800a074 <_free_r>
 800b0ae:	4625      	mov	r5, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b4:	f000 f8f2 	bl	800b29c <_malloc_usable_size_r>
 800b0b8:	42a0      	cmp	r0, r4
 800b0ba:	d20f      	bcs.n	800b0dc <_realloc_r+0x48>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4638      	mov	r0, r7
 800b0c0:	f7ff f828 	bl	800a114 <_malloc_r>
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0f2      	beq.n	800b0b0 <_realloc_r+0x1c>
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	f7fe fee1 	bl	8009e94 <memcpy>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f7fe ffcd 	bl	800a074 <_free_r>
 800b0da:	e7e9      	b.n	800b0b0 <_realloc_r+0x1c>
 800b0dc:	4635      	mov	r5, r6
 800b0de:	e7e7      	b.n	800b0b0 <_realloc_r+0x1c>

0800b0e0 <_raise_r>:
 800b0e0:	291f      	cmp	r1, #31
 800b0e2:	b538      	push	{r3, r4, r5, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	d904      	bls.n	800b0f4 <_raise_r+0x14>
 800b0ea:	2316      	movs	r3, #22
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0f6:	b112      	cbz	r2, 800b0fe <_raise_r+0x1e>
 800b0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0fc:	b94b      	cbnz	r3, 800b112 <_raise_r+0x32>
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f830 	bl	800b164 <_getpid_r>
 800b104:	462a      	mov	r2, r5
 800b106:	4601      	mov	r1, r0
 800b108:	4620      	mov	r0, r4
 800b10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10e:	f000 b817 	b.w	800b140 <_kill_r>
 800b112:	2b01      	cmp	r3, #1
 800b114:	d00a      	beq.n	800b12c <_raise_r+0x4c>
 800b116:	1c59      	adds	r1, r3, #1
 800b118:	d103      	bne.n	800b122 <_raise_r+0x42>
 800b11a:	2316      	movs	r3, #22
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	e7e7      	b.n	800b0f2 <_raise_r+0x12>
 800b122:	2400      	movs	r4, #0
 800b124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b128:	4628      	mov	r0, r5
 800b12a:	4798      	blx	r3
 800b12c:	2000      	movs	r0, #0
 800b12e:	e7e0      	b.n	800b0f2 <_raise_r+0x12>

0800b130 <raise>:
 800b130:	4b02      	ldr	r3, [pc, #8]	; (800b13c <raise+0xc>)
 800b132:	4601      	mov	r1, r0
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	f7ff bfd3 	b.w	800b0e0 <_raise_r>
 800b13a:	bf00      	nop
 800b13c:	20000100 	.word	0x20000100

0800b140 <_kill_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	4d07      	ldr	r5, [pc, #28]	; (800b160 <_kill_r+0x20>)
 800b144:	2300      	movs	r3, #0
 800b146:	4604      	mov	r4, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	4611      	mov	r1, r2
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	f7f8 f85f 	bl	8003210 <_kill>
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	d102      	bne.n	800b15c <_kill_r+0x1c>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	b103      	cbz	r3, 800b15c <_kill_r+0x1c>
 800b15a:	6023      	str	r3, [r4, #0]
 800b15c:	bd38      	pop	{r3, r4, r5, pc}
 800b15e:	bf00      	nop
 800b160:	20000d30 	.word	0x20000d30

0800b164 <_getpid_r>:
 800b164:	f7f8 b84c 	b.w	8003200 <_getpid>

0800b168 <__sread>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	460c      	mov	r4, r1
 800b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b170:	f000 f89c 	bl	800b2ac <_read_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	bfab      	itete	ge
 800b178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b17a:	89a3      	ldrhlt	r3, [r4, #12]
 800b17c:	181b      	addge	r3, r3, r0
 800b17e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b182:	bfac      	ite	ge
 800b184:	6563      	strge	r3, [r4, #84]	; 0x54
 800b186:	81a3      	strhlt	r3, [r4, #12]
 800b188:	bd10      	pop	{r4, pc}

0800b18a <__swrite>:
 800b18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18e:	461f      	mov	r7, r3
 800b190:	898b      	ldrh	r3, [r1, #12]
 800b192:	05db      	lsls	r3, r3, #23
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	4616      	mov	r6, r2
 800b19a:	d505      	bpl.n	800b1a8 <__swrite+0x1e>
 800b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f000 f868 	bl	800b278 <_lseek_r>
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	463b      	mov	r3, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1be:	f000 b817 	b.w	800b1f0 <_write_r>

0800b1c2 <__sseek>:
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ca:	f000 f855 	bl	800b278 <_lseek_r>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	bf15      	itete	ne
 800b1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1de:	81a3      	strheq	r3, [r4, #12]
 800b1e0:	bf18      	it	ne
 800b1e2:	81a3      	strhne	r3, [r4, #12]
 800b1e4:	bd10      	pop	{r4, pc}

0800b1e6 <__sclose>:
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 b813 	b.w	800b214 <_close_r>
	...

0800b1f0 <_write_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4d07      	ldr	r5, [pc, #28]	; (800b210 <_write_r+0x20>)
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4608      	mov	r0, r1
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	602a      	str	r2, [r5, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	f7f8 f83d 	bl	800327e <_write>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_write_r+0x1e>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_write_r+0x1e>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	20000d30 	.word	0x20000d30

0800b214 <_close_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_close_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7f8 f849 	bl	80032b6 <_close>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_close_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_close_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20000d30 	.word	0x20000d30

0800b234 <_fstat_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	; (800b254 <_fstat_r+0x20>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7f8 f844 	bl	80032ce <_fstat>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_fstat_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_fstat_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	20000d30 	.word	0x20000d30

0800b258 <_isatty_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d06      	ldr	r5, [pc, #24]	; (800b274 <_isatty_r+0x1c>)
 800b25c:	2300      	movs	r3, #0
 800b25e:	4604      	mov	r4, r0
 800b260:	4608      	mov	r0, r1
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	f7f8 f843 	bl	80032ee <_isatty>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_isatty_r+0x1a>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_isatty_r+0x1a>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20000d30 	.word	0x20000d30

0800b278 <_lseek_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	; (800b298 <_lseek_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f8 f83c 	bl	8003304 <_lseek>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_lseek_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_lseek_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20000d30 	.word	0x20000d30

0800b29c <_malloc_usable_size_r>:
 800b29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2a0:	1f18      	subs	r0, r3, #4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bfbc      	itt	lt
 800b2a6:	580b      	ldrlt	r3, [r1, r0]
 800b2a8:	18c0      	addlt	r0, r0, r3
 800b2aa:	4770      	bx	lr

0800b2ac <_read_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d07      	ldr	r5, [pc, #28]	; (800b2cc <_read_r+0x20>)
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	602a      	str	r2, [r5, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f7f7 ffc2 	bl	8003244 <_read>
 800b2c0:	1c43      	adds	r3, r0, #1
 800b2c2:	d102      	bne.n	800b2ca <_read_r+0x1e>
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	b103      	cbz	r3, 800b2ca <_read_r+0x1e>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	20000d30 	.word	0x20000d30

0800b2d0 <trunc>:
 800b2d0:	ec51 0b10 	vmov	r0, r1, d0
 800b2d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b2dc:	2b13      	cmp	r3, #19
 800b2de:	b5d0      	push	{r4, r6, r7, lr}
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	dc10      	bgt.n	800b306 <trunc+0x36>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bfa5      	ittet	ge
 800b2e8:	4a11      	ldrge	r2, [pc, #68]	; (800b330 <trunc+0x60>)
 800b2ea:	fa42 f303 	asrge.w	r3, r2, r3
 800b2ee:	2100      	movlt	r1, #0
 800b2f0:	2100      	movge	r1, #0
 800b2f2:	bfb9      	ittee	lt
 800b2f4:	2000      	movlt	r0, #0
 800b2f6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800b2fa:	2000      	movge	r0, #0
 800b2fc:	ea24 0103 	bicge.w	r1, r4, r3
 800b300:	ec41 0b10 	vmov	d0, r0, r1
 800b304:	bdd0      	pop	{r4, r6, r7, pc}
 800b306:	2b33      	cmp	r3, #51	; 0x33
 800b308:	dd08      	ble.n	800b31c <trunc+0x4c>
 800b30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b30e:	d1f7      	bne.n	800b300 <trunc+0x30>
 800b310:	ee10 2a10 	vmov	r2, s0
 800b314:	460b      	mov	r3, r1
 800b316:	f7f4 ffb9 	bl	800028c <__adddf3>
 800b31a:	e7f1      	b.n	800b300 <trunc+0x30>
 800b31c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	fa23 f202 	lsr.w	r2, r3, r2
 800b328:	ea20 0602 	bic.w	r6, r0, r2
 800b32c:	4630      	mov	r0, r6
 800b32e:	e7e7      	b.n	800b300 <trunc+0x30>
 800b330:	000fffff 	.word	0x000fffff

0800b334 <_init>:
 800b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b336:	bf00      	nop
 800b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33a:	bc08      	pop	{r3}
 800b33c:	469e      	mov	lr, r3
 800b33e:	4770      	bx	lr

0800b340 <_fini>:
 800b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b342:	bf00      	nop
 800b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b346:	bc08      	pop	{r3}
 800b348:	469e      	mov	lr, r3
 800b34a:	4770      	bx	lr

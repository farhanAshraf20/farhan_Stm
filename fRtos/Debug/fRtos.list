
fRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000700c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800730c  0800730c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  20000074  08007388  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001730  08007388  00021730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e58  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000498d  00000000  00000000  00049efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0004e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001eb0  00000000  00000000  00050908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c01c  00000000  00000000  000527b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002439d  00000000  00000000  0007e7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010841b  00000000  00000000  000a2b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aaf8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091a8  00000000  00000000  001aafe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007184 	.word	0x08007184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007184 	.word	0x08007184

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	20000144 	.word	0x20000144

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b096      	sub	sp, #88	; 0x58
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f001 f8ec 	bl	80016de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f857 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa1f 	bl	800094c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800050e:	f000 f8b5 	bl	800067c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000512:	f000 f8eb 	bl	80006ec <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000516:	f000 f927 	bl	8000768 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800051a:	f000 f94b 	bl	80007b4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f987 	bl	8000830 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f9b5 	bl	8000890 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 f9e3 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
  /* definition and creation of defaultTask */
  /*osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);*/

  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityIdle, 0, 128);
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <main+0xa4>)
 800052c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000530:	461d      	mov	r5, r3
 8000532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800053e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f004 fe5c 	bl	8005202 <osThreadCreate>
 800054a:	4603      	mov	r3, r0
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <main+0xa8>)
 800054e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityIdle, 0, 200);
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0xac>)
 8000552:	f107 0420 	add.w	r4, r7, #32
 8000556:	461d      	mov	r5, r3
 8000558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fe49 	bl	8005202 <osThreadCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <main+0xb0>)
 8000574:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_App, osPriorityIdle, 0, 128);
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <main+0xb4>)
 8000578:	1d3c      	adds	r4, r7, #4
 800057a:	461d      	mov	r5, r3
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f004 fe38 	bl	8005202 <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <main+0xb8>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f004 fe2c 	bl	80051f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0xa0>
 800059e:	bf00      	nop
 80005a0:	080071b4 	.word	0x080071b4
 80005a4:	200015fc 	.word	0x200015fc
 80005a8:	080071d0 	.word	0x080071d0
 80005ac:	20001688 	.word	0x20001688
 80005b0:	080071ec 	.word	0x080071ec
 80005b4:	20001684 	.word	0x20001684

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 f99b 	bl	8006902 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f001 ff3b 	bl	8002458 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 fc1a 	bl	8000e20 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f001 ff16 	bl	800241c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemClock_Config+0xc0>)
 80005f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f6:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xc0>)
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2314      	movs	r3, #20
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061c:	2301      	movs	r3, #1
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000620:	2328      	movs	r3, #40	; 0x28
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f831 	bl	800269c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000640:	f000 fbee 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2104      	movs	r1, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fc03 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000668:	f000 fbda 	bl	8000e20 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800066c:	f003 f91e 	bl	80038ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000670:	bf00      	nop
 8000672:	3758      	adds	r7, #88	; 0x58
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <MX_DFSDM1_Init+0x6c>)
 8000684:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 8000688:	2201      	movs	r2, #1
 800068a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 8000694:	2202      	movs	r2, #2
 8000696:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006aa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_DFSDM1_Init+0x68>)
 80006d2:	f001 f943 	bl	800195c <HAL_DFSDM_ChannelInit>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006dc:	f000 fba0 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20001084 	.word	0x20001084
 80006e8:	40016020 	.word	0x40016020

080006ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_I2C2_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_I2C2_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_I2C2_Init+0x74>)
 80006f8:	f640 6214 	movw	r2, #3604	; 0xe14
 80006fc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_I2C2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_I2C2_Init+0x74>)
 8000706:	2201      	movs	r2, #1
 8000708:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_I2C2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C2_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_I2C2_Init+0x74>)
 800072a:	f001 fc08 	bl	8001f3e <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fb74 	bl	8000e20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_I2C2_Init+0x74>)
 800073c:	f001 fc8e 	bl	800205c <HAL_I2CEx_ConfigAnalogFilter>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000746:	f000 fb6b 	bl	8000e20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_I2C2_Init+0x74>)
 800074e:	f001 fcd0 	bl	80020f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 fb62 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000154c 	.word	0x2000154c
 8000764:	40005800 	.word	0x40005800

08000768 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_QUADSPI_Init+0x44>)
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <MX_QUADSPI_Init+0x48>)
 8000770:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_QUADSPI_Init+0x44>)
 8000774:	2202      	movs	r2, #2
 8000776:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_QUADSPI_Init+0x44>)
 800077a:	2204      	movs	r2, #4
 800077c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_QUADSPI_Init+0x44>)
 8000780:	2210      	movs	r2, #16
 8000782:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_QUADSPI_Init+0x44>)
 8000786:	2217      	movs	r2, #23
 8000788:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_QUADSPI_Init+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_QUADSPI_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_QUADSPI_Init+0x44>)
 8000798:	f001 fec4 	bl	8002524 <HAL_QSPI_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007a2:	f000 fb3d 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000168c 	.word	0x2000168c
 80007b0:	a0001000 	.word	0xa0001000

080007b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_SPI3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI3_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI3_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI3_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI3_Init+0x74>)
 800080e:	2208      	movs	r2, #8
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_SPI3_Init+0x74>)
 8000814:	f003 fa2c 	bl	8003c70 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 faff 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20001598 	.word	0x20001598
 800082c:	40003c00 	.word	0x40003c00

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART1_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000874:	f003 fd70 	bl	8004358 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 facf 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20001600 	.word	0x20001600
 800088c:	40013800 	.word	0x40013800

08000890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART3_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART3_UART_Init+0x58>)
 80008d4:	f003 fd40 	bl	8004358 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 fa9f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200010c0 	.word	0x200010c0
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2206      	movs	r2, #6
 8000900:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2202      	movs	r2, #2
 800090c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	f001 fc29 	bl	800218a <HAL_PCD_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 fa6f 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20001144 	.word	0x20001144

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4bbd      	ldr	r3, [pc, #756]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4abc      	ldr	r2, [pc, #752]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4bba      	ldr	r3, [pc, #744]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4bb7      	ldr	r3, [pc, #732]	; (8000c58 <MX_GPIO_Init+0x30c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4ab6      	ldr	r2, [pc, #728]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4bb4      	ldr	r3, [pc, #720]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4bb1      	ldr	r3, [pc, #708]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4ab0      	ldr	r2, [pc, #704]	; (8000c58 <MX_GPIO_Init+0x30c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4bae      	ldr	r3, [pc, #696]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4bab      	ldr	r3, [pc, #684]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4aaa      	ldr	r2, [pc, #680]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4ba8      	ldr	r3, [pc, #672]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	4ba5      	ldr	r3, [pc, #660]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4aa4      	ldr	r2, [pc, #656]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4ba2      	ldr	r3, [pc, #648]	; (8000c58 <MX_GPIO_Init+0x30c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009e0:	489e      	ldr	r0, [pc, #632]	; (8000c5c <MX_GPIO_Init+0x310>)
 80009e2:	f001 fa71 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f248 1124 	movw	r1, #33060	; 0x8124
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 fa6a 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 80009f4:	2200      	movs	r2, #0
 80009f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009fa:	4899      	ldr	r0, [pc, #612]	; (8000c60 <MX_GPIO_Init+0x314>)
 80009fc:	f001 fa64 	bl	8001ec8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a06:	4897      	ldr	r0, [pc, #604]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000a08:	f001 fa5e 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a12:	4894      	ldr	r0, [pc, #592]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000a14:	f001 fa58 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED9_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a1e:	4892      	ldr	r0, [pc, #584]	; (8000c68 <MX_GPIO_Init+0x31c>)
 8000a20:	f001 fa52 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	488d      	ldr	r0, [pc, #564]	; (8000c60 <MX_GPIO_Init+0x314>)
 8000a2a:	f001 fa4d 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2101      	movs	r1, #1
 8000a32:	488a      	ldr	r0, [pc, #552]	; (8000c5c <MX_GPIO_Init+0x310>)
 8000a34:	f001 fa48 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a38:	f240 1315 	movw	r3, #277	; 0x115
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4882      	ldr	r0, [pc, #520]	; (8000c5c <MX_GPIO_Init+0x310>)
 8000a52:	f001 f88f 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a56:	236a      	movs	r3, #106	; 0x6a
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	487c      	ldr	r0, [pc, #496]	; (8000c5c <MX_GPIO_Init+0x310>)
 8000a6c:	f001 f882 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : sw1_Pin */
  GPIO_InitStruct.Pin = sw1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4878      	ldr	r0, [pc, #480]	; (8000c68 <MX_GPIO_Init+0x31c>)
 8000a88:	f001 f874 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a8c:	233f      	movs	r3, #63	; 0x3f
 8000a8e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a90:	230b      	movs	r3, #11
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4872      	ldr	r0, [pc, #456]	; (8000c68 <MX_GPIO_Init+0x31c>)
 8000aa0:	f001 f868 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f001 f857 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ac6:	f248 1324 	movw	r3, #33060	; 0x8124
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae2:	f001 f847 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f001 f836 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f001 f829 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000b22:	23c0      	movs	r3, #192	; 0xc0
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b32:	2305      	movs	r3, #5
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f001 f818 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4841      	ldr	r0, [pc, #260]	; (8000c60 <MX_GPIO_Init+0x314>)
 8000b5a:	f001 f80b 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b62:	230b      	movs	r3, #11
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	483b      	ldr	r0, [pc, #236]	; (8000c60 <MX_GPIO_Init+0x314>)
 8000b72:	f000 ffff 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8000b76:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b7a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4834      	ldr	r0, [pc, #208]	; (8000c60 <MX_GPIO_Init+0x314>)
 8000b90:	f000 fff0 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b94:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b98:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482e      	ldr	r0, [pc, #184]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000bac:	f000 ffe2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bb0:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4826      	ldr	r0, [pc, #152]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000bca:	f000 ffd3 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED9_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED9_Pin;
 8000bce:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <MX_GPIO_Init+0x31c>)
 8000be8:	f000 ffc4 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <MX_GPIO_Init+0x31c>)
 8000c04:	f000 ffb6 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4810      	ldr	r0, [pc, #64]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000c24:	f000 ffa6 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c28:	2378      	movs	r3, #120	; 0x78
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4808      	ldr	r0, [pc, #32]	; (8000c64 <MX_GPIO_Init+0x318>)
 8000c44:	f000 ff96 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4e:	2312      	movs	r3, #18
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e00a      	b.n	8000c6c <MX_GPIO_Init+0x320>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	48000400 	.word	0x48000400
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	48000800 	.word	0x48000800
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0x360>)
 8000c7e:	f000 ff79 	bl	8001b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	2017      	movs	r0, #23
 8000c88:	f000 fe3e 	bl	8001908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c8c:	2017      	movs	r0, #23
 8000c8e:	f000 fe57 	bl	8001940 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2105      	movs	r1, #5
 8000c96:	2028      	movs	r0, #40	; 0x28
 8000c98:	f000 fe36 	bl	8001908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9c:	2028      	movs	r0, #40	; 0x28
 8000c9e:	f000 fe4f 	bl	8001940 <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	48000400 	.word	0x48000400

08000cb0 <Task1_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_App */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task1\n");
 8000cb8:	4814      	ldr	r0, [pc, #80]	; (8000d0c <Task1_App+0x5c>)
 8000cba:	f005 fef3 	bl	8006aa4 <puts>
	  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <Task1_App+0x60>)
 8000cc6:	f001 f8ff 	bl	8001ec8 <HAL_GPIO_WritePin>
	  printf("LED 14 ON\n");
 8000cca:	4812      	ldr	r0, [pc, #72]	; (8000d14 <Task1_App+0x64>)
 8000ccc:	f005 feea 	bl	8006aa4 <puts>
	  HAL_Delay(500);
 8000cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd4:	f000 fd3c 	bl	8001750 <HAL_Delay>
	  HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <Task1_App+0x60>)
 8000ce0:	f001 f8f2 	bl	8001ec8 <HAL_GPIO_WritePin>
	  printf("LED 14 OFF\n");
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <Task1_App+0x68>)
 8000ce6:	f005 fedd 	bl	8006aa4 <puts>
	  HAL_Delay(500);
 8000cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cee:	f000 fd2f 	bl	8001750 <HAL_Delay>
	  taskYIELD();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <Task1_App+0x6c>)
 8000cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	f3bf 8f6f 	isb	sy
	  osDelay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f004 fac9 	bl	800529a <osDelay>
	  printf("Task1\n");
 8000d08:	e7d6      	b.n	8000cb8 <Task1_App+0x8>
 8000d0a:	bf00      	nop
 8000d0c:	0800719c 	.word	0x0800719c
 8000d10:	48000400 	.word	0x48000400
 8000d14:	08007208 	.word	0x08007208
 8000d18:	08007214 	.word	0x08007214
 8000d1c:	e000ed04 	.word	0xe000ed04

08000d20 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  	  printf("Task2\n");
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <Task2_App+0x5c>)
 8000d2a:	f005 febb 	bl	8006aa4 <puts>
	  	  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2120      	movs	r1, #32
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 f8c7 	bl	8001ec8 <HAL_GPIO_WritePin>
	  	  printf("LED 5 ON\n");
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <Task2_App+0x60>)
 8000d3c:	f005 feb2 	bl	8006aa4 <puts>
	  	  HAL_Delay(500);
 8000d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d44:	f000 fd04 	bl	8001750 <HAL_Delay>

	  	  HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f001 f8ba 	bl	8001ec8 <HAL_GPIO_WritePin>
	  	  printf("LED 5 OFF\n");
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <Task2_App+0x64>)
 8000d56:	f005 fea5 	bl	8006aa4 <puts>
	  	  HAL_Delay(500);
 8000d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5e:	f000 fcf7 	bl	8001750 <HAL_Delay>
	  	  taskYIELD();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <Task2_App+0x68>)
 8000d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	f3bf 8f6f 	isb	sy
	  	  osDelay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f004 fa91 	bl	800529a <osDelay>
	  	  printf("Task2\n");
 8000d78:	e7d6      	b.n	8000d28 <Task2_App+0x8>
 8000d7a:	bf00      	nop
 8000d7c:	080071a4 	.word	0x080071a4
 8000d80:	08007220 	.word	0x08007220
 8000d84:	0800722c 	.word	0x0800722c
 8000d88:	e000ed04 	.word	0xe000ed04

08000d8c <Task3_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_App */
void Task3_App(void const * argument)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_App */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task3\n");
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <Task3_App+0x5c>)
 8000d96:	f005 fe85 	bl	8006aa4 <puts>
	  HAL_GPIO_WritePin(LED9_GPIO_Port, GPIO_PIN_9,1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <Task3_App+0x60>)
 8000da2:	f001 f891 	bl	8001ec8 <HAL_GPIO_WritePin>
	  printf("LED 9 ON\n");
 8000da6:	4812      	ldr	r0, [pc, #72]	; (8000df0 <Task3_App+0x64>)
 8000da8:	f005 fe7c 	bl	8006aa4 <puts>
	  HAL_Delay(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f000 fcce 	bl	8001750 <HAL_Delay>
	  HAL_GPIO_WritePin(LED9_GPIO_Port, GPIO_PIN_9,0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <Task3_App+0x60>)
 8000dbc:	f001 f884 	bl	8001ec8 <HAL_GPIO_WritePin>
	  printf("LED 9 OFF\n");
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <Task3_App+0x68>)
 8000dc2:	f005 fe6f 	bl	8006aa4 <puts>
	  HAL_Delay(500);
 8000dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dca:	f000 fcc1 	bl	8001750 <HAL_Delay>
	  taskYIELD();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <Task3_App+0x6c>)
 8000dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	f3bf 8f6f 	isb	sy
	  osDelay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f004 fa5b 	bl	800529a <osDelay>
	  printf("Task3\n");
 8000de4:	e7d6      	b.n	8000d94 <Task3_App+0x8>
 8000de6:	bf00      	nop
 8000de8:	080071ac 	.word	0x080071ac
 8000dec:	48000800 	.word	0x48000800
 8000df0:	08007238 	.word	0x08007238
 8000df4:	08007244 	.word	0x08007244
 8000df8:	e000ed04 	.word	0xe000ed04

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fc7f 	bl	8001710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40001000 	.word	0x40001000

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_MspInit+0x4c>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	210f      	movs	r1, #15
 8000e66:	f06f 0001 	mvn.w	r0, #1
 8000e6a:	f000 fd4d 	bl	8001908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0ac      	sub	sp, #176	; 0xb0
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2288      	movs	r2, #136	; 0x88
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f005 fd30 	bl	8006902 <memset>
  if(DFSDM1_Init == 0)
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d142      	bne.n	8000f30 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fa0c 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ec6:	f7ff ffab 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000efa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f14:	2306      	movs	r3, #6
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f22:	f000 fe27 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a02      	ldr	r2, [pc, #8]	; (8000f38 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f2e:	6013      	str	r3, [r2, #0]
  }

}
 8000f30:	bf00      	nop
 8000f32:	37b0      	adds	r7, #176	; 0xb0
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000344 	.word	0x20000344
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48001000 	.word	0x48001000

08000f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0ac      	sub	sp, #176	; 0xb0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2288      	movs	r2, #136	; 0x88
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fccc 	bl	8006902 <memset>
  if(hi2c->Instance==I2C2)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <HAL_I2C_MspInit+0xb0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d13b      	bne.n	8000fec <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 f9a9 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f8c:	f7ff ff48 	bl	8000e20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_I2C_MspInit+0xb8>)
 8000fd0:	f000 fdd0 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fde:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	37b0      	adds	r7, #176	; 0xb0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40005800 	.word	0x40005800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48000400 	.word	0x48000400

08001000 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_QSPI_MspInit+0x7c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d128      	bne.n	8001074 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 8001024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6513      	str	r3, [r2, #80]	; 0x50
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 8001030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_QSPI_MspInit+0x80>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001052:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001056:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001064:	230a      	movs	r3, #10
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_QSPI_MspInit+0x84>)
 8001070:	f000 fd80 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	a0001000 	.word	0xa0001000
 8001080:	40021000 	.word	0x40021000
 8001084:	48001000 	.word	0x48001000

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_SPI_MspInit+0x7c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d128      	bne.n	80010fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_SPI_MspInit+0x80>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ec:	2306      	movs	r3, #6
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_SPI_MspInit+0x84>)
 80010f8:	f000 fd3c 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40003c00 	.word	0x40003c00
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ae      	sub	sp, #184	; 0xb8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	2288      	movs	r2, #136	; 0x88
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 fbe6 	bl	8006902 <memset>
  if(huart->Instance==USART1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a42      	ldr	r2, [pc, #264]	; (8001244 <HAL_UART_MspInit+0x134>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d13b      	bne.n	80011b8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001140:	2301      	movs	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001144:	2300      	movs	r3, #0
 8001146:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4618      	mov	r0, r3
 800114e:	f002 f8c3 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001158:	f7ff fe62 	bl	8000e20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115c:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <HAL_UART_MspInit+0x138>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	4a39      	ldr	r2, [pc, #228]	; (8001248 <HAL_UART_MspInit+0x138>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001166:	6613      	str	r3, [r2, #96]	; 0x60
 8001168:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_UART_MspInit+0x138>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b34      	ldr	r3, [pc, #208]	; (8001248 <HAL_UART_MspInit+0x138>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a33      	ldr	r2, [pc, #204]	; (8001248 <HAL_UART_MspInit+0x138>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <HAL_UART_MspInit+0x138>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800118c:	23c0      	movs	r3, #192	; 0xc0
 800118e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4826      	ldr	r0, [pc, #152]	; (800124c <HAL_UART_MspInit+0x13c>)
 80011b2:	f000 fcdf 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b6:	e040      	b.n	800123a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <HAL_UART_MspInit+0x140>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d13b      	bne.n	800123a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c2:	2304      	movs	r3, #4
 80011c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 f882 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_UART_MspInit+0xce>
      Error_Handler();
 80011da:	f7ff fe21 	bl	8000e20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_UART_MspInit+0x138>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a19      	ldr	r2, [pc, #100]	; (8001248 <HAL_UART_MspInit+0x138>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_UART_MspInit+0x138>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x138>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_UART_MspInit+0x138>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_UART_MspInit+0x138>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800120e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001228:	2307      	movs	r3, #7
 800122a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <HAL_UART_MspInit+0x144>)
 8001236:	f000 fc9d 	bl	8001b74 <HAL_GPIO_Init>
}
 800123a:	bf00      	nop
 800123c:	37b8      	adds	r7, #184	; 0xb8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400
 8001250:	40004800 	.word	0x40004800
 8001254:	48000c00 	.word	0x48000c00

08001258 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	; 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	; 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f005 fb42 	bl	8006902 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001286:	d17c      	bne.n	8001382 <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800128e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001292:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800129e:	2318      	movs	r3, #24
 80012a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f80d 	bl	80032d8 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012c4:	f7ff fdac 	bl	8000e20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a2f      	ldr	r2, [pc, #188]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_PCD_MspInit+0x134>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fc39 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001302:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800131c:	230a      	movs	r3, #10
 800131e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 fc22 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_PCD_MspInit+0x134>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_PCD_MspInit+0x134>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d114      	bne.n	800137e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	4a0c      	ldr	r2, [pc, #48]	; (800138c <HAL_PCD_MspInit+0x134>)
 800135a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135e:	6593      	str	r3, [r2, #88]	; 0x58
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800136c:	f001 f8ca 	bl	8002504 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_PCD_MspInit+0x134>)
 8001376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800137a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800137c:	e001      	b.n	8001382 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800137e:	f001 f8c1 	bl	8002504 <HAL_PWREx_EnableVddUSB>
}
 8001382:	bf00      	nop
 8001384:	37b0      	adds	r7, #176	; 0xb0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	2036      	movs	r0, #54	; 0x36
 80013a6:	f000 faaf 	bl	8001908 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013aa:	2036      	movs	r0, #54	; 0x36
 80013ac:	f000 fac8 	bl	8001940 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_InitTick+0x9c>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_InitTick+0x9c>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <HAL_InitTick+0x9c>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c8:	f107 0210 	add.w	r2, r7, #16
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 feee 	bl	80031b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d8:	f001 fec0 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80013dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_InitTick+0xa0>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	3b01      	subs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_InitTick+0xa4>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <HAL_InitTick+0xa8>)
 80013f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_InitTick+0xa4>)
 80013f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_InitTick+0xa4>)
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_InitTick+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_InitTick+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <HAL_InitTick+0xa4>)
 800140e:	f002 fcd2 	bl	8003db6 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d104      	bne.n	8001422 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <HAL_InitTick+0xa4>)
 800141a:	f002 fd2d 	bl	8003e78 <HAL_TIM_Base_Start_IT>
 800141e:	4603      	mov	r3, r0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	431bde83 	.word	0x431bde83
 8001434:	200016d0 	.word	0x200016d0
 8001438:	40001000 	.word	0x40001000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800146c:	2020      	movs	r0, #32
 800146e:	f000 fd43 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001472:	2040      	movs	r0, #64	; 0x40
 8001474:	f000 fd40 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001478:	2080      	movs	r0, #128	; 0x80
 800147a:	f000 fd3d 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800147e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001482:	f000 fd39 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800148e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001492:	f000 fd31 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001496:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800149a:	f000 fd2d 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800149e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014a2:	f000 fd29 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80014a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014aa:	f000 fd25 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80014ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014b2:	f000 fd21 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM6_DAC_IRQHandler+0x10>)
 80014c2:	f002 fd49 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200016d0 	.word	0x200016d0

080014d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <ITM_SendChar+0x48>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <ITM_SendChar+0x48>)
 80014e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <ITM_SendChar+0x4c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <ITM_SendChar+0x4c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014f2:	bf00      	nop
 80014f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f8      	beq.n	80014f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001502:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000edfc 	.word	0xe000edfc
 800151c:	e0000e00 	.word	0xe0000e00

08001520 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001532:	f3af 8000 	nop.w
 8001536:	4601      	mov	r1, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <_read+0x12>
	}

return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e009      	b.n	8001580 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffab 	bl	80014d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf1      	blt.n	800156c <_write+0x12>
	}
	return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f005 f846 	bl	80066bc <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20018000 	.word	0x20018000
 800165c:	00000400 	.word	0x00000400
 8001660:	20000348 	.word	0x20000348
 8001664:	20001730 	.word	0x20001730

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff ffea 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f005 f8fb 	bl	80068b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7fe ff1d 	bl	80004fc <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016d0:	08007314 	.word	0x08007314
  ldr r2, =_sbss
 80016d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016d8:	20001730 	.word	0x20001730

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f902 	bl	80018f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	200f      	movs	r0, #15
 80016f0:	f7ff fe4e 	bl	8001390 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fb94 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	2000171c 	.word	0x2000171c

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000171c 	.word	0x2000171c

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff4c 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800191a:	f7ff ff61 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800191e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	6978      	ldr	r0, [r7, #20]
 8001926:	f7ff ffb1 	bl	800188c <NVIC_EncodePriority>
 800192a:	4602      	mov	r2, r0
 800192c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff80 	bl	8001838 <__NVIC_SetPriority>
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff54 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0ac      	b.n	8001ac8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f8b2 	bl	8001adc <DFSDM_GetChannelFromInstance>
 8001978:	4603      	mov	r3, r0
 800197a:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x174>)
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e09f      	b.n	8001ac8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fa77 	bl	8000e7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_DFSDM_ChannelInit+0x178>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_DFSDM_ChannelInit+0x178>)
 8001996:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <HAL_DFSDM_ChannelInit+0x178>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d125      	bne.n	80019ec <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80019a0:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019aa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80019ac:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4948      	ldr	r1, [pc, #288]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019c0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80019c4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	791b      	ldrb	r3, [r3, #4]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	493f      	ldr	r1, [pc, #252]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80019e0:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a3c      	ldr	r2, [pc, #240]	; (8001ad8 <HAL_DFSDM_ChannelInit+0x17c>)
 80019e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019ea:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80019fa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a0a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a10:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 020f 	bic.w	r2, r2, #15
 8001a28:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001a50:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6899      	ldr	r1, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	3b01      	subs	r3, #1
 8001a62:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f002 0207 	and.w	r2, r2, #7
 8001a7c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f810 	bl	8001adc <DFSDM_GetChannelFromInstance>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <HAL_DFSDM_ChannelInit+0x174>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000350 	.word	0x20000350
 8001ad4:	2000034c 	.word	0x2000034c
 8001ad8:	40016000 	.word	0x40016000

08001adc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <DFSDM_GetChannelFromInstance+0x7c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e02b      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <DFSDM_GetChannelFromInstance+0x80>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d102      	bne.n	8001b00 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	e024      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <DFSDM_GetChannelFromInstance+0x84>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e01d      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <DFSDM_GetChannelFromInstance+0x88>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d102      	bne.n	8001b1c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e016      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <DFSDM_GetChannelFromInstance+0x8c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001b24:	2305      	movs	r3, #5
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e00f      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <DFSDM_GetChannelFromInstance+0x90>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d102      	bne.n	8001b38 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001b32:	2306      	movs	r3, #6
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e008      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <DFSDM_GetChannelFromInstance+0x94>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d102      	bne.n	8001b46 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b40:	2307      	movs	r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e001      	b.n	8001b4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b46:	2303      	movs	r3, #3
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40016000 	.word	0x40016000
 8001b5c:	40016020 	.word	0x40016020
 8001b60:	40016040 	.word	0x40016040
 8001b64:	40016080 	.word	0x40016080
 8001b68:	400160a0 	.word	0x400160a0
 8001b6c:	400160c0 	.word	0x400160c0
 8001b70:	400160e0 	.word	0x400160e0

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e17f      	b.n	8001e84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8171 	beq.w	8001e7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d005      	beq.n	8001bb4 <HAL_GPIO_Init+0x40>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 0201 	and.w	r2, r3, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d118      	bne.n	8001c54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80ac 	beq.w	8001e7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b5f      	ldr	r3, [pc, #380]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b5c      	ldr	r3, [pc, #368]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d68:	d025      	beq.n	8001db6 <HAL_GPIO_Init+0x242>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01f      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4d      	ldr	r2, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00d      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00c      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001d9e:	2307      	movs	r3, #7
 8001da0:	e00a      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001da2:	2305      	movs	r3, #5
 8001da4:	e008      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001da6:	2304      	movs	r3, #4
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001daa:	2303      	movs	r3, #3
 8001dac:	e004      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e002      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x244>
 8001db6:	2300      	movs	r3, #0
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	f002 0203 	and.w	r2, r2, #3
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	4093      	lsls	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc8:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dfa:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f47f ae78 	bne.w	8001b84 <HAL_GPIO_Init+0x10>
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	48000800 	.word	0x48000800
 8001eb4:	48000c00 	.word	0x48000c00
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	48001400 	.word	0x48001400
 8001ec0:	48001800 	.word	0x48001800
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f806 	bl	8001f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e081      	b.n	8002054 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d106      	bne.n	8001f6a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe ffed 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2224      	movs	r2, #36	; 0x24
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	e006      	b.n	8001fc6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fc4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d104      	bne.n	8001fd8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69d9      	ldr	r1, [r3, #28]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	d138      	bne.n	80020e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800207c:	2302      	movs	r3, #2
 800207e:	e032      	b.n	80020e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e000      	b.n	80020e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020e4:	2302      	movs	r3, #2
  }
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	d139      	bne.n	800217c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002112:	2302      	movs	r3, #2
 8002114:	e033      	b.n	800217e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2224      	movs	r2, #36	; 0x24
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002144:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800218a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218c:	b08f      	sub	sp, #60	; 0x3c
 800218e:	af0a      	add	r7, sp, #40	; 0x28
 8002190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e116      	b.n	80023ca <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff f84e 	bl	8001258 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2203      	movs	r2, #3
 80021c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fd6f 	bl	8004cbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	687e      	ldr	r6, [r7, #4]
 80021e8:	466d      	mov	r5, sp
 80021ea:	f106 0410 	add.w	r4, r6, #16
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fe:	1d33      	adds	r3, r6, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f002 fd2f 	bl	8004c66 <USB_CoreInit>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0d7      	b.n	80023ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fd5d 	bl	8004ce0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e04a      	b.n	80022c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	333d      	adds	r3, #61	; 0x3d
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	333c      	adds	r3, #60	; 0x3c
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	b298      	uxth	r0, r3
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3342      	adds	r3, #66	; 0x42
 8002268:	4602      	mov	r2, r0
 800226a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333f      	adds	r3, #63	; 0x3f
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3344      	adds	r3, #68	; 0x44
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3350      	adds	r3, #80	; 0x50
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	3301      	adds	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3af      	bcc.n	800222c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e044      	b.n	800235c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	3301      	adds	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3b5      	bcc.n	80022d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	687e      	ldr	r6, [r7, #4]
 800236e:	466d      	mov	r5, sp
 8002370:	f106 0410 	add.w	r4, r6, #16
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002380:	e885 0003 	stmia.w	r5, {r0, r1}
 8002384:	1d33      	adds	r3, r6, #4
 8002386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	f002 fcf5 	bl	8004d78 <USB_DevInit>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e014      	b.n	80023ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f80a 	bl	80023d2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fe9d 	bl	8005102 <USB_DevDisconnect>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	f043 0303 	orr.w	r3, r3, #3
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40007000 	.word	0x40007000

0800243c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_PWREx_GetVoltageRange+0x18>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40007000 	.word	0x40007000

08002458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002466:	d130      	bne.n	80024ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d038      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800247e:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2232      	movs	r2, #50	; 0x32
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249c:	e002      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b0:	d102      	bne.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f2      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d110      	bne.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e00f      	b.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d007      	beq.n	80024e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e0:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40007000 	.word	0x40007000
 80024fc:	20000000 	.word	0x20000000
 8002500:	431bde83 	.word	0x431bde83

08002504 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_PWREx_EnableVddUSB+0x1c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_PWREx_EnableVddUSB+0x1c>)
 800250e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002512:	6053      	str	r3, [r2, #4]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff f904 	bl	8001738 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e063      	b.n	8002604 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7fe fd55 	bl	8001000 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002556:	f241 3188 	movw	r1, #5000	; 0x1388
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f858 	bl	8002610 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	3b01      	subs	r3, #1
 8002570:	021a      	lsls	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	2120      	movs	r1, #32
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f850 	bl	800262c <QSPI_WaitFlagStateUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d131      	bne.n	80025fa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025a0:	f023 0310 	bic.w	r3, r3, #16
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6852      	ldr	r2, [r2, #4]
 80025a8:	0611      	lsls	r1, r2, #24
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68d2      	ldr	r2, [r2, #12]
 80025ae:	4311      	orrs	r1, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_QSPI_Init+0xe8>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	0411      	lsls	r1, r2, #16
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6952      	ldr	r2, [r2, #20]
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6992      	ldr	r2, [r2, #24]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002602:	7afb      	ldrb	r3, [r7, #11]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	ffe0f8fe 	.word	0xffe0f8fe

08002610 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800263c:	e01a      	b.n	8002674 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d016      	beq.n	8002674 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff f877 	bl	8001738 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2204      	movs	r2, #4
 8002660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e00e      	b.n	8002692 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	429a      	cmp	r2, r3
 800268e:	d1d6      	bne.n	800263e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e3d4      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ae:	4ba1      	ldr	r3, [pc, #644]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026b8:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80e4 	beq.w	8002898 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4a>
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	f040 808b 	bne.w	80027f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 8087 	bne.w	80027f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e6:	4b93      	ldr	r3, [pc, #588]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e3ac      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_RCC_OscConfig+0x7c>
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002716:	e005      	b.n	8002724 <HAL_RCC_OscConfig+0x88>
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	4293      	cmp	r3, r2
 8002726:	d223      	bcs.n	8002770 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fd73 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e38d      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273c:	4b7d      	ldr	r3, [pc, #500]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7c      	ldr	r2, [pc, #496]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4977      	ldr	r1, [pc, #476]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	4972      	ldr	r1, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
 800276e:	e025      	b.n	80027bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b70      	ldr	r3, [pc, #448]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6f      	ldr	r2, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	496a      	ldr	r1, [pc, #424]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278e:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4965      	ldr	r1, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fd33 	bl	8003218 <RCC_SetFlashLatencyFromMSIRange>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e34d      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027bc:	f000 fc36 	bl	800302c <HAL_RCC_GetSysClockFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b5c      	ldr	r3, [pc, #368]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	495a      	ldr	r1, [pc, #360]	; (8002938 <HAL_RCC_OscConfig+0x29c>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x2a0>)
 80027da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027dc:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_RCC_OscConfig+0x2a4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fdd5 	bl	8001390 <HAL_InitTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d052      	beq.n	8002896 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	e331      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d032      	beq.n	8002862 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027fc:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002808:	f7fe ff96 	bl	8001738 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002810:	f7fe ff92 	bl	8001738 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e31a      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	493b      	ldr	r1, [pc, #236]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	4936      	ldr	r1, [pc, #216]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e01a      	b.n	8002898 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002862:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a33      	ldr	r2, [pc, #204]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800286e:	f7fe ff63 	bl	8001738 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002876:	f7fe ff5f 	bl	8001738 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e2e7      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x1da>
 8002894:	e000      	b.n	8002898 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002896:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d074      	beq.n	800298e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x21a>
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d10e      	bne.n	80028ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d10b      	bne.n	80028ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b6:	4b1f      	ldr	r3, [pc, #124]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d064      	beq.n	800298c <HAL_RCC_OscConfig+0x2f0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d160      	bne.n	800298c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e2c4      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCC_OscConfig+0x24a>
 80028d8:	4b16      	ldr	r3, [pc, #88]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	e01d      	b.n	8002922 <HAL_RCC_OscConfig+0x286>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x26e>
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e00b      	b.n	8002922 <HAL_RCC_OscConfig+0x286>
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a06      	ldr	r2, [pc, #24]	; (8002934 <HAL_RCC_OscConfig+0x298>)
 800291c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01c      	beq.n	8002964 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe ff05 	bl	8001738 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	e011      	b.n	8002956 <HAL_RCC_OscConfig+0x2ba>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	08007258 	.word	0x08007258
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe fef8 	bl	8001738 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e280      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002956:	4baf      	ldr	r3, [pc, #700]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x2a8>
 8002962:	e014      	b.n	800298e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fee8 	bl	8001738 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800296c:	f7fe fee4 	bl	8001738 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e26c      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800297e:	4ba5      	ldr	r3, [pc, #660]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x2d0>
 800298a:	e000      	b.n	800298e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d060      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x310>
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d119      	bne.n	80029da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d116      	bne.n	80029da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_OscConfig+0x328>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e249      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b93      	ldr	r3, [pc, #588]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4990      	ldr	r1, [pc, #576]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	e040      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d023      	beq.n	8002a2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e2:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a8b      	ldr	r2, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fea3 	bl	8001738 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe fe9f 	bl	8001738 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e227      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a08:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	497c      	ldr	r1, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
 8002a28:	e018      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a79      	ldr	r2, [pc, #484]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe fe7f 	bl	8001738 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3e:	f7fe fe7b 	bl	8001738 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e203      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a50:	4b70      	ldr	r3, [pc, #448]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a76:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7fe fe5a 	bl	8001738 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fe fe56 	bl	8001738 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1de      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a9a:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ef      	beq.n	8002a88 <HAL_RCC_OscConfig+0x3ec>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b5a      	ldr	r3, [pc, #360]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7fe fe3d 	bl	8001738 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fe39 	bl	8001738 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1c1      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a6 	beq.w	8002c3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1c:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d118      	bne.n	8002b5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b28:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3a      	ldr	r2, [pc, #232]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fe00 	bl	8001738 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3c:	f7fe fdfc 	bl	8001738 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e184      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x4d8>
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b72:	e024      	b.n	8002bbe <HAL_RCC_OscConfig+0x522>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d110      	bne.n	8002b9e <HAL_RCC_OscConfig+0x502>
 8002b7c:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b9c:	e00f      	b.n	8002bbe <HAL_RCC_OscConfig+0x522>
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fdb7 	bl	8001738 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fdb3 	bl	8001738 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e139      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ed      	beq.n	8002bce <HAL_RCC_OscConfig+0x532>
 8002bf2:	e01a      	b.n	8002c2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe fda0 	bl	8001738 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfa:	e00f      	b.n	8002c1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fd9c 	bl	8001738 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d906      	bls.n	8002c1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e122      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c1c:	4b90      	ldr	r3, [pc, #576]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e8      	bne.n	8002bfc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b8b      	ldr	r3, [pc, #556]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a8a      	ldr	r2, [pc, #552]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8108 	beq.w	8002e56 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f040 80d0 	bne.w	8002df0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c50:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0203 	and.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d130      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d127      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d11f      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c90:	2a07      	cmp	r2, #7
 8002c92:	bf14      	ite	ne
 8002c94:	2201      	movne	r2, #1
 8002c96:	2200      	moveq	r2, #0
 8002c98:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d113      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	3b01      	subs	r3, #1
 8002cac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d06e      	beq.n	8002da4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d069      	beq.n	8002da0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002cd8:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b7      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ce8:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5c      	ldr	r2, [pc, #368]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf4:	f7fe fd20 	bl	8001738 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fd1c 	bl	8001738 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0a4      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x7c8>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d2a:	3a01      	subs	r2, #1
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	4311      	orrs	r1, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d34:	0212      	lsls	r2, r2, #8
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d3c:	0852      	lsrs	r2, r2, #1
 8002d3e:	3a01      	subs	r2, #1
 8002d40:	0552      	lsls	r2, r2, #21
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d48:	0852      	lsrs	r2, r2, #1
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	0652      	lsls	r2, r2, #25
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d54:	0912      	lsrs	r2, r2, #4
 8002d56:	0452      	lsls	r2, r2, #17
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	4941      	ldr	r1, [pc, #260]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d60:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d78:	f7fe fcde 	bl	8001738 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fcda 	bl	8001738 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e062      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9e:	e05a      	b.n	8002e56 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e059      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d152      	bne.n	8002e56 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dc8:	f7fe fcb6 	bl	8001738 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fcb2 	bl	8001738 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e03a      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x734>
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d02d      	beq.n	8002e52 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a13      	ldr	r2, [pc, #76]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e14:	f023 0303 	bic.w	r3, r3, #3
 8002e18:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e28:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fc85 	bl	8001738 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fe fc81 	bl	8001738 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e009      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x796>
 8002e50:	e001      	b.n	8002e56 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	f99d808c 	.word	0xf99d808c

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0c8      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4961      	ldr	r1, [pc, #388]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0b0      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d04c      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec0:	4b56      	ldr	r3, [pc, #344]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e09e      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e092      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e086      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07e      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f10:	4b42      	ldr	r3, [pc, #264]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	493f      	ldr	r1, [pc, #252]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f22:	f7fe fc09 	bl	8001738 <HAL_GetTick>
 8002f26:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2a:	f7fe fc05 	bl	8001738 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e066      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 020c 	and.w	r2, r3, #12
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d1eb      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	492c      	ldr	r1, [pc, #176]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d210      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4924      	ldr	r1, [pc, #144]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_RCC_ClockConfig+0x1b0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e036      	b.n	800300e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4918      	ldr	r1, [pc, #96]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4910      	ldr	r1, [pc, #64]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fde:	f000 f825 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <HAL_RCC_ClockConfig+0x1b4>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490c      	ldr	r1, [pc, #48]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f9c4 	bl	8001390 <HAL_InitTick>
 8003008:	4603      	mov	r3, r0
 800300a:	72fb      	strb	r3, [r7, #11]

  return status;
 800300c:	7afb      	ldrb	r3, [r7, #11]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
 8003020:	08007258 	.word	0x08007258
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x34>
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d121      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d11e      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003088:	4a2b      	ldr	r2, [pc, #172]	; (8003138 <HAL_RCC_GetSysClockFreq+0x10c>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d102      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_GetSysClockFreq+0x110>)
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e004      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_RCC_GetSysClockFreq+0x114>)
 80030b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d134      	bne.n	8003124 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d003      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0xac>
 80030d0:	e005      	b.n	80030de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <HAL_RCC_GetSysClockFreq+0x110>)
 80030d4:	617b      	str	r3, [r7, #20]
      break;
 80030d6:	e005      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_GetSysClockFreq+0x114>)
 80030da:	617b      	str	r3, [r7, #20]
      break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	617b      	str	r3, [r7, #20]
      break;
 80030e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	3301      	adds	r3, #1
 80030f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	fb02 f203 	mul.w	r2, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_GetSysClockFreq+0x108>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	0e5b      	lsrs	r3, r3, #25
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	3301      	adds	r3, #1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003124:	69bb      	ldr	r3, [r7, #24]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	; 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	08007270 	.word	0x08007270
 800313c:	00f42400 	.word	0x00f42400
 8003140:	007a1200 	.word	0x007a1200

08003144 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_RCC_GetHCLKFreq+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000000 	.word	0x20000000

0800315c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003160:	f7ff fff0 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4904      	ldr	r1, [pc, #16]	; (8003184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	08007268 	.word	0x08007268

08003188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800318c:	f7ff ffda 	bl	8003144 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0adb      	lsrs	r3, r3, #11
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4904      	ldr	r1, [pc, #16]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08007268 	.word	0x08007268

080031b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	220f      	movs	r2, #15
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_GetClockConfig+0x5c>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80031d0:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_RCC_GetClockConfig+0x5c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_RCC_GetClockConfig+0x60>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0207 	and.w	r2, r3, #7
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	601a      	str	r2, [r3, #0]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	40022000 	.word	0x40022000

08003218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003230:	f7ff f904 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003234:	6178      	str	r0, [r7, #20]
 8003236:	e014      	b.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003250:	f7ff f8f4 	bl	800243c <HAL_PWREx_GetVoltageRange>
 8003254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800325c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003260:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003268:	d10b      	bne.n	8003282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b80      	cmp	r3, #128	; 0x80
 800326e:	d919      	bls.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2ba0      	cmp	r3, #160	; 0xa0
 8003274:	d902      	bls.n	800327c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003276:	2302      	movs	r3, #2
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	e013      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e010      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d902      	bls.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003288:	2303      	movs	r3, #3
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e00a      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d102      	bne.n	800329a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003294:	2302      	movs	r3, #2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	e004      	b.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b70      	cmp	r3, #112	; 0x70
 800329e:	d101      	bne.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a0:	2301      	movs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0207 	bic.w	r2, r3, #7
 80032ac:	4909      	ldr	r1, [pc, #36]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40022000 	.word	0x40022000

080032d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d041      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032fc:	d02a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003302:	d824      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800330a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330e:	d81e      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003318:	d010      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800331a:	e018      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331c:	4b86      	ldr	r3, [pc, #536]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a85      	ldr	r2, [pc, #532]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003328:	e015      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f000 facb 	bl	80038cc <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e00c      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3320      	adds	r3, #32
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fbb6 	bl	8003ab4 <RCCEx_PLLSAI2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e003      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	74fb      	strb	r3, [r7, #19]
      break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335c:	4b76      	ldr	r3, [pc, #472]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336a:	4973      	ldr	r1, [pc, #460]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003372:	e001      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d041      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003388:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800338c:	d02a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800338e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003392:	d824      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003398:	d008      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800339e:	d81e      	bhi.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a8:	d010      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033aa:	e018      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ac:	4b62      	ldr	r3, [pc, #392]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a61      	ldr	r2, [pc, #388]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b8:	e015      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fa83 	bl	80038cc <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ca:	e00c      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3320      	adds	r3, #32
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb6e 	bl	8003ab4 <RCCEx_PLLSAI2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	74fb      	strb	r3, [r7, #19]
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e6:	7cfb      	ldrb	r3, [r7, #19]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ec:	4b52      	ldr	r3, [pc, #328]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fa:	494f      	ldr	r1, [pc, #316]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003402:	e001      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a0 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	4a40      	ldr	r2, [pc, #256]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	; 0x58
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003448:	2301      	movs	r3, #1
 800344a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800344c:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3a      	ldr	r2, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003458:	f7fe f96e 	bl	8001738 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345e:	e009      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fe f96a 	bl	8001738 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
        break;
 8003472:	e005      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003474:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ef      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d15c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d019      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	4a20      	ldr	r2, [pc, #128]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d0:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fe f929 	bl	8001738 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e8:	e00b      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ea:	f7fe f925 	bl	8001738 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d902      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ec      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003526:	4904      	ldr	r1, [pc, #16]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
 8003534:	e006      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b9e      	ldr	r3, [pc, #632]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	4a9d      	ldr	r2, [pc, #628]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	4b98      	ldr	r3, [pc, #608]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	4994      	ldr	r1, [pc, #592]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	4b8f      	ldr	r3, [pc, #572]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 020c 	bic.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	498c      	ldr	r1, [pc, #560]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4b87      	ldr	r3, [pc, #540]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	4983      	ldr	r1, [pc, #524]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	4b7e      	ldr	r3, [pc, #504]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	497b      	ldr	r1, [pc, #492]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ea:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	4972      	ldr	r1, [pc, #456]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360c:	4b6d      	ldr	r3, [pc, #436]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	496a      	ldr	r1, [pc, #424]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362e:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	4961      	ldr	r1, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003650:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	4959      	ldr	r1, [pc, #356]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003672:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	4950      	ldr	r1, [pc, #320]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003694:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	4948      	ldr	r1, [pc, #288]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	493f      	ldr	r1, [pc, #252]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d028      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d8:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f6:	d106      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
 8003704:	e011      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f8d8 	bl	80038cc <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	491f      	ldr	r1, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003754:	d106      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003760:	60d3      	str	r3, [r2, #12]
 8003762:	e011      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f8a9 	bl	80038cc <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	4908      	ldr	r1, [pc, #32]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037b2:	d109      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a02      	ldr	r2, [pc, #8]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
 80037c0:	e014      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037c2:	bf00      	nop
 80037c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f877 	bl	80038cc <RCCEx_PLLSAI1_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003806:	4928      	ldr	r1, [pc, #160]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f854 	bl	80038cc <RCCEx_PLLSAI1_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d014      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	74bb      	strb	r3, [r7, #18]
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3320      	adds	r3, #32
 8003842:	2102      	movs	r1, #2
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f935 	bl	8003ab4 <RCCEx_PLLSAI2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003872:	490d      	ldr	r1, [pc, #52]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003896:	4904      	ldr	r1, [pc, #16]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800389e:	7cbb      	ldrb	r3, [r7, #18]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000

080038cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038da:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038e6:	4b72      	ldr	r3, [pc, #456]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10d      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
       ||
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038fe:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
       ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d047      	beq.n	80039a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e044      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d018      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0x86>
 8003920:	2b03      	cmp	r3, #3
 8003922:	d825      	bhi.n	8003970 <RCCEx_PLLSAI1_Config+0xa4>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d002      	beq.n	800392e <RCCEx_PLLSAI1_Config+0x62>
 8003928:	2b02      	cmp	r3, #2
 800392a:	d009      	beq.n	8003940 <RCCEx_PLLSAI1_Config+0x74>
 800392c:	e020      	b.n	8003970 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800392e:	4b60      	ldr	r3, [pc, #384]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11d      	bne.n	8003976 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393e:	e01a      	b.n	8003976 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003940:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e013      	b.n	800397a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003952:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800396e:	e006      	b.n	800397e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e004      	b.n	8003980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800397e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	430b      	orrs	r3, r1
 800399c:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d17d      	bne.n	8003aa4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039a8:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a40      	ldr	r2, [pc, #256]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fd fec0 	bl	8001738 <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ba:	e009      	b.n	80039d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039bc:	f7fd febc 	bl	8001738 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	73fb      	strb	r3, [r7, #15]
        break;
 80039ce:	e005      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ef      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d160      	bne.n	8003aa4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	0912      	lsrs	r2, r2, #4
 8003a00:	0452      	lsls	r2, r2, #17
 8003a02:	430a      	orrs	r2, r1
 8003a04:	492a      	ldr	r1, [pc, #168]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
 8003a0a:	e027      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d112      	bne.n	8003a38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6892      	ldr	r2, [r2, #8]
 8003a22:	0211      	lsls	r1, r2, #8
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6912      	ldr	r2, [r2, #16]
 8003a28:	0852      	lsrs	r2, r2, #1
 8003a2a:	3a01      	subs	r2, #1
 8003a2c:	0552      	lsls	r2, r2, #21
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	491f      	ldr	r1, [pc, #124]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]
 8003a36:	e011      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6892      	ldr	r2, [r2, #8]
 8003a48:	0211      	lsls	r1, r2, #8
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6952      	ldr	r2, [r2, #20]
 8003a4e:	0852      	lsrs	r2, r2, #1
 8003a50:	3a01      	subs	r2, #1
 8003a52:	0652      	lsls	r2, r2, #25
 8003a54:	430a      	orrs	r2, r1
 8003a56:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fd fe66 	bl	8001738 <HAL_GetTick>
 8003a6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a6e:	e009      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a70:	f7fd fe62 	bl	8001738 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	73fb      	strb	r3, [r7, #15]
          break;
 8003a82:	e005      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	4904      	ldr	r1, [pc, #16]	; (8003ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ace:	4b67      	ldr	r3, [pc, #412]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0203 	and.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d10d      	bne.n	8003afa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ae6:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
       ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d047      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e044      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d018      	beq.n	8003b3a <RCCEx_PLLSAI2_Config+0x86>
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d825      	bhi.n	8003b58 <RCCEx_PLLSAI2_Config+0xa4>
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d002      	beq.n	8003b16 <RCCEx_PLLSAI2_Config+0x62>
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d009      	beq.n	8003b28 <RCCEx_PLLSAI2_Config+0x74>
 8003b14:	e020      	b.n	8003b58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b16:	4b55      	ldr	r3, [pc, #340]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11d      	bne.n	8003b5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b26:	e01a      	b.n	8003b5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e013      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b46:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b56:	e006      	b.n	8003b66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	e004      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	430b      	orrs	r3, r1
 8003b84:	4939      	ldr	r1, [pc, #228]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d167      	bne.n	8003c60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a35      	ldr	r2, [pc, #212]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fd fdcc 	bl	8001738 <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba4:	f7fd fdc8 	bl	8001738 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bb8:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ef      	bne.n	8003ba4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d14a      	bne.n	8003c60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	0211      	lsls	r1, r2, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	0912      	lsrs	r2, r2, #4
 8003be8:	0452      	lsls	r2, r2, #17
 8003bea:	430a      	orrs	r2, r1
 8003bec:	491f      	ldr	r1, [pc, #124]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	614b      	str	r3, [r1, #20]
 8003bf2:	e011      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6892      	ldr	r2, [r2, #8]
 8003c04:	0211      	lsls	r1, r2, #8
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6912      	ldr	r2, [r2, #16]
 8003c0a:	0852      	lsrs	r2, r2, #1
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0652      	lsls	r2, r2, #25
 8003c10:	430a      	orrs	r2, r1
 8003c12:	4916      	ldr	r1, [pc, #88]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd fd88 	bl	8001738 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c2a:	e009      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c2c:	f7fd fd84 	bl	8001738 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c3e:	e005      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ef      	beq.n	8003c2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	4904      	ldr	r1, [pc, #16]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e095      	b.n	8003dae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c92:	d009      	beq.n	8003ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
 8003c9a:	e005      	b.n	8003ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f9e0 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce8:	d902      	bls.n	8003cf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e002      	b.n	8003cf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cfe:	d007      	beq.n	8003d10 <HAL_SPI_Init+0xa0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	ea42 0103 	orr.w	r1, r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 0204 	and.w	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d8c:	ea42 0103 	orr.w	r1, r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e049      	b.n	8003e5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f841 	bl	8003e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 f9f7 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d001      	beq.n	8003e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e04f      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01d      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d018      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	; (8003f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x76>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d115      	bne.n	8003f1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d015      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0xb4>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f06:	d011      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	e008      	b.n	8003f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	00010007 	.word	0x00010007

08003f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d122      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0202 	mvn.w	r2, #2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f905 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8f7 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f908 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d122      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d11b      	bne.n	8004008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0204 	mvn.w	r2, #4
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8db 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8cd 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8de 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d122      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b08      	cmp	r3, #8
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0208 	mvn.w	r2, #8
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f8b1 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8a3 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f8b4 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b10      	cmp	r3, #16
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b10      	cmp	r3, #16
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0210 	mvn.w	r2, #16
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2208      	movs	r2, #8
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f887 	bl	80041aa <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f879 	bl	8004196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f88a 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0201 	mvn.w	r2, #1
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fe90 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b80      	cmp	r3, #128	; 0x80
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f914 	bl	8004330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f907 	bl	8004344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d10e      	bne.n	8004162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d107      	bne.n	8004162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800415a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f838 	bl	80041d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d10e      	bne.n	800418e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d107      	bne.n	800418e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f06f 0220 	mvn.w	r2, #32
 8004186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f8c7 	bl	800431c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a40      	ldr	r2, [pc, #256]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a3d      	ldr	r2, [pc, #244]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2f      	ldr	r2, [pc, #188]	; (80042fc <TIM_Base_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d01f      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d01b      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <TIM_Base_SetConfig+0x118>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d017      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2b      	ldr	r2, [pc, #172]	; (8004304 <TIM_Base_SetConfig+0x11c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <TIM_Base_SetConfig+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00f      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <TIM_Base_SetConfig+0x124>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00b      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a28      	ldr	r2, [pc, #160]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d003      	beq.n	8004282 <TIM_Base_SetConfig+0x9a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a10      	ldr	r2, [pc, #64]	; (80042fc <TIM_Base_SetConfig+0x114>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <TIM_Base_SetConfig+0x124>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a11      	ldr	r2, [pc, #68]	; (8004310 <TIM_Base_SetConfig+0x128>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0xf8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a0f      	ldr	r2, [pc, #60]	; (8004318 <TIM_Base_SetConfig+0x130>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d103      	bne.n	80042e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	615a      	str	r2, [r3, #20]
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40013400 	.word	0x40013400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800

0800431c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e040      	b.n	80043ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fec8 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f82c 	bl	80043f4 <UART_SetConfig>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e022      	b.n	80043ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faaa 	bl	8004908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb31 	bl	8004a4c <UART_CheckIdleState>
 80043ea:	4603      	mov	r3, r0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	b5b0      	push	{r4, r5, r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	4313      	orrs	r3, r2
 8004416:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4bad      	ldr	r3, [pc, #692]	; (80046d4 <UART_SetConfig+0x2e0>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	69f9      	ldr	r1, [r7, #28]
 8004428:	430b      	orrs	r3, r1
 800442a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4aa2      	ldr	r2, [pc, #648]	; (80046d8 <UART_SetConfig+0x2e4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	4313      	orrs	r3, r2
 800445a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a99      	ldr	r2, [pc, #612]	; (80046dc <UART_SetConfig+0x2e8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d121      	bne.n	80044be <UART_SetConfig+0xca>
 800447a:	4b99      	ldr	r3, [pc, #612]	; (80046e0 <UART_SetConfig+0x2ec>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d817      	bhi.n	80044b8 <UART_SetConfig+0xc4>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x9c>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044a7 	.word	0x080044a7
 800449c:	080044b3 	.word	0x080044b3
 80044a0:	2301      	movs	r3, #1
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e0e7      	b.n	8004676 <UART_SetConfig+0x282>
 80044a6:	2302      	movs	r3, #2
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e0e4      	b.n	8004676 <UART_SetConfig+0x282>
 80044ac:	2304      	movs	r3, #4
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e0e1      	b.n	8004676 <UART_SetConfig+0x282>
 80044b2:	2308      	movs	r3, #8
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e0de      	b.n	8004676 <UART_SetConfig+0x282>
 80044b8:	2310      	movs	r3, #16
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e0db      	b.n	8004676 <UART_SetConfig+0x282>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a88      	ldr	r2, [pc, #544]	; (80046e4 <UART_SetConfig+0x2f0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d132      	bne.n	800452e <UART_SetConfig+0x13a>
 80044c8:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <UART_SetConfig+0x2ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d828      	bhi.n	8004528 <UART_SetConfig+0x134>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0xe8>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004529 	.word	0x08004529
 80044e4:	08004529 	.word	0x08004529
 80044e8:	08004529 	.word	0x08004529
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	08004529 	.word	0x08004529
 80044f4:	08004529 	.word	0x08004529
 80044f8:	08004529 	.word	0x08004529
 80044fc:	08004517 	.word	0x08004517
 8004500:	08004529 	.word	0x08004529
 8004504:	08004529 	.word	0x08004529
 8004508:	08004529 	.word	0x08004529
 800450c:	08004523 	.word	0x08004523
 8004510:	2300      	movs	r3, #0
 8004512:	76fb      	strb	r3, [r7, #27]
 8004514:	e0af      	b.n	8004676 <UART_SetConfig+0x282>
 8004516:	2302      	movs	r3, #2
 8004518:	76fb      	strb	r3, [r7, #27]
 800451a:	e0ac      	b.n	8004676 <UART_SetConfig+0x282>
 800451c:	2304      	movs	r3, #4
 800451e:	76fb      	strb	r3, [r7, #27]
 8004520:	e0a9      	b.n	8004676 <UART_SetConfig+0x282>
 8004522:	2308      	movs	r3, #8
 8004524:	76fb      	strb	r3, [r7, #27]
 8004526:	e0a6      	b.n	8004676 <UART_SetConfig+0x282>
 8004528:	2310      	movs	r3, #16
 800452a:	76fb      	strb	r3, [r7, #27]
 800452c:	e0a3      	b.n	8004676 <UART_SetConfig+0x282>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6d      	ldr	r2, [pc, #436]	; (80046e8 <UART_SetConfig+0x2f4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d120      	bne.n	800457a <UART_SetConfig+0x186>
 8004538:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <UART_SetConfig+0x2ec>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004542:	2b30      	cmp	r3, #48	; 0x30
 8004544:	d013      	beq.n	800456e <UART_SetConfig+0x17a>
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d814      	bhi.n	8004574 <UART_SetConfig+0x180>
 800454a:	2b20      	cmp	r3, #32
 800454c:	d009      	beq.n	8004562 <UART_SetConfig+0x16e>
 800454e:	2b20      	cmp	r3, #32
 8004550:	d810      	bhi.n	8004574 <UART_SetConfig+0x180>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <UART_SetConfig+0x168>
 8004556:	2b10      	cmp	r3, #16
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x174>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x180>
 800455c:	2300      	movs	r3, #0
 800455e:	76fb      	strb	r3, [r7, #27]
 8004560:	e089      	b.n	8004676 <UART_SetConfig+0x282>
 8004562:	2302      	movs	r3, #2
 8004564:	76fb      	strb	r3, [r7, #27]
 8004566:	e086      	b.n	8004676 <UART_SetConfig+0x282>
 8004568:	2304      	movs	r3, #4
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	e083      	b.n	8004676 <UART_SetConfig+0x282>
 800456e:	2308      	movs	r3, #8
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e080      	b.n	8004676 <UART_SetConfig+0x282>
 8004574:	2310      	movs	r3, #16
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e07d      	b.n	8004676 <UART_SetConfig+0x282>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5b      	ldr	r2, [pc, #364]	; (80046ec <UART_SetConfig+0x2f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d120      	bne.n	80045c6 <UART_SetConfig+0x1d2>
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <UART_SetConfig+0x2ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800458e:	2bc0      	cmp	r3, #192	; 0xc0
 8004590:	d013      	beq.n	80045ba <UART_SetConfig+0x1c6>
 8004592:	2bc0      	cmp	r3, #192	; 0xc0
 8004594:	d814      	bhi.n	80045c0 <UART_SetConfig+0x1cc>
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d009      	beq.n	80045ae <UART_SetConfig+0x1ba>
 800459a:	2b80      	cmp	r3, #128	; 0x80
 800459c:	d810      	bhi.n	80045c0 <UART_SetConfig+0x1cc>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x1b4>
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d006      	beq.n	80045b4 <UART_SetConfig+0x1c0>
 80045a6:	e00b      	b.n	80045c0 <UART_SetConfig+0x1cc>
 80045a8:	2300      	movs	r3, #0
 80045aa:	76fb      	strb	r3, [r7, #27]
 80045ac:	e063      	b.n	8004676 <UART_SetConfig+0x282>
 80045ae:	2302      	movs	r3, #2
 80045b0:	76fb      	strb	r3, [r7, #27]
 80045b2:	e060      	b.n	8004676 <UART_SetConfig+0x282>
 80045b4:	2304      	movs	r3, #4
 80045b6:	76fb      	strb	r3, [r7, #27]
 80045b8:	e05d      	b.n	8004676 <UART_SetConfig+0x282>
 80045ba:	2308      	movs	r3, #8
 80045bc:	76fb      	strb	r3, [r7, #27]
 80045be:	e05a      	b.n	8004676 <UART_SetConfig+0x282>
 80045c0:	2310      	movs	r3, #16
 80045c2:	76fb      	strb	r3, [r7, #27]
 80045c4:	e057      	b.n	8004676 <UART_SetConfig+0x282>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a49      	ldr	r2, [pc, #292]	; (80046f0 <UART_SetConfig+0x2fc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d125      	bne.n	800461c <UART_SetConfig+0x228>
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <UART_SetConfig+0x2ec>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045de:	d017      	beq.n	8004610 <UART_SetConfig+0x21c>
 80045e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e4:	d817      	bhi.n	8004616 <UART_SetConfig+0x222>
 80045e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ea:	d00b      	beq.n	8004604 <UART_SetConfig+0x210>
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d811      	bhi.n	8004616 <UART_SetConfig+0x222>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <UART_SetConfig+0x20a>
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d006      	beq.n	800460a <UART_SetConfig+0x216>
 80045fc:	e00b      	b.n	8004616 <UART_SetConfig+0x222>
 80045fe:	2300      	movs	r3, #0
 8004600:	76fb      	strb	r3, [r7, #27]
 8004602:	e038      	b.n	8004676 <UART_SetConfig+0x282>
 8004604:	2302      	movs	r3, #2
 8004606:	76fb      	strb	r3, [r7, #27]
 8004608:	e035      	b.n	8004676 <UART_SetConfig+0x282>
 800460a:	2304      	movs	r3, #4
 800460c:	76fb      	strb	r3, [r7, #27]
 800460e:	e032      	b.n	8004676 <UART_SetConfig+0x282>
 8004610:	2308      	movs	r3, #8
 8004612:	76fb      	strb	r3, [r7, #27]
 8004614:	e02f      	b.n	8004676 <UART_SetConfig+0x282>
 8004616:	2310      	movs	r3, #16
 8004618:	76fb      	strb	r3, [r7, #27]
 800461a:	e02c      	b.n	8004676 <UART_SetConfig+0x282>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <UART_SetConfig+0x2e4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d125      	bne.n	8004672 <UART_SetConfig+0x27e>
 8004626:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <UART_SetConfig+0x2ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004634:	d017      	beq.n	8004666 <UART_SetConfig+0x272>
 8004636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800463a:	d817      	bhi.n	800466c <UART_SetConfig+0x278>
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d00b      	beq.n	800465a <UART_SetConfig+0x266>
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d811      	bhi.n	800466c <UART_SetConfig+0x278>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <UART_SetConfig+0x260>
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d006      	beq.n	8004660 <UART_SetConfig+0x26c>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x278>
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x282>
 800465a:	2302      	movs	r3, #2
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e00a      	b.n	8004676 <UART_SetConfig+0x282>
 8004660:	2304      	movs	r3, #4
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e007      	b.n	8004676 <UART_SetConfig+0x282>
 8004666:	2308      	movs	r3, #8
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e004      	b.n	8004676 <UART_SetConfig+0x282>
 800466c:	2310      	movs	r3, #16
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	e001      	b.n	8004676 <UART_SetConfig+0x282>
 8004672:	2310      	movs	r3, #16
 8004674:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <UART_SetConfig+0x2e4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	f040 8087 	bne.w	8004790 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004682:	7efb      	ldrb	r3, [r7, #27]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d837      	bhi.n	80046f8 <UART_SetConfig+0x304>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x29c>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046c3 	.word	0x080046c3
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fd52 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80046b8:	6178      	str	r0, [r7, #20]
        break;
 80046ba:	e022      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <UART_SetConfig+0x300>)
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e01f      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fcb3 	bl	800302c <HAL_RCC_GetSysClockFreq>
 80046c6:	6178      	str	r0, [r7, #20]
        break;
 80046c8:	e01b      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	617b      	str	r3, [r7, #20]
        break;
 80046d0:	e017      	b.n	8004702 <UART_SetConfig+0x30e>
 80046d2:	bf00      	nop
 80046d4:	efff69f3 	.word	0xefff69f3
 80046d8:	40008000 	.word	0x40008000
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	76bb      	strb	r3, [r7, #26]
        break;
 8004700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80f1 	beq.w	80048ec <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d305      	bcc.n	8004726 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d902      	bls.n	800472c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	76bb      	strb	r3, [r7, #26]
 800472a:	e0df      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4618      	mov	r0, r3
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	020b      	lsls	r3, r1, #8
 800473e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004742:	0202      	lsls	r2, r0, #8
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6849      	ldr	r1, [r1, #4]
 8004748:	0849      	lsrs	r1, r1, #1
 800474a:	4608      	mov	r0, r1
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	1814      	adds	r4, r2, r0
 8004752:	eb43 0501 	adc.w	r5, r3, r1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	461a      	mov	r2, r3
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f7fb fd34 	bl	80001d0 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004776:	d308      	bcc.n	800478a <UART_SetConfig+0x396>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d204      	bcs.n	800478a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e0b0      	b.n	80048ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	76bb      	strb	r3, [r7, #26]
 800478e:	e0ad      	b.n	80048ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d15b      	bne.n	8004852 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d828      	bhi.n	80047f2 <UART_SetConfig+0x3fe>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x3b4>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fcc6 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fe fcd8 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 80047d8:	6178      	str	r0, [r7, #20]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b49      	ldr	r3, [pc, #292]	; (8004904 <UART_SetConfig+0x510>)
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e00c      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe fc23 	bl	800302c <HAL_RCC_GetSysClockFreq>
 80047e6:	6178      	str	r0, [r7, #20]
        break;
 80047e8:	e008      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	617b      	str	r3, [r7, #20]
        break;
 80047f0:	e004      	b.n	80047fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	76bb      	strb	r3, [r7, #26]
        break;
 80047fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d074      	beq.n	80048ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d916      	bls.n	800484c <UART_SetConfig+0x458>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d212      	bcs.n	800484c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f023 030f 	bic.w	r3, r3, #15
 800482e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	b29a      	uxth	r2, r3
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	4313      	orrs	r3, r2
 8004840:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	89fa      	ldrh	r2, [r7, #14]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e04f      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	76bb      	strb	r3, [r7, #26]
 8004850:	e04c      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004852:	7efb      	ldrb	r3, [r7, #27]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d828      	bhi.n	80048aa <UART_SetConfig+0x4b6>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x46c>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fe fc6a 	bl	800315c <HAL_RCC_GetPCLK1Freq>
 8004888:	6178      	str	r0, [r7, #20]
        break;
 800488a:	e013      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fe fc7c 	bl	8003188 <HAL_RCC_GetPCLK2Freq>
 8004890:	6178      	str	r0, [r7, #20]
        break;
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <UART_SetConfig+0x510>)
 8004896:	617b      	str	r3, [r7, #20]
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe fbc7 	bl	800302c <HAL_RCC_GetSysClockFreq>
 800489e:	6178      	str	r0, [r7, #20]
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	617b      	str	r3, [r7, #20]
        break;
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	76bb      	strb	r3, [r7, #26]
        break;
 80048b2:	bf00      	nop
    }

    if (pclk != 0U)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d909      	bls.n	80048e8 <UART_SetConfig+0x4f4>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d205      	bcs.n	80048e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	bdb0      	pop	{r4, r5, r7, pc}
 8004902:	bf00      	nop
 8004904:	00f42400 	.word	0x00f42400

08004908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d10a      	bne.n	8004a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a5c:	f7fc fe6c 	bl	8001738 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d10e      	bne.n	8004a8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f82d 	bl	8004ade <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e023      	b.n	8004ad6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d10e      	bne.n	8004aba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f817 	bl	8004ade <UART_WaitOnFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e00d      	b.n	8004ad6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b09c      	sub	sp, #112	; 0x70
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aee:	e0a5      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	f000 80a1 	beq.w	8004c3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fc fe1d 	bl	8001738 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d13e      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b24:	667b      	str	r3, [r7, #100]	; 0x64
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e6      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e5      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e067      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d04f      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004baa:	d147      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c08:	623a      	str	r2, [r7, #32]
 8004c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69f9      	ldr	r1, [r7, #28]
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e010      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f43f af4a 	beq.w	8004af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3770      	adds	r7, #112	; 0x70
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c66:	b084      	sub	sp, #16
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	f107 001c 	add.w	r0, r7, #28
 8004c74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fa6b 	bl	8005160 <USB_CoreReset>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca0:	e005      	b.n	8004cae <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cba:	b004      	add	sp, #16
 8004cbc:	4770      	bx	lr

08004cbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d115      	bne.n	8004d2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7fc fd1e 	bl	8001750 <HAL_Delay>
      ms++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa12 	bl	8005144 <USB_GetMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d01e      	beq.n	8004d64 <USB_SetCurrentMode+0x84>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b31      	cmp	r3, #49	; 0x31
 8004d2a:	d9f0      	bls.n	8004d0e <USB_SetCurrentMode+0x2e>
 8004d2c:	e01a      	b.n	8004d64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d115      	bne.n	8004d60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d40:	2001      	movs	r0, #1
 8004d42:	f7fc fd05 	bl	8001750 <HAL_Delay>
      ms++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f9f9 	bl	8005144 <USB_GetMode>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <USB_SetCurrentMode+0x84>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b31      	cmp	r3, #49	; 0x31
 8004d5c:	d9f0      	bls.n	8004d40 <USB_SetCurrentMode+0x60>
 8004d5e:	e001      	b.n	8004d64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e005      	b.n	8004d70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b32      	cmp	r3, #50	; 0x32
 8004d68:	d101      	bne.n	8004d6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e009      	b.n	8004dac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3340      	adds	r3, #64	; 0x40
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	2200      	movs	r2, #0
 8004da4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3301      	adds	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0e      	cmp	r3, #14
 8004db0:	d9f2      	bls.n	8004d98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11c      	bne.n	8004df2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e005      	b.n	8004dfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e04:	461a      	mov	r2, r3
 8004e06:	2300      	movs	r3, #0
 8004e08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e10:	4619      	mov	r1, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e18:	461a      	mov	r2, r3
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e1e:	2103      	movs	r1, #3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f955 	bl	80050d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e26:	2110      	movs	r1, #16
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f8f1 	bl	8005010 <USB_FlushTxFifo>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f91b 	bl	8005074 <USB_FlushRxFifo>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4e:	461a      	mov	r2, r3
 8004e50:	2300      	movs	r3, #0
 8004e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	461a      	mov	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e043      	b.n	8004efa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e88:	d118      	bne.n	8004ebc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e013      	b.n	8004ece <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e008      	b.n	8004ece <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	461a      	mov	r2, r3
 8004edc:	2300      	movs	r3, #0
 8004ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	461a      	mov	r2, r3
 8004eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3b7      	bcc.n	8004e72 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e043      	b.n	8004f90 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1e:	d118      	bne.n	8004f52 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e013      	b.n	8004f64 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e008      	b.n	8004f64 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2300      	movs	r3, #0
 8004f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d3b7      	bcc.n	8004f08 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f043 0210 	orr.w	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <USB_DevInit+0x294>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f043 0208 	orr.w	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d107      	bne.n	8004ffa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005006:	b004      	add	sp, #16
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	803c3800 	.word	0x803c3800

08005010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4a12      	ldr	r2, [pc, #72]	; (8005070 <USB_FlushTxFifo+0x60>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e01a      	b.n	8005064 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	daf3      	bge.n	800501e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3301      	adds	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <USB_FlushTxFifo+0x60>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e006      	b.n	8005064 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d0f1      	beq.n	8005046 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	00030d40 	.word	0x00030d40

08005074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4a11      	ldr	r2, [pc, #68]	; (80050cc <USB_FlushRxFifo+0x58>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e017      	b.n	80050c0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	daf3      	bge.n	8005080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2210      	movs	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	4a08      	ldr	r2, [pc, #32]	; (80050cc <USB_FlushRxFifo+0x58>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e006      	b.n	80050c0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d0f1      	beq.n	80050a2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	00030d40 	.word	0x00030d40

080050d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800511c:	f023 0303 	bic.w	r3, r3, #3
 8005120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0301 	and.w	r3, r3, #1
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <USB_CoreReset+0x60>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e01a      	b.n	80051b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	daf3      	bge.n	800516c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <USB_CoreReset+0x60>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d0f1      	beq.n	8005194 <USB_CoreReset+0x34>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	00030d40 	.word	0x00030d40

080051c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d6:	2b84      	cmp	r3, #132	; 0x84
 80051d8:	d005      	beq.n	80051e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	3303      	adds	r3, #3
 80051e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051f8:	f000 faf6 	bl	80057e8 <vTaskStartScheduler>
  
  return osOK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	bd80      	pop	{r7, pc}

08005202 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005204:	b089      	sub	sp, #36	; 0x24
 8005206:	af04      	add	r7, sp, #16
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <osThreadCreate+0x54>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01c      	beq.n	8005256 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685c      	ldr	r4, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681d      	ldr	r5, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691e      	ldr	r6, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff ffc8 	bl	80051c4 <makeFreeRtosPriority>
 8005234:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800523e:	9202      	str	r2, [sp, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	9100      	str	r1, [sp, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4632      	mov	r2, r6
 8005248:	4629      	mov	r1, r5
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f8ed 	bl	800542a <xTaskCreateStatic>
 8005250:	4603      	mov	r3, r0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e01c      	b.n	8005290 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685c      	ldr	r4, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005262:	b29e      	uxth	r6, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ffaa 	bl	80051c4 <makeFreeRtosPriority>
 8005270:	4602      	mov	r2, r0
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	9200      	str	r2, [sp, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	4632      	mov	r2, r6
 800527e:	4629      	mov	r1, r5
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f92f 	bl	80054e4 <xTaskCreate>
 8005286:	4603      	mov	r3, r0
 8005288:	2b01      	cmp	r3, #1
 800528a:	d001      	beq.n	8005290 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800529a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <osDelay+0x16>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e000      	b.n	80052b2 <osDelay+0x18>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fa64 	bl	8005780 <vTaskDelay>
  
  return osOK;
 80052b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f103 0208 	add.w	r2, r3, #8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f103 0208 	add.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0208 	add.w	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d103      	bne.n	8005384 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e00c      	b.n	800539e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3308      	adds	r3, #8
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e002      	b.n	8005392 <vListInsert+0x2e>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d2f6      	bcs.n	800538c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6892      	ldr	r2, [r2, #8]
 80053ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d103      	bne.n	800540a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800542a:	b580      	push	{r7, lr}
 800542c:	b08e      	sub	sp, #56	; 0x38
 800542e:	af04      	add	r7, sp, #16
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <xTaskCreateStatic+0x46>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61fb      	str	r3, [r7, #28]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005470:	23b4      	movs	r3, #180	; 0xb4
 8005472:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2bb4      	cmp	r3, #180	; 0xb4
 8005478:	d00a      	beq.n	8005490 <xTaskCreateStatic+0x66>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	61bb      	str	r3, [r7, #24]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005490:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01e      	beq.n	80054d6 <xTaskCreateStatic+0xac>
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01b      	beq.n	80054d6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054b0:	2300      	movs	r3, #0
 80054b2:	9303      	str	r3, [sp, #12]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9302      	str	r3, [sp, #8]
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f851 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d0:	f000 f8ec 	bl	80056ac <prvAddNewTaskToReadyList>
 80054d4:	e001      	b.n	80054da <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054da:	697b      	ldr	r3, [r7, #20]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	; 0x30
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fef5 	bl	80062e8 <pvPortMalloc>
 80054fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00e      	beq.n	8005524 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005506:	20b4      	movs	r0, #180	; 0xb4
 8005508:	f000 feee 	bl	80062e8 <pvPortMalloc>
 800550c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
 800551a:	e005      	b.n	8005528 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f000 ffaf 	bl	8006480 <vPortFree>
 8005522:	e001      	b.n	8005528 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d017      	beq.n	800555e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	2300      	movs	r3, #0
 800553a:	9303      	str	r3, [sp, #12]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f80f 	bl	8005570 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005552:	69f8      	ldr	r0, [r7, #28]
 8005554:	f000 f8aa 	bl	80056ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005558:	2301      	movs	r3, #1
 800555a:	61bb      	str	r3, [r7, #24]
 800555c:	e002      	b.n	8005564 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295
 8005562:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005564:	69bb      	ldr	r3, [r7, #24]
	}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005588:	3b01      	subs	r3, #1
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617b      	str	r3, [r7, #20]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e012      	b.n	80055ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	7819      	ldrb	r1, [r3, #0]
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	3334      	adds	r3, #52	; 0x34
 80055d4:	460a      	mov	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d9e9      	bls.n	80055c4 <prvInitialiseNewTask+0x54>
 80055f0:	e000      	b.n	80055f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80055f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fc:	e003      	b.n	8005606 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2b06      	cmp	r3, #6
 800560a:	d901      	bls.n	8005610 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800560c:	2306      	movs	r3, #6
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fe6b 	bl	8005302 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe66 	bl	8005302 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f1c3 0207 	rsb	r2, r3, #7
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	334c      	adds	r3, #76	; 0x4c
 8005660:	2260      	movs	r2, #96	; 0x60
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f94c 	bl	8006902 <memset>
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <prvInitialiseNewTask+0x130>)
 800566e:	651a      	str	r2, [r3, #80]	; 0x50
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <prvInitialiseNewTask+0x134>)
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <prvInitialiseNewTask+0x138>)
 800567a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f000 fc1f 	bl	8005ec4 <pxPortInitialiseStack>
 8005686:	4602      	mov	r2, r0
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005698:	bf00      	nop
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	080072c0 	.word	0x080072c0
 80056a4:	080072e0 	.word	0x080072e0
 80056a8:	080072a0 	.word	0x080072a0

080056ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056b4:	f000 fd36 	bl	8006124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b8:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <prvAddNewTaskToReadyList+0xb8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <prvAddNewTaskToReadyList+0xb8>)
 80056c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056c2:	4b29      	ldr	r3, [pc, #164]	; (8005768 <prvAddNewTaskToReadyList+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <prvAddNewTaskToReadyList+0xbc>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056d0:	4b24      	ldr	r3, [pc, #144]	; (8005764 <prvAddNewTaskToReadyList+0xb8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d110      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d8:	f000 facc 	bl	8005c74 <prvInitialiseTaskLists>
 80056dc:	e00d      	b.n	80056fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056de:	4b23      	ldr	r3, [pc, #140]	; (800576c <prvAddNewTaskToReadyList+0xc0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e6:	4b20      	ldr	r3, [pc, #128]	; (8005768 <prvAddNewTaskToReadyList+0xbc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d802      	bhi.n	80056fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056f4:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <prvAddNewTaskToReadyList+0xbc>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <prvAddNewTaskToReadyList+0xc4>)
 8005702:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	4a18      	ldr	r2, [pc, #96]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <prvAddNewTaskToReadyList+0xcc>)
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f7ff fdf5 	bl	800531c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005732:	f000 fd27 	bl	8006184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005736:	4b0d      	ldr	r3, [pc, #52]	; (800576c <prvAddNewTaskToReadyList+0xc0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800573e:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <prvAddNewTaskToReadyList+0xbc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <prvAddNewTaskToReadyList+0xd0>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000470 	.word	0x20000470
 8005768:	20000370 	.word	0x20000370
 800576c:	2000047c 	.word	0x2000047c
 8005770:	2000048c 	.word	0x2000048c
 8005774:	20000478 	.word	0x20000478
 8005778:	20000374 	.word	0x20000374
 800577c:	e000ed04 	.word	0xe000ed04

08005780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d017      	beq.n	80057c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <vTaskDelay+0x60>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <vTaskDelay+0x30>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	60bb      	str	r3, [r7, #8]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057b0:	f000 f884 	bl	80058bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057b4:	2100      	movs	r1, #0
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb1e 	bl	8005df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057bc:	f000 f88c 	bl	80058d8 <xTaskResumeAll>
 80057c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <vTaskDelay+0x64>)
 80057ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20000498 	.word	0x20000498
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057f6:	463a      	mov	r2, r7
 80057f8:	1d39      	adds	r1, r7, #4
 80057fa:	f107 0308 	add.w	r3, r7, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fa fe62 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	9202      	str	r2, [sp, #8]
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	2300      	movs	r3, #0
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	2300      	movs	r3, #0
 8005814:	460a      	mov	r2, r1
 8005816:	4921      	ldr	r1, [pc, #132]	; (800589c <vTaskStartScheduler+0xb4>)
 8005818:	4821      	ldr	r0, [pc, #132]	; (80058a0 <vTaskStartScheduler+0xb8>)
 800581a:	f7ff fe06 	bl	800542a <xTaskCreateStatic>
 800581e:	4603      	mov	r3, r0
 8005820:	4a20      	ldr	r2, [pc, #128]	; (80058a4 <vTaskStartScheduler+0xbc>)
 8005822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005824:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <vTaskStartScheduler+0xbc>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e001      	b.n	8005836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d11b      	bne.n	8005874 <vTaskStartScheduler+0x8c>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	613b      	str	r3, [r7, #16]
}
 800584e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <vTaskStartScheduler+0xc0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	334c      	adds	r3, #76	; 0x4c
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <vTaskStartScheduler+0xc4>)
 8005858:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <vTaskStartScheduler+0xc8>)
 800585c:	f04f 32ff 	mov.w	r2, #4294967295
 8005860:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005862:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <vTaskStartScheduler+0xcc>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <vTaskStartScheduler+0xd0>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800586e:	f000 fbb7 	bl	8005fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005872:	e00e      	b.n	8005892 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d10a      	bne.n	8005892 <vTaskStartScheduler+0xaa>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vTaskStartScheduler+0xa8>
}
 8005892:	bf00      	nop
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08007250 	.word	0x08007250
 80058a0:	08005c45 	.word	0x08005c45
 80058a4:	20000494 	.word	0x20000494
 80058a8:	20000370 	.word	0x20000370
 80058ac:	20000010 	.word	0x20000010
 80058b0:	20000490 	.word	0x20000490
 80058b4:	2000047c 	.word	0x2000047c
 80058b8:	20000474 	.word	0x20000474

080058bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a03      	ldr	r2, [pc, #12]	; (80058d4 <vTaskSuspendAll+0x18>)
 80058c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20000498 	.word	0x20000498

080058d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <xTaskResumeAll+0x114>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <xTaskResumeAll+0x2c>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	603b      	str	r3, [r7, #0]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005904:	f000 fc0e 	bl	8006124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005908:	4b38      	ldr	r3, [pc, #224]	; (80059ec <xTaskResumeAll+0x114>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3b01      	subs	r3, #1
 800590e:	4a37      	ldr	r2, [pc, #220]	; (80059ec <xTaskResumeAll+0x114>)
 8005910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005912:	4b36      	ldr	r3, [pc, #216]	; (80059ec <xTaskResumeAll+0x114>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d161      	bne.n	80059de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800591a:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <xTaskResumeAll+0x118>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d05d      	beq.n	80059de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005922:	e02e      	b.n	8005982 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005924:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <xTaskResumeAll+0x11c>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3318      	adds	r3, #24
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fd50 	bl	80053d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3304      	adds	r3, #4
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fd4b 	bl	80053d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	2201      	movs	r2, #1
 8005946:	409a      	lsls	r2, r3
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <xTaskResumeAll+0x120>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	4a2a      	ldr	r2, [pc, #168]	; (80059f8 <xTaskResumeAll+0x120>)
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <xTaskResumeAll+0x124>)
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7ff fcd7 	bl	800531c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <xTaskResumeAll+0x128>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800597c:	4b21      	ldr	r3, [pc, #132]	; (8005a04 <xTaskResumeAll+0x12c>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <xTaskResumeAll+0x11c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1cc      	bne.n	8005924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005990:	f000 fa12 	bl	8005db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <xTaskResumeAll+0x130>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059a0:	f000 f836 	bl	8005a10 <xTaskIncrementTick>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <xTaskResumeAll+0x12c>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f1      	bne.n	80059a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80059bc:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <xTaskResumeAll+0x130>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <xTaskResumeAll+0x12c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <xTaskResumeAll+0x134>)
 80059d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059de:	f000 fbd1 	bl	8006184 <vPortExitCritical>

	return xAlreadyYielded;
 80059e2:	68bb      	ldr	r3, [r7, #8]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000498 	.word	0x20000498
 80059f0:	20000470 	.word	0x20000470
 80059f4:	20000430 	.word	0x20000430
 80059f8:	20000478 	.word	0x20000478
 80059fc:	20000374 	.word	0x20000374
 8005a00:	20000370 	.word	0x20000370
 8005a04:	20000484 	.word	0x20000484
 8005a08:	20000480 	.word	0x20000480
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a1a:	4b4e      	ldr	r3, [pc, #312]	; (8005b54 <xTaskIncrementTick+0x144>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 808e 	bne.w	8005b40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a24:	4b4c      	ldr	r3, [pc, #304]	; (8005b58 <xTaskIncrementTick+0x148>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a2c:	4a4a      	ldr	r2, [pc, #296]	; (8005b58 <xTaskIncrementTick+0x148>)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d120      	bne.n	8005a7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a38:	4b48      	ldr	r3, [pc, #288]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	603b      	str	r3, [r7, #0]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <xTaskIncrementTick+0x46>
 8005a58:	4b40      	ldr	r3, [pc, #256]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4b40      	ldr	r3, [pc, #256]	; (8005b60 <xTaskIncrementTick+0x150>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a3e      	ldr	r2, [pc, #248]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4a3e      	ldr	r2, [pc, #248]	; (8005b60 <xTaskIncrementTick+0x150>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b3d      	ldr	r3, [pc, #244]	; (8005b64 <xTaskIncrementTick+0x154>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <xTaskIncrementTick+0x154>)
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	f000 f99f 	bl	8005db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a7a:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d348      	bcc.n	8005b16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8e:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	601a      	str	r2, [r3, #0]
					break;
 8005a96:	e03e      	b.n	8005b16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a98:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <xTaskIncrementTick+0x14c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d203      	bcs.n	8005ab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ab0:	4a2d      	ldr	r2, [pc, #180]	; (8005b68 <xTaskIncrementTick+0x158>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ab6:	e02e      	b.n	8005b16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fc8a 	bl	80053d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3318      	adds	r3, #24
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fc81 	bl	80053d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	409a      	lsls	r2, r3
 8005adc:	4b23      	ldr	r3, [pc, #140]	; (8005b6c <xTaskIncrementTick+0x15c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	4a22      	ldr	r2, [pc, #136]	; (8005b6c <xTaskIncrementTick+0x15c>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <xTaskIncrementTick+0x160>)
 8005af4:	441a      	add	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f7ff fc0d 	bl	800531c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <xTaskIncrementTick+0x164>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d3b9      	bcc.n	8005a84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b14:	e7b6      	b.n	8005a84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b16:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <xTaskIncrementTick+0x164>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	4914      	ldr	r1, [pc, #80]	; (8005b70 <xTaskIncrementTick+0x160>)
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d901      	bls.n	8005b32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <xTaskIncrementTick+0x168>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e004      	b.n	8005b4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b40:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <xTaskIncrementTick+0x16c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a0d      	ldr	r2, [pc, #52]	; (8005b7c <xTaskIncrementTick+0x16c>)
 8005b48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b4a:	697b      	ldr	r3, [r7, #20]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000498 	.word	0x20000498
 8005b58:	20000474 	.word	0x20000474
 8005b5c:	20000428 	.word	0x20000428
 8005b60:	2000042c 	.word	0x2000042c
 8005b64:	20000488 	.word	0x20000488
 8005b68:	20000490 	.word	0x20000490
 8005b6c:	20000478 	.word	0x20000478
 8005b70:	20000374 	.word	0x20000374
 8005b74:	20000370 	.word	0x20000370
 8005b78:	20000484 	.word	0x20000484
 8005b7c:	20000480 	.word	0x20000480

08005b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b86:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <vTaskSwitchContext+0xac>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <vTaskSwitchContext+0xb0>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b94:	e044      	b.n	8005c20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005b96:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <vTaskSwitchContext+0xb0>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9c:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <vTaskSwitchContext+0xb4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	f1c3 031f 	rsb	r3, r3, #31
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	4921      	ldr	r1, [pc, #132]	; (8005c38 <vTaskSwitchContext+0xb8>)
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	607b      	str	r3, [r7, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	e7fe      	b.n	8005bda <vTaskSwitchContext+0x5a>
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4613      	mov	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <vTaskSwitchContext+0xb8>)
 8005be8:	4413      	add	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d104      	bne.n	8005c0c <vTaskSwitchContext+0x8c>
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <vTaskSwitchContext+0xbc>)
 8005c14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <vTaskSwitchContext+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	334c      	adds	r3, #76	; 0x4c
 8005c1c:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <vTaskSwitchContext+0xc0>)
 8005c1e:	6013      	str	r3, [r2, #0]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000498 	.word	0x20000498
 8005c30:	20000484 	.word	0x20000484
 8005c34:	20000478 	.word	0x20000478
 8005c38:	20000374 	.word	0x20000374
 8005c3c:	20000370 	.word	0x20000370
 8005c40:	20000010 	.word	0x20000010

08005c44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c4c:	f000 f852 	bl	8005cf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <prvIdleTask+0x28>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d9f9      	bls.n	8005c4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <prvIdleTask+0x2c>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c68:	e7f0      	b.n	8005c4c <prvIdleTask+0x8>
 8005c6a:	bf00      	nop
 8005c6c:	20000374 	.word	0x20000374
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	e00c      	b.n	8005c9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <prvInitialiseTaskLists+0x60>)
 8005c8c:	4413      	add	r3, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fb17 	bl	80052c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3301      	adds	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d9ef      	bls.n	8005c80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ca0:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <prvInitialiseTaskLists+0x64>)
 8005ca2:	f7ff fb0e 	bl	80052c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ca6:	480d      	ldr	r0, [pc, #52]	; (8005cdc <prvInitialiseTaskLists+0x68>)
 8005ca8:	f7ff fb0b 	bl	80052c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cac:	480c      	ldr	r0, [pc, #48]	; (8005ce0 <prvInitialiseTaskLists+0x6c>)
 8005cae:	f7ff fb08 	bl	80052c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cb2:	480c      	ldr	r0, [pc, #48]	; (8005ce4 <prvInitialiseTaskLists+0x70>)
 8005cb4:	f7ff fb05 	bl	80052c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cb8:	480b      	ldr	r0, [pc, #44]	; (8005ce8 <prvInitialiseTaskLists+0x74>)
 8005cba:	f7ff fb02 	bl	80052c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <prvInitialiseTaskLists+0x78>)
 8005cc0:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <prvInitialiseTaskLists+0x64>)
 8005cc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvInitialiseTaskLists+0x7c>)
 8005cc6:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <prvInitialiseTaskLists+0x68>)
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000374 	.word	0x20000374
 8005cd8:	20000400 	.word	0x20000400
 8005cdc:	20000414 	.word	0x20000414
 8005ce0:	20000430 	.word	0x20000430
 8005ce4:	20000444 	.word	0x20000444
 8005ce8:	2000045c 	.word	0x2000045c
 8005cec:	20000428 	.word	0x20000428
 8005cf0:	2000042c 	.word	0x2000042c

08005cf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfa:	e019      	b.n	8005d30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cfc:	f000 fa12 	bl	8006124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <prvCheckTasksWaitingTermination+0x50>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fb62 	bl	80053d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d12:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <prvCheckTasksWaitingTermination+0x54>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a0b      	ldr	r2, [pc, #44]	; (8005d48 <prvCheckTasksWaitingTermination+0x54>)
 8005d1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d26:	f000 fa2d 	bl	8006184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f810 	bl	8005d50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <prvCheckTasksWaitingTermination+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e1      	bne.n	8005cfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000444 	.word	0x20000444
 8005d48:	20000470 	.word	0x20000470
 8005d4c:	20000458 	.word	0x20000458

08005d50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	334c      	adds	r3, #76	; 0x4c
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 feb7 	bl	8006ad0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d108      	bne.n	8005d7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fb85 	bl	8006480 <vPortFree>
				vPortFree( pxTCB );
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fb82 	bl	8006480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d7c:	e018      	b.n	8005db0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d103      	bne.n	8005d90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fb79 	bl	8006480 <vPortFree>
	}
 8005d8e:	e00f      	b.n	8005db0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d00a      	beq.n	8005db0 <prvDeleteTCB+0x60>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	60fb      	str	r3, [r7, #12]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <prvDeleteTCB+0x5e>
	}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <prvResetNextTaskUnblockTime+0x38>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <prvResetNextTaskUnblockTime+0x3c>)
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dd0:	e008      	b.n	8005de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd2:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <prvResetNextTaskUnblockTime+0x38>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <prvResetNextTaskUnblockTime+0x3c>)
 8005de2:	6013      	str	r3, [r2, #0]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	20000428 	.word	0x20000428
 8005df4:	20000490 	.word	0x20000490

08005df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e02:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e08:	4b28      	ldr	r3, [pc, #160]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fae1 	bl	80053d6 <uxListRemove>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e1a:	4b24      	ldr	r3, [pc, #144]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	2201      	movs	r2, #1
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43da      	mvns	r2, r3
 8005e28:	4b21      	ldr	r3, [pc, #132]	; (8005eb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d10a      	bne.n	8005e50 <prvAddCurrentTaskToDelayedList+0x58>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	481a      	ldr	r0, [pc, #104]	; (8005eb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e4a:	f7ff fa67 	bl	800531c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e4e:	e026      	b.n	8005e9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4413      	add	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e58:	4b14      	ldr	r3, [pc, #80]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d209      	bcs.n	8005e7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7ff fa75 	bl	8005364 <vListInsert>
}
 8005e7a:	e010      	b.n	8005e9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7ff fa6b 	bl	8005364 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d202      	bcs.n	8005e9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e98:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6013      	str	r3, [r2, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000474 	.word	0x20000474
 8005eac:	20000370 	.word	0x20000370
 8005eb0:	20000478 	.word	0x20000478
 8005eb4:	2000045c 	.word	0x2000045c
 8005eb8:	2000042c 	.word	0x2000042c
 8005ebc:	20000428 	.word	0x20000428
 8005ec0:	20000490 	.word	0x20000490

08005ec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <pxPortInitialiseStack+0x64>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b14      	subs	r3, #20
 8005efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f06f 0202 	mvn.w	r2, #2
 8005f12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b20      	subs	r3, #32
 8005f18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	08005f2d 	.word	0x08005f2d

08005f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <prvTaskExitError+0x54>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d00a      	beq.n	8005f56 <prvTaskExitError+0x2a>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <prvTaskExitError+0x28>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f6a:	bf00      	nop
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0fc      	beq.n	8005f6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	2000000c 	.word	0x2000000c
	...

08005f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <pxCurrentTCBConst2>)
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	6808      	ldr	r0, [r1, #0]
 8005f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9a:	f380 8809 	msr	PSP, r0
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8811 	msr	BASEPRI, r0
 8005faa:	4770      	bx	lr
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst2>:
 8005fb0:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <prvPortStartFirstTask+0x24>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	6800      	ldr	r0, [r0, #0]
 8005fbe:	f380 8808 	msr	MSP, r0
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8814 	msr	CONTROL, r0
 8005fca:	b662      	cpsie	i
 8005fcc:	b661      	cpsie	f
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	df00      	svc	0
 8005fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fda:	bf00      	nop
 8005fdc:	e000ed08 	.word	0xe000ed08

08005fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fe6:	4b46      	ldr	r3, [pc, #280]	; (8006100 <xPortStartScheduler+0x120>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a46      	ldr	r2, [pc, #280]	; (8006104 <xPortStartScheduler+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10a      	bne.n	8006006 <xPortStartScheduler+0x26>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	613b      	str	r3, [r7, #16]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <xPortStartScheduler+0x120>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <xPortStartScheduler+0x128>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10a      	bne.n	8006026 <xPortStartScheduler+0x46>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006026:	4b39      	ldr	r3, [pc, #228]	; (800610c <xPortStartScheduler+0x12c>)
 8006028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	22ff      	movs	r2, #255	; 0xff
 8006036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <xPortStartScheduler+0x130>)
 800604c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800604e:	4b31      	ldr	r3, [pc, #196]	; (8006114 <xPortStartScheduler+0x134>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006054:	e009      	b.n	800606a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <xPortStartScheduler+0x134>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a2d      	ldr	r2, [pc, #180]	; (8006114 <xPortStartScheduler+0x134>)
 800605e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006072:	2b80      	cmp	r3, #128	; 0x80
 8006074:	d0ef      	beq.n	8006056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006076:	4b27      	ldr	r3, [pc, #156]	; (8006114 <xPortStartScheduler+0x134>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1c3 0307 	rsb	r3, r3, #7
 800607e:	2b04      	cmp	r3, #4
 8006080:	d00a      	beq.n	8006098 <xPortStartScheduler+0xb8>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006098:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <xPortStartScheduler+0x134>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <xPortStartScheduler+0x134>)
 80060a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060a2:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <xPortStartScheduler+0x134>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <xPortStartScheduler+0x134>)
 80060ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <xPortStartScheduler+0x138>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <xPortStartScheduler+0x138>)
 80060bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <xPortStartScheduler+0x138>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a14      	ldr	r2, [pc, #80]	; (8006118 <xPortStartScheduler+0x138>)
 80060c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060ce:	f000 f8dd 	bl	800628c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <xPortStartScheduler+0x13c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060d8:	f000 f8fc 	bl	80062d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060dc:	4b10      	ldr	r3, [pc, #64]	; (8006120 <xPortStartScheduler+0x140>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a0f      	ldr	r2, [pc, #60]	; (8006120 <xPortStartScheduler+0x140>)
 80060e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060e8:	f7ff ff66 	bl	8005fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060ec:	f7ff fd48 	bl	8005b80 <vTaskSwitchContext>
	prvTaskExitError();
 80060f0:	f7ff ff1c 	bl	8005f2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	e000ed00 	.word	0xe000ed00
 8006104:	410fc271 	.word	0x410fc271
 8006108:	410fc270 	.word	0x410fc270
 800610c:	e000e400 	.word	0xe000e400
 8006110:	2000049c 	.word	0x2000049c
 8006114:	200004a0 	.word	0x200004a0
 8006118:	e000ed20 	.word	0xe000ed20
 800611c:	2000000c 	.word	0x2000000c
 8006120:	e000ef34 	.word	0xe000ef34

08006124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800613e:	4b0f      	ldr	r3, [pc, #60]	; (800617c <vPortEnterCritical+0x58>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a0d      	ldr	r2, [pc, #52]	; (800617c <vPortEnterCritical+0x58>)
 8006146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <vPortEnterCritical+0x58>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10f      	bne.n	8006170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortEnterCritical+0x5c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <vPortEnterCritical+0x4c>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	603b      	str	r3, [r7, #0]
}
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <vPortEnterCritical+0x4a>
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	2000000c 	.word	0x2000000c
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800618a:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <vPortExitCritical+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <vPortExitCritical+0x24>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	607b      	str	r3, [r7, #4]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vPortExitCritical+0x50>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <vPortExitCritical+0x50>)
 80061b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <vPortExitCritical+0x50>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <vPortExitCritical+0x42>
 80061ba:	2300      	movs	r3, #0
 80061bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c
	...

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7ff fcb6 	bl	8005b80 <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006262:	f7ff fbd5 	bl	8005a10 <xTaskIncrementTick>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <SysTick_Handler+0x40>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <vPortSetupTimerInterrupt+0x38>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <vPortSetupTimerInterrupt+0x44>)
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e010 	.word	0xe000e010
 80062c4:	e000e018 	.word	0xe000e018
 80062c8:	20000000 	.word	0x20000000
 80062cc:	10624dd3 	.word	0x10624dd3
 80062d0:	e000e014 	.word	0xe000e014

080062d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e4 <vPortEnableVFP+0x10>
 80062d8:	6801      	ldr	r1, [r0, #0]
 80062da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062de:	6001      	str	r1, [r0, #0]
 80062e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062e2:	bf00      	nop
 80062e4:	e000ed88 	.word	0xe000ed88

080062e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062f4:	f7ff fae2 	bl	80058bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062f8:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <pvPortMalloc+0x180>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006300:	f000 f920 	bl	8006544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006304:	4b59      	ldr	r3, [pc, #356]	; (800646c <pvPortMalloc+0x184>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8093 	bne.w	8006438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01d      	beq.n	8006354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006318:	2208      	movs	r2, #8
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f023 0307 	bic.w	r3, r3, #7
 8006330:	3308      	adds	r3, #8
 8006332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <pvPortMalloc+0x6c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	617b      	str	r3, [r7, #20]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d06e      	beq.n	8006438 <pvPortMalloc+0x150>
 800635a:	4b45      	ldr	r3, [pc, #276]	; (8006470 <pvPortMalloc+0x188>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d869      	bhi.n	8006438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <pvPortMalloc+0x18c>)
 8006366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006368:	4b42      	ldr	r3, [pc, #264]	; (8006474 <pvPortMalloc+0x18c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800636e:	e004      	b.n	800637a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d903      	bls.n	800638c <pvPortMalloc+0xa4>
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f1      	bne.n	8006370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800638c:	4b36      	ldr	r3, [pc, #216]	; (8006468 <pvPortMalloc+0x180>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	429a      	cmp	r2, r3
 8006394:	d050      	beq.n	8006438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2208      	movs	r2, #8
 800639c:	4413      	add	r3, r2
 800639e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	1ad2      	subs	r2, r2, r3
 80063b0:	2308      	movs	r3, #8
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d91f      	bls.n	80063f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4413      	add	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <pvPortMalloc+0xf8>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	613b      	str	r3, [r7, #16]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f000 f908 	bl	8006608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <pvPortMalloc+0x188>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <pvPortMalloc+0x188>)
 8006404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <pvPortMalloc+0x188>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <pvPortMalloc+0x190>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d203      	bcs.n	800641a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <pvPortMalloc+0x188>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <pvPortMalloc+0x190>)
 8006418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <pvPortMalloc+0x184>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	431a      	orrs	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <pvPortMalloc+0x194>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a11      	ldr	r2, [pc, #68]	; (800647c <pvPortMalloc+0x194>)
 8006436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006438:	f7ff fa4e 	bl	80058d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <pvPortMalloc+0x174>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60fb      	str	r3, [r7, #12]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <pvPortMalloc+0x172>
	return pvReturn;
 800645c:	69fb      	ldr	r3, [r7, #28]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	; 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20001064 	.word	0x20001064
 800646c:	20001078 	.word	0x20001078
 8006470:	20001068 	.word	0x20001068
 8006474:	2000105c 	.word	0x2000105c
 8006478:	2000106c 	.word	0x2000106c
 800647c:	20001070 	.word	0x20001070

08006480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04d      	beq.n	800652e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006492:	2308      	movs	r3, #8
 8006494:	425b      	negs	r3, r3
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4b24      	ldr	r3, [pc, #144]	; (8006538 <vPortFree+0xb8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <vPortFree+0x44>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <vPortFree+0x62>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60bb      	str	r3, [r7, #8]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <vPortFree+0xb8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01e      	beq.n	800652e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11a      	bne.n	800652e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <vPortFree+0xb8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006508:	f7ff f9d8 	bl	80058bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <vPortFree+0xbc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4413      	add	r3, r2
 8006516:	4a09      	ldr	r2, [pc, #36]	; (800653c <vPortFree+0xbc>)
 8006518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f000 f874 	bl	8006608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <vPortFree+0xc0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	4a06      	ldr	r2, [pc, #24]	; (8006540 <vPortFree+0xc0>)
 8006528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800652a:	f7ff f9d5 	bl	80058d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800652e:	bf00      	nop
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20001078 	.word	0x20001078
 800653c:	20001068 	.word	0x20001068
 8006540:	20001074 	.word	0x20001074

08006544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800654a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800654e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006550:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <prvHeapInit+0xac>)
 8006552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00c      	beq.n	8006578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3307      	adds	r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <prvHeapInit+0xac>)
 8006574:	4413      	add	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800657c:	4a1d      	ldr	r2, [pc, #116]	; (80065f4 <prvHeapInit+0xb0>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006582:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <prvHeapInit+0xb0>)
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006590:	2208      	movs	r2, #8
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <prvHeapInit+0xb4>)
 80065a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065a6:	4b14      	ldr	r3, [pc, #80]	; (80065f8 <prvHeapInit+0xb4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <prvHeapInit+0xb4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <prvHeapInit+0xb4>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <prvHeapInit+0xb8>)
 80065d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <prvHeapInit+0xbc>)
 80065da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <prvHeapInit+0xc0>)
 80065de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	200004a4 	.word	0x200004a4
 80065f4:	2000105c 	.word	0x2000105c
 80065f8:	20001064 	.word	0x20001064
 80065fc:	2000106c 	.word	0x2000106c
 8006600:	20001068 	.word	0x20001068
 8006604:	20001078 	.word	0x20001078

08006608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <prvInsertBlockIntoFreeList+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e002      	b.n	800661c <prvInsertBlockIntoFreeList+0x14>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d8f7      	bhi.n	8006616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d108      	bne.n	800664a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	441a      	add	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d118      	bne.n	8006690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d00d      	beq.n	8006686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	441a      	add	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e008      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e003      	b.n	8006698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d002      	beq.n	80066a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	2000105c 	.word	0x2000105c
 80066b8:	20001064 	.word	0x20001064

080066bc <__errno>:
 80066bc:	4b01      	ldr	r3, [pc, #4]	; (80066c4 <__errno+0x8>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000010 	.word	0x20000010

080066c8 <std>:
 80066c8:	2300      	movs	r3, #0
 80066ca:	b510      	push	{r4, lr}
 80066cc:	4604      	mov	r4, r0
 80066ce:	e9c0 3300 	strd	r3, r3, [r0]
 80066d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066d6:	6083      	str	r3, [r0, #8]
 80066d8:	8181      	strh	r1, [r0, #12]
 80066da:	6643      	str	r3, [r0, #100]	; 0x64
 80066dc:	81c2      	strh	r2, [r0, #14]
 80066de:	6183      	str	r3, [r0, #24]
 80066e0:	4619      	mov	r1, r3
 80066e2:	2208      	movs	r2, #8
 80066e4:	305c      	adds	r0, #92	; 0x5c
 80066e6:	f000 f90c 	bl	8006902 <memset>
 80066ea:	4b05      	ldr	r3, [pc, #20]	; (8006700 <std+0x38>)
 80066ec:	6263      	str	r3, [r4, #36]	; 0x24
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <std+0x3c>)
 80066f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <std+0x40>)
 80066f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <std+0x44>)
 80066f8:	6224      	str	r4, [r4, #32]
 80066fa:	6323      	str	r3, [r4, #48]	; 0x30
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	bf00      	nop
 8006700:	08006ba9 	.word	0x08006ba9
 8006704:	08006bcb 	.word	0x08006bcb
 8006708:	08006c03 	.word	0x08006c03
 800670c:	08006c27 	.word	0x08006c27

08006710 <_cleanup_r>:
 8006710:	4901      	ldr	r1, [pc, #4]	; (8006718 <_cleanup_r+0x8>)
 8006712:	f000 b8af 	b.w	8006874 <_fwalk_reent>
 8006716:	bf00      	nop
 8006718:	08006f01 	.word	0x08006f01

0800671c <__sfmoreglue>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	1e4a      	subs	r2, r1, #1
 8006720:	2568      	movs	r5, #104	; 0x68
 8006722:	4355      	muls	r5, r2
 8006724:	460e      	mov	r6, r1
 8006726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800672a:	f000 f8f3 	bl	8006914 <_malloc_r>
 800672e:	4604      	mov	r4, r0
 8006730:	b140      	cbz	r0, 8006744 <__sfmoreglue+0x28>
 8006732:	2100      	movs	r1, #0
 8006734:	e9c0 1600 	strd	r1, r6, [r0]
 8006738:	300c      	adds	r0, #12
 800673a:	60a0      	str	r0, [r4, #8]
 800673c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006740:	f000 f8df 	bl	8006902 <memset>
 8006744:	4620      	mov	r0, r4
 8006746:	bd70      	pop	{r4, r5, r6, pc}

08006748 <__sfp_lock_acquire>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__sfp_lock_acquire+0x8>)
 800674a:	f000 b8d8 	b.w	80068fe <__retarget_lock_acquire_recursive>
 800674e:	bf00      	nop
 8006750:	20001728 	.word	0x20001728

08006754 <__sfp_lock_release>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__sfp_lock_release+0x8>)
 8006756:	f000 b8d3 	b.w	8006900 <__retarget_lock_release_recursive>
 800675a:	bf00      	nop
 800675c:	20001728 	.word	0x20001728

08006760 <__sinit_lock_acquire>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__sinit_lock_acquire+0x8>)
 8006762:	f000 b8cc 	b.w	80068fe <__retarget_lock_acquire_recursive>
 8006766:	bf00      	nop
 8006768:	20001723 	.word	0x20001723

0800676c <__sinit_lock_release>:
 800676c:	4801      	ldr	r0, [pc, #4]	; (8006774 <__sinit_lock_release+0x8>)
 800676e:	f000 b8c7 	b.w	8006900 <__retarget_lock_release_recursive>
 8006772:	bf00      	nop
 8006774:	20001723 	.word	0x20001723

08006778 <__sinit>:
 8006778:	b510      	push	{r4, lr}
 800677a:	4604      	mov	r4, r0
 800677c:	f7ff fff0 	bl	8006760 <__sinit_lock_acquire>
 8006780:	69a3      	ldr	r3, [r4, #24]
 8006782:	b11b      	cbz	r3, 800678c <__sinit+0x14>
 8006784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006788:	f7ff bff0 	b.w	800676c <__sinit_lock_release>
 800678c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006790:	6523      	str	r3, [r4, #80]	; 0x50
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <__sinit+0x68>)
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <__sinit+0x6c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	62a2      	str	r2, [r4, #40]	; 0x28
 800679a:	42a3      	cmp	r3, r4
 800679c:	bf04      	itt	eq
 800679e:	2301      	moveq	r3, #1
 80067a0:	61a3      	streq	r3, [r4, #24]
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 f820 	bl	80067e8 <__sfp>
 80067a8:	6060      	str	r0, [r4, #4]
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f81c 	bl	80067e8 <__sfp>
 80067b0:	60a0      	str	r0, [r4, #8]
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f818 	bl	80067e8 <__sfp>
 80067b8:	2200      	movs	r2, #0
 80067ba:	60e0      	str	r0, [r4, #12]
 80067bc:	2104      	movs	r1, #4
 80067be:	6860      	ldr	r0, [r4, #4]
 80067c0:	f7ff ff82 	bl	80066c8 <std>
 80067c4:	68a0      	ldr	r0, [r4, #8]
 80067c6:	2201      	movs	r2, #1
 80067c8:	2109      	movs	r1, #9
 80067ca:	f7ff ff7d 	bl	80066c8 <std>
 80067ce:	68e0      	ldr	r0, [r4, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	2112      	movs	r1, #18
 80067d4:	f7ff ff78 	bl	80066c8 <std>
 80067d8:	2301      	movs	r3, #1
 80067da:	61a3      	str	r3, [r4, #24]
 80067dc:	e7d2      	b.n	8006784 <__sinit+0xc>
 80067de:	bf00      	nop
 80067e0:	08007300 	.word	0x08007300
 80067e4:	08006711 	.word	0x08006711

080067e8 <__sfp>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	4607      	mov	r7, r0
 80067ec:	f7ff ffac 	bl	8006748 <__sfp_lock_acquire>
 80067f0:	4b1e      	ldr	r3, [pc, #120]	; (800686c <__sfp+0x84>)
 80067f2:	681e      	ldr	r6, [r3, #0]
 80067f4:	69b3      	ldr	r3, [r6, #24]
 80067f6:	b913      	cbnz	r3, 80067fe <__sfp+0x16>
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff ffbd 	bl	8006778 <__sinit>
 80067fe:	3648      	adds	r6, #72	; 0x48
 8006800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006804:	3b01      	subs	r3, #1
 8006806:	d503      	bpl.n	8006810 <__sfp+0x28>
 8006808:	6833      	ldr	r3, [r6, #0]
 800680a:	b30b      	cbz	r3, 8006850 <__sfp+0x68>
 800680c:	6836      	ldr	r6, [r6, #0]
 800680e:	e7f7      	b.n	8006800 <__sfp+0x18>
 8006810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006814:	b9d5      	cbnz	r5, 800684c <__sfp+0x64>
 8006816:	4b16      	ldr	r3, [pc, #88]	; (8006870 <__sfp+0x88>)
 8006818:	60e3      	str	r3, [r4, #12]
 800681a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800681e:	6665      	str	r5, [r4, #100]	; 0x64
 8006820:	f000 f86c 	bl	80068fc <__retarget_lock_init_recursive>
 8006824:	f7ff ff96 	bl	8006754 <__sfp_lock_release>
 8006828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800682c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006830:	6025      	str	r5, [r4, #0]
 8006832:	61a5      	str	r5, [r4, #24]
 8006834:	2208      	movs	r2, #8
 8006836:	4629      	mov	r1, r5
 8006838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800683c:	f000 f861 	bl	8006902 <memset>
 8006840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006848:	4620      	mov	r0, r4
 800684a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684c:	3468      	adds	r4, #104	; 0x68
 800684e:	e7d9      	b.n	8006804 <__sfp+0x1c>
 8006850:	2104      	movs	r1, #4
 8006852:	4638      	mov	r0, r7
 8006854:	f7ff ff62 	bl	800671c <__sfmoreglue>
 8006858:	4604      	mov	r4, r0
 800685a:	6030      	str	r0, [r6, #0]
 800685c:	2800      	cmp	r0, #0
 800685e:	d1d5      	bne.n	800680c <__sfp+0x24>
 8006860:	f7ff ff78 	bl	8006754 <__sfp_lock_release>
 8006864:	230c      	movs	r3, #12
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	e7ee      	b.n	8006848 <__sfp+0x60>
 800686a:	bf00      	nop
 800686c:	08007300 	.word	0x08007300
 8006870:	ffff0001 	.word	0xffff0001

08006874 <_fwalk_reent>:
 8006874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006878:	4606      	mov	r6, r0
 800687a:	4688      	mov	r8, r1
 800687c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006880:	2700      	movs	r7, #0
 8006882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006886:	f1b9 0901 	subs.w	r9, r9, #1
 800688a:	d505      	bpl.n	8006898 <_fwalk_reent+0x24>
 800688c:	6824      	ldr	r4, [r4, #0]
 800688e:	2c00      	cmp	r4, #0
 8006890:	d1f7      	bne.n	8006882 <_fwalk_reent+0xe>
 8006892:	4638      	mov	r0, r7
 8006894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006898:	89ab      	ldrh	r3, [r5, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d907      	bls.n	80068ae <_fwalk_reent+0x3a>
 800689e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068a2:	3301      	adds	r3, #1
 80068a4:	d003      	beq.n	80068ae <_fwalk_reent+0x3a>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	47c0      	blx	r8
 80068ac:	4307      	orrs	r7, r0
 80068ae:	3568      	adds	r5, #104	; 0x68
 80068b0:	e7e9      	b.n	8006886 <_fwalk_reent+0x12>
	...

080068b4 <__libc_init_array>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4d0d      	ldr	r5, [pc, #52]	; (80068ec <__libc_init_array+0x38>)
 80068b8:	4c0d      	ldr	r4, [pc, #52]	; (80068f0 <__libc_init_array+0x3c>)
 80068ba:	1b64      	subs	r4, r4, r5
 80068bc:	10a4      	asrs	r4, r4, #2
 80068be:	2600      	movs	r6, #0
 80068c0:	42a6      	cmp	r6, r4
 80068c2:	d109      	bne.n	80068d8 <__libc_init_array+0x24>
 80068c4:	4d0b      	ldr	r5, [pc, #44]	; (80068f4 <__libc_init_array+0x40>)
 80068c6:	4c0c      	ldr	r4, [pc, #48]	; (80068f8 <__libc_init_array+0x44>)
 80068c8:	f000 fc5c 	bl	8007184 <_init>
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	2600      	movs	r6, #0
 80068d2:	42a6      	cmp	r6, r4
 80068d4:	d105      	bne.n	80068e2 <__libc_init_array+0x2e>
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068dc:	4798      	blx	r3
 80068de:	3601      	adds	r6, #1
 80068e0:	e7ee      	b.n	80068c0 <__libc_init_array+0xc>
 80068e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e6:	4798      	blx	r3
 80068e8:	3601      	adds	r6, #1
 80068ea:	e7f2      	b.n	80068d2 <__libc_init_array+0x1e>
 80068ec:	0800730c 	.word	0x0800730c
 80068f0:	0800730c 	.word	0x0800730c
 80068f4:	0800730c 	.word	0x0800730c
 80068f8:	08007310 	.word	0x08007310

080068fc <__retarget_lock_init_recursive>:
 80068fc:	4770      	bx	lr

080068fe <__retarget_lock_acquire_recursive>:
 80068fe:	4770      	bx	lr

08006900 <__retarget_lock_release_recursive>:
 8006900:	4770      	bx	lr

08006902 <memset>:
 8006902:	4402      	add	r2, r0
 8006904:	4603      	mov	r3, r0
 8006906:	4293      	cmp	r3, r2
 8006908:	d100      	bne.n	800690c <memset+0xa>
 800690a:	4770      	bx	lr
 800690c:	f803 1b01 	strb.w	r1, [r3], #1
 8006910:	e7f9      	b.n	8006906 <memset+0x4>
	...

08006914 <_malloc_r>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	1ccd      	adds	r5, r1, #3
 8006918:	f025 0503 	bic.w	r5, r5, #3
 800691c:	3508      	adds	r5, #8
 800691e:	2d0c      	cmp	r5, #12
 8006920:	bf38      	it	cc
 8006922:	250c      	movcc	r5, #12
 8006924:	2d00      	cmp	r5, #0
 8006926:	4606      	mov	r6, r0
 8006928:	db01      	blt.n	800692e <_malloc_r+0x1a>
 800692a:	42a9      	cmp	r1, r5
 800692c:	d903      	bls.n	8006936 <_malloc_r+0x22>
 800692e:	230c      	movs	r3, #12
 8006930:	6033      	str	r3, [r6, #0]
 8006932:	2000      	movs	r0, #0
 8006934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006936:	f000 fb95 	bl	8007064 <__malloc_lock>
 800693a:	4921      	ldr	r1, [pc, #132]	; (80069c0 <_malloc_r+0xac>)
 800693c:	680a      	ldr	r2, [r1, #0]
 800693e:	4614      	mov	r4, r2
 8006940:	b99c      	cbnz	r4, 800696a <_malloc_r+0x56>
 8006942:	4f20      	ldr	r7, [pc, #128]	; (80069c4 <_malloc_r+0xb0>)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	b923      	cbnz	r3, 8006952 <_malloc_r+0x3e>
 8006948:	4621      	mov	r1, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f000 f91c 	bl	8006b88 <_sbrk_r>
 8006950:	6038      	str	r0, [r7, #0]
 8006952:	4629      	mov	r1, r5
 8006954:	4630      	mov	r0, r6
 8006956:	f000 f917 	bl	8006b88 <_sbrk_r>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	d123      	bne.n	80069a6 <_malloc_r+0x92>
 800695e:	230c      	movs	r3, #12
 8006960:	6033      	str	r3, [r6, #0]
 8006962:	4630      	mov	r0, r6
 8006964:	f000 fb84 	bl	8007070 <__malloc_unlock>
 8006968:	e7e3      	b.n	8006932 <_malloc_r+0x1e>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	1b5b      	subs	r3, r3, r5
 800696e:	d417      	bmi.n	80069a0 <_malloc_r+0x8c>
 8006970:	2b0b      	cmp	r3, #11
 8006972:	d903      	bls.n	800697c <_malloc_r+0x68>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	441c      	add	r4, r3
 8006978:	6025      	str	r5, [r4, #0]
 800697a:	e004      	b.n	8006986 <_malloc_r+0x72>
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	42a2      	cmp	r2, r4
 8006980:	bf0c      	ite	eq
 8006982:	600b      	streq	r3, [r1, #0]
 8006984:	6053      	strne	r3, [r2, #4]
 8006986:	4630      	mov	r0, r6
 8006988:	f000 fb72 	bl	8007070 <__malloc_unlock>
 800698c:	f104 000b 	add.w	r0, r4, #11
 8006990:	1d23      	adds	r3, r4, #4
 8006992:	f020 0007 	bic.w	r0, r0, #7
 8006996:	1ac2      	subs	r2, r0, r3
 8006998:	d0cc      	beq.n	8006934 <_malloc_r+0x20>
 800699a:	1a1b      	subs	r3, r3, r0
 800699c:	50a3      	str	r3, [r4, r2]
 800699e:	e7c9      	b.n	8006934 <_malloc_r+0x20>
 80069a0:	4622      	mov	r2, r4
 80069a2:	6864      	ldr	r4, [r4, #4]
 80069a4:	e7cc      	b.n	8006940 <_malloc_r+0x2c>
 80069a6:	1cc4      	adds	r4, r0, #3
 80069a8:	f024 0403 	bic.w	r4, r4, #3
 80069ac:	42a0      	cmp	r0, r4
 80069ae:	d0e3      	beq.n	8006978 <_malloc_r+0x64>
 80069b0:	1a21      	subs	r1, r4, r0
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f8e8 	bl	8006b88 <_sbrk_r>
 80069b8:	3001      	adds	r0, #1
 80069ba:	d1dd      	bne.n	8006978 <_malloc_r+0x64>
 80069bc:	e7cf      	b.n	800695e <_malloc_r+0x4a>
 80069be:	bf00      	nop
 80069c0:	2000107c 	.word	0x2000107c
 80069c4:	20001080 	.word	0x20001080

080069c8 <_puts_r>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	460e      	mov	r6, r1
 80069cc:	4605      	mov	r5, r0
 80069ce:	b118      	cbz	r0, 80069d8 <_puts_r+0x10>
 80069d0:	6983      	ldr	r3, [r0, #24]
 80069d2:	b90b      	cbnz	r3, 80069d8 <_puts_r+0x10>
 80069d4:	f7ff fed0 	bl	8006778 <__sinit>
 80069d8:	69ab      	ldr	r3, [r5, #24]
 80069da:	68ac      	ldr	r4, [r5, #8]
 80069dc:	b913      	cbnz	r3, 80069e4 <_puts_r+0x1c>
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff feca 	bl	8006778 <__sinit>
 80069e4:	4b2c      	ldr	r3, [pc, #176]	; (8006a98 <_puts_r+0xd0>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d120      	bne.n	8006a2c <_puts_r+0x64>
 80069ea:	686c      	ldr	r4, [r5, #4]
 80069ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ee:	07db      	lsls	r3, r3, #31
 80069f0:	d405      	bmi.n	80069fe <_puts_r+0x36>
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	0598      	lsls	r0, r3, #22
 80069f6:	d402      	bmi.n	80069fe <_puts_r+0x36>
 80069f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fa:	f7ff ff80 	bl	80068fe <__retarget_lock_acquire_recursive>
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	d51d      	bpl.n	8006a40 <_puts_r+0x78>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	b1db      	cbz	r3, 8006a40 <_puts_r+0x78>
 8006a08:	3e01      	subs	r6, #1
 8006a0a:	68a3      	ldr	r3, [r4, #8]
 8006a0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a10:	3b01      	subs	r3, #1
 8006a12:	60a3      	str	r3, [r4, #8]
 8006a14:	bb39      	cbnz	r1, 8006a66 <_puts_r+0x9e>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	da38      	bge.n	8006a8c <_puts_r+0xc4>
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	210a      	movs	r1, #10
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 f906 	bl	8006c30 <__swbuf_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	d011      	beq.n	8006a4c <_puts_r+0x84>
 8006a28:	250a      	movs	r5, #10
 8006a2a:	e011      	b.n	8006a50 <_puts_r+0x88>
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <_puts_r+0xd4>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d101      	bne.n	8006a36 <_puts_r+0x6e>
 8006a32:	68ac      	ldr	r4, [r5, #8]
 8006a34:	e7da      	b.n	80069ec <_puts_r+0x24>
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <_puts_r+0xd8>)
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	bf08      	it	eq
 8006a3c:	68ec      	ldreq	r4, [r5, #12]
 8006a3e:	e7d5      	b.n	80069ec <_puts_r+0x24>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f958 	bl	8006cf8 <__swsetup_r>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d0dd      	beq.n	8006a08 <_puts_r+0x40>
 8006a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a52:	07da      	lsls	r2, r3, #31
 8006a54:	d405      	bmi.n	8006a62 <_puts_r+0x9a>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	059b      	lsls	r3, r3, #22
 8006a5a:	d402      	bmi.n	8006a62 <_puts_r+0x9a>
 8006a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a5e:	f7ff ff4f 	bl	8006900 <__retarget_lock_release_recursive>
 8006a62:	4628      	mov	r0, r5
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da04      	bge.n	8006a74 <_puts_r+0xac>
 8006a6a:	69a2      	ldr	r2, [r4, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	dc06      	bgt.n	8006a7e <_puts_r+0xb6>
 8006a70:	290a      	cmp	r1, #10
 8006a72:	d004      	beq.n	8006a7e <_puts_r+0xb6>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	7019      	strb	r1, [r3, #0]
 8006a7c:	e7c5      	b.n	8006a0a <_puts_r+0x42>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 f8d5 	bl	8006c30 <__swbuf_r>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d1bf      	bne.n	8006a0a <_puts_r+0x42>
 8006a8a:	e7df      	b.n	8006a4c <_puts_r+0x84>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	250a      	movs	r5, #10
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	6022      	str	r2, [r4, #0]
 8006a94:	701d      	strb	r5, [r3, #0]
 8006a96:	e7db      	b.n	8006a50 <_puts_r+0x88>
 8006a98:	080072c0 	.word	0x080072c0
 8006a9c:	080072e0 	.word	0x080072e0
 8006aa0:	080072a0 	.word	0x080072a0

08006aa4 <puts>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <puts+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f7ff bf8d 	b.w	80069c8 <_puts_r>
 8006aae:	bf00      	nop
 8006ab0:	20000010 	.word	0x20000010

08006ab4 <cleanup_glue>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	6809      	ldr	r1, [r1, #0]
 8006aba:	4605      	mov	r5, r0
 8006abc:	b109      	cbz	r1, 8006ac2 <cleanup_glue+0xe>
 8006abe:	f7ff fff9 	bl	8006ab4 <cleanup_glue>
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aca:	f000 bad7 	b.w	800707c <_free_r>
	...

08006ad0 <_reclaim_reent>:
 8006ad0:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <_reclaim_reent+0xb4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4283      	cmp	r3, r0
 8006ad6:	b570      	push	{r4, r5, r6, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	d051      	beq.n	8006b80 <_reclaim_reent+0xb0>
 8006adc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ade:	b143      	cbz	r3, 8006af2 <_reclaim_reent+0x22>
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d14a      	bne.n	8006b7c <_reclaim_reent+0xac>
 8006ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	b111      	cbz	r1, 8006af2 <_reclaim_reent+0x22>
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 fac5 	bl	800707c <_free_r>
 8006af2:	6961      	ldr	r1, [r4, #20]
 8006af4:	b111      	cbz	r1, 8006afc <_reclaim_reent+0x2c>
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fac0 	bl	800707c <_free_r>
 8006afc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006afe:	b111      	cbz	r1, 8006b06 <_reclaim_reent+0x36>
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fabb 	bl	800707c <_free_r>
 8006b06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b08:	b111      	cbz	r1, 8006b10 <_reclaim_reent+0x40>
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 fab6 	bl	800707c <_free_r>
 8006b10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b12:	b111      	cbz	r1, 8006b1a <_reclaim_reent+0x4a>
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 fab1 	bl	800707c <_free_r>
 8006b1a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b1c:	b111      	cbz	r1, 8006b24 <_reclaim_reent+0x54>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 faac 	bl	800707c <_free_r>
 8006b24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b26:	b111      	cbz	r1, 8006b2e <_reclaim_reent+0x5e>
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 faa7 	bl	800707c <_free_r>
 8006b2e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b30:	b111      	cbz	r1, 8006b38 <_reclaim_reent+0x68>
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 faa2 	bl	800707c <_free_r>
 8006b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3a:	b111      	cbz	r1, 8006b42 <_reclaim_reent+0x72>
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 fa9d 	bl	800707c <_free_r>
 8006b42:	69a3      	ldr	r3, [r4, #24]
 8006b44:	b1e3      	cbz	r3, 8006b80 <_reclaim_reent+0xb0>
 8006b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b48:	4620      	mov	r0, r4
 8006b4a:	4798      	blx	r3
 8006b4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b4e:	b1b9      	cbz	r1, 8006b80 <_reclaim_reent+0xb0>
 8006b50:	4620      	mov	r0, r4
 8006b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b56:	f7ff bfad 	b.w	8006ab4 <cleanup_glue>
 8006b5a:	5949      	ldr	r1, [r1, r5]
 8006b5c:	b941      	cbnz	r1, 8006b70 <_reclaim_reent+0xa0>
 8006b5e:	3504      	adds	r5, #4
 8006b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b62:	2d80      	cmp	r5, #128	; 0x80
 8006b64:	68d9      	ldr	r1, [r3, #12]
 8006b66:	d1f8      	bne.n	8006b5a <_reclaim_reent+0x8a>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fa87 	bl	800707c <_free_r>
 8006b6e:	e7ba      	b.n	8006ae6 <_reclaim_reent+0x16>
 8006b70:	680e      	ldr	r6, [r1, #0]
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fa82 	bl	800707c <_free_r>
 8006b78:	4631      	mov	r1, r6
 8006b7a:	e7ef      	b.n	8006b5c <_reclaim_reent+0x8c>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	e7ef      	b.n	8006b60 <_reclaim_reent+0x90>
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
 8006b82:	bf00      	nop
 8006b84:	20000010 	.word	0x20000010

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	; (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fa fd32 	bl	80015fc <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	2000172c 	.word	0x2000172c

08006ba8 <__sread>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	f000 fab4 	bl	800711c <_read_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfab      	itete	ge
 8006bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrhlt	r3, [r4, #12]
 8006bbc:	181b      	addge	r3, r3, r0
 8006bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bc2:	bfac      	ite	ge
 8006bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc6:	81a3      	strhlt	r3, [r4, #12]
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <__swrite>:
 8006bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	461f      	mov	r7, r3
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	05db      	lsls	r3, r3, #23
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4616      	mov	r6, r2
 8006bda:	d505      	bpl.n	8006be8 <__swrite+0x1e>
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2302      	movs	r3, #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	f000 f9c8 	bl	8006f78 <_lseek_r>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f000 b869 	b.w	8006cd4 <_write_r>

08006c02 <__sseek>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 f9b5 	bl	8006f78 <_lseek_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	bf15      	itete	ne
 8006c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strheq	r3, [r4, #12]
 8006c20:	bf18      	it	ne
 8006c22:	81a3      	strhne	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__sclose>:
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 b8d3 	b.w	8006dd4 <_close_r>
	...

08006c30 <__swbuf_r>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	460e      	mov	r6, r1
 8006c34:	4614      	mov	r4, r2
 8006c36:	4605      	mov	r5, r0
 8006c38:	b118      	cbz	r0, 8006c42 <__swbuf_r+0x12>
 8006c3a:	6983      	ldr	r3, [r0, #24]
 8006c3c:	b90b      	cbnz	r3, 8006c42 <__swbuf_r+0x12>
 8006c3e:	f7ff fd9b 	bl	8006778 <__sinit>
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <__swbuf_r+0x98>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	d12b      	bne.n	8006ca0 <__swbuf_r+0x70>
 8006c48:	686c      	ldr	r4, [r5, #4]
 8006c4a:	69a3      	ldr	r3, [r4, #24]
 8006c4c:	60a3      	str	r3, [r4, #8]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	071a      	lsls	r2, r3, #28
 8006c52:	d52f      	bpl.n	8006cb4 <__swbuf_r+0x84>
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	b36b      	cbz	r3, 8006cb4 <__swbuf_r+0x84>
 8006c58:	6923      	ldr	r3, [r4, #16]
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	1ac0      	subs	r0, r0, r3
 8006c5e:	6963      	ldr	r3, [r4, #20]
 8006c60:	b2f6      	uxtb	r6, r6
 8006c62:	4283      	cmp	r3, r0
 8006c64:	4637      	mov	r7, r6
 8006c66:	dc04      	bgt.n	8006c72 <__swbuf_r+0x42>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f948 	bl	8006f00 <_fflush_r>
 8006c70:	bb30      	cbnz	r0, 8006cc0 <__swbuf_r+0x90>
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	6022      	str	r2, [r4, #0]
 8006c7e:	701e      	strb	r6, [r3, #0]
 8006c80:	6963      	ldr	r3, [r4, #20]
 8006c82:	3001      	adds	r0, #1
 8006c84:	4283      	cmp	r3, r0
 8006c86:	d004      	beq.n	8006c92 <__swbuf_r+0x62>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	07db      	lsls	r3, r3, #31
 8006c8c:	d506      	bpl.n	8006c9c <__swbuf_r+0x6c>
 8006c8e:	2e0a      	cmp	r6, #10
 8006c90:	d104      	bne.n	8006c9c <__swbuf_r+0x6c>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f933 	bl	8006f00 <_fflush_r>
 8006c9a:	b988      	cbnz	r0, 8006cc0 <__swbuf_r+0x90>
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <__swbuf_r+0x9c>)
 8006ca2:	429c      	cmp	r4, r3
 8006ca4:	d101      	bne.n	8006caa <__swbuf_r+0x7a>
 8006ca6:	68ac      	ldr	r4, [r5, #8]
 8006ca8:	e7cf      	b.n	8006c4a <__swbuf_r+0x1a>
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <__swbuf_r+0xa0>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	bf08      	it	eq
 8006cb0:	68ec      	ldreq	r4, [r5, #12]
 8006cb2:	e7ca      	b.n	8006c4a <__swbuf_r+0x1a>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 f81e 	bl	8006cf8 <__swsetup_r>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d0cb      	beq.n	8006c58 <__swbuf_r+0x28>
 8006cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8006cc4:	e7ea      	b.n	8006c9c <__swbuf_r+0x6c>
 8006cc6:	bf00      	nop
 8006cc8:	080072c0 	.word	0x080072c0
 8006ccc:	080072e0 	.word	0x080072e0
 8006cd0:	080072a0 	.word	0x080072a0

08006cd4 <_write_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d07      	ldr	r5, [pc, #28]	; (8006cf4 <_write_r+0x20>)
 8006cd8:	4604      	mov	r4, r0
 8006cda:	4608      	mov	r0, r1
 8006cdc:	4611      	mov	r1, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	602a      	str	r2, [r5, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f7fa fc39 	bl	800155a <_write>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d102      	bne.n	8006cf2 <_write_r+0x1e>
 8006cec:	682b      	ldr	r3, [r5, #0]
 8006cee:	b103      	cbz	r3, 8006cf2 <_write_r+0x1e>
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	2000172c 	.word	0x2000172c

08006cf8 <__swsetup_r>:
 8006cf8:	4b32      	ldr	r3, [pc, #200]	; (8006dc4 <__swsetup_r+0xcc>)
 8006cfa:	b570      	push	{r4, r5, r6, lr}
 8006cfc:	681d      	ldr	r5, [r3, #0]
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	b125      	cbz	r5, 8006d0e <__swsetup_r+0x16>
 8006d04:	69ab      	ldr	r3, [r5, #24]
 8006d06:	b913      	cbnz	r3, 8006d0e <__swsetup_r+0x16>
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f7ff fd35 	bl	8006778 <__sinit>
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <__swsetup_r+0xd0>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	d10f      	bne.n	8006d34 <__swsetup_r+0x3c>
 8006d14:	686c      	ldr	r4, [r5, #4]
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d1c:	0719      	lsls	r1, r3, #28
 8006d1e:	d42c      	bmi.n	8006d7a <__swsetup_r+0x82>
 8006d20:	06dd      	lsls	r5, r3, #27
 8006d22:	d411      	bmi.n	8006d48 <__swsetup_r+0x50>
 8006d24:	2309      	movs	r3, #9
 8006d26:	6033      	str	r3, [r6, #0]
 8006d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	e03e      	b.n	8006db2 <__swsetup_r+0xba>
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <__swsetup_r+0xd4>)
 8006d36:	429c      	cmp	r4, r3
 8006d38:	d101      	bne.n	8006d3e <__swsetup_r+0x46>
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	e7eb      	b.n	8006d16 <__swsetup_r+0x1e>
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <__swsetup_r+0xd8>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	bf08      	it	eq
 8006d44:	68ec      	ldreq	r4, [r5, #12]
 8006d46:	e7e6      	b.n	8006d16 <__swsetup_r+0x1e>
 8006d48:	0758      	lsls	r0, r3, #29
 8006d4a:	d512      	bpl.n	8006d72 <__swsetup_r+0x7a>
 8006d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d4e:	b141      	cbz	r1, 8006d62 <__swsetup_r+0x6a>
 8006d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <__swsetup_r+0x66>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 f98f 	bl	800707c <_free_r>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6363      	str	r3, [r4, #52]	; 0x34
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f043 0308 	orr.w	r3, r3, #8
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	b94b      	cbnz	r3, 8006d92 <__swsetup_r+0x9a>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d003      	beq.n	8006d92 <__swsetup_r+0x9a>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 f929 	bl	8006fe4 <__smakebuf_r>
 8006d92:	89a0      	ldrh	r0, [r4, #12]
 8006d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d98:	f010 0301 	ands.w	r3, r0, #1
 8006d9c:	d00a      	beq.n	8006db4 <__swsetup_r+0xbc>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60a3      	str	r3, [r4, #8]
 8006da2:	6963      	ldr	r3, [r4, #20]
 8006da4:	425b      	negs	r3, r3
 8006da6:	61a3      	str	r3, [r4, #24]
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	b943      	cbnz	r3, 8006dbe <__swsetup_r+0xc6>
 8006dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006db0:	d1ba      	bne.n	8006d28 <__swsetup_r+0x30>
 8006db2:	bd70      	pop	{r4, r5, r6, pc}
 8006db4:	0781      	lsls	r1, r0, #30
 8006db6:	bf58      	it	pl
 8006db8:	6963      	ldrpl	r3, [r4, #20]
 8006dba:	60a3      	str	r3, [r4, #8]
 8006dbc:	e7f4      	b.n	8006da8 <__swsetup_r+0xb0>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e7f7      	b.n	8006db2 <__swsetup_r+0xba>
 8006dc2:	bf00      	nop
 8006dc4:	20000010 	.word	0x20000010
 8006dc8:	080072c0 	.word	0x080072c0
 8006dcc:	080072e0 	.word	0x080072e0
 8006dd0:	080072a0 	.word	0x080072a0

08006dd4 <_close_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d06      	ldr	r5, [pc, #24]	; (8006df0 <_close_r+0x1c>)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	4608      	mov	r0, r1
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	f7fa fbd7 	bl	8001592 <_close>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_close_r+0x1a>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_close_r+0x1a>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	2000172c 	.word	0x2000172c

08006df4 <__sflush_r>:
 8006df4:	898a      	ldrh	r2, [r1, #12]
 8006df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	0710      	lsls	r0, r2, #28
 8006dfe:	460c      	mov	r4, r1
 8006e00:	d458      	bmi.n	8006eb4 <__sflush_r+0xc0>
 8006e02:	684b      	ldr	r3, [r1, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dc05      	bgt.n	8006e14 <__sflush_r+0x20>
 8006e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dc02      	bgt.n	8006e14 <__sflush_r+0x20>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d0f9      	beq.n	8006e0e <__sflush_r+0x1a>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e20:	682f      	ldr	r7, [r5, #0]
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	d032      	beq.n	8006e8c <__sflush_r+0x98>
 8006e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	075a      	lsls	r2, r3, #29
 8006e2c:	d505      	bpl.n	8006e3a <__sflush_r+0x46>
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	1ac0      	subs	r0, r0, r3
 8006e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e34:	b10b      	cbz	r3, 8006e3a <__sflush_r+0x46>
 8006e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b0      	blx	r6
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	d106      	bne.n	8006e5a <__sflush_r+0x66>
 8006e4c:	6829      	ldr	r1, [r5, #0]
 8006e4e:	291d      	cmp	r1, #29
 8006e50:	d82c      	bhi.n	8006eac <__sflush_r+0xb8>
 8006e52:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <__sflush_r+0x108>)
 8006e54:	40ca      	lsrs	r2, r1
 8006e56:	07d6      	lsls	r6, r2, #31
 8006e58:	d528      	bpl.n	8006eac <__sflush_r+0xb8>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	6062      	str	r2, [r4, #4]
 8006e5e:	04d9      	lsls	r1, r3, #19
 8006e60:	6922      	ldr	r2, [r4, #16]
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	d504      	bpl.n	8006e70 <__sflush_r+0x7c>
 8006e66:	1c42      	adds	r2, r0, #1
 8006e68:	d101      	bne.n	8006e6e <__sflush_r+0x7a>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	b903      	cbnz	r3, 8006e70 <__sflush_r+0x7c>
 8006e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e72:	602f      	str	r7, [r5, #0]
 8006e74:	2900      	cmp	r1, #0
 8006e76:	d0ca      	beq.n	8006e0e <__sflush_r+0x1a>
 8006e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	d002      	beq.n	8006e86 <__sflush_r+0x92>
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 f8fb 	bl	800707c <_free_r>
 8006e86:	2000      	movs	r0, #0
 8006e88:	6360      	str	r0, [r4, #52]	; 0x34
 8006e8a:	e7c1      	b.n	8006e10 <__sflush_r+0x1c>
 8006e8c:	6a21      	ldr	r1, [r4, #32]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b0      	blx	r6
 8006e94:	1c41      	adds	r1, r0, #1
 8006e96:	d1c7      	bne.n	8006e28 <__sflush_r+0x34>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0c4      	beq.n	8006e28 <__sflush_r+0x34>
 8006e9e:	2b1d      	cmp	r3, #29
 8006ea0:	d001      	beq.n	8006ea6 <__sflush_r+0xb2>
 8006ea2:	2b16      	cmp	r3, #22
 8006ea4:	d101      	bne.n	8006eaa <__sflush_r+0xb6>
 8006ea6:	602f      	str	r7, [r5, #0]
 8006ea8:	e7b1      	b.n	8006e0e <__sflush_r+0x1a>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	e7ad      	b.n	8006e10 <__sflush_r+0x1c>
 8006eb4:	690f      	ldr	r7, [r1, #16]
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	d0a9      	beq.n	8006e0e <__sflush_r+0x1a>
 8006eba:	0793      	lsls	r3, r2, #30
 8006ebc:	680e      	ldr	r6, [r1, #0]
 8006ebe:	bf08      	it	eq
 8006ec0:	694b      	ldreq	r3, [r1, #20]
 8006ec2:	600f      	str	r7, [r1, #0]
 8006ec4:	bf18      	it	ne
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	eba6 0807 	sub.w	r8, r6, r7
 8006ecc:	608b      	str	r3, [r1, #8]
 8006ece:	f1b8 0f00 	cmp.w	r8, #0
 8006ed2:	dd9c      	ble.n	8006e0e <__sflush_r+0x1a>
 8006ed4:	6a21      	ldr	r1, [r4, #32]
 8006ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ed8:	4643      	mov	r3, r8
 8006eda:	463a      	mov	r2, r7
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b0      	blx	r6
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dc06      	bgt.n	8006ef2 <__sflush_r+0xfe>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e78e      	b.n	8006e10 <__sflush_r+0x1c>
 8006ef2:	4407      	add	r7, r0
 8006ef4:	eba8 0800 	sub.w	r8, r8, r0
 8006ef8:	e7e9      	b.n	8006ece <__sflush_r+0xda>
 8006efa:	bf00      	nop
 8006efc:	20400001 	.word	0x20400001

08006f00 <_fflush_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	4605      	mov	r5, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	b913      	cbnz	r3, 8006f10 <_fflush_r+0x10>
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	b118      	cbz	r0, 8006f1a <_fflush_r+0x1a>
 8006f12:	6983      	ldr	r3, [r0, #24]
 8006f14:	b90b      	cbnz	r3, 8006f1a <_fflush_r+0x1a>
 8006f16:	f7ff fc2f 	bl	8006778 <__sinit>
 8006f1a:	4b14      	ldr	r3, [pc, #80]	; (8006f6c <_fflush_r+0x6c>)
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	d11b      	bne.n	8006f58 <_fflush_r+0x58>
 8006f20:	686c      	ldr	r4, [r5, #4]
 8006f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0ef      	beq.n	8006f0a <_fflush_r+0xa>
 8006f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f2c:	07d0      	lsls	r0, r2, #31
 8006f2e:	d404      	bmi.n	8006f3a <_fflush_r+0x3a>
 8006f30:	0599      	lsls	r1, r3, #22
 8006f32:	d402      	bmi.n	8006f3a <_fflush_r+0x3a>
 8006f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f36:	f7ff fce2 	bl	80068fe <__retarget_lock_acquire_recursive>
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7ff ff59 	bl	8006df4 <__sflush_r>
 8006f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f44:	07da      	lsls	r2, r3, #31
 8006f46:	4605      	mov	r5, r0
 8006f48:	d4e0      	bmi.n	8006f0c <_fflush_r+0xc>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	059b      	lsls	r3, r3, #22
 8006f4e:	d4dd      	bmi.n	8006f0c <_fflush_r+0xc>
 8006f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f52:	f7ff fcd5 	bl	8006900 <__retarget_lock_release_recursive>
 8006f56:	e7d9      	b.n	8006f0c <_fflush_r+0xc>
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <_fflush_r+0x70>)
 8006f5a:	429c      	cmp	r4, r3
 8006f5c:	d101      	bne.n	8006f62 <_fflush_r+0x62>
 8006f5e:	68ac      	ldr	r4, [r5, #8]
 8006f60:	e7df      	b.n	8006f22 <_fflush_r+0x22>
 8006f62:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <_fflush_r+0x74>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	bf08      	it	eq
 8006f68:	68ec      	ldreq	r4, [r5, #12]
 8006f6a:	e7da      	b.n	8006f22 <_fflush_r+0x22>
 8006f6c:	080072c0 	.word	0x080072c0
 8006f70:	080072e0 	.word	0x080072e0
 8006f74:	080072a0 	.word	0x080072a0

08006f78 <_lseek_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	; (8006f98 <_lseek_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fa fb2a 	bl	80015e0 <_lseek>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_lseek_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_lseek_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000172c 	.word	0x2000172c

08006f9c <__swhatbuf_r>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	460e      	mov	r6, r1
 8006fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	b096      	sub	sp, #88	; 0x58
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	da07      	bge.n	8006fbe <__swhatbuf_r+0x22>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	89b3      	ldrh	r3, [r6, #12]
 8006fb4:	061a      	lsls	r2, r3, #24
 8006fb6:	d410      	bmi.n	8006fda <__swhatbuf_r+0x3e>
 8006fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fbc:	e00e      	b.n	8006fdc <__swhatbuf_r+0x40>
 8006fbe:	466a      	mov	r2, sp
 8006fc0:	f000 f8be 	bl	8007140 <_fstat_r>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	dbf2      	blt.n	8006fae <__swhatbuf_r+0x12>
 8006fc8:	9a01      	ldr	r2, [sp, #4]
 8006fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fd2:	425a      	negs	r2, r3
 8006fd4:	415a      	adcs	r2, r3
 8006fd6:	602a      	str	r2, [r5, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <__swhatbuf_r+0x1c>
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	2000      	movs	r0, #0
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	b016      	add	sp, #88	; 0x58
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}

08006fe4 <__smakebuf_r>:
 8006fe4:	898b      	ldrh	r3, [r1, #12]
 8006fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fe8:	079d      	lsls	r5, r3, #30
 8006fea:	4606      	mov	r6, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	d507      	bpl.n	8007000 <__smakebuf_r+0x1c>
 8006ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	6163      	str	r3, [r4, #20]
 8006ffc:	b002      	add	sp, #8
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	ab01      	add	r3, sp, #4
 8007002:	466a      	mov	r2, sp
 8007004:	f7ff ffca 	bl	8006f9c <__swhatbuf_r>
 8007008:	9900      	ldr	r1, [sp, #0]
 800700a:	4605      	mov	r5, r0
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff fc81 	bl	8006914 <_malloc_r>
 8007012:	b948      	cbnz	r0, 8007028 <__smakebuf_r+0x44>
 8007014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007018:	059a      	lsls	r2, r3, #22
 800701a:	d4ef      	bmi.n	8006ffc <__smakebuf_r+0x18>
 800701c:	f023 0303 	bic.w	r3, r3, #3
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	81a3      	strh	r3, [r4, #12]
 8007026:	e7e3      	b.n	8006ff0 <__smakebuf_r+0xc>
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <__smakebuf_r+0x7c>)
 800702a:	62b3      	str	r3, [r6, #40]	; 0x28
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	6020      	str	r0, [r4, #0]
 8007030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	9b00      	ldr	r3, [sp, #0]
 8007038:	6163      	str	r3, [r4, #20]
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	6120      	str	r0, [r4, #16]
 800703e:	b15b      	cbz	r3, 8007058 <__smakebuf_r+0x74>
 8007040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007044:	4630      	mov	r0, r6
 8007046:	f000 f88d 	bl	8007164 <_isatty_r>
 800704a:	b128      	cbz	r0, 8007058 <__smakebuf_r+0x74>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	89a0      	ldrh	r0, [r4, #12]
 800705a:	4305      	orrs	r5, r0
 800705c:	81a5      	strh	r5, [r4, #12]
 800705e:	e7cd      	b.n	8006ffc <__smakebuf_r+0x18>
 8007060:	08006711 	.word	0x08006711

08007064 <__malloc_lock>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__malloc_lock+0x8>)
 8007066:	f7ff bc4a 	b.w	80068fe <__retarget_lock_acquire_recursive>
 800706a:	bf00      	nop
 800706c:	20001724 	.word	0x20001724

08007070 <__malloc_unlock>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__malloc_unlock+0x8>)
 8007072:	f7ff bc45 	b.w	8006900 <__retarget_lock_release_recursive>
 8007076:	bf00      	nop
 8007078:	20001724 	.word	0x20001724

0800707c <_free_r>:
 800707c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800707e:	2900      	cmp	r1, #0
 8007080:	d048      	beq.n	8007114 <_free_r+0x98>
 8007082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007086:	9001      	str	r0, [sp, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f1a1 0404 	sub.w	r4, r1, #4
 800708e:	bfb8      	it	lt
 8007090:	18e4      	addlt	r4, r4, r3
 8007092:	f7ff ffe7 	bl	8007064 <__malloc_lock>
 8007096:	4a20      	ldr	r2, [pc, #128]	; (8007118 <_free_r+0x9c>)
 8007098:	9801      	ldr	r0, [sp, #4]
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	4615      	mov	r5, r2
 800709e:	b933      	cbnz	r3, 80070ae <_free_r+0x32>
 80070a0:	6063      	str	r3, [r4, #4]
 80070a2:	6014      	str	r4, [r2, #0]
 80070a4:	b003      	add	sp, #12
 80070a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070aa:	f7ff bfe1 	b.w	8007070 <__malloc_unlock>
 80070ae:	42a3      	cmp	r3, r4
 80070b0:	d90b      	bls.n	80070ca <_free_r+0x4e>
 80070b2:	6821      	ldr	r1, [r4, #0]
 80070b4:	1862      	adds	r2, r4, r1
 80070b6:	4293      	cmp	r3, r2
 80070b8:	bf04      	itt	eq
 80070ba:	681a      	ldreq	r2, [r3, #0]
 80070bc:	685b      	ldreq	r3, [r3, #4]
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	bf04      	itt	eq
 80070c2:	1852      	addeq	r2, r2, r1
 80070c4:	6022      	streq	r2, [r4, #0]
 80070c6:	602c      	str	r4, [r5, #0]
 80070c8:	e7ec      	b.n	80070a4 <_free_r+0x28>
 80070ca:	461a      	mov	r2, r3
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	b10b      	cbz	r3, 80070d4 <_free_r+0x58>
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	d9fa      	bls.n	80070ca <_free_r+0x4e>
 80070d4:	6811      	ldr	r1, [r2, #0]
 80070d6:	1855      	adds	r5, r2, r1
 80070d8:	42a5      	cmp	r5, r4
 80070da:	d10b      	bne.n	80070f4 <_free_r+0x78>
 80070dc:	6824      	ldr	r4, [r4, #0]
 80070de:	4421      	add	r1, r4
 80070e0:	1854      	adds	r4, r2, r1
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	6011      	str	r1, [r2, #0]
 80070e6:	d1dd      	bne.n	80070a4 <_free_r+0x28>
 80070e8:	681c      	ldr	r4, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	6053      	str	r3, [r2, #4]
 80070ee:	4421      	add	r1, r4
 80070f0:	6011      	str	r1, [r2, #0]
 80070f2:	e7d7      	b.n	80070a4 <_free_r+0x28>
 80070f4:	d902      	bls.n	80070fc <_free_r+0x80>
 80070f6:	230c      	movs	r3, #12
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	e7d3      	b.n	80070a4 <_free_r+0x28>
 80070fc:	6825      	ldr	r5, [r4, #0]
 80070fe:	1961      	adds	r1, r4, r5
 8007100:	428b      	cmp	r3, r1
 8007102:	bf04      	itt	eq
 8007104:	6819      	ldreq	r1, [r3, #0]
 8007106:	685b      	ldreq	r3, [r3, #4]
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	bf04      	itt	eq
 800710c:	1949      	addeq	r1, r1, r5
 800710e:	6021      	streq	r1, [r4, #0]
 8007110:	6054      	str	r4, [r2, #4]
 8007112:	e7c7      	b.n	80070a4 <_free_r+0x28>
 8007114:	b003      	add	sp, #12
 8007116:	bd30      	pop	{r4, r5, pc}
 8007118:	2000107c 	.word	0x2000107c

0800711c <_read_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_read_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fa f9f8 	bl	8001520 <_read>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_read_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_read_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	2000172c 	.word	0x2000172c

08007140 <_fstat_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	; (8007160 <_fstat_r+0x20>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	f7fa fa2c 	bl	80015aa <_fstat>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d102      	bne.n	800715c <_fstat_r+0x1c>
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	b103      	cbz	r3, 800715c <_fstat_r+0x1c>
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	bf00      	nop
 8007160:	2000172c 	.word	0x2000172c

08007164 <_isatty_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d06      	ldr	r5, [pc, #24]	; (8007180 <_isatty_r+0x1c>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fa fa2b 	bl	80015ca <_isatty>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_isatty_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_isatty_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	2000172c 	.word	0x2000172c

08007184 <_init>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr

08007190 <_fini>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr


far_free_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005368  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005614  08005614  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005614  08005614  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004220  20000078  08005694  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004298  08005694  00024298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016015  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb4  00000000  00000000  000360bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00039f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028950  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128bb  00000000  00000000  000638e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f917c  00000000  00000000  0007619b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f317  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  0016f36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e0 	.word	0x080054e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080054e0 	.word	0x080054e0

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b088      	sub	sp, #32
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fcd0 	bl	8000b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f843 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f893 	bl	8000308 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler,"Task1", 200,"Hello World from Task-1", 2,&task1_handle);
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2302      	movs	r3, #2
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <main+0x7c>)
 80001ec:	22c8      	movs	r2, #200	; 0xc8
 80001ee:	4918      	ldr	r1, [pc, #96]	; (8000250 <main+0x80>)
 80001f0:	4818      	ldr	r0, [pc, #96]	; (8000254 <main+0x84>)
 80001f2:	f002 fd89 	bl	8002d08 <xTaskCreate>
 80001f6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d00a      	beq.n	8000214 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80001fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000202:	f383 8811 	msr	BASEPRI, r3
 8000206:	f3bf 8f6f 	isb	sy
 800020a:	f3bf 8f4f 	dsb	sy
 800020e:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000210:	bf00      	nop
 8000212:	e7fe      	b.n	8000212 <main+0x42>
  status1 = xTaskCreate(task2_handler,"Task2", 200,"Hello World from Task-2", 2,&task2_handle);
 8000214:	463b      	mov	r3, r7
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	2302      	movs	r3, #2
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <main+0x88>)
 800021e:	22c8      	movs	r2, #200	; 0xc8
 8000220:	490e      	ldr	r1, [pc, #56]	; (800025c <main+0x8c>)
 8000222:	480f      	ldr	r0, [pc, #60]	; (8000260 <main+0x90>)
 8000224:	f002 fd70 	bl	8002d08 <xTaskCreate>
 8000228:	6138      	str	r0, [r7, #16]
  configASSERT(status1 == pdPASS);
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d00a      	beq.n	8000246 <main+0x76>
        __asm volatile
 8000230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000234:	f383 8811 	msr	BASEPRI, r3
 8000238:	f3bf 8f6f 	isb	sy
 800023c:	f3bf 8f4f 	dsb	sy
 8000240:	60bb      	str	r3, [r7, #8]
    }
 8000242:	bf00      	nop
 8000244:	e7fe      	b.n	8000244 <main+0x74>

  // Start the real time scheduler.
  vTaskStartScheduler();
 8000246:	f002 feeb 	bl	8003020 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x7a>
 800024c:	080054f8 	.word	0x080054f8
 8000250:	08005510 	.word	0x08005510
 8000254:	0800077d 	.word	0x0800077d
 8000258:	08005518 	.word	0x08005518
 800025c:	08005530 	.word	0x08005530
 8000260:	080007cd 	.word	0x080007cd

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b096      	sub	sp, #88	; 0x58
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2244      	movs	r2, #68	; 0x44
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f004 fc58 	bl	8004b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000286:	f44f 7000 	mov.w	r0, #512	; 0x200
 800028a:	f000 ffa9 	bl	80011e0 <HAL_PWREx_ControlVoltageScaling>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000294:	f000 fad6 	bl	8000844 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000298:	2310      	movs	r3, #16
 800029a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a4:	2360      	movs	r3, #96	; 0x60
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002ac:	2301      	movs	r3, #1
 80002ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002b4:	2328      	movs	r3, #40	; 0x28
 80002b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002b8:	2307      	movs	r3, #7
 80002ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002bc:	2302      	movs	r3, #2
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c0:	2302      	movs	r3, #2
 80002c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 ffdf 	bl	800128c <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002d4:	f000 fab6 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2303      	movs	r3, #3
 80002de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ec:	463b      	mov	r3, r7
 80002ee:	2104      	movs	r1, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fbb1 	bl	8001a58 <HAL_RCC_ClockConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002fc:	f000 faa2 	bl	8000844 <Error_Handler>
  }
}
 8000300:	bf00      	nop
 8000302:	3758      	adds	r7, #88	; 0x58
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800031e:	4bbc      	ldr	r3, [pc, #752]	; (8000610 <MX_GPIO_Init+0x308>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4abb      	ldr	r2, [pc, #748]	; (8000610 <MX_GPIO_Init+0x308>)
 8000324:	f043 0310 	orr.w	r3, r3, #16
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4bb9      	ldr	r3, [pc, #740]	; (8000610 <MX_GPIO_Init+0x308>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0310 	and.w	r3, r3, #16
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4bb6      	ldr	r3, [pc, #728]	; (8000610 <MX_GPIO_Init+0x308>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	4ab5      	ldr	r2, [pc, #724]	; (8000610 <MX_GPIO_Init+0x308>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000342:	4bb3      	ldr	r3, [pc, #716]	; (8000610 <MX_GPIO_Init+0x308>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	f003 0304 	and.w	r3, r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034e:	4bb0      	ldr	r3, [pc, #704]	; (8000610 <MX_GPIO_Init+0x308>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4aaf      	ldr	r2, [pc, #700]	; (8000610 <MX_GPIO_Init+0x308>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4bad      	ldr	r3, [pc, #692]	; (8000610 <MX_GPIO_Init+0x308>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	4baa      	ldr	r3, [pc, #680]	; (8000610 <MX_GPIO_Init+0x308>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	4aa9      	ldr	r2, [pc, #676]	; (8000610 <MX_GPIO_Init+0x308>)
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000372:	4ba7      	ldr	r3, [pc, #668]	; (8000610 <MX_GPIO_Init+0x308>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	f003 0302 	and.w	r3, r3, #2
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037e:	4ba4      	ldr	r3, [pc, #656]	; (8000610 <MX_GPIO_Init+0x308>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	4aa3      	ldr	r2, [pc, #652]	; (8000610 <MX_GPIO_Init+0x308>)
 8000384:	f043 0308 	orr.w	r3, r3, #8
 8000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038a:	4ba1      	ldr	r3, [pc, #644]	; (8000610 <MX_GPIO_Init+0x308>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	f003 0308 	and.w	r3, r3, #8
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	f44f 718a 	mov.w	r1, #276	; 0x114
 800039c:	489d      	ldr	r0, [pc, #628]	; (8000614 <MX_GPIO_Init+0x30c>)
 800039e:	f000 fed5 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f248 1124 	movw	r1, #33060	; 0x8124
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f000 fece 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 80003b0:	2200      	movs	r2, #0
 80003b2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80003b6:	4898      	ldr	r0, [pc, #608]	; (8000618 <MX_GPIO_Init+0x310>)
 80003b8:	f000 fec8 	bl	800114c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f241 0181 	movw	r1, #4225	; 0x1081
 80003c2:	4896      	ldr	r0, [pc, #600]	; (800061c <MX_GPIO_Init+0x314>)
 80003c4:	f000 fec2 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4893      	ldr	r0, [pc, #588]	; (800061c <MX_GPIO_Init+0x314>)
 80003d0:	f000 febc 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80003da:	4891      	ldr	r0, [pc, #580]	; (8000620 <MX_GPIO_Init+0x318>)
 80003dc:	f000 feb6 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2120      	movs	r1, #32
 80003e4:	488c      	ldr	r0, [pc, #560]	; (8000618 <MX_GPIO_Init+0x310>)
 80003e6:	f000 feb1 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	4889      	ldr	r0, [pc, #548]	; (8000614 <MX_GPIO_Init+0x30c>)
 80003f0:	f000 feac 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80003f4:	f240 1315 	movw	r3, #277	; 0x115
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2300      	movs	r3, #0
 8000404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	4881      	ldr	r0, [pc, #516]	; (8000614 <MX_GPIO_Init+0x30c>)
 800040e:	f000 fcf3 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000412:	236a      	movs	r3, #106	; 0x6a
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000416:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	487b      	ldr	r0, [pc, #492]	; (8000614 <MX_GPIO_Init+0x30c>)
 8000428:	f000 fce6 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800042c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000432:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	4877      	ldr	r0, [pc, #476]	; (8000620 <MX_GPIO_Init+0x318>)
 8000444:	f000 fcd8 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000448:	233f      	movs	r3, #63	; 0x3f
 800044a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800044c:	230b      	movs	r3, #11
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	4871      	ldr	r0, [pc, #452]	; (8000620 <MX_GPIO_Init+0x318>)
 800045c:	f000 fccc 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000460:	2303      	movs	r3, #3
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000464:	2302      	movs	r3, #2
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800046c:	2303      	movs	r3, #3
 800046e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000470:	2308      	movs	r3, #8
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047e:	f000 fcbb 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000482:	f248 1324 	movw	r3, #33060	; 0x8124
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f000 fcab 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80004a2:	2308      	movs	r3, #8
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ae:	2300      	movs	r3, #0
 80004b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004b2:	2301      	movs	r3, #1
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fc9a 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80004c4:	2310      	movs	r3, #16
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004c8:	230b      	movs	r3, #11
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fc8d 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80004de:	23c0      	movs	r3, #192	; 0xc0
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ea:	2303      	movs	r3, #3
 80004ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004ee:	2305      	movs	r3, #5
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 fc7c 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	4619      	mov	r1, r3
 8000514:	4840      	ldr	r0, [pc, #256]	; (8000618 <MX_GPIO_Init+0x310>)
 8000516:	f000 fc6f 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800051a:	2302      	movs	r3, #2
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800051e:	230b      	movs	r3, #11
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	483a      	ldr	r0, [pc, #232]	; (8000618 <MX_GPIO_Init+0x310>)
 800052e:	f000 fc63 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 8000532:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000536:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4619      	mov	r1, r3
 800054a:	4833      	ldr	r0, [pc, #204]	; (8000618 <MX_GPIO_Init+0x310>)
 800054c:	f000 fc54 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000550:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000562:	2306      	movs	r3, #6
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	4829      	ldr	r0, [pc, #164]	; (8000614 <MX_GPIO_Init+0x30c>)
 800056e:	f000 fc43 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000572:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000576:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000584:	230a      	movs	r3, #10
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	4821      	ldr	r0, [pc, #132]	; (8000614 <MX_GPIO_Init+0x30c>)
 8000590:	f000 fc32 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000594:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059a:	2312      	movs	r3, #18
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a2:	2303      	movs	r3, #3
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005a6:	2304      	movs	r3, #4
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <MX_GPIO_Init+0x310>)
 80005b2:	f000 fc21 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80005b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005c8:	2307      	movs	r3, #7
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <MX_GPIO_Init+0x314>)
 80005d4:	f000 fc10 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80005d8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80005dc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <MX_GPIO_Init+0x314>)
 80005f0:	f000 fc02 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80005f4:	f243 0381 	movw	r3, #12417	; 0x3081
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	e00a      	b.n	8000624 <MX_GPIO_Init+0x31c>
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	48001000 	.word	0x48001000
 8000618:	48000400 	.word	0x48000400
 800061c:	48000c00 	.word	0x48000c00
 8000620:	48000800 	.word	0x48000800
 8000624:	4852      	ldr	r0, [pc, #328]	; (8000770 <MX_GPIO_Init+0x468>)
 8000626:	f000 fbe7 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800062a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	484c      	ldr	r0, [pc, #304]	; (8000774 <MX_GPIO_Init+0x46c>)
 8000644:	f000 fbd8 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000648:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4845      	ldr	r0, [pc, #276]	; (8000774 <MX_GPIO_Init+0x46c>)
 8000660:	f000 fbca 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f000 fbbc 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000680:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000692:	230a      	movs	r3, #10
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 fbaa 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80006a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006b6:	2306      	movs	r3, #6
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	482c      	ldr	r0, [pc, #176]	; (8000774 <MX_GPIO_Init+0x46c>)
 80006c2:	f000 fb99 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006d6:	2305      	movs	r3, #5
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4823      	ldr	r0, [pc, #140]	; (8000770 <MX_GPIO_Init+0x468>)
 80006e2:	f000 fb89 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80006e6:	2378      	movs	r3, #120	; 0x78
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006f6:	2307      	movs	r3, #7
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <MX_GPIO_Init+0x468>)
 8000702:	f000 fb79 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_LINK_UART1_TX_Pin ST_LINK_UART1_RX_Pin */
  GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000706:	23c0      	movs	r3, #192	; 0xc0
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000716:	2307      	movs	r3, #7
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4815      	ldr	r0, [pc, #84]	; (8000778 <MX_GPIO_Init+0x470>)
 8000722:	f000 fb69 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000726:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000738:	2304      	movs	r3, #4
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_GPIO_Init+0x470>)
 8000744:	f000 fb58 	bl	8000df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2017      	movs	r0, #23
 800074e:	f000 fb29 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000752:	2017      	movs	r0, #23
 8000754:	f000 fb42 	bl	8000ddc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2028      	movs	r0, #40	; 0x28
 800075e:	f000 fb21 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000762:	2028      	movs	r0, #40	; 0x28
 8000764:	f000 fb3a 	bl	8000ddc <HAL_NVIC_EnableIRQ>

}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	48000c00 	.word	0x48000c00
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400

0800077c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//printf("%s\n", (char*)parameters);

		printf("in task1\n");
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <task1_handler+0x48>)
 8000786:	f004 fa45 	bl	8004c14 <puts>
		HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,1);
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f000 fcdb 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f000 fa27 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(LED5_GPIO_Port, GPIO_PIN_5,0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f000 fcd1 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f000 fa1d 	bl	8000bec <HAL_Delay>
		taskYIELD();
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <task1_handler+0x4c>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
		printf("in task1\n");
 80007c2:	e7df      	b.n	8000784 <task1_handler+0x8>
 80007c4:	08005538 	.word	0x08005538
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//printf("%s\n", (char*)parameters);
		printf("in task2\n");
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <task2_handler+0x48>)
 80007d6:	f004 fa1d 	bl	8004c14 <puts>
		HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <task2_handler+0x4c>)
 80007e2:	f000 fcb3 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ea:	f000 f9ff 	bl	8000bec <HAL_Delay>
		HAL_GPIO_WritePin(LED14_GPIO_Port, GPIO_PIN_14,0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <task2_handler+0x4c>)
 80007f6:	f000 fca9 	bl	800114c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fe:	f000 f9f5 	bl	8000bec <HAL_Delay>
		taskYIELD();
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <task2_handler+0x50>)
 8000804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	f3bf 8f6f 	isb	sy
		printf("in task2\n");
 8000812:	e7df      	b.n	80007d4 <task2_handler+0x8>
 8000814:	08005544 	.word	0x08005544
 8000818:	48000400 	.word	0x48000400
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f9bb 	bl	8000bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40001000 	.word	0x40001000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2036      	movs	r0, #54	; 0x36
 80008ae:	f000 fa79 	bl	8000da4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b2:	2036      	movs	r0, #54	; 0x36
 80008b4:	f000 fa92 	bl	8000ddc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <HAL_InitTick+0x9c>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_InitTick+0x9c>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_InitTick+0x9c>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fa4c 	bl	8001d78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 fa34 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 80008e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_InitTick+0xa0>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	3b01      	subs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_InitTick+0xa4>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_InitTick+0xa8>)
 80008f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_InitTick+0xa4>)
 80008fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_InitTick+0xa4>)
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_InitTick+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_InitTick+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_InitTick+0xa4>)
 8000916:	f001 fac1 	bl	8001e9c <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d104      	bne.n	800092a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <HAL_InitTick+0xa4>)
 8000922:	f001 fb1d 	bl	8001f60 <HAL_TIM_Base_Start_IT>
 8000926:	4603      	mov	r3, r0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	431bde83 	.word	0x431bde83
 800093c:	20004210 	.word	0x20004210
 8000940:	40001000 	.word	0x40001000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000974:	2020      	movs	r0, #32
 8000976:	f000 fc01 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800097a:	2040      	movs	r0, #64	; 0x40
 800097c:	f000 fbfe 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000980:	2080      	movs	r0, #128	; 0x80
 8000982:	f000 fbfb 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000986:	f44f 7080 	mov.w	r0, #256	; 0x100
 800098a:	f000 fbf7 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000996:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800099a:	f000 fbef 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800099e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80009a2:	f000 fbeb 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009aa:	f000 fbe7 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009b2:	f000 fbe3 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80009b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009ba:	f000 fbdf 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM6_DAC_IRQHandler+0x10>)
 80009ca:	f001 fb39 	bl	8002040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20004210 	.word	0x20004210

080009d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <ITM_SendChar+0x48>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <ITM_SendChar+0x48>)
 80009e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <ITM_SendChar+0x4c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <ITM_SendChar+0x4c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009fa:	bf00      	nop
 80009fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f8      	beq.n	80009fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000edfc 	.word	0xe000edfc
 8000a24:	e0000e00 	.word	0xe0000e00

08000a28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
	}

return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ffab 	bl	80009d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
	}
	return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff ffea 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f003 ffb5 	bl	8004ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5a:	f7ff fb39 	bl	80001d0 <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b6c:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 8000b70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b74:	20004298 	.word	0x20004298

08000b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC1_2_IRQHandler>

08000b7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f902 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff fe84 	bl	8000898 <HAL_InitTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9c:	f7ff fe58 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000425c 	.word	0x2000425c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000425c 	.word	0x2000425c

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e17f      	b.n	8001108 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8171 	beq.w	8001102 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d118      	bne.n	8000ed8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	6939      	ldr	r1, [r7, #16]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80ac 	beq.w	8001102 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b5f      	ldr	r3, [pc, #380]	; (8001128 <HAL_GPIO_Init+0x330>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	4a5e      	ldr	r2, [pc, #376]	; (8001128 <HAL_GPIO_Init+0x330>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	; (8001128 <HAL_GPIO_Init+0x330>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	; (800112c <HAL_GPIO_Init+0x334>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3302      	adds	r3, #2
 8000fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x242>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <HAL_GPIO_Init+0x338>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x23e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <HAL_GPIO_Init+0x33c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x23a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4d      	ldr	r2, [pc, #308]	; (8001138 <HAL_GPIO_Init+0x340>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x236>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x344>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x232>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_GPIO_Init+0x348>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x22e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_GPIO_Init+0x34c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x22a>
 800101e:	2306      	movs	r3, #6
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001022:	2307      	movs	r3, #7
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x244>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x244>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x244>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x244>
 800103a:	2300      	movs	r3, #0
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104c:	4937      	ldr	r1, [pc, #220]	; (800112c <HAL_GPIO_Init+0x334>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_GPIO_Init+0x350>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x350>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_GPIO_Init+0x350>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_GPIO_Init+0x350>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x350>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x350>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x350>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <HAL_GPIO_Init+0x350>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa22 f303 	lsr.w	r3, r2, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	f47f ae78 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800
 8001138:	48000c00 	.word	0x48000c00
 800113c:	48001000 	.word	0x48001000
 8001140:	48001400 	.word	0x48001400
 8001144:	48001800 	.word	0x48001800
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001168:	e002      	b.n	8001170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f806 	bl	80011ac <HAL_GPIO_EXTI_Callback>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40007000 	.word	0x40007000

080011e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ee:	d130      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fc:	d038      	beq.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2232      	movs	r2, #50	; 0x32
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001224:	e002      	b.n	800122c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3b01      	subs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001238:	d102      	bne.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f2      	bne.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d110      	bne.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e00f      	b.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d007      	beq.n	8001270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40007000 	.word	0x40007000
 8001284:	20000000 	.word	0x20000000
 8001288:	431bde83 	.word	0x431bde83

0800128c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e3d4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129e:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a8:	4b9e      	ldr	r3, [pc, #632]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80e4 	beq.w	8001488 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4a>
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	f040 808b 	bne.w	80013e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	f040 8087 	bne.w	80013e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x62>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e3ac      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1a      	ldr	r2, [r3, #32]
 80012f2:	4b8c      	ldr	r3, [pc, #560]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_RCC_OscConfig+0x7c>
 80012fe:	4b89      	ldr	r3, [pc, #548]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001306:	e005      	b.n	8001314 <HAL_RCC_OscConfig+0x88>
 8001308:	4b86      	ldr	r3, [pc, #536]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800130a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001314:	4293      	cmp	r3, r2
 8001316:	d223      	bcs.n	8001360 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd5d 	bl	8001ddc <RCC_SetFlashLatencyFromMSIRange>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e38d      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132c:	4b7d      	ldr	r3, [pc, #500]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a7c      	ldr	r2, [pc, #496]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b7a      	ldr	r3, [pc, #488]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4977      	ldr	r1, [pc, #476]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	4972      	ldr	r1, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e025      	b.n	80013ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001360:	4b70      	ldr	r3, [pc, #448]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b6d      	ldr	r3, [pc, #436]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	496a      	ldr	r1, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4965      	ldr	r1, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fd1d 	bl	8001ddc <RCC_SetFlashLatencyFromMSIRange>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e34d      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ac:	f000 fc36 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	495a      	ldr	r1, [pc, #360]	; (8001528 <HAL_RCC_OscConfig+0x29c>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x2a0>)
 80013ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <HAL_RCC_OscConfig+0x2a4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fa61 	bl	8000898 <HAL_InitTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d052      	beq.n	8001486 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	e331      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d032      	beq.n	8001452 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbec 	bl	8000bd4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001400:	f7ff fbe8 	bl	8000bd4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e31a      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001412:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141e:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	493b      	ldr	r1, [pc, #236]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	4936      	ldr	r1, [pc, #216]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
 8001450:	e01a      	b.n	8001488 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a33      	ldr	r2, [pc, #204]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145e:	f7ff fbb9 	bl	8000bd4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001466:	f7ff fbb5 	bl	8000bd4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e2e7      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001478:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x1da>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001486:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d074      	beq.n	800157e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b08      	cmp	r3, #8
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x21a>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	d10e      	bne.n	80014be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d064      	beq.n	800157c <HAL_RCC_OscConfig+0x2f0>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d160      	bne.n	800157c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e2c4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x24a>
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e01d      	b.n	8001512 <HAL_RCC_OscConfig+0x286>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x26e>
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x286>
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x298>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01c      	beq.n	8001554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fb5b 	bl	8000bd4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001520:	e011      	b.n	8001546 <HAL_RCC_OscConfig+0x2ba>
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	08005568 	.word	0x08005568
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fb4e 	bl	8000bd4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e280      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	4baf      	ldr	r3, [pc, #700]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x2a8>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb3e 	bl	8000bd4 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fb3a 	bl	8000bd4 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e26c      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156e:	4ba5      	ldr	r3, [pc, #660]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x2d0>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d060      	beq.n	800164c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x310>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d119      	bne.n	80015ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d116      	bne.n	80015ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	4b99      	ldr	r3, [pc, #612]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x328>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e249      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b93      	ldr	r3, [pc, #588]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	4990      	ldr	r1, [pc, #576]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	e040      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d023      	beq.n	800161a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a8b      	ldr	r2, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff faf9 	bl	8000bd4 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff faf5 	bl	8000bd4 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e227      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b82      	ldr	r3, [pc, #520]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	497c      	ldr	r1, [pc, #496]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e018      	b.n	800164c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a79      	ldr	r2, [pc, #484]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff fad5 	bl	8000bd4 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fad1 	bl	8000bd4 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e203      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001640:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d03c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01c      	beq.n	800169a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff fab0 	bl	8000bd4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff faac 	bl	8000bd4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1de      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ef      	beq.n	8001678 <HAL_RCC_OscConfig+0x3ec>
 8001698:	e01b      	b.n	80016d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa93 	bl	8000bd4 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa8f 	bl	8000bd4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1c1      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c4:	4b4f      	ldr	r3, [pc, #316]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80a6 	beq.w	800182c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a43      	ldr	r2, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001708:	2301      	movs	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170c:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d118      	bne.n	800174a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001724:	f7ff fa56 	bl	8000bd4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172c:	f7ff fa52 	bl	8000bd4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e184      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_RCC_OscConfig+0x57c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_RCC_OscConfig+0x4d8>
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001762:	e024      	b.n	80017ae <HAL_RCC_OscConfig+0x522>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d110      	bne.n	800178e <HAL_RCC_OscConfig+0x502>
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a20      	ldr	r2, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178c:	e00f      	b.n	80017ae <HAL_RCC_OscConfig+0x522>
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa0d 	bl	8000bd4 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff fa09 	bl	8000bd4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e139      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_OscConfig+0x578>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ed      	beq.n	80017be <HAL_RCC_OscConfig+0x532>
 80017e2:	e01a      	b.n	800181a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff f9f6 	bl	8000bd4 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ea:	e00f      	b.n	800180c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff f9f2 	bl	8000bd4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d906      	bls.n	800180c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e122      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180c:	4b90      	ldr	r3, [pc, #576]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1e8      	bne.n	80017ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	4a8a      	ldr	r2, [pc, #552]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8108 	beq.w	8001a46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	2b02      	cmp	r3, #2
 800183c:	f040 80d0 	bne.w	80019e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001840:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d130      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	3b01      	subs	r3, #1
 8001860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d127      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11f      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001880:	2a07      	cmp	r2, #7
 8001882:	bf14      	ite	ne
 8001884:	2201      	movne	r2, #1
 8001886:	2200      	moveq	r2, #0
 8001888:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800188a:	4293      	cmp	r3, r2
 800188c:	d113      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	3b01      	subs	r3, #1
 800189c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d06e      	beq.n	8001994 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d069      	beq.n	8001990 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b7      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d8:	4b5d      	ldr	r3, [pc, #372]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e4:	f7ff f976 	bl	8000bd4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f972 	bl	8000bd4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0a4      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fe:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x7c8>)
 8001910:	4013      	ands	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800191a:	3a01      	subs	r2, #1
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	4311      	orrs	r1, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001924:	0212      	lsls	r2, r2, #8
 8001926:	4311      	orrs	r1, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800192c:	0852      	lsrs	r2, r2, #1
 800192e:	3a01      	subs	r2, #1
 8001930:	0552      	lsls	r2, r2, #21
 8001932:	4311      	orrs	r1, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001938:	0852      	lsrs	r2, r2, #1
 800193a:	3a01      	subs	r2, #1
 800193c:	0652      	lsls	r2, r2, #25
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001944:	0912      	lsrs	r2, r2, #4
 8001946:	0452      	lsls	r2, r2, #17
 8001948:	430a      	orrs	r2, r1
 800194a:	4941      	ldr	r1, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3e      	ldr	r2, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001968:	f7ff f934 	bl	8000bd4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff f930 	bl	8000bd4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e062      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198e:	e05a      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e059      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d152      	bne.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b8:	f7ff f90c 	bl	8000bd4 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f908 	bl	8000bd4 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03a      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x734>
 80019de:	e032      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d02d      	beq.n	8001a42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8db 	bl	8000bd4 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f8d7 	bl	8000bd4 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e009      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x7c4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x796>
 8001a40:	e001      	b.n	8001a46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	f99d808c 	.word	0xf99d808c

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0c8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4961      	ldr	r1, [pc, #388]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b0      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d04c      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e092      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e086      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e07e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 0203 	bic.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	493f      	ldr	r1, [pc, #252]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b12:	f7ff f85f 	bl	8000bd4 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f85b 	bl	8000bd4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e066      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 020c 	and.w	r2, r3, #12
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d1eb      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e036      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	f000 f825 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490c      	ldr	r1, [pc, #48]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fe50 	bl	8000898 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08005568 	.word	0x08005568
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x34>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d121      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d11e      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c50:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c78:	4a2b      	ldr	r2, [pc, #172]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	e004      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d134      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d003      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cc0:	e005      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc4:	617b      	str	r3, [r7, #20]
      break;
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cca:	617b      	str	r3, [r7, #20]
      break;
 8001ccc:	e002      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	fb02 f203 	mul.w	r2, r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0e5b      	lsrs	r3, r3, #25
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	3301      	adds	r3, #1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d14:	69bb      	ldr	r3, [r7, #24]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08005580 	.word	0x08005580
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4904      	ldr	r1, [pc, #16]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005578 	.word	0x08005578

08001d78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	220f      	movs	r2, #15
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RCC_GetClockConfig+0x60>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0207 	and.w	r2, r3, #7
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40022000 	.word	0x40022000

08001ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff f9e6 	bl	80011c4 <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
 8001dfa:	e014      	b.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	; 0x58
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e14:	f7ff f9d6 	bl	80011c4 <HAL_PWREx_GetVoltageRange>
 8001e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2c:	d10b      	bne.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d919      	bls.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2ba0      	cmp	r3, #160	; 0xa0
 8001e38:	d902      	bls.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	e013      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	e010      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d902      	bls.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e00a      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d102      	bne.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e58:	2302      	movs	r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e004      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b70      	cmp	r3, #112	; 0x70
 8001e62:	d101      	bne.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e64:	2301      	movs	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40022000 	.word	0x40022000

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e049      	b.n	8001f42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f841 	bl	8001f4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 f9f8 	bl	80022d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e04f      	b.n	8002018 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d018      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_TIM_Base_Start_IT+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d004      	beq.n	8001fd6 <HAL_TIM_Base_Start_IT+0x76>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d115      	bne.n	8002002 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d015      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d011      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002000:	e008      	b.n	8002014 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e000      	b.n	8002016 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40013400 	.word	0x40013400
 8002038:	40014000 	.word	0x40014000
 800203c:	00010007 	.word	0x00010007

08002040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d122      	bne.n	800209c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11b      	bne.n	800209c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0202 	mvn.w	r2, #2
 800206c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f905 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8f7 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f908 	bl	80022a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0204 	mvn.w	r2, #4
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8db 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8cd 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8de 	bl	80022a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b08      	cmp	r3, #8
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0208 	mvn.w	r2, #8
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2204      	movs	r2, #4
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8b1 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8a3 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8b4 	bl	80022a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b10      	cmp	r3, #16
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b10      	cmp	r3, #16
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0210 	mvn.w	r2, #16
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2208      	movs	r2, #8
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f887 	bl	8002292 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f879 	bl	800227e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f88a 	bl	80022a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0201 	mvn.w	r2, #1
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fb2e 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b80      	cmp	r3, #128	; 0x80
 80021de:	d107      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f914 	bl	8002418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021fe:	d10e      	bne.n	800221e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b80      	cmp	r3, #128	; 0x80
 800220c:	d107      	bne.n	800221e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f907 	bl	800242c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d10e      	bne.n	800224a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d107      	bne.n	800224a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f838 	bl	80022ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b20      	cmp	r3, #32
 8002256:	d10e      	bne.n	8002276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b20      	cmp	r3, #32
 8002264:	d107      	bne.n	8002276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0220 	mvn.w	r2, #32
 800226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f8c7 	bl	8002404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a40      	ldr	r2, [pc, #256]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d00f      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <TIM_Base_SetConfig+0x118>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <TIM_Base_SetConfig+0x11c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <TIM_Base_SetConfig+0x120>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01f      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d01b      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <TIM_Base_SetConfig+0x118>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d017      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <TIM_Base_SetConfig+0x11c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <TIM_Base_SetConfig+0x120>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00f      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00b      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <TIM_Base_SetConfig+0x128>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <TIM_Base_SetConfig+0x12c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x9a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <TIM_Base_SetConfig+0x130>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00f      	beq.n	80023c8 <TIM_Base_SetConfig+0xf8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00b      	beq.n	80023c8 <TIM_Base_SetConfig+0xf8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <TIM_Base_SetConfig+0x128>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d007      	beq.n	80023c8 <TIM_Base_SetConfig+0xf8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <TIM_Base_SetConfig+0x12c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d003      	beq.n	80023c8 <TIM_Base_SetConfig+0xf8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <TIM_Base_SetConfig+0x130>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	615a      	str	r2, [r3, #20]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40013400 	.word	0x40013400
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40014400 	.word	0x40014400
 8002400:	40014800 	.word	0x40014800

08002404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0208 	add.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0208 	add.w	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0208 	add.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00c      	b.n	80024d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3308      	adds	r3, #8
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e002      	b.n	80024c8 <vListInsert+0x2e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d2f6      	bcs.n	80024c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6852      	ldr	r2, [r2, #4]
 800252c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d103      	bne.n	8002540 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericReset+0x2e>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	60fb      	str	r3, [r7, #12]
    }
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05d      	beq.n	8002650 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d059      	beq.n	8002650 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2100      	movs	r1, #0
 80025a6:	fba3 2302 	umull	r2, r3, r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d000      	beq.n	80025b0 <xQueueGenericReset+0x50>
 80025ae:	2101      	movs	r1, #1
 80025b0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d14c      	bne.n	8002650 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80025b6:	f001 ffaf 	bl	8004518 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	441a      	add	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2200      	movs	r2, #0
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6939      	ldr	r1, [r7, #16]
 80025ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	441a      	add	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01a      	beq.n	800264a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3310      	adds	r3, #16
 8002618:	4618      	mov	r0, r3
 800261a:	f001 f863 	bl	80036e4 <xTaskRemoveFromEventList>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d012      	beq.n	800264a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <xQueueGenericReset+0x11c>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	e009      	b.n	800264a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3310      	adds	r3, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff00 	bl	8002440 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3324      	adds	r3, #36	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fefb 	bl	8002440 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800264a:	f001 ff95 	bl	8004578 <vPortExitCritical>
 800264e:	e001      	b.n	8002654 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <xQueueGenericReset+0x110>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	60bb      	str	r3, [r7, #8]
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002670:	697b      	ldr	r3, [r7, #20]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02e      	beq.n	80026f6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002698:	2100      	movs	r1, #0
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d000      	beq.n	80026a8 <xQueueGenericCreate+0x28>
 80026a6:	2101      	movs	r1, #1
 80026a8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d123      	bne.n	80026f6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026b6:	f113 0f55 	cmn.w	r3, #85	; 0x55
 80026ba:	d81c      	bhi.n	80026f6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3354      	adds	r3, #84	; 0x54
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 fffc 	bl	80046c8 <pvPortMalloc>
 80026d0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01c      	beq.n	8002712 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3354      	adds	r3, #84	; 0x54
 80026e0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f814 	bl	800271c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80026f4:	e00d      	b.n	8002712 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericCreate+0x92>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	613b      	str	r3, [r7, #16]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002712:	69fb      	ldr	r3, [r7, #28]
    }
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e002      	b.n	800273e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800274a:	2101      	movs	r1, #1
 800274c:	69b8      	ldr	r0, [r7, #24]
 800274e:	f7ff ff07 	bl	8002560 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2200      	movs	r2, #0
 800275e:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <xQueueReceive+0x30>
        __asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	623b      	str	r3, [r7, #32]
    }
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <xQueueReceive+0x3e>
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <xQueueReceive+0x42>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <xQueueReceive+0x44>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <xQueueReceive+0x5e>
        __asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	61fb      	str	r3, [r7, #28]
    }
 80027c2:	bf00      	nop
 80027c4:	e7fe      	b.n	80027c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027c6:	f001 f9ad 	bl	8003b24 <xTaskGetSchedulerState>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <xQueueReceive+0x6e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <xQueueReceive+0x72>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <xQueueReceive+0x74>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <xQueueReceive+0x8e>
        __asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	61bb      	str	r3, [r7, #24]
    }
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027f6:	f001 fe8f 	bl	8004518 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01f      	beq.n	8002846 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280a:	f000 f8f7 	bl	80029fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00f      	beq.n	800283e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	3310      	adds	r3, #16
 8002822:	4618      	mov	r0, r3
 8002824:	f000 ff5e 	bl	80036e4 <xTaskRemoveFromEventList>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <xQueueReceive+0x1bc>)
 8002830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800283e:	f001 fe9b 	bl	8004578 <vPortExitCritical>
                return pdPASS;
 8002842:	2301      	movs	r3, #1
 8002844:	e069      	b.n	800291a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800284c:	f001 fe94 	bl	8004578 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002850:	2300      	movs	r3, #0
 8002852:	e062      	b.n	800291a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4618      	mov	r0, r3
 8002860:	f001 f816 	bl	8003890 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002864:	2301      	movs	r3, #1
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002868:	f001 fe86 	bl	8004578 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800286c:	f000 fc2a 	bl	80030c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002870:	f001 fe52 	bl	8004518 <vPortEnterCritical>
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800287a:	b25b      	sxtb	r3, r3
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d103      	bne.n	800288a <xQueueReceive+0x122>
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002890:	b25b      	sxtb	r3, r3
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d103      	bne.n	80028a0 <xQueueReceive+0x138>
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028a0:	f001 fe6a 	bl	8004578 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028a4:	1d3a      	adds	r2, r7, #4
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f805 	bl	80038bc <xTaskCheckForTimeOut>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d123      	bne.n	8002900 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ba:	f000 f924 	bl	8002b06 <prvIsQueueEmpty>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe9f 	bl	8003610 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d4:	f000 f8b8 	bl	8002a48 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028d8:	f000 fc02 	bl	80030e0 <xTaskResumeAll>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d189      	bne.n	80027f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <xQueueReceive+0x1bc>)
 80028e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	e780      	b.n	80027f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f6:	f000 f8a7 	bl	8002a48 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028fa:	f000 fbf1 	bl	80030e0 <xTaskResumeAll>
 80028fe:	e77a      	b.n	80027f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002902:	f000 f8a1 	bl	8002a48 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002906:	f000 fbeb 	bl	80030e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290c:	f000 f8fb 	bl	8002b06 <prvIsQueueEmpty>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f43f af6f 	beq.w	80027f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002918:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800291a:	4618      	mov	r0, r3
 800291c:	3730      	adds	r7, #48	; 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14d      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f904 	bl	8003b60 <xTaskPriorityDisinherit>
 8002958:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e043      	b.n	80029ea <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d119      	bne.n	800299c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6858      	ldr	r0, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	461a      	mov	r2, r3
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	f002 f8ca 	bl	8004b0c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	441a      	add	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d32b      	bcc.n	80029ea <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	e026      	b.n	80029ea <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68d8      	ldr	r0, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	461a      	mov	r2, r3
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	f002 f8b0 	bl	8004b0c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	425b      	negs	r3, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	425b      	negs	r3, r3
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d105      	bne.n	80029ea <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029f2:	697b      	ldr	r3, [r7, #20]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d303      	bcc.n	8002a30 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f002 f866 	bl	8004b0c <memcpy>
    }
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a50:	f001 fd62 	bl	8004518 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a5a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a5c:	e01e      	b.n	8002a9c <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8e6 	bl	8002c38 <prvNotifyQueueSetContainer>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8002a72:	f000 ff99 	bl	80039a8 <vTaskMissedYield>
 8002a76:	e00d      	b.n	8002a94 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3324      	adds	r3, #36	; 0x24
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fe2d 	bl	80036e4 <xTaskRemoveFromEventList>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8002a90:	f000 ff8a 	bl	80039a8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	dcdc      	bgt.n	8002a5e <prvUnlockQueue+0x16>
 8002aa4:	e000      	b.n	8002aa8 <prvUnlockQueue+0x60>
                            break;
 8002aa6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	22ff      	movs	r2, #255	; 0xff
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ab0:	f001 fd62 	bl	8004578 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ab4:	f001 fd30 	bl	8004518 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002abe:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac0:	e011      	b.n	8002ae6 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3310      	adds	r3, #16
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fe08 	bl	80036e4 <xTaskRemoveFromEventList>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002ada:	f000 ff65 	bl	80039a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dce9      	bgt.n	8002ac2 <prvUnlockQueue+0x7a>
 8002aee:	e000      	b.n	8002af2 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002af0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002afa:	f001 fd3d 	bl	8004578 <vPortExitCritical>
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b0e:	f001 fd03 	bl	8004518 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e001      	b.n	8002b24 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b24:	f001 fd28 	bl	8004578 <vPortExitCritical>

    return xReturn;
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <vQueueAddToRegistry+0x26>
        __asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	60fb      	str	r3, [r7, #12]
    }
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d024      	beq.n	8002bae <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e01e      	b.n	8002ba8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b6a:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <vQueueAddToRegistry+0x98>)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d105      	bne.n	8002b86 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <vQueueAddToRegistry+0x98>)
 8002b80:	4413      	add	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
                    break;
 8002b84:	e013      	b.n	8002bae <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <vQueueAddToRegistry+0x6e>
 8002b8c:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <vQueueAddToRegistry+0x98>)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <vQueueAddToRegistry+0x98>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d9dd      	bls.n	8002b6a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	20004260 	.word	0x20004260

08002bd0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002be0:	f001 fc9a 	bl	8004518 <vPortEnterCritical>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d103      	bne.n	8002bfa <vQueueWaitForMessageRestricted+0x2a>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c06:	d103      	bne.n	8002c10 <vQueueWaitForMessageRestricted+0x40>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c10:	f001 fcb2 	bl	8004578 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3324      	adds	r3, #36	; 0x24
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fd17 	bl	8003658 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff0c 	bl	8002a48 <prvUnlockQueue>
    }
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	613b      	str	r3, [r7, #16]
    }
 8002c62:	bf00      	nop
 8002c64:	e7fe      	b.n	8002c64 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d30a      	bcc.n	8002c88 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	60fb      	str	r3, [r7, #12]
    }
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d234      	bcs.n	8002cfe <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9a:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	69b8      	ldr	r0, [r7, #24]
 8002ca4:	f7ff fe40 	bl	8002928 <prvCopyDataToQueue>
 8002ca8:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8002caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d10e      	bne.n	8002cd2 <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	3324      	adds	r3, #36	; 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fd0f 	bl	80036e4 <xTaskRemoveFromEventList>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d018      	beq.n	8002cfe <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	e015      	b.n	8002cfe <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8002cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd8:	d10a      	bne.n	8002cf0 <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	60bb      	str	r3, [r7, #8]
    }
 8002cec:	bf00      	nop
 8002cee:	e7fe      	b.n	8002cee <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
    }
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fcd3 	bl	80046c8 <pvPortMalloc>
 8002d22:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00e      	beq.n	8002d48 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d2a:	2068      	movs	r0, #104	; 0x68
 8002d2c:	f001 fccc 	bl	80046c8 <pvPortMalloc>
 8002d30:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3e:	e005      	b.n	8002d4c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f001 fda1 	bl	8004888 <vPortFree>
 8002d46:	e001      	b.n	8002d4c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9303      	str	r3, [sp, #12]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	9302      	str	r3, [sp, #8]
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f80e 	bl	8002d8a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d6e:	69f8      	ldr	r0, [r7, #28]
 8002d70:	f000 f8c0 	bl	8002ef4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e002      	b.n	8002d80 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d80:	69bb      	ldr	r3, [r7, #24]
    }
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b088      	sub	sp, #32
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	461a      	mov	r2, r3
 8002da2:	21a5      	movs	r1, #165	; 0xa5
 8002da4:	f001 fec0 	bl	8004b28 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002db2:	3b01      	subs	r3, #1
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f023 0307 	bic.w	r3, r3, #7
 8002dc0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	617b      	str	r3, [r7, #20]
    }
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01f      	beq.n	8002e28 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e012      	b.n	8002e14 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	7819      	ldrb	r1, [r3, #0]
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3334      	adds	r3, #52	; 0x34
 8002dfe:	460a      	mov	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d9e9      	bls.n	8002dee <prvInitialiseNewTask+0x64>
 8002e1a:	e000      	b.n	8002e1e <prvInitialiseNewTask+0x94>
            {
                break;
 8002e1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e26:	e003      	b.n	8002e30 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d90a      	bls.n	8002e4c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	613b      	str	r3, [r7, #16]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d901      	bls.n	8002e56 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e52:	2304      	movs	r3, #4
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e60:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb07 	bl	8002480 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	3318      	adds	r3, #24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fb02 	bl	8002480 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e80:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	f1c3 0205 	rsb	r2, r3, #5
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	2200      	movs	r2, #0
 8002e96:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	3354      	adds	r3, #84	; 0x54
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fe3e 	bl	8004b28 <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	3360      	adds	r3, #96	; 0x60
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 fe37 	bl	8004b28 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	3364      	adds	r3, #100	; 0x64
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fe30 	bl	8004b28 <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	69b8      	ldr	r0, [r7, #24]
 8002ed6:	f001 f9ef 	bl	80042b8 <pxPortInitialiseStack>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <prvInitialiseNewTask+0x162>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002efc:	f001 fb0c 	bl	8004518 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f00:	4b40      	ldr	r3, [pc, #256]	; (8003004 <prvAddNewTaskToReadyList+0x110>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a3f      	ldr	r2, [pc, #252]	; (8003004 <prvAddNewTaskToReadyList+0x110>)
 8002f08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <prvAddNewTaskToReadyList+0x114>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f12:	4a3d      	ldr	r2, [pc, #244]	; (8003008 <prvAddNewTaskToReadyList+0x114>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <prvAddNewTaskToReadyList+0x110>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d110      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f20:	f000 fd66 	bl	80039f0 <prvInitialiseTaskLists>
 8002f24:	e00d      	b.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <prvAddNewTaskToReadyList+0x118>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f2e:	4b36      	ldr	r3, [pc, #216]	; (8003008 <prvAddNewTaskToReadyList+0x114>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d802      	bhi.n	8002f42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <prvAddNewTaskToReadyList+0x114>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <prvAddNewTaskToReadyList+0x11c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a31      	ldr	r2, [pc, #196]	; (8003010 <prvAddNewTaskToReadyList+0x11c>)
 8002f4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <prvAddNewTaskToReadyList+0x11c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <prvAddNewTaskToReadyList+0x120>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	4a2c      	ldr	r2, [pc, #176]	; (8003014 <prvAddNewTaskToReadyList+0x120>)
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	492b      	ldr	r1, [pc, #172]	; (8003018 <prvAddNewTaskToReadyList+0x124>)
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	3204      	adds	r2, #4
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1d1a      	adds	r2, r3, #4
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <prvAddNewTaskToReadyList+0x124>)
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	615a      	str	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4918      	ldr	r1, [pc, #96]	; (8003018 <prvAddNewTaskToReadyList+0x124>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <prvAddNewTaskToReadyList+0x124>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4403      	add	r3, r0
 8002fd0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fd2:	f001 fad1 	bl	8004578 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <prvAddNewTaskToReadyList+0x118>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <prvAddNewTaskToReadyList+0x114>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <prvAddNewTaskToReadyList+0x128>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000016c 	.word	0x2000016c
 8003008:	20000094 	.word	0x20000094
 800300c:	20000178 	.word	0x20000178
 8003010:	20000188 	.word	0x20000188
 8003014:	20000174 	.word	0x20000174
 8003018:	20000098 	.word	0x20000098
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <vTaskStartScheduler+0x88>)
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	491d      	ldr	r1, [pc, #116]	; (80030ac <vTaskStartScheduler+0x8c>)
 8003036:	481e      	ldr	r0, [pc, #120]	; (80030b0 <vTaskStartScheduler+0x90>)
 8003038:	f7ff fe66 	bl	8002d08 <xTaskCreate>
 800303c:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d102      	bne.n	800304a <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8003044:	f000 feb4 	bl	8003db0 <xTimerCreateTimerTask>
 8003048:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d116      	bne.n	800307e <vTaskStartScheduler+0x5e>
        __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60bb      	str	r3, [r7, #8]
    }
 8003062:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003064:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <vTaskStartScheduler+0x94>)
 8003066:	f04f 32ff 	mov.w	r2, #4294967295
 800306a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <vTaskStartScheduler+0x98>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <vTaskStartScheduler+0x9c>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003078:	f001 f9ac 	bl	80043d4 <xPortStartScheduler>
 800307c:	e00e      	b.n	800309c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d10a      	bne.n	800309c <vTaskStartScheduler+0x7c>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	607b      	str	r3, [r7, #4]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <vTaskStartScheduler+0x7a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <vTaskStartScheduler+0xa0>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000190 	.word	0x20000190
 80030ac:	08005550 	.word	0x08005550
 80030b0:	080039c1 	.word	0x080039c1
 80030b4:	2000018c 	.word	0x2000018c
 80030b8:	20000178 	.word	0x20000178
 80030bc:	20000170 	.word	0x20000170
 80030c0:	2000000c 	.word	0x2000000c

080030c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <vTaskSuspendAll+0x18>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4a03      	ldr	r2, [pc, #12]	; (80030dc <vTaskSuspendAll+0x18>)
 80030d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000194 	.word	0x20000194

080030e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030ee:	4b71      	ldr	r3, [pc, #452]	; (80032b4 <xTaskResumeAll+0x1d4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10a      	bne.n	800310c <xTaskResumeAll+0x2c>
        __asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	607b      	str	r3, [r7, #4]
    }
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800310c:	f001 fa04 	bl	8004518 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <xTaskResumeAll+0x1d4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <xTaskResumeAll+0x1d4>)
 8003118:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800311a:	4b66      	ldr	r3, [pc, #408]	; (80032b4 <xTaskResumeAll+0x1d4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80c0 	bne.w	80032a4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003124:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <xTaskResumeAll+0x1d8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80bb 	beq.w	80032a4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800312e:	e08a      	b.n	8003246 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003130:	4b62      	ldr	r3, [pc, #392]	; (80032bc <xTaskResumeAll+0x1dc>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	6a12      	ldr	r2, [r2, #32]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	69d2      	ldr	r2, [r2, #28]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3318      	adds	r3, #24
 800315a:	429a      	cmp	r2, r3
 800315c:	d103      	bne.n	8003166 <xTaskResumeAll+0x86>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	2200      	movs	r2, #0
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	68d2      	ldr	r2, [r2, #12]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3304      	adds	r3, #4
 8003198:	429a      	cmp	r2, r3
 800319a:	d103      	bne.n	80031a4 <xTaskResumeAll+0xc4>
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2200      	movs	r2, #0
 80031a8:	615a      	str	r2, [r3, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	1e5a      	subs	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <xTaskResumeAll+0x1e0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	4a3f      	ldr	r2, [pc, #252]	; (80032c0 <xTaskResumeAll+0x1e0>)
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	493e      	ldr	r1, [pc, #248]	; (80032c4 <xTaskResumeAll+0x1e4>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3304      	adds	r3, #4
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	3204      	adds	r2, #4
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	1d1a      	adds	r2, r3, #4
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <xTaskResumeAll+0x1e4>)
 800320a:	441a      	add	r2, r3
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	615a      	str	r2, [r3, #20]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	492b      	ldr	r1, [pc, #172]	; (80032c4 <xTaskResumeAll+0x1e4>)
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <xTaskResumeAll+0x1e4>)
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4403      	add	r3, r0
 8003230:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <xTaskResumeAll+0x1e8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <xTaskResumeAll+0x1ec>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003246:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <xTaskResumeAll+0x1dc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f47f af70 	bne.w	8003130 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003256:	f000 fc49 	bl	8003aec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <xTaskResumeAll+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003266:	f000 f847 	bl	80032f8 <xTaskIncrementTick>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003270:	4b16      	ldr	r3, [pc, #88]	; (80032cc <xTaskResumeAll+0x1ec>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3b01      	subs	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f1      	bne.n	8003266 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <xTaskResumeAll+0x1f0>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <xTaskResumeAll+0x1ec>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <xTaskResumeAll+0x1f4>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032a4:	f001 f968 	bl	8004578 <vPortExitCritical>

    return xAlreadyYielded;
 80032a8:	69bb      	ldr	r3, [r7, #24]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000194 	.word	0x20000194
 80032b8:	2000016c 	.word	0x2000016c
 80032bc:	2000012c 	.word	0x2000012c
 80032c0:	20000174 	.word	0x20000174
 80032c4:	20000098 	.word	0x20000098
 80032c8:	20000094 	.word	0x20000094
 80032cc:	20000180 	.word	0x20000180
 80032d0:	2000017c 	.word	0x2000017c
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <xTaskGetTickCount+0x1c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032e4:	687b      	ldr	r3, [r7, #4]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000170 	.word	0x20000170

080032f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003302:	4b7d      	ldr	r3, [pc, #500]	; (80034f8 <xTaskIncrementTick+0x200>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f040 80ec 	bne.w	80034e4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800330c:	4b7b      	ldr	r3, [pc, #492]	; (80034fc <xTaskIncrementTick+0x204>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003314:	4a79      	ldr	r2, [pc, #484]	; (80034fc <xTaskIncrementTick+0x204>)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d120      	bne.n	8003362 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003320:	4b77      	ldr	r3, [pc, #476]	; (8003500 <xTaskIncrementTick+0x208>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <xTaskIncrementTick+0x48>
        __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	607b      	str	r3, [r7, #4]
    }
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <xTaskIncrementTick+0x46>
 8003340:	4b6f      	ldr	r3, [pc, #444]	; (8003500 <xTaskIncrementTick+0x208>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <xTaskIncrementTick+0x20c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <xTaskIncrementTick+0x208>)
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4a6d      	ldr	r2, [pc, #436]	; (8003504 <xTaskIncrementTick+0x20c>)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <xTaskIncrementTick+0x210>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	4a6b      	ldr	r2, [pc, #428]	; (8003508 <xTaskIncrementTick+0x210>)
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	f000 fbc5 	bl	8003aec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003362:	4b6a      	ldr	r3, [pc, #424]	; (800350c <xTaskIncrementTick+0x214>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	429a      	cmp	r2, r3
 800336a:	f0c0 80a6 	bcc.w	80034ba <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <xTaskIncrementTick+0x208>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003378:	4b64      	ldr	r3, [pc, #400]	; (800350c <xTaskIncrementTick+0x214>)
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	601a      	str	r2, [r3, #0]
                    break;
 8003380:	e09b      	b.n	80034ba <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <xTaskIncrementTick+0x208>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	429a      	cmp	r2, r3
 8003398:	d203      	bcs.n	80033a2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800339a:	4a5c      	ldr	r2, [pc, #368]	; (800350c <xTaskIncrementTick+0x214>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033a0:	e08b      	b.n	80034ba <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	3304      	adds	r3, #4
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d103      	bne.n	80033d0 <xTaskIncrementTick+0xd8>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2200      	movs	r2, #0
 80033d4:	615a      	str	r2, [r3, #20]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	1e5a      	subs	r2, r3, #1
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01e      	beq.n	8003426 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	6a12      	ldr	r2, [r2, #32]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	69d2      	ldr	r2, [r2, #28]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3318      	adds	r3, #24
 800340a:	429a      	cmp	r2, r3
 800340c:	d103      	bne.n	8003416 <xTaskIncrementTick+0x11e>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <xTaskIncrementTick+0x218>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	4a36      	ldr	r2, [pc, #216]	; (8003510 <xTaskIncrementTick+0x218>)
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	4935      	ldr	r1, [pc, #212]	; (8003514 <xTaskIncrementTick+0x21c>)
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3304      	adds	r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	3204      	adds	r2, #4
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <xTaskIncrementTick+0x21c>)
 800347c:	441a      	add	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	615a      	str	r2, [r3, #20]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4923      	ldr	r1, [pc, #140]	; (8003514 <xTaskIncrementTick+0x21c>)
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1c59      	adds	r1, r3, #1
 8003496:	481f      	ldr	r0, [pc, #124]	; (8003514 <xTaskIncrementTick+0x21c>)
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <xTaskIncrementTick+0x220>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	f4ff af5d 	bcc.w	800336e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b8:	e759      	b.n	800336e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <xTaskIncrementTick+0x220>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4914      	ldr	r1, [pc, #80]	; (8003514 <xTaskIncrementTick+0x21c>)
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d901      	bls.n	80034d6 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80034d2:	2301      	movs	r3, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <xTaskIncrementTick+0x224>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80034de:	2301      	movs	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	e004      	b.n	80034ee <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <xTaskIncrementTick+0x228>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <xTaskIncrementTick+0x228>)
 80034ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3728      	adds	r7, #40	; 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000194 	.word	0x20000194
 80034fc:	20000170 	.word	0x20000170
 8003500:	20000124 	.word	0x20000124
 8003504:	20000128 	.word	0x20000128
 8003508:	20000184 	.word	0x20000184
 800350c:	2000018c 	.word	0x2000018c
 8003510:	20000174 	.word	0x20000174
 8003514:	20000098 	.word	0x20000098
 8003518:	20000094 	.word	0x20000094
 800351c:	20000180 	.word	0x20000180
 8003520:	2000017c 	.word	0x2000017c

08003524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800352a:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <vTaskSwitchContext+0xd0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003532:	4b31      	ldr	r3, [pc, #196]	; (80035f8 <vTaskSwitchContext+0xd4>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003538:	e056      	b.n	80035e8 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <vTaskSwitchContext+0xd4>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <vTaskSwitchContext+0xd8>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003546:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <vTaskSwitchContext+0xd8>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <vTaskSwitchContext+0xdc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d909      	bls.n	8003566 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <vTaskSwitchContext+0xd8>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <vTaskSwitchContext+0xdc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	1ad1      	subs	r1, r2, r3
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <vTaskSwitchContext+0xe0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003562:	440a      	add	r2, r1
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <vTaskSwitchContext+0xd8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <vTaskSwitchContext+0xdc>)
 800356c:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <vTaskSwitchContext+0xe4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	f1c3 031f 	rsb	r3, r3, #31
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	4921      	ldr	r1, [pc, #132]	; (800360c <vTaskSwitchContext+0xe8>)
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <vTaskSwitchContext+0x8a>
        __asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	607b      	str	r3, [r7, #4]
    }
 80035aa:	bf00      	nop
 80035ac:	e7fe      	b.n	80035ac <vTaskSwitchContext+0x88>
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <vTaskSwitchContext+0xe8>)
 80035ba:	4413      	add	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3308      	adds	r3, #8
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d104      	bne.n	80035de <vTaskSwitchContext+0xba>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a07      	ldr	r2, [pc, #28]	; (8003604 <vTaskSwitchContext+0xe0>)
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20000194 	.word	0x20000194
 80035f8:	20000180 	.word	0x20000180
 80035fc:	2000019c 	.word	0x2000019c
 8003600:	20000198 	.word	0x20000198
 8003604:	20000094 	.word	0x20000094
 8003608:	20000174 	.word	0x20000174
 800360c:	20000098 	.word	0x20000098

08003610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
    }
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <vTaskPlaceOnEventList+0x44>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3318      	adds	r3, #24
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe ff2b 	bl	800249a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003644:	2101      	movs	r1, #1
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f000 fb2e 	bl	8003ca8 <prvAddCurrentTaskToDelayedList>
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000094 	.word	0x20000094

08003658 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	613b      	str	r3, [r7, #16]
    }
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	61da      	str	r2, [r3, #28]
 800368e:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6892      	ldr	r2, [r2, #8]
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <vTaskPlaceOnEventListRestricted+0x88>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	3218      	adds	r2, #24
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <vTaskPlaceOnEventListRestricted+0x88>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f103 0218 	add.w	r2, r3, #24
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <vTaskPlaceOnEventListRestricted+0x88>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295
 80036cc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68b8      	ldr	r0, [r7, #8]
 80036d2:	f000 fae9 	bl	8003ca8 <prvAddCurrentTaskToDelayedList>
    }
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000094 	.word	0x20000094

080036e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b08b      	sub	sp, #44	; 0x2c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60fb      	str	r3, [r7, #12]
    }
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	6a12      	ldr	r2, [r2, #32]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	69d2      	ldr	r2, [r2, #28]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	3318      	adds	r3, #24
 8003732:	429a      	cmp	r2, r3
 8003734:	d103      	bne.n	800373e <xTaskRemoveFromEventList+0x5a>
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	2200      	movs	r2, #0
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1e5a      	subs	r2, r3, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <xTaskRemoveFromEventList+0x194>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d15e      	bne.n	8003814 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	68d2      	ldr	r2, [r2, #12]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	3304      	adds	r3, #4
 8003778:	429a      	cmp	r2, r3
 800377a:	d103      	bne.n	8003784 <xTaskRemoveFromEventList+0xa0>
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2200      	movs	r2, #0
 8003788:	615a      	str	r2, [r3, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2201      	movs	r2, #1
 800379a:	409a      	lsls	r2, r3
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <xTaskRemoveFromEventList+0x198>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	4a36      	ldr	r2, [pc, #216]	; (800387c <xTaskRemoveFromEventList+0x198>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037aa:	4935      	ldr	r1, [pc, #212]	; (8003880 <xTaskRemoveFromEventList+0x19c>)
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3304      	adds	r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	3204      	adds	r2, #4
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <xTaskRemoveFromEventList+0x19c>)
 80037ea:	441a      	add	r2, r3
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	615a      	str	r2, [r3, #20]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	4922      	ldr	r1, [pc, #136]	; (8003880 <xTaskRemoveFromEventList+0x19c>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1c59      	adds	r1, r3, #1
 8003804:	481e      	ldr	r0, [pc, #120]	; (8003880 <xTaskRemoveFromEventList+0x19c>)
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4403      	add	r3, r0
 8003810:	6019      	str	r1, [r3, #0]
 8003812:	e01b      	b.n	800384c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <xTaskRemoveFromEventList+0x1a0>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	61da      	str	r2, [r3, #28]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	621a      	str	r2, [r3, #32]
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	3218      	adds	r2, #24
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f103 0218 	add.w	r2, r3, #24
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	4a11      	ldr	r2, [pc, #68]	; (8003884 <xTaskRemoveFromEventList+0x1a0>)
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <xTaskRemoveFromEventList+0x1a0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <xTaskRemoveFromEventList+0x1a0>)
 800384a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <xTaskRemoveFromEventList+0x1a4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	429a      	cmp	r2, r3
 8003858:	d905      	bls.n	8003866 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <xTaskRemoveFromEventList+0x1a8>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e001      	b.n	800386a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800386c:	4618      	mov	r0, r3
 800386e:	372c      	adds	r7, #44	; 0x2c
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	20000194 	.word	0x20000194
 800387c:	20000174 	.word	0x20000174
 8003880:	20000098 	.word	0x20000098
 8003884:	2000012c 	.word	0x2000012c
 8003888:	20000094 	.word	0x20000094
 800388c:	20000180 	.word	0x20000180

08003890 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <vTaskInternalSetTimeOutState+0x24>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <vTaskInternalSetTimeOutState+0x28>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000184 	.word	0x20000184
 80038b8:	20000170 	.word	0x20000170

080038bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	613b      	str	r3, [r7, #16]
    }
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60fb      	str	r3, [r7, #12]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038fe:	f000 fe0b 	bl	8004518 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <xTaskCheckForTimeOut+0xe0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <xTaskCheckForTimeOut+0xe4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <xTaskCheckForTimeOut+0xe4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                xReturn = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e02e      	b.n	800398c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d102      	bne.n	800393e <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	e026      	b.n	800398c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <xTaskCheckForTimeOut+0xe8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d00a      	beq.n	8003960 <xTaskCheckForTimeOut+0xa4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	429a      	cmp	r2, r3
 8003952:	d305      	bcc.n	8003960 <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e015      	b.n	800398c <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	429a      	cmp	r2, r3
 8003968:	d20b      	bcs.n	8003982 <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad2      	subs	r2, r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff8a 	bl	8003890 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e004      	b.n	800398c <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800398c:	f000 fdf4 	bl	8004578 <vPortExitCritical>

    return xReturn;
 8003990:	69fb      	ldr	r3, [r7, #28]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000170 	.word	0x20000170
 80039a0:	20000094 	.word	0x20000094
 80039a4:	20000184 	.word	0x20000184

080039a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <vTaskMissedYield+0x14>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000180 	.word	0x20000180

080039c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039c8:	f000 f852 	bl	8003a70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <prvIdleTask+0x28>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d9f9      	bls.n	80039c8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <prvIdleTask+0x2c>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039e4:	e7f0      	b.n	80039c8 <prvIdleTask+0x8>
 80039e6:	bf00      	nop
 80039e8:	20000098 	.word	0x20000098
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	e00c      	b.n	8003a16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <prvInitialiseTaskLists+0x60>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fd18 	bl	8002440 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3301      	adds	r3, #1
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d9ef      	bls.n	80039fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a1c:	480d      	ldr	r0, [pc, #52]	; (8003a54 <prvInitialiseTaskLists+0x64>)
 8003a1e:	f7fe fd0f 	bl	8002440 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a22:	480d      	ldr	r0, [pc, #52]	; (8003a58 <prvInitialiseTaskLists+0x68>)
 8003a24:	f7fe fd0c 	bl	8002440 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a28:	480c      	ldr	r0, [pc, #48]	; (8003a5c <prvInitialiseTaskLists+0x6c>)
 8003a2a:	f7fe fd09 	bl	8002440 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a2e:	480c      	ldr	r0, [pc, #48]	; (8003a60 <prvInitialiseTaskLists+0x70>)
 8003a30:	f7fe fd06 	bl	8002440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a34:	480b      	ldr	r0, [pc, #44]	; (8003a64 <prvInitialiseTaskLists+0x74>)
 8003a36:	f7fe fd03 	bl	8002440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <prvInitialiseTaskLists+0x78>)
 8003a3c:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <prvInitialiseTaskLists+0x64>)
 8003a3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <prvInitialiseTaskLists+0x7c>)
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <prvInitialiseTaskLists+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000098 	.word	0x20000098
 8003a54:	200000fc 	.word	0x200000fc
 8003a58:	20000110 	.word	0x20000110
 8003a5c:	2000012c 	.word	0x2000012c
 8003a60:	20000140 	.word	0x20000140
 8003a64:	20000158 	.word	0x20000158
 8003a68:	20000124 	.word	0x20000124
 8003a6c:	20000128 	.word	0x20000128

08003a70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a76:	e019      	b.n	8003aac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a78:	f000 fd4e 	bl	8004518 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <prvCheckTasksWaitingTermination+0x50>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fd3f 	bl	800250c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <prvCheckTasksWaitingTermination+0x54>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <prvCheckTasksWaitingTermination+0x54>)
 8003a96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <prvCheckTasksWaitingTermination+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <prvCheckTasksWaitingTermination+0x58>)
 8003aa0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003aa2:	f000 fd69 	bl	8004578 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f810 	bl	8003acc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <prvCheckTasksWaitingTermination+0x58>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e1      	bne.n	8003a78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000140 	.word	0x20000140
 8003ac4:	2000016c 	.word	0x2000016c
 8003ac8:	20000154 	.word	0x20000154

08003acc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fed5 	bl	8004888 <vPortFree>
                vPortFree( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fed2 	bl	8004888 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <prvResetNextTaskUnblockTime+0x30>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <prvResetNextTaskUnblockTime+0x34>)
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b02:	e005      	b.n	8003b10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <prvResetNextTaskUnblockTime+0x30>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <prvResetNextTaskUnblockTime+0x34>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000124 	.word	0x20000124
 8003b20:	2000018c 	.word	0x2000018c

08003b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <xTaskGetSchedulerState+0x34>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b32:	2301      	movs	r3, #1
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	e008      	b.n	8003b4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <xTaskGetSchedulerState+0x38>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b40:	2302      	movs	r3, #2
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	e001      	b.n	8003b4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b4a:	687b      	ldr	r3, [r7, #4]
    }
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000178 	.word	0x20000178
 8003b5c:	20000194 	.word	0x20000194

08003b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 808c 	beq.w	8003c90 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b78:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <xTaskPriorityDisinherit+0x13c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d00a      	beq.n	8003b98 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	613b      	str	r3, [r7, #16]
    }
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
    }
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d061      	beq.n	8003c90 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d15d      	bne.n	8003c90 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fc97 	bl	800250c <uxListRemove>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2201      	movs	r2, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <xTaskPriorityDisinherit+0x140>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <xTaskPriorityDisinherit+0x140>)
 8003bf8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f1c3 0205 	rsb	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <xTaskPriorityDisinherit+0x140>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <xTaskPriorityDisinherit+0x140>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <xTaskPriorityDisinherit+0x144>)
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3304      	adds	r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	3204      	adds	r2, #4
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <xTaskPriorityDisinherit+0x144>)
 8003c64:	441a      	add	r2, r3
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	615a      	str	r2, [r3, #20]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	490d      	ldr	r1, [pc, #52]	; (8003ca4 <xTaskPriorityDisinherit+0x144>)
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	4809      	ldr	r0, [pc, #36]	; (8003ca4 <xTaskPriorityDisinherit+0x144>)
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4403      	add	r3, r0
 8003c8a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c90:	69fb      	ldr	r3, [r7, #28]
    }
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000094 	.word	0x20000094
 8003ca0:	20000174 	.word	0x20000174
 8003ca4:	20000098 	.word	0x20000098

08003ca8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003cb2:	4b38      	ldr	r3, [pc, #224]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cc2:	4b35      	ldr	r3, [pc, #212]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fc1f 	bl	800250c <uxListRemove>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10b      	bne.n	8003cec <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cd4:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003cea:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d124      	bne.n	8003d3e <prvAddCurrentTaskToDelayedList+0x96>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d021      	beq.n	8003d3e <prvAddCurrentTaskToDelayedList+0x96>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	4b21      	ldr	r3, [pc, #132]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	3204      	adds	r2, #4
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d2e:	615a      	str	r2, [r3, #20]
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d3c:	e026      	b.n	8003d8c <prvAddCurrentTaskToDelayedList+0xe4>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d209      	bcs.n	8003d6a <prvAddCurrentTaskToDelayedList+0xc2>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f7fe fb99 	bl	800249a <vListInsert>
}
 8003d68:	e010      	b.n	8003d8c <prvAddCurrentTaskToDelayedList+0xe4>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fe fb8f 	bl	800249a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvAddCurrentTaskToDelayedList+0x104>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d202      	bcs.n	8003d8c <prvAddCurrentTaskToDelayedList+0xe4>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <prvAddCurrentTaskToDelayedList+0x104>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000170 	.word	0x20000170
 8003d98:	20000094 	.word	0x20000094
 8003d9c:	20000174 	.word	0x20000174
 8003da0:	20000158 	.word	0x20000158
 8003da4:	20000128 	.word	0x20000128
 8003da8:	20000124 	.word	0x20000124
 8003dac:	2000018c 	.word	0x2000018c

08003db0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003dba:	f000 fa47 	bl	800424c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003dbe:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <xTimerCreateTimerTask+0x54>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <xTimerCreateTimerTask+0x58>)
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2302      	movs	r3, #2
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dd4:	490d      	ldr	r1, [pc, #52]	; (8003e0c <xTimerCreateTimerTask+0x5c>)
 8003dd6:	480e      	ldr	r0, [pc, #56]	; (8003e10 <xTimerCreateTimerTask+0x60>)
 8003dd8:	f7fe ff96 	bl	8002d08 <xTaskCreate>
 8003ddc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	603b      	str	r3, [r7, #0]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003dfa:	687b      	ldr	r3, [r7, #4]
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	200001d0 	.word	0x200001d0
 8003e08:	200001d4 	.word	0x200001d4
 8003e0c:	08005558 	.word	0x08005558
 8003e10:	08003eb9 	.word	0x08003eb9

08003e14 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e20:	e008      	b.n	8003e34 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4413      	add	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	18d1      	adds	r1, r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f8dd 	bl	8004000 <prvInsertTimerInActiveList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ea      	bne.n	8003e22 <prvReloadTimer+0xe>
        }
    }
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <prvProcessExpiredTimer+0x5c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe fb4b 	bl	800250c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ffc3 	bl	8003e14 <prvReloadTimer>
 8003e8e:	e008      	b.n	8003ea2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	4798      	blx	r3
    }
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200001c8 	.word	0x200001c8

08003eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f857 	bl	8003f78 <prvGetNextExpireTime>
 8003eca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f803 	bl	8003edc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ed6:	f000 f8d5 	bl	8004084 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eda:	e7f1      	b.n	8003ec0 <prvTimerTask+0x8>

08003edc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ee6:	f7ff f8ed 	bl	80030c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f866 	bl	8003fc0 <prvSampleTimeNow>
 8003ef4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d130      	bne.n	8003f5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d806      	bhi.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f0a:	f7ff f8e9 	bl	80030e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffa1 	bl	8003e58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f16:	e024      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <prvProcessTimerOrBlockTask+0x90>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <prvProcessTimerOrBlockTask+0x50>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x52>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <prvProcessTimerOrBlockTask+0x94>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fe fe47 	bl	8002bd0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f42:	f7ff f8cd 	bl	80030e0 <xTaskResumeAll>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <prvProcessTimerOrBlockTask+0x98>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
    }
 8003f5c:	e001      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f5e:	f7ff f8bf 	bl	80030e0 <xTaskResumeAll>
    }
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200001cc 	.word	0x200001cc
 8003f70:	200001d0 	.word	0x200001d0
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <prvGetNextExpireTime+0x16>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	e000      	b.n	8003f90 <prvGetNextExpireTime+0x18>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e001      	b.n	8003fac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fac:	68fb      	ldr	r3, [r7, #12]
    }
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200001c8 	.word	0x200001c8

08003fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003fc8:	f7ff f986 	bl	80032d8 <xTaskGetTickCount>
 8003fcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d205      	bcs.n	8003fe4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fd8:	f000 f912 	bl	8004200 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e002      	b.n	8003fea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200001d8 	.word	0x200001d8

08004000 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d812      	bhi.n	800404c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e01b      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <prvInsertTimerInActiveList+0x7c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe fa28 	bl	800249a <vListInsert>
 800404a:	e012      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d206      	bcs.n	8004062 <prvInsertTimerInActiveList+0x62>
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e007      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <prvInsertTimerInActiveList+0x80>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe fa14 	bl	800249a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004072:	697b      	ldr	r3, [r7, #20]
    }
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200001cc 	.word	0x200001cc
 8004080:	200001c8 	.word	0x200001c8

08004084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	e0a6      	b.n	80041da <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f2c0 80a2 	blt.w	80041d8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fa31 	bl	800250c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff87 	bl	8003fc0 <prvSampleTimeNow>
 80040b2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	f200 808e 	bhi.w	80041da <prvProcessReceivedCommands+0x156>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <prvProcessReceivedCommands+0x40>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	080040e9 	.word	0x080040e9
 80040cc:	08004151 	.word	0x08004151
 80040d0:	08004165 	.word	0x08004165
 80040d4:	080041af 	.word	0x080041af
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040e9 	.word	0x080040e9
 80040e0:	08004151 	.word	0x08004151
 80040e4:	08004165 	.word	0x08004165
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	18d1      	adds	r1, r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	69f8      	ldr	r0, [r7, #28]
 8004108:	f7ff ff7a 	bl	8004000 <prvInsertTimerInActiveList>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d063      	beq.n	80041da <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	4413      	add	r3, r2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4619      	mov	r1, r3
 800412c:	69f8      	ldr	r0, [r7, #28]
 800412e:	f7ff fe71 	bl	8003e14 <prvReloadTimer>
 8004132:	e008      	b.n	8004146 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	69f8      	ldr	r0, [r7, #28]
 800414c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800414e:	e044      	b.n	80041da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004162:	e03a      	b.n	80041da <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	617b      	str	r3, [r7, #20]
    }
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	18d1      	adds	r1, r2, r3
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	69f8      	ldr	r0, [r7, #28]
 80041a8:	f7ff ff2a 	bl	8004000 <prvInsertTimerInActiveList>
                        break;
 80041ac:	e015      	b.n	80041da <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d103      	bne.n	80041c4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80041bc:	69f8      	ldr	r0, [r7, #28]
 80041be:	f000 fb63 	bl	8004888 <vPortFree>
 80041c2:	e00a      	b.n	80041da <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041d6:	e000      	b.n	80041da <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80041d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <prvProcessReceivedCommands+0x178>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f107 0108 	add.w	r1, r7, #8
 80041e2:	2200      	movs	r2, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fabf 	bl	8002768 <xQueueReceive>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f47f af4d 	bne.w	800408c <prvProcessReceivedCommands+0x8>
        }
    }
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	200001d0 	.word	0x200001d0

08004200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004206:	e009      	b.n	800421c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <prvSwitchTimerLists+0x44>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004212:	f04f 31ff 	mov.w	r1, #4294967295
 8004216:	6838      	ldr	r0, [r7, #0]
 8004218:	f7ff fe1e 	bl	8003e58 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <prvSwitchTimerLists+0x44>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <prvSwitchTimerLists+0x44>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <prvSwitchTimerLists+0x48>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <prvSwitchTimerLists+0x44>)
 8004232:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <prvSwitchTimerLists+0x48>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
    }
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200001c8 	.word	0x200001c8
 8004248:	200001cc 	.word	0x200001cc

0800424c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004250:	f000 f962 	bl	8004518 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <prvCheckForValidListAndQueue+0x54>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800425c:	4811      	ldr	r0, [pc, #68]	; (80042a4 <prvCheckForValidListAndQueue+0x58>)
 800425e:	f7fe f8ef 	bl	8002440 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004262:	4811      	ldr	r0, [pc, #68]	; (80042a8 <prvCheckForValidListAndQueue+0x5c>)
 8004264:	f7fe f8ec 	bl	8002440 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvCheckForValidListAndQueue+0x60>)
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <prvCheckForValidListAndQueue+0x58>)
 800426c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <prvCheckForValidListAndQueue+0x64>)
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <prvCheckForValidListAndQueue+0x5c>)
 8004272:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004274:	2200      	movs	r2, #0
 8004276:	210c      	movs	r1, #12
 8004278:	2005      	movs	r0, #5
 800427a:	f7fe fa01 	bl	8002680 <xQueueGenericCreate>
 800427e:	4603      	mov	r3, r0
 8004280:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <prvCheckForValidListAndQueue+0x54>)
 8004282:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <prvCheckForValidListAndQueue+0x54>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <prvCheckForValidListAndQueue+0x54>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4908      	ldr	r1, [pc, #32]	; (80042b4 <prvCheckForValidListAndQueue+0x68>)
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fc4e 	bl	8002b34 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004298:	f000 f96e 	bl	8004578 <vPortExitCritical>
    }
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200001d0 	.word	0x200001d0
 80042a4:	200001a0 	.word	0x200001a0
 80042a8:	200001b4 	.word	0x200001b4
 80042ac:	200001c8 	.word	0x200001c8
 80042b0:	200001cc 	.word	0x200001cc
 80042b4:	08005560 	.word	0x08005560

080042b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3b04      	subs	r3, #4
 80042c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3b04      	subs	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3b04      	subs	r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042e8:	4a0c      	ldr	r2, [pc, #48]	; (800431c <pxPortInitialiseStack+0x64>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3b14      	subs	r3, #20
 80042f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f06f 0202 	mvn.w	r2, #2
 8004306:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3b20      	subs	r3, #32
 800430c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	08004321 	.word	0x08004321

08004320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <prvTaskExitError+0x54>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d00a      	beq.n	800434a <prvTaskExitError+0x2a>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60fb      	str	r3, [r7, #12]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <prvTaskExitError+0x28>
        __asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60bb      	str	r3, [r7, #8]
    }
 800435c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800435e:	bf00      	nop
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0fc      	beq.n	8004360 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000010 	.word	0x20000010
	...

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
 80043ca:	0000      	.short	0x0000
 80043cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop

080043d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043da:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <xPortStartScheduler+0x120>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <xPortStartScheduler+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10a      	bne.n	80043fa <xPortStartScheduler+0x26>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	613b      	str	r3, [r7, #16]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043fa:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <xPortStartScheduler+0x120>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <xPortStartScheduler+0x128>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10a      	bne.n	800441a <xPortStartScheduler+0x46>
        __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
    }
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <xPortStartScheduler+0x12c>)
 800441c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xPortStartScheduler+0x130>)
 8004440:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <xPortStartScheduler+0x134>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004448:	e009      	b.n	800445e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <xPortStartScheduler+0x134>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <xPortStartScheduler+0x134>)
 8004452:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d0ef      	beq.n	800444a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <xPortStartScheduler+0x134>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00a      	beq.n	800448c <xPortStartScheduler+0xb8>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <xPortStartScheduler+0x134>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <xPortStartScheduler+0x134>)
 8004494:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xPortStartScheduler+0x134>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449e:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <xPortStartScheduler+0x134>)
 80044a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <xPortStartScheduler+0x138>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <xPortStartScheduler+0x138>)
 80044b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <xPortStartScheduler+0x138>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <xPortStartScheduler+0x138>)
 80044bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044c2:	f000 f8db 	bl	800467c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <xPortStartScheduler+0x13c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044cc:	f000 f8f0 	bl	80046b0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xPortStartScheduler+0x140>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <xPortStartScheduler+0x140>)
 80044d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044dc:	f7ff ff64 	bl	80043a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044e0:	f7ff f820 	bl	8003524 <vTaskSwitchContext>
    prvTaskExitError();
 80044e4:	f7ff ff1c 	bl	8004320 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	410fc271 	.word	0x410fc271
 80044fc:	410fc270 	.word	0x410fc270
 8004500:	e000e400 	.word	0xe000e400
 8004504:	200001dc 	.word	0x200001dc
 8004508:	200001e0 	.word	0x200001e0
 800450c:	e000ed20 	.word	0xe000ed20
 8004510:	20000010 	.word	0x20000010
 8004514:	e000ef34 	.word	0xe000ef34

08004518 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
    }
 8004530:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <vPortEnterCritical+0x58>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <vPortEnterCritical+0x58>)
 800453a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <vPortEnterCritical+0x58>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d10f      	bne.n	8004564 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <vPortEnterCritical+0x5c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <vPortEnterCritical+0x4c>
        __asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	603b      	str	r3, [r7, #0]
    }
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <vPortEnterCritical+0x4a>
    }
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000010 	.word	0x20000010
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <vPortExitCritical+0x50>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vPortExitCritical+0x24>
        __asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
    }
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <vPortExitCritical+0x50>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <vPortExitCritical+0x50>)
 80045a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <vPortExitCritical+0x50>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <vPortExitCritical+0x42>
 80045ae:	2300      	movs	r3, #0
 80045b0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000010 	.word	0x20000010
 80045cc:	00000000 	.word	0x00000000

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f01e 0f10 	tst.w	lr, #16
 80045e0:	bf08      	it	eq
 80045e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045f4:	f380 8811 	msr	BASEPRI, r0
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f7fe ff90 	bl	8003524 <vTaskSwitchContext>
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f380 8811 	msr	BASEPRI, r0
 800460c:	bc09      	pop	{r0, r3}
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	6808      	ldr	r0, [r1, #0]
 8004612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004616:	f01e 0f10 	tst.w	lr, #16
 800461a:	bf08      	it	eq
 800461c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004620:	f380 8809 	msr	PSP, r0
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst>:
 8004630:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
    }
 8004650:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004652:	f7fe fe51 	bl	80032f8 <xTaskIncrementTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <SysTick_Handler+0x40>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f383 8811 	msr	BASEPRI, r3
    }
 800466e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <vPortSetupTimerInterrupt+0x28>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <vPortSetupTimerInterrupt+0x2c>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <vPortSetupTimerInterrupt+0x30>)
 800468e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8004692:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <vPortSetupTimerInterrupt+0x28>)
 8004696:	2207      	movs	r2, #7
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000e010 	.word	0xe000e010
 80046a8:	e000e018 	.word	0xe000e018
 80046ac:	e000e014 	.word	0xe000e014

080046b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046c0 <vPortEnableVFP+0x10>
 80046b4:	6801      	ldr	r1, [r0, #0]
 80046b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ba:	6001      	str	r1, [r0, #0]
 80046bc:	4770      	bx	lr
 80046be:	0000      	.short	0x0000
 80046c0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop

080046c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80046d4:	f7fe fcf6 	bl	80030c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046d8:	4b65      	ldr	r3, [pc, #404]	; (8004870 <pvPortMalloc+0x1a8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80046e0:	f000 f934 	bl	800494c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046e4:	4b63      	ldr	r3, [pc, #396]	; (8004874 <pvPortMalloc+0x1ac>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 80a7 	bne.w	8004840 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02d      	beq.n	8004754 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80046f8:	2208      	movs	r2, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d227      	bcs.n	8004754 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004704:	2208      	movs	r2, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d021      	beq.n	800475a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f023 0307 	bic.w	r3, r3, #7
 800471c:	3308      	adds	r3, #8
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d214      	bcs.n	800474e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	3308      	adds	r3, #8
 800472c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <pvPortMalloc+0x92>
        __asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	617b      	str	r3, [r7, #20]
    }
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004752:	e002      	b.n	800475a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e000      	b.n	800475c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800475a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06e      	beq.n	8004840 <pvPortMalloc+0x178>
 8004762:	4b45      	ldr	r3, [pc, #276]	; (8004878 <pvPortMalloc+0x1b0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d869      	bhi.n	8004840 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800476c:	4b43      	ldr	r3, [pc, #268]	; (800487c <pvPortMalloc+0x1b4>)
 800476e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004770:	4b42      	ldr	r3, [pc, #264]	; (800487c <pvPortMalloc+0x1b4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004776:	e004      	b.n	8004782 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d903      	bls.n	8004794 <pvPortMalloc+0xcc>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f1      	bne.n	8004778 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <pvPortMalloc+0x1a8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	429a      	cmp	r2, r3
 800479c:	d050      	beq.n	8004840 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2208      	movs	r2, #8
 80047a4:	4413      	add	r3, r2
 80047a6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	1ad2      	subs	r2, r2, r3
 80047b8:	2308      	movs	r3, #8
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	429a      	cmp	r2, r3
 80047be:	d91f      	bls.n	8004800 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <pvPortMalloc+0x120>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	613b      	str	r3, [r7, #16]
    }
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	1ad2      	subs	r2, r2, r3
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047fa:	69b8      	ldr	r0, [r7, #24]
 80047fc:	f000 f908 	bl	8004a10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004800:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <pvPortMalloc+0x1b0>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <pvPortMalloc+0x1b0>)
 800480c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800480e:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <pvPortMalloc+0x1b0>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <pvPortMalloc+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d203      	bcs.n	8004822 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <pvPortMalloc+0x1b0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <pvPortMalloc+0x1b8>)
 8004820:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <pvPortMalloc+0x1ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	431a      	orrs	r2, r3
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <pvPortMalloc+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <pvPortMalloc+0x1bc>)
 800483e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004840:	f7fe fc4e 	bl	80030e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <pvPortMalloc+0x19c>
        __asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60fb      	str	r3, [r7, #12]
    }
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <pvPortMalloc+0x19a>
    return pvReturn;
 8004864:	69fb      	ldr	r3, [r7, #28]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3728      	adds	r7, #40	; 0x28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200041ec 	.word	0x200041ec
 8004874:	20004200 	.word	0x20004200
 8004878:	200041f0 	.word	0x200041f0
 800487c:	200041e4 	.word	0x200041e4
 8004880:	200041f4 	.word	0x200041f4
 8004884:	200041f8 	.word	0x200041f8

08004888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04d      	beq.n	8004936 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800489a:	2308      	movs	r3, #8
 800489c:	425b      	negs	r3, r3
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4413      	add	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <vPortFree+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <vPortFree+0x44>
        __asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60fb      	str	r3, [r7, #12]
    }
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <vPortFree+0x62>
        __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60bb      	str	r3, [r7, #8]
    }
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <vPortFree+0xb8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01e      	beq.n	8004936 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11a      	bne.n	8004936 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <vPortFree+0xb8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	43db      	mvns	r3, r3
 800490a:	401a      	ands	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004910:	f7fe fbd8 	bl	80030c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <vPortFree+0xbc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4413      	add	r3, r2
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <vPortFree+0xbc>)
 8004920:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004922:	6938      	ldr	r0, [r7, #16]
 8004924:	f000 f874 	bl	8004a10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <vPortFree+0xc0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a06      	ldr	r2, [pc, #24]	; (8004948 <vPortFree+0xc0>)
 8004930:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004932:	f7fe fbd5 	bl	80030e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20004200 	.word	0x20004200
 8004944:	200041f0 	.word	0x200041f0
 8004948:	200041fc 	.word	0x200041fc

0800494c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004956:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004958:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <prvHeapInit+0xac>)
 800495a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3307      	adds	r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <prvHeapInit+0xac>)
 800497c:	4413      	add	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <prvHeapInit+0xb0>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800498a:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <prvHeapInit+0xb0>)
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	4413      	add	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004998:	2208      	movs	r2, #8
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0307 	bic.w	r3, r3, #7
 80049a6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <prvHeapInit+0xb4>)
 80049ac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <prvHeapInit+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <prvHeapInit+0xb4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <prvHeapInit+0xb4>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <prvHeapInit+0xb8>)
 80049da:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <prvHeapInit+0xbc>)
 80049e2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <prvHeapInit+0xc0>)
 80049e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	200001e4 	.word	0x200001e4
 80049fc:	200041e4 	.word	0x200041e4
 8004a00:	200041ec 	.word	0x200041ec
 8004a04:	200041f4 	.word	0x200041f4
 8004a08:	200041f0 	.word	0x200041f0
 8004a0c:	20004200 	.word	0x20004200

08004a10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <prvInsertBlockIntoFreeList+0xac>)
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e002      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x14>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d8f7      	bhi.n	8004a1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4413      	add	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d108      	bne.n	8004a52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	441a      	add	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	441a      	add	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d118      	bne.n	8004a98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d00d      	beq.n	8004a8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e008      	b.n	8004aa0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <prvInsertBlockIntoFreeList+0xb0>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e003      	b.n	8004aa0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d002      	beq.n	8004aae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	200041e4 	.word	0x200041e4
 8004ac0:	200041ec 	.word	0x200041ec

08004ac4 <__libc_init_array>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4d0d      	ldr	r5, [pc, #52]	; (8004afc <__libc_init_array+0x38>)
 8004ac8:	4c0d      	ldr	r4, [pc, #52]	; (8004b00 <__libc_init_array+0x3c>)
 8004aca:	1b64      	subs	r4, r4, r5
 8004acc:	10a4      	asrs	r4, r4, #2
 8004ace:	2600      	movs	r6, #0
 8004ad0:	42a6      	cmp	r6, r4
 8004ad2:	d109      	bne.n	8004ae8 <__libc_init_array+0x24>
 8004ad4:	4d0b      	ldr	r5, [pc, #44]	; (8004b04 <__libc_init_array+0x40>)
 8004ad6:	4c0c      	ldr	r4, [pc, #48]	; (8004b08 <__libc_init_array+0x44>)
 8004ad8:	f000 fd02 	bl	80054e0 <_init>
 8004adc:	1b64      	subs	r4, r4, r5
 8004ade:	10a4      	asrs	r4, r4, #2
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	42a6      	cmp	r6, r4
 8004ae4:	d105      	bne.n	8004af2 <__libc_init_array+0x2e>
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
 8004ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aec:	4798      	blx	r3
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7ee      	b.n	8004ad0 <__libc_init_array+0xc>
 8004af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af6:	4798      	blx	r3
 8004af8:	3601      	adds	r6, #1
 8004afa:	e7f2      	b.n	8004ae2 <__libc_init_array+0x1e>
 8004afc:	08005614 	.word	0x08005614
 8004b00:	08005614 	.word	0x08005614
 8004b04:	08005614 	.word	0x08005614
 8004b08:	08005618 	.word	0x08005618

08004b0c <memcpy>:
 8004b0c:	440a      	add	r2, r1
 8004b0e:	4291      	cmp	r1, r2
 8004b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b14:	d100      	bne.n	8004b18 <memcpy+0xc>
 8004b16:	4770      	bx	lr
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b22:	4291      	cmp	r1, r2
 8004b24:	d1f9      	bne.n	8004b1a <memcpy+0xe>
 8004b26:	bd10      	pop	{r4, pc}

08004b28 <memset>:
 8004b28:	4402      	add	r2, r0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <memset+0xa>
 8004b30:	4770      	bx	lr
 8004b32:	f803 1b01 	strb.w	r1, [r3], #1
 8004b36:	e7f9      	b.n	8004b2c <memset+0x4>

08004b38 <_puts_r>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	460e      	mov	r6, r1
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	b118      	cbz	r0, 8004b48 <_puts_r+0x10>
 8004b40:	6983      	ldr	r3, [r0, #24]
 8004b42:	b90b      	cbnz	r3, 8004b48 <_puts_r+0x10>
 8004b44:	f000 fa48 	bl	8004fd8 <__sinit>
 8004b48:	69ab      	ldr	r3, [r5, #24]
 8004b4a:	68ac      	ldr	r4, [r5, #8]
 8004b4c:	b913      	cbnz	r3, 8004b54 <_puts_r+0x1c>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 fa42 	bl	8004fd8 <__sinit>
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <_puts_r+0xd0>)
 8004b56:	429c      	cmp	r4, r3
 8004b58:	d120      	bne.n	8004b9c <_puts_r+0x64>
 8004b5a:	686c      	ldr	r4, [r5, #4]
 8004b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b5e:	07db      	lsls	r3, r3, #31
 8004b60:	d405      	bmi.n	8004b6e <_puts_r+0x36>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	0598      	lsls	r0, r3, #22
 8004b66:	d402      	bmi.n	8004b6e <_puts_r+0x36>
 8004b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b6a:	f000 fad3 	bl	8005114 <__retarget_lock_acquire_recursive>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	0719      	lsls	r1, r3, #28
 8004b72:	d51d      	bpl.n	8004bb0 <_puts_r+0x78>
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	b1db      	cbz	r3, 8004bb0 <_puts_r+0x78>
 8004b78:	3e01      	subs	r6, #1
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	bb39      	cbnz	r1, 8004bd6 <_puts_r+0x9e>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da38      	bge.n	8004bfc <_puts_r+0xc4>
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	210a      	movs	r1, #10
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f000 f848 	bl	8004c24 <__swbuf_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d011      	beq.n	8004bbc <_puts_r+0x84>
 8004b98:	250a      	movs	r5, #10
 8004b9a:	e011      	b.n	8004bc0 <_puts_r+0x88>
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <_puts_r+0xd4>)
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d101      	bne.n	8004ba6 <_puts_r+0x6e>
 8004ba2:	68ac      	ldr	r4, [r5, #8]
 8004ba4:	e7da      	b.n	8004b5c <_puts_r+0x24>
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <_puts_r+0xd8>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	bf08      	it	eq
 8004bac:	68ec      	ldreq	r4, [r5, #12]
 8004bae:	e7d5      	b.n	8004b5c <_puts_r+0x24>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f888 	bl	8004cc8 <__swsetup_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d0dd      	beq.n	8004b78 <_puts_r+0x40>
 8004bbc:	f04f 35ff 	mov.w	r5, #4294967295
 8004bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bc2:	07da      	lsls	r2, r3, #31
 8004bc4:	d405      	bmi.n	8004bd2 <_puts_r+0x9a>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	059b      	lsls	r3, r3, #22
 8004bca:	d402      	bmi.n	8004bd2 <_puts_r+0x9a>
 8004bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bce:	f000 faa2 	bl	8005116 <__retarget_lock_release_recursive>
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da04      	bge.n	8004be4 <_puts_r+0xac>
 8004bda:	69a2      	ldr	r2, [r4, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	dc06      	bgt.n	8004bee <_puts_r+0xb6>
 8004be0:	290a      	cmp	r1, #10
 8004be2:	d004      	beq.n	8004bee <_puts_r+0xb6>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	7019      	strb	r1, [r3, #0]
 8004bec:	e7c5      	b.n	8004b7a <_puts_r+0x42>
 8004bee:	4622      	mov	r2, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f000 f817 	bl	8004c24 <__swbuf_r>
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d1bf      	bne.n	8004b7a <_puts_r+0x42>
 8004bfa:	e7df      	b.n	8004bbc <_puts_r+0x84>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	250a      	movs	r5, #10
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	6022      	str	r2, [r4, #0]
 8004c04:	701d      	strb	r5, [r3, #0]
 8004c06:	e7db      	b.n	8004bc0 <_puts_r+0x88>
 8004c08:	080055d4 	.word	0x080055d4
 8004c0c:	080055f4 	.word	0x080055f4
 8004c10:	080055b4 	.word	0x080055b4

08004c14 <puts>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <puts+0xc>)
 8004c16:	4601      	mov	r1, r0
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f7ff bf8d 	b.w	8004b38 <_puts_r>
 8004c1e:	bf00      	nop
 8004c20:	20000014 	.word	0x20000014

08004c24 <__swbuf_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	b118      	cbz	r0, 8004c36 <__swbuf_r+0x12>
 8004c2e:	6983      	ldr	r3, [r0, #24]
 8004c30:	b90b      	cbnz	r3, 8004c36 <__swbuf_r+0x12>
 8004c32:	f000 f9d1 	bl	8004fd8 <__sinit>
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <__swbuf_r+0x98>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d12b      	bne.n	8004c94 <__swbuf_r+0x70>
 8004c3c:	686c      	ldr	r4, [r5, #4]
 8004c3e:	69a3      	ldr	r3, [r4, #24]
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	071a      	lsls	r2, r3, #28
 8004c46:	d52f      	bpl.n	8004ca8 <__swbuf_r+0x84>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	b36b      	cbz	r3, 8004ca8 <__swbuf_r+0x84>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	1ac0      	subs	r0, r0, r3
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	b2f6      	uxtb	r6, r6
 8004c56:	4283      	cmp	r3, r0
 8004c58:	4637      	mov	r7, r6
 8004c5a:	dc04      	bgt.n	8004c66 <__swbuf_r+0x42>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f926 	bl	8004eb0 <_fflush_r>
 8004c64:	bb30      	cbnz	r0, 8004cb4 <__swbuf_r+0x90>
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60a3      	str	r3, [r4, #8]
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	701e      	strb	r6, [r3, #0]
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	3001      	adds	r0, #1
 8004c78:	4283      	cmp	r3, r0
 8004c7a:	d004      	beq.n	8004c86 <__swbuf_r+0x62>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	07db      	lsls	r3, r3, #31
 8004c80:	d506      	bpl.n	8004c90 <__swbuf_r+0x6c>
 8004c82:	2e0a      	cmp	r6, #10
 8004c84:	d104      	bne.n	8004c90 <__swbuf_r+0x6c>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f911 	bl	8004eb0 <_fflush_r>
 8004c8e:	b988      	cbnz	r0, 8004cb4 <__swbuf_r+0x90>
 8004c90:	4638      	mov	r0, r7
 8004c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <__swbuf_r+0x9c>)
 8004c96:	429c      	cmp	r4, r3
 8004c98:	d101      	bne.n	8004c9e <__swbuf_r+0x7a>
 8004c9a:	68ac      	ldr	r4, [r5, #8]
 8004c9c:	e7cf      	b.n	8004c3e <__swbuf_r+0x1a>
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <__swbuf_r+0xa0>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	bf08      	it	eq
 8004ca4:	68ec      	ldreq	r4, [r5, #12]
 8004ca6:	e7ca      	b.n	8004c3e <__swbuf_r+0x1a>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f80c 	bl	8004cc8 <__swsetup_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d0cb      	beq.n	8004c4c <__swbuf_r+0x28>
 8004cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb8:	e7ea      	b.n	8004c90 <__swbuf_r+0x6c>
 8004cba:	bf00      	nop
 8004cbc:	080055d4 	.word	0x080055d4
 8004cc0:	080055f4 	.word	0x080055f4
 8004cc4:	080055b4 	.word	0x080055b4

08004cc8 <__swsetup_r>:
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <__swsetup_r+0xcc>)
 8004cca:	b570      	push	{r4, r5, r6, lr}
 8004ccc:	681d      	ldr	r5, [r3, #0]
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b125      	cbz	r5, 8004cde <__swsetup_r+0x16>
 8004cd4:	69ab      	ldr	r3, [r5, #24]
 8004cd6:	b913      	cbnz	r3, 8004cde <__swsetup_r+0x16>
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f97d 	bl	8004fd8 <__sinit>
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <__swsetup_r+0xd0>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d10f      	bne.n	8004d04 <__swsetup_r+0x3c>
 8004ce4:	686c      	ldr	r4, [r5, #4]
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cec:	0719      	lsls	r1, r3, #28
 8004cee:	d42c      	bmi.n	8004d4a <__swsetup_r+0x82>
 8004cf0:	06dd      	lsls	r5, r3, #27
 8004cf2:	d411      	bmi.n	8004d18 <__swsetup_r+0x50>
 8004cf4:	2309      	movs	r3, #9
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	e03e      	b.n	8004d82 <__swsetup_r+0xba>
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <__swsetup_r+0xd4>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d101      	bne.n	8004d0e <__swsetup_r+0x46>
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	e7eb      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <__swsetup_r+0xd8>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	bf08      	it	eq
 8004d14:	68ec      	ldreq	r4, [r5, #12]
 8004d16:	e7e6      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d18:	0758      	lsls	r0, r3, #29
 8004d1a:	d512      	bpl.n	8004d42 <__swsetup_r+0x7a>
 8004d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d1e:	b141      	cbz	r1, 8004d32 <__swsetup_r+0x6a>
 8004d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d24:	4299      	cmp	r1, r3
 8004d26:	d002      	beq.n	8004d2e <__swsetup_r+0x66>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 fa59 	bl	80051e0 <_free_r>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6363      	str	r3, [r4, #52]	; 0x34
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	b94b      	cbnz	r3, 8004d62 <__swsetup_r+0x9a>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	d003      	beq.n	8004d62 <__swsetup_r+0x9a>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f9ff 	bl	8005160 <__smakebuf_r>
 8004d62:	89a0      	ldrh	r0, [r4, #12]
 8004d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d68:	f010 0301 	ands.w	r3, r0, #1
 8004d6c:	d00a      	beq.n	8004d84 <__swsetup_r+0xbc>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	6963      	ldr	r3, [r4, #20]
 8004d74:	425b      	negs	r3, r3
 8004d76:	61a3      	str	r3, [r4, #24]
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	b943      	cbnz	r3, 8004d8e <__swsetup_r+0xc6>
 8004d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d80:	d1ba      	bne.n	8004cf8 <__swsetup_r+0x30>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	0781      	lsls	r1, r0, #30
 8004d86:	bf58      	it	pl
 8004d88:	6963      	ldrpl	r3, [r4, #20]
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	e7f4      	b.n	8004d78 <__swsetup_r+0xb0>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7f7      	b.n	8004d82 <__swsetup_r+0xba>
 8004d92:	bf00      	nop
 8004d94:	20000014 	.word	0x20000014
 8004d98:	080055d4 	.word	0x080055d4
 8004d9c:	080055f4 	.word	0x080055f4
 8004da0:	080055b4 	.word	0x080055b4

08004da4 <__sflush_r>:
 8004da4:	898a      	ldrh	r2, [r1, #12]
 8004da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	0710      	lsls	r0, r2, #28
 8004dae:	460c      	mov	r4, r1
 8004db0:	d458      	bmi.n	8004e64 <__sflush_r+0xc0>
 8004db2:	684b      	ldr	r3, [r1, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc05      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d0f9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	d032      	beq.n	8004e3c <__sflush_r+0x98>
 8004dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	075a      	lsls	r2, r3, #29
 8004ddc:	d505      	bpl.n	8004dea <__sflush_r+0x46>
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	1ac0      	subs	r0, r0, r3
 8004de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de4:	b10b      	cbz	r3, 8004dea <__sflush_r+0x46>
 8004de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de8:	1ac0      	subs	r0, r0, r3
 8004dea:	2300      	movs	r3, #0
 8004dec:	4602      	mov	r2, r0
 8004dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df0:	6a21      	ldr	r1, [r4, #32]
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	d106      	bne.n	8004e0a <__sflush_r+0x66>
 8004dfc:	6829      	ldr	r1, [r5, #0]
 8004dfe:	291d      	cmp	r1, #29
 8004e00:	d82c      	bhi.n	8004e5c <__sflush_r+0xb8>
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <__sflush_r+0x108>)
 8004e04:	40ca      	lsrs	r2, r1
 8004e06:	07d6      	lsls	r6, r2, #31
 8004e08:	d528      	bpl.n	8004e5c <__sflush_r+0xb8>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6062      	str	r2, [r4, #4]
 8004e0e:	04d9      	lsls	r1, r3, #19
 8004e10:	6922      	ldr	r2, [r4, #16]
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	d504      	bpl.n	8004e20 <__sflush_r+0x7c>
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	d101      	bne.n	8004e1e <__sflush_r+0x7a>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b903      	cbnz	r3, 8004e20 <__sflush_r+0x7c>
 8004e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d0ca      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	d002      	beq.n	8004e36 <__sflush_r+0x92>
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f9d5 	bl	80051e0 <_free_r>
 8004e36:	2000      	movs	r0, #0
 8004e38:	6360      	str	r0, [r4, #52]	; 0x34
 8004e3a:	e7c1      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c41      	adds	r1, r0, #1
 8004e46:	d1c7      	bne.n	8004dd8 <__sflush_r+0x34>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c4      	beq.n	8004dd8 <__sflush_r+0x34>
 8004e4e:	2b1d      	cmp	r3, #29
 8004e50:	d001      	beq.n	8004e56 <__sflush_r+0xb2>
 8004e52:	2b16      	cmp	r3, #22
 8004e54:	d101      	bne.n	8004e5a <__sflush_r+0xb6>
 8004e56:	602f      	str	r7, [r5, #0]
 8004e58:	e7b1      	b.n	8004dbe <__sflush_r+0x1a>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	e7ad      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e64:	690f      	ldr	r7, [r1, #16]
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	d0a9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e6a:	0793      	lsls	r3, r2, #30
 8004e6c:	680e      	ldr	r6, [r1, #0]
 8004e6e:	bf08      	it	eq
 8004e70:	694b      	ldreq	r3, [r1, #20]
 8004e72:	600f      	str	r7, [r1, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2300      	movne	r3, #0
 8004e78:	eba6 0807 	sub.w	r8, r6, r7
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	dd9c      	ble.n	8004dbe <__sflush_r+0x1a>
 8004e84:	6a21      	ldr	r1, [r4, #32]
 8004e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e88:	4643      	mov	r3, r8
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	2800      	cmp	r0, #0
 8004e92:	dc06      	bgt.n	8004ea2 <__sflush_r+0xfe>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e78e      	b.n	8004dc0 <__sflush_r+0x1c>
 8004ea2:	4407      	add	r7, r0
 8004ea4:	eba8 0800 	sub.w	r8, r8, r0
 8004ea8:	e7e9      	b.n	8004e7e <__sflush_r+0xda>
 8004eaa:	bf00      	nop
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_fflush_r+0x10>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	b118      	cbz	r0, 8004eca <_fflush_r+0x1a>
 8004ec2:	6983      	ldr	r3, [r0, #24]
 8004ec4:	b90b      	cbnz	r3, 8004eca <_fflush_r+0x1a>
 8004ec6:	f000 f887 	bl	8004fd8 <__sinit>
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <_fflush_r+0x6c>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	d11b      	bne.n	8004f08 <_fflush_r+0x58>
 8004ed0:	686c      	ldr	r4, [r5, #4]
 8004ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ef      	beq.n	8004eba <_fflush_r+0xa>
 8004eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004edc:	07d0      	lsls	r0, r2, #31
 8004ede:	d404      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee0:	0599      	lsls	r1, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee6:	f000 f915 	bl	8005114 <__retarget_lock_acquire_recursive>
 8004eea:	4628      	mov	r0, r5
 8004eec:	4621      	mov	r1, r4
 8004eee:	f7ff ff59 	bl	8004da4 <__sflush_r>
 8004ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef4:	07da      	lsls	r2, r3, #31
 8004ef6:	4605      	mov	r5, r0
 8004ef8:	d4e0      	bmi.n	8004ebc <_fflush_r+0xc>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	d4dd      	bmi.n	8004ebc <_fflush_r+0xc>
 8004f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f02:	f000 f908 	bl	8005116 <__retarget_lock_release_recursive>
 8004f06:	e7d9      	b.n	8004ebc <_fflush_r+0xc>
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <_fflush_r+0x70>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	d101      	bne.n	8004f12 <_fflush_r+0x62>
 8004f0e:	68ac      	ldr	r4, [r5, #8]
 8004f10:	e7df      	b.n	8004ed2 <_fflush_r+0x22>
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <_fflush_r+0x74>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	bf08      	it	eq
 8004f18:	68ec      	ldreq	r4, [r5, #12]
 8004f1a:	e7da      	b.n	8004ed2 <_fflush_r+0x22>
 8004f1c:	080055d4 	.word	0x080055d4
 8004f20:	080055f4 	.word	0x080055f4
 8004f24:	080055b4 	.word	0x080055b4

08004f28 <std>:
 8004f28:	2300      	movs	r3, #0
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f36:	6083      	str	r3, [r0, #8]
 8004f38:	8181      	strh	r1, [r0, #12]
 8004f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f3c:	81c2      	strh	r2, [r0, #14]
 8004f3e:	6183      	str	r3, [r0, #24]
 8004f40:	4619      	mov	r1, r3
 8004f42:	2208      	movs	r2, #8
 8004f44:	305c      	adds	r0, #92	; 0x5c
 8004f46:	f7ff fdef 	bl	8004b28 <memset>
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <std+0x38>)
 8004f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <std+0x3c>)
 8004f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <std+0x40>)
 8004f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <std+0x44>)
 8004f58:	6224      	str	r4, [r4, #32]
 8004f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	08005355 	.word	0x08005355
 8004f64:	08005377 	.word	0x08005377
 8004f68:	080053af 	.word	0x080053af
 8004f6c:	080053d3 	.word	0x080053d3

08004f70 <_cleanup_r>:
 8004f70:	4901      	ldr	r1, [pc, #4]	; (8004f78 <_cleanup_r+0x8>)
 8004f72:	f000 b8af 	b.w	80050d4 <_fwalk_reent>
 8004f76:	bf00      	nop
 8004f78:	08004eb1 	.word	0x08004eb1

08004f7c <__sfmoreglue>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	1e4a      	subs	r2, r1, #1
 8004f80:	2568      	movs	r5, #104	; 0x68
 8004f82:	4355      	muls	r5, r2
 8004f84:	460e      	mov	r6, r1
 8004f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f8a:	f000 f979 	bl	8005280 <_malloc_r>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	b140      	cbz	r0, 8004fa4 <__sfmoreglue+0x28>
 8004f92:	2100      	movs	r1, #0
 8004f94:	e9c0 1600 	strd	r1, r6, [r0]
 8004f98:	300c      	adds	r0, #12
 8004f9a:	60a0      	str	r0, [r4, #8]
 8004f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fa0:	f7ff fdc2 	bl	8004b28 <memset>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <__sfp_lock_acquire>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sfp_lock_acquire+0x8>)
 8004faa:	f000 b8b3 	b.w	8005114 <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20004290 	.word	0x20004290

08004fb4 <__sfp_lock_release>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sfp_lock_release+0x8>)
 8004fb6:	f000 b8ae 	b.w	8005116 <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20004290 	.word	0x20004290

08004fc0 <__sinit_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sinit_lock_acquire+0x8>)
 8004fc2:	f000 b8a7 	b.w	8005114 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	2000428b 	.word	0x2000428b

08004fcc <__sinit_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sinit_lock_release+0x8>)
 8004fce:	f000 b8a2 	b.w	8005116 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	2000428b 	.word	0x2000428b

08004fd8 <__sinit>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff fff0 	bl	8004fc0 <__sinit_lock_acquire>
 8004fe0:	69a3      	ldr	r3, [r4, #24]
 8004fe2:	b11b      	cbz	r3, 8004fec <__sinit+0x14>
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f7ff bff0 	b.w	8004fcc <__sinit_lock_release>
 8004fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <__sinit+0x68>)
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <__sinit+0x6c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	bf04      	itt	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	61a3      	streq	r3, [r4, #24]
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f820 	bl	8005048 <__sfp>
 8005008:	6060      	str	r0, [r4, #4]
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f81c 	bl	8005048 <__sfp>
 8005010:	60a0      	str	r0, [r4, #8]
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f818 	bl	8005048 <__sfp>
 8005018:	2200      	movs	r2, #0
 800501a:	60e0      	str	r0, [r4, #12]
 800501c:	2104      	movs	r1, #4
 800501e:	6860      	ldr	r0, [r4, #4]
 8005020:	f7ff ff82 	bl	8004f28 <std>
 8005024:	68a0      	ldr	r0, [r4, #8]
 8005026:	2201      	movs	r2, #1
 8005028:	2109      	movs	r1, #9
 800502a:	f7ff ff7d 	bl	8004f28 <std>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	2202      	movs	r2, #2
 8005032:	2112      	movs	r1, #18
 8005034:	f7ff ff78 	bl	8004f28 <std>
 8005038:	2301      	movs	r3, #1
 800503a:	61a3      	str	r3, [r4, #24]
 800503c:	e7d2      	b.n	8004fe4 <__sinit+0xc>
 800503e:	bf00      	nop
 8005040:	080055b0 	.word	0x080055b0
 8005044:	08004f71 	.word	0x08004f71

08005048 <__sfp>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	4607      	mov	r7, r0
 800504c:	f7ff ffac 	bl	8004fa8 <__sfp_lock_acquire>
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <__sfp+0x84>)
 8005052:	681e      	ldr	r6, [r3, #0]
 8005054:	69b3      	ldr	r3, [r6, #24]
 8005056:	b913      	cbnz	r3, 800505e <__sfp+0x16>
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff ffbd 	bl	8004fd8 <__sinit>
 800505e:	3648      	adds	r6, #72	; 0x48
 8005060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	d503      	bpl.n	8005070 <__sfp+0x28>
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	b30b      	cbz	r3, 80050b0 <__sfp+0x68>
 800506c:	6836      	ldr	r6, [r6, #0]
 800506e:	e7f7      	b.n	8005060 <__sfp+0x18>
 8005070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005074:	b9d5      	cbnz	r5, 80050ac <__sfp+0x64>
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <__sfp+0x88>)
 8005078:	60e3      	str	r3, [r4, #12]
 800507a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800507e:	6665      	str	r5, [r4, #100]	; 0x64
 8005080:	f000 f847 	bl	8005112 <__retarget_lock_init_recursive>
 8005084:	f7ff ff96 	bl	8004fb4 <__sfp_lock_release>
 8005088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800508c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	61a5      	str	r5, [r4, #24]
 8005094:	2208      	movs	r2, #8
 8005096:	4629      	mov	r1, r5
 8005098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800509c:	f7ff fd44 	bl	8004b28 <memset>
 80050a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050a8:	4620      	mov	r0, r4
 80050aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ac:	3468      	adds	r4, #104	; 0x68
 80050ae:	e7d9      	b.n	8005064 <__sfp+0x1c>
 80050b0:	2104      	movs	r1, #4
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff ff62 	bl	8004f7c <__sfmoreglue>
 80050b8:	4604      	mov	r4, r0
 80050ba:	6030      	str	r0, [r6, #0]
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1d5      	bne.n	800506c <__sfp+0x24>
 80050c0:	f7ff ff78 	bl	8004fb4 <__sfp_lock_release>
 80050c4:	230c      	movs	r3, #12
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	e7ee      	b.n	80050a8 <__sfp+0x60>
 80050ca:	bf00      	nop
 80050cc:	080055b0 	.word	0x080055b0
 80050d0:	ffff0001 	.word	0xffff0001

080050d4 <_fwalk_reent>:
 80050d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	4606      	mov	r6, r0
 80050da:	4688      	mov	r8, r1
 80050dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050e0:	2700      	movs	r7, #0
 80050e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050e6:	f1b9 0901 	subs.w	r9, r9, #1
 80050ea:	d505      	bpl.n	80050f8 <_fwalk_reent+0x24>
 80050ec:	6824      	ldr	r4, [r4, #0]
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	d1f7      	bne.n	80050e2 <_fwalk_reent+0xe>
 80050f2:	4638      	mov	r0, r7
 80050f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f8:	89ab      	ldrh	r3, [r5, #12]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d907      	bls.n	800510e <_fwalk_reent+0x3a>
 80050fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005102:	3301      	adds	r3, #1
 8005104:	d003      	beq.n	800510e <_fwalk_reent+0x3a>
 8005106:	4629      	mov	r1, r5
 8005108:	4630      	mov	r0, r6
 800510a:	47c0      	blx	r8
 800510c:	4307      	orrs	r7, r0
 800510e:	3568      	adds	r5, #104	; 0x68
 8005110:	e7e9      	b.n	80050e6 <_fwalk_reent+0x12>

08005112 <__retarget_lock_init_recursive>:
 8005112:	4770      	bx	lr

08005114 <__retarget_lock_acquire_recursive>:
 8005114:	4770      	bx	lr

08005116 <__retarget_lock_release_recursive>:
 8005116:	4770      	bx	lr

08005118 <__swhatbuf_r>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	460e      	mov	r6, r1
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	2900      	cmp	r1, #0
 8005122:	b096      	sub	sp, #88	; 0x58
 8005124:	4614      	mov	r4, r2
 8005126:	461d      	mov	r5, r3
 8005128:	da07      	bge.n	800513a <__swhatbuf_r+0x22>
 800512a:	2300      	movs	r3, #0
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	89b3      	ldrh	r3, [r6, #12]
 8005130:	061a      	lsls	r2, r3, #24
 8005132:	d410      	bmi.n	8005156 <__swhatbuf_r+0x3e>
 8005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005138:	e00e      	b.n	8005158 <__swhatbuf_r+0x40>
 800513a:	466a      	mov	r2, sp
 800513c:	f000 f970 	bl	8005420 <_fstat_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	dbf2      	blt.n	800512a <__swhatbuf_r+0x12>
 8005144:	9a01      	ldr	r2, [sp, #4]
 8005146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800514a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800514e:	425a      	negs	r2, r3
 8005150:	415a      	adcs	r2, r3
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	e7ee      	b.n	8005134 <__swhatbuf_r+0x1c>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	2000      	movs	r0, #0
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	b016      	add	sp, #88	; 0x58
 800515e:	bd70      	pop	{r4, r5, r6, pc}

08005160 <__smakebuf_r>:
 8005160:	898b      	ldrh	r3, [r1, #12]
 8005162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005164:	079d      	lsls	r5, r3, #30
 8005166:	4606      	mov	r6, r0
 8005168:	460c      	mov	r4, r1
 800516a:	d507      	bpl.n	800517c <__smakebuf_r+0x1c>
 800516c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2301      	movs	r3, #1
 8005176:	6163      	str	r3, [r4, #20]
 8005178:	b002      	add	sp, #8
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	ab01      	add	r3, sp, #4
 800517e:	466a      	mov	r2, sp
 8005180:	f7ff ffca 	bl	8005118 <__swhatbuf_r>
 8005184:	9900      	ldr	r1, [sp, #0]
 8005186:	4605      	mov	r5, r0
 8005188:	4630      	mov	r0, r6
 800518a:	f000 f879 	bl	8005280 <_malloc_r>
 800518e:	b948      	cbnz	r0, 80051a4 <__smakebuf_r+0x44>
 8005190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005194:	059a      	lsls	r2, r3, #22
 8005196:	d4ef      	bmi.n	8005178 <__smakebuf_r+0x18>
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	e7e3      	b.n	800516c <__smakebuf_r+0xc>
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <__smakebuf_r+0x7c>)
 80051a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	9b00      	ldr	r3, [sp, #0]
 80051b4:	6163      	str	r3, [r4, #20]
 80051b6:	9b01      	ldr	r3, [sp, #4]
 80051b8:	6120      	str	r0, [r4, #16]
 80051ba:	b15b      	cbz	r3, 80051d4 <__smakebuf_r+0x74>
 80051bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f93f 	bl	8005444 <_isatty_r>
 80051c6:	b128      	cbz	r0, 80051d4 <__smakebuf_r+0x74>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	89a0      	ldrh	r0, [r4, #12]
 80051d6:	4305      	orrs	r5, r0
 80051d8:	81a5      	strh	r5, [r4, #12]
 80051da:	e7cd      	b.n	8005178 <__smakebuf_r+0x18>
 80051dc:	08004f71 	.word	0x08004f71

080051e0 <_free_r>:
 80051e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051e2:	2900      	cmp	r1, #0
 80051e4:	d048      	beq.n	8005278 <_free_r+0x98>
 80051e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ea:	9001      	str	r0, [sp, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f1a1 0404 	sub.w	r4, r1, #4
 80051f2:	bfb8      	it	lt
 80051f4:	18e4      	addlt	r4, r4, r3
 80051f6:	f000 f947 	bl	8005488 <__malloc_lock>
 80051fa:	4a20      	ldr	r2, [pc, #128]	; (800527c <_free_r+0x9c>)
 80051fc:	9801      	ldr	r0, [sp, #4]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	4615      	mov	r5, r2
 8005202:	b933      	cbnz	r3, 8005212 <_free_r+0x32>
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	6014      	str	r4, [r2, #0]
 8005208:	b003      	add	sp, #12
 800520a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800520e:	f000 b941 	b.w	8005494 <__malloc_unlock>
 8005212:	42a3      	cmp	r3, r4
 8005214:	d90b      	bls.n	800522e <_free_r+0x4e>
 8005216:	6821      	ldr	r1, [r4, #0]
 8005218:	1862      	adds	r2, r4, r1
 800521a:	4293      	cmp	r3, r2
 800521c:	bf04      	itt	eq
 800521e:	681a      	ldreq	r2, [r3, #0]
 8005220:	685b      	ldreq	r3, [r3, #4]
 8005222:	6063      	str	r3, [r4, #4]
 8005224:	bf04      	itt	eq
 8005226:	1852      	addeq	r2, r2, r1
 8005228:	6022      	streq	r2, [r4, #0]
 800522a:	602c      	str	r4, [r5, #0]
 800522c:	e7ec      	b.n	8005208 <_free_r+0x28>
 800522e:	461a      	mov	r2, r3
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	b10b      	cbz	r3, 8005238 <_free_r+0x58>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d9fa      	bls.n	800522e <_free_r+0x4e>
 8005238:	6811      	ldr	r1, [r2, #0]
 800523a:	1855      	adds	r5, r2, r1
 800523c:	42a5      	cmp	r5, r4
 800523e:	d10b      	bne.n	8005258 <_free_r+0x78>
 8005240:	6824      	ldr	r4, [r4, #0]
 8005242:	4421      	add	r1, r4
 8005244:	1854      	adds	r4, r2, r1
 8005246:	42a3      	cmp	r3, r4
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	d1dd      	bne.n	8005208 <_free_r+0x28>
 800524c:	681c      	ldr	r4, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	6053      	str	r3, [r2, #4]
 8005252:	4421      	add	r1, r4
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	e7d7      	b.n	8005208 <_free_r+0x28>
 8005258:	d902      	bls.n	8005260 <_free_r+0x80>
 800525a:	230c      	movs	r3, #12
 800525c:	6003      	str	r3, [r0, #0]
 800525e:	e7d3      	b.n	8005208 <_free_r+0x28>
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	1961      	adds	r1, r4, r5
 8005264:	428b      	cmp	r3, r1
 8005266:	bf04      	itt	eq
 8005268:	6819      	ldreq	r1, [r3, #0]
 800526a:	685b      	ldreq	r3, [r3, #4]
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	bf04      	itt	eq
 8005270:	1949      	addeq	r1, r1, r5
 8005272:	6021      	streq	r1, [r4, #0]
 8005274:	6054      	str	r4, [r2, #4]
 8005276:	e7c7      	b.n	8005208 <_free_r+0x28>
 8005278:	b003      	add	sp, #12
 800527a:	bd30      	pop	{r4, r5, pc}
 800527c:	20004204 	.word	0x20004204

08005280 <_malloc_r>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	1ccd      	adds	r5, r1, #3
 8005284:	f025 0503 	bic.w	r5, r5, #3
 8005288:	3508      	adds	r5, #8
 800528a:	2d0c      	cmp	r5, #12
 800528c:	bf38      	it	cc
 800528e:	250c      	movcc	r5, #12
 8005290:	2d00      	cmp	r5, #0
 8005292:	4606      	mov	r6, r0
 8005294:	db01      	blt.n	800529a <_malloc_r+0x1a>
 8005296:	42a9      	cmp	r1, r5
 8005298:	d903      	bls.n	80052a2 <_malloc_r+0x22>
 800529a:	230c      	movs	r3, #12
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	2000      	movs	r0, #0
 80052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a2:	f000 f8f1 	bl	8005488 <__malloc_lock>
 80052a6:	4921      	ldr	r1, [pc, #132]	; (800532c <_malloc_r+0xac>)
 80052a8:	680a      	ldr	r2, [r1, #0]
 80052aa:	4614      	mov	r4, r2
 80052ac:	b99c      	cbnz	r4, 80052d6 <_malloc_r+0x56>
 80052ae:	4f20      	ldr	r7, [pc, #128]	; (8005330 <_malloc_r+0xb0>)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	b923      	cbnz	r3, 80052be <_malloc_r+0x3e>
 80052b4:	4621      	mov	r1, r4
 80052b6:	4630      	mov	r0, r6
 80052b8:	f000 f83c 	bl	8005334 <_sbrk_r>
 80052bc:	6038      	str	r0, [r7, #0]
 80052be:	4629      	mov	r1, r5
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 f837 	bl	8005334 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d123      	bne.n	8005312 <_malloc_r+0x92>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 f8e0 	bl	8005494 <__malloc_unlock>
 80052d4:	e7e3      	b.n	800529e <_malloc_r+0x1e>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	1b5b      	subs	r3, r3, r5
 80052da:	d417      	bmi.n	800530c <_malloc_r+0x8c>
 80052dc:	2b0b      	cmp	r3, #11
 80052de:	d903      	bls.n	80052e8 <_malloc_r+0x68>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	441c      	add	r4, r3
 80052e4:	6025      	str	r5, [r4, #0]
 80052e6:	e004      	b.n	80052f2 <_malloc_r+0x72>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	42a2      	cmp	r2, r4
 80052ec:	bf0c      	ite	eq
 80052ee:	600b      	streq	r3, [r1, #0]
 80052f0:	6053      	strne	r3, [r2, #4]
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f8ce 	bl	8005494 <__malloc_unlock>
 80052f8:	f104 000b 	add.w	r0, r4, #11
 80052fc:	1d23      	adds	r3, r4, #4
 80052fe:	f020 0007 	bic.w	r0, r0, #7
 8005302:	1ac2      	subs	r2, r0, r3
 8005304:	d0cc      	beq.n	80052a0 <_malloc_r+0x20>
 8005306:	1a1b      	subs	r3, r3, r0
 8005308:	50a3      	str	r3, [r4, r2]
 800530a:	e7c9      	b.n	80052a0 <_malloc_r+0x20>
 800530c:	4622      	mov	r2, r4
 800530e:	6864      	ldr	r4, [r4, #4]
 8005310:	e7cc      	b.n	80052ac <_malloc_r+0x2c>
 8005312:	1cc4      	adds	r4, r0, #3
 8005314:	f024 0403 	bic.w	r4, r4, #3
 8005318:	42a0      	cmp	r0, r4
 800531a:	d0e3      	beq.n	80052e4 <_malloc_r+0x64>
 800531c:	1a21      	subs	r1, r4, r0
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f808 	bl	8005334 <_sbrk_r>
 8005324:	3001      	adds	r0, #1
 8005326:	d1dd      	bne.n	80052e4 <_malloc_r+0x64>
 8005328:	e7cf      	b.n	80052ca <_malloc_r+0x4a>
 800532a:	bf00      	nop
 800532c:	20004204 	.word	0x20004204
 8005330:	20004208 	.word	0x20004208

08005334 <_sbrk_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d06      	ldr	r5, [pc, #24]	; (8005350 <_sbrk_r+0x1c>)
 8005338:	2300      	movs	r3, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f000 f8c0 	bl	80054c4 <_sbrk>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_sbrk_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_sbrk_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20004294 	.word	0x20004294

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f8a0 	bl	80054a0 <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	; 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__swrite>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	05db      	lsls	r3, r3, #23
 8005380:	4605      	mov	r5, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d505      	bpl.n	8005394 <__swrite+0x1e>
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2302      	movs	r3, #2
 800538e:	2200      	movs	r2, #0
 8005390:	f000 f868 	bl	8005464 <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	4632      	mov	r2, r6
 80053a2:	463b      	mov	r3, r7
 80053a4:	4628      	mov	r0, r5
 80053a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	f000 b817 	b.w	80053dc <_write_r>

080053ae <__sseek>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 f855 	bl	8005464 <_lseek_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	bf15      	itete	ne
 80053c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053ca:	81a3      	strheq	r3, [r4, #12]
 80053cc:	bf18      	it	ne
 80053ce:	81a3      	strhne	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__sclose>:
 80053d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d6:	f000 b813 	b.w	8005400 <_close_r>
	...

080053dc <_write_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d07      	ldr	r5, [pc, #28]	; (80053fc <_write_r+0x20>)
 80053e0:	4604      	mov	r4, r0
 80053e2:	4608      	mov	r0, r1
 80053e4:	4611      	mov	r1, r2
 80053e6:	2200      	movs	r2, #0
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f7fb fb39 	bl	8000a62 <_write>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_write_r+0x1e>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_write_r+0x1e>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20004294 	.word	0x20004294

08005400 <_close_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	; (800541c <_close_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb fb45 	bl	8000a9a <_close>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_close_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_close_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	20004294 	.word	0x20004294

08005420 <_fstat_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4d07      	ldr	r5, [pc, #28]	; (8005440 <_fstat_r+0x20>)
 8005424:	2300      	movs	r3, #0
 8005426:	4604      	mov	r4, r0
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	f7fb fb40 	bl	8000ab2 <_fstat>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d102      	bne.n	800543c <_fstat_r+0x1c>
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	b103      	cbz	r3, 800543c <_fstat_r+0x1c>
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	bf00      	nop
 8005440:	20004294 	.word	0x20004294

08005444 <_isatty_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d06      	ldr	r5, [pc, #24]	; (8005460 <_isatty_r+0x1c>)
 8005448:	2300      	movs	r3, #0
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fb3f 	bl	8000ad2 <_isatty>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_isatty_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_isatty_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20004294 	.word	0x20004294

08005464 <_lseek_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	; (8005484 <_lseek_r+0x20>)
 8005468:	4604      	mov	r4, r0
 800546a:	4608      	mov	r0, r1
 800546c:	4611      	mov	r1, r2
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fb38 	bl	8000ae8 <_lseek>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_lseek_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_lseek_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20004294 	.word	0x20004294

08005488 <__malloc_lock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_lock+0x8>)
 800548a:	f7ff be43 	b.w	8005114 <__retarget_lock_acquire_recursive>
 800548e:	bf00      	nop
 8005490:	2000428c 	.word	0x2000428c

08005494 <__malloc_unlock>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__malloc_unlock+0x8>)
 8005496:	f7ff be3e 	b.w	8005116 <__retarget_lock_release_recursive>
 800549a:	bf00      	nop
 800549c:	2000428c 	.word	0x2000428c

080054a0 <_read_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d07      	ldr	r5, [pc, #28]	; (80054c0 <_read_r+0x20>)
 80054a4:	4604      	mov	r4, r0
 80054a6:	4608      	mov	r0, r1
 80054a8:	4611      	mov	r1, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	602a      	str	r2, [r5, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f7fb faba 	bl	8000a28 <_read>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_read_r+0x1e>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_read_r+0x1e>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	20004294 	.word	0x20004294

080054c4 <_sbrk>:
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <_sbrk+0x14>)
 80054c6:	6819      	ldr	r1, [r3, #0]
 80054c8:	4602      	mov	r2, r0
 80054ca:	b909      	cbnz	r1, 80054d0 <_sbrk+0xc>
 80054cc:	4903      	ldr	r1, [pc, #12]	; (80054dc <_sbrk+0x18>)
 80054ce:	6019      	str	r1, [r3, #0]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	4402      	add	r2, r0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	4770      	bx	lr
 80054d8:	2000420c 	.word	0x2000420c
 80054dc:	20004298 	.word	0x20004298

080054e0 <_init>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr

080054ec <_fini>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

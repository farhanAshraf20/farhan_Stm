
morsecode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005774  08005774  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800577c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08005788  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08005788  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022cb  00000000  00000000  00033a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00035cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270bf  00000000  00000000  00037af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ec5  00000000  00000000  0005ebb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4609  00000000  00000000  00070a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040cc  00000000  00000000  001650d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005594 	.word	0x08005594

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005594 	.word	0x08005594

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fff7 	bl	80014b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f876 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f962 	bl	8000794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004d0:	f000 f912 	bl	80006f8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80004d4:	f000 f940 	bl	8000758 <MX_DMA_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8c0 	bl	800065c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, &uart_bfr, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	492c      	ldr	r1, [pc, #176]	; (8000590 <main+0xd0>)
 80004e0:	482c      	ldr	r0, [pc, #176]	; (8000594 <main+0xd4>)
 80004e2:	f003 fe29 	bl	8004138 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // The codes for user interface

		  HAL_UART_Transmit(&huart1, "\r\n", 2, 1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	2202      	movs	r2, #2
 80004ec:	492a      	ldr	r1, [pc, #168]	; (8000598 <main+0xd8>)
 80004ee:	4829      	ldr	r0, [pc, #164]	; (8000594 <main+0xd4>)
 80004f0:	f003 fd8e 	bl	8004010 <HAL_UART_Transmit>

		  HAL_UART_Transmit(&huart1,"----------------------------------------\r\n", 42, 1000);
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	222a      	movs	r2, #42	; 0x2a
 80004fa:	4928      	ldr	r1, [pc, #160]	; (800059c <main+0xdc>)
 80004fc:	4825      	ldr	r0, [pc, #148]	; (8000594 <main+0xd4>)
 80004fe:	f003 fd87 	bl	8004010 <HAL_UART_Transmit>

		  HAL_UART_Transmit(&huart1, "Please type your first initial\r\n", 32,1000);
 8000502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000506:	2220      	movs	r2, #32
 8000508:	4925      	ldr	r1, [pc, #148]	; (80005a0 <main+0xe0>)
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <main+0xd4>)
 800050c:	f003 fd80 	bl	8004010 <HAL_UART_Transmit>

		  HAL_UART_Transmit(&huart1,"Use only capital letter and 1 character:\r\n", 42, 1000);
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	222a      	movs	r2, #42	; 0x2a
 8000516:	4923      	ldr	r1, [pc, #140]	; (80005a4 <main+0xe4>)
 8000518:	481e      	ldr	r0, [pc, #120]	; (8000594 <main+0xd4>)
 800051a:	f003 fd79 	bl	8004010 <HAL_UART_Transmit>
		  HAL_UART_Receive_DMA(&huart1, uart_bfr, 1);
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <main+0xd0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	481b      	ldr	r0, [pc, #108]	; (8000594 <main+0xd4>)
 8000528:	f003 fe06 	bl	8004138 <HAL_UART_Receive_DMA>
		  checkLetter(uart_bfr); // Check the first initial if it is between [A-Z]
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <main+0xd0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fdbd 	bl	80010b0 <checkLetter>

		  init1 = cmd; // Store the character if it is between [A-Z]
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <main+0xe8>)
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0xec>)
 800053c:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,"----------------------------------------\r\n", 42, 1000);
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	222a      	movs	r2, #42	; 0x2a
 8000544:	4915      	ldr	r1, [pc, #84]	; (800059c <main+0xdc>)
 8000546:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0xd4>)
 8000548:	f003 fd62 	bl	8004010 <HAL_UART_Transmit>


		  HAL_UART_Transmit(&huart1, "Please type your second initial\r\n", 33,1000);
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	2221      	movs	r2, #33	; 0x21
 8000552:	4917      	ldr	r1, [pc, #92]	; (80005b0 <main+0xf0>)
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0xd4>)
 8000556:	f003 fd5b 	bl	8004010 <HAL_UART_Transmit>

		  HAL_UART_Transmit(&huart1,"Use only capital letter and 1 character:\r\n", 42, 1000);
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	222a      	movs	r2, #42	; 0x2a
 8000560:	4910      	ldr	r1, [pc, #64]	; (80005a4 <main+0xe4>)
 8000562:	480c      	ldr	r0, [pc, #48]	; (8000594 <main+0xd4>)
 8000564:	f003 fd54 	bl	8004010 <HAL_UART_Transmit>


		  HAL_UART_Receive_DMA(&huart1, uart_bfr, 1);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <main+0xd0>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2201      	movs	r2, #1
 800056e:	4619      	mov	r1, r3
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0xd4>)
 8000572:	f003 fde1 	bl	8004138 <HAL_UART_Receive_DMA>
		  checkLetter(uart_bfr); // Check the second initial if it is between [A-Z]
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <main+0xd0>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fd98 	bl	80010b0 <checkLetter>

		  init2 = cmd; // Store the character if it is between [A-Z]
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0xe8>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0xf4>)
 8000586:	701a      	strb	r2, [r3, #0]

		  start(); // Indicate 2 stored initials with LED on board
 8000588:	f000 fb4a 	bl	8000c20 <start>
  {
 800058c:	e7ab      	b.n	80004e6 <main+0x26>
 800058e:	bf00      	nop
 8000590:	2000002c 	.word	0x2000002c
 8000594:	2000007c 	.word	0x2000007c
 8000598:	080055ac 	.word	0x080055ac
 800059c:	080055b0 	.word	0x080055b0
 80005a0:	080055dc 	.word	0x080055dc
 80005a4:	08005600 	.word	0x08005600
 80005a8:	2000014d 	.word	0x2000014d
 80005ac:	20000032 	.word	0x20000032
 80005b0:	0800562c 	.word	0x0800562c
 80005b4:	2000014c 	.word	0x2000014c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 ffdc 	bl	8005584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f001 fd7f 	bl	80020e0 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 fdb4 	bl	8001154 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ec:	2310      	movs	r3, #16
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f8:	2360      	movs	r3, #96	; 0x60
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000600:	2301      	movs	r3, #1
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000604:	2301      	movs	r3, #1
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000608:	2328      	movs	r3, #40	; 0x28
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060c:	2307      	movs	r3, #7
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fdb5 	bl	800218c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000628:	f000 fd94 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	2104      	movs	r1, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f987 	bl	8002958 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000650:	f000 fd80 	bl	8001154 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3758      	adds	r7, #88	; 0x58
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM2_Init+0x98>)
 800067c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_TIM2_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000690:	f04f 32ff 	mov.w	r2, #4294967295
 8000694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM2_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006a4:	f003 f81a 	bl	80036dc <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006ae:	f000 fd51 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006c0:	f003 f982 	bl	80039c8 <HAL_TIM_ConfigClockSource>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ca:	f000 fd43 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006dc:	f003 fba4 	bl	8003e28 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006e6:	f000 fd35 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000100 	.word	0x20000100

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART1_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x58>)
 800073c:	f003 fc1a 	bl	8003f74 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 fd05 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000007c 	.word	0x2000007c
 8000754:	40013800 	.word	0x40013800

08000758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_DMA_Init+0x38>)
 8000760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <MX_DMA_Init+0x38>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6493      	str	r3, [r2, #72]	; 0x48
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_DMA_Init+0x38>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200f      	movs	r0, #15
 800077c:	f001 f80f 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000780:	200f      	movs	r0, #15
 8000782:	f001 f828 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4bbc      	ldr	r3, [pc, #752]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4abb      	ldr	r2, [pc, #748]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4bb9      	ldr	r3, [pc, #740]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4bb6      	ldr	r3, [pc, #728]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4ab5      	ldr	r2, [pc, #724]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4bb3      	ldr	r3, [pc, #716]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4bb0      	ldr	r3, [pc, #704]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4aaf      	ldr	r2, [pc, #700]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4bad      	ldr	r3, [pc, #692]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4baa      	ldr	r3, [pc, #680]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4aa9      	ldr	r2, [pc, #676]	; (8000a9c <MX_GPIO_Init+0x308>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4ba7      	ldr	r3, [pc, #668]	; (8000a9c <MX_GPIO_Init+0x308>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <MX_GPIO_Init+0x308>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4aa3      	ldr	r2, [pc, #652]	; (8000a9c <MX_GPIO_Init+0x308>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <MX_GPIO_Init+0x308>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000828:	489d      	ldr	r0, [pc, #628]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 800082a:	f001 fc0f 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f248 1124 	movw	r1, #33060	; 0x8124
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f001 fc08 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 800083c:	2200      	movs	r2, #0
 800083e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000842:	4898      	ldr	r0, [pc, #608]	; (8000aa4 <MX_GPIO_Init+0x310>)
 8000844:	f001 fc02 	bl	800204c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f241 0181 	movw	r1, #4225	; 0x1081
 800084e:	4896      	ldr	r0, [pc, #600]	; (8000aa8 <MX_GPIO_Init+0x314>)
 8000850:	f001 fbfc 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	4893      	ldr	r0, [pc, #588]	; (8000aa8 <MX_GPIO_Init+0x314>)
 800085c:	f001 fbf6 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000866:	4891      	ldr	r0, [pc, #580]	; (8000aac <MX_GPIO_Init+0x318>)
 8000868:	f001 fbf0 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	488c      	ldr	r0, [pc, #560]	; (8000aa4 <MX_GPIO_Init+0x310>)
 8000872:	f001 fbeb 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	4889      	ldr	r0, [pc, #548]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 800087c:	f001 fbe6 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000880:	f240 1315 	movw	r3, #277	; 0x115
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4881      	ldr	r0, [pc, #516]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 800089a:	f001 fa2d 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800089e:	236a      	movs	r3, #106	; 0x6a
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	487b      	ldr	r0, [pc, #492]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 80008b4:	f001 fa20 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4877      	ldr	r0, [pc, #476]	; (8000aac <MX_GPIO_Init+0x318>)
 80008d0:	f001 fa12 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80008d4:	233f      	movs	r3, #63	; 0x3f
 80008d6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008d8:	230b      	movs	r3, #11
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4871      	ldr	r0, [pc, #452]	; (8000aac <MX_GPIO_Init+0x318>)
 80008e8:	f001 fa06 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80008ec:	2303      	movs	r3, #3
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008fc:	2308      	movs	r3, #8
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f001 f9f5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800090e:	f248 1324 	movw	r3, #33060	; 0x8124
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f001 f9e5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800092e:	2310      	movs	r3, #16
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000932:	230b      	movs	r3, #11
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f001 f9d8 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000958:	2305      	movs	r3, #5
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 f9c7 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4849      	ldr	r0, [pc, #292]	; (8000aa4 <MX_GPIO_Init+0x310>)
 8000980:	f001 f9ba 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000988:	230b      	movs	r3, #11
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <MX_GPIO_Init+0x310>)
 8000998:	f001 f9ae 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 800099c:	f24f 0334 	movw	r3, #61492	; 0xf034
 80009a0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x310>)
 80009b6:	f001 f99f 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80009ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009cc:	2306      	movs	r3, #6
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4832      	ldr	r0, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 80009d8:	f001 f98e 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80009dc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80009e0:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009ee:	230a      	movs	r3, #10
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0x30c>)
 80009fa:	f001 f97d 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80009fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a04:	2312      	movs	r3, #18
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a10:	2304      	movs	r3, #4
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0x310>)
 8000a1c:	f001 f96c 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481a      	ldr	r0, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0x314>)
 8000a3e:	f001 f95b 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000a42:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000a46:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_GPIO_Init+0x314>)
 8000a5a:	f001 f94d 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000a5e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_GPIO_Init+0x314>)
 8000a78:	f001 f93e 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000a7c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0x318>)
 8000a96:	f001 f92f 	bl	8001cf8 <HAL_GPIO_Init>
 8000a9a:	e009      	b.n	8000ab0 <MX_GPIO_Init+0x31c>
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	48001000 	.word	0x48001000
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ab0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <MX_GPIO_Init+0x424>)
 8000ac8:	f001 f916 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f001 f908 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ae8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afa:	230a      	movs	r3, #10
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f001 f8f6 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000b0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <MX_GPIO_Init+0x424>)
 8000b2a:	f001 f8e5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_GPIO_Init+0x428>)
 8000b4a:	f001 f8d5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b4e:	2378      	movs	r3, #120	; 0x78
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <MX_GPIO_Init+0x428>)
 8000b6a:	f001 f8c5 	bl	8001cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0x42c>)
 8000b8c:	f001 f8b4 	bl	8001cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2017      	movs	r0, #23
 8000b96:	f000 fe02 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b9a:	2017      	movs	r0, #23
 8000b9c:	f000 fe1b 	bl	80017d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2028      	movs	r0, #40	; 0x28
 8000ba6:	f000 fdfa 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000baa:	2028      	movs	r0, #40	; 0x28
 8000bac:	f000 fe13 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <HAL_UART_RxCpltCallback>:
	HAL_Delay(20);

}*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, "HAL_UART_RxCpltCallback function \r\n", 26, 1000);
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	221a      	movs	r2, #26
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <HAL_UART_RxCpltCallback+0x48>)
 8000bd4:	480e      	ldr	r0, [pc, #56]	; (8000c10 <HAL_UART_RxCpltCallback+0x4c>)
 8000bd6:	f003 fa1b 	bl	8004010 <HAL_UART_Transmit>
	if ((uart_bfr != 0x0D) && (uart_bfr != 0x0A))
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_UART_RxCpltCallback+0x50>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b0d      	cmp	r3, #13
 8000be0:	d007      	beq.n	8000bf2 <HAL_UART_RxCpltCallback+0x2e>
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_UART_RxCpltCallback+0x50>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b0a      	cmp	r3, #10
 8000be8:	d003      	beq.n	8000bf2 <HAL_UART_RxCpltCallback+0x2e>
	{
		cmd = uart_bfr;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_UART_RxCpltCallback+0x50>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_UART_RxCpltCallback+0x54>)
 8000bf0:	701a      	strb	r2, [r3, #0]
	}
	cmdstate = 1;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_UART_RxCpltCallback+0x58>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, &uart_bfr, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4906      	ldr	r1, [pc, #24]	; (8000c14 <HAL_UART_RxCpltCallback+0x50>)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <HAL_UART_RxCpltCallback+0x4c>)
 8000bfe:	f003 fa9b 	bl	8004138 <HAL_UART_Receive_DMA>
	//HAL_UART_Receive_IT(&huart1, &uart_bfr, 1);

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08005650 	.word	0x08005650
 8000c10:	2000007c 	.word	0x2000007c
 8000c14:	2000002c 	.word	0x2000002c
 8000c18:	2000014d 	.word	0x2000014d
 8000c1c:	20000028 	.word	0x20000028

08000c20 <start>:
//	 Show the user if it is in progress.
// PARAMETERS    :
//                 Void
// RETURNS       :
//				   Void
void start() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	inits[0] = init1;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <start+0x98>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <start+0x9c>)
 8000c2a:	701a      	strb	r2, [r3, #0]
	inits[1] = init2;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <start+0xa0>)
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <start+0x9c>)
 8000c32:	705a      	strb	r2, [r3, #1]

	HAL_UART_Transmit(&huart1, "----------------------------------------\r\n", 42, 1000);
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	222a      	movs	r2, #42	; 0x2a
 8000c3a:	4922      	ldr	r1, [pc, #136]	; (8000cc4 <start+0xa4>)
 8000c3c:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <start+0xa8>)
 8000c3e:	f003 f9e7 	bl	8004010 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "Your initials - ", 16, 1000);
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	2210      	movs	r2, #16
 8000c48:	4920      	ldr	r1, [pc, #128]	; (8000ccc <start+0xac>)
 8000c4a:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <start+0xa8>)
 8000c4c:	f003 f9e0 	bl	8004010 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, inits, 2, 1000);
 8000c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c54:	2202      	movs	r2, #2
 8000c56:	4919      	ldr	r1, [pc, #100]	; (8000cbc <start+0x9c>)
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <start+0xa8>)
 8000c5a:	f003 f9d9 	bl	8004010 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " - are in progress..\r\n", 22, 1000);
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	2216      	movs	r2, #22
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <start+0xb0>)
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <start+0xa8>)
 8000c68:	f003 f9d2 	bl	8004010 <HAL_UART_Transmit>

	ledMorseAlphabet(init1); // Match the first character between A-Z and make the morse indication.
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <start+0x98>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f88d 	bl	8000d90 <ledMorseAlphabet>

	space(); // 3 morse unit time space between 2 initials
 8000c76:	f000 f879 	bl	8000d6c <space>
	space();
 8000c7a:	f000 f877 	bl	8000d6c <space>
	space();
 8000c7e:	f000 f875 	bl	8000d6c <space>

	ledMorseAlphabet(init2); // Match the second character between A-Z and make the morse indication.
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <start+0xa0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f882 	bl	8000d90 <ledMorseAlphabet>

	space(); // 3 morse unit time space between 2 initials
 8000c8c:	f000 f86e 	bl	8000d6c <space>
	space();
 8000c90:	f000 f86c 	bl	8000d6c <space>
	space();
 8000c94:	f000 f86a 	bl	8000d6c <space>
	HAL_UART_Transmit(&huart1, "\r\n", 2, 1000);
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <start+0xb4>)
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <start+0xa8>)
 8000ca2:	f003 f9b5 	bl	8004010 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "COMPLETED!\r\n", 12, 1000);
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	220c      	movs	r2, #12
 8000cac:	490a      	ldr	r1, [pc, #40]	; (8000cd8 <start+0xb8>)
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <start+0xa8>)
 8000cb0:	f003 f9ae 	bl	8004010 <HAL_UART_Transmit>

	return;
 8000cb4:	bf00      	nop
}
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000032 	.word	0x20000032
 8000cbc:	20000030 	.word	0x20000030
 8000cc0:	2000014c 	.word	0x2000014c
 8000cc4:	080055b0 	.word	0x080055b0
 8000cc8:	2000007c 	.word	0x2000007c
 8000ccc:	08005674 	.word	0x08005674
 8000cd0:	08005688 	.word	0x08005688
 8000cd4:	080055ac 	.word	0x080055ac
 8000cd8:	080056a0 	.word	0x080056a0

08000cdc <dot>:
// PARAMETERS    :
//                 Void
// RETURNS       :
//				   Void

void dot() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, " . ", 3, 1000);//Serial output to show user, current state
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4905      	ldr	r1, [pc, #20]	; (8000cfc <dot+0x20>)
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <dot+0x24>)
 8000cea:	f003 f991 	bl	8004010 <HAL_UART_Transmit>
	ledTiming(UNIT_TIME, UNIT_TIME);
 8000cee:	21fa      	movs	r1, #250	; 0xfa
 8000cf0:	20fa      	movs	r0, #250	; 0xfa
 8000cf2:	f000 f81b 	bl	8000d2c <ledTiming>
	return;
 8000cf6:	bf00      	nop

}
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	080056b0 	.word	0x080056b0
 8000d00:	2000007c 	.word	0x2000007c

08000d04 <dash>:
// PARAMETERS    :
//                 Void
// RETURNS       :
//				   Void

void dash() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, " - ", 3, 1000);	//Serial output to show user, current state
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4905      	ldr	r1, [pc, #20]	; (8000d24 <dash+0x20>)
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <dash+0x24>)
 8000d12:	f003 f97d 	bl	8004010 <HAL_UART_Transmit>
	ledTiming(3 * UNIT_TIME, UNIT_TIME);
 8000d16:	21fa      	movs	r1, #250	; 0xfa
 8000d18:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000d1c:	f000 f806 	bl	8000d2c <ledTiming>
	return;
 8000d20:	bf00      	nop
}
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080056b4 	.word	0x080056b4
 8000d28:	2000007c 	.word	0x2000007c

08000d2c <ledTiming>:
//				   offtime: for LED low timing
//
// RETURNS       :
//				   Void

void ledTiming(int onTime, int offTime) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 1);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <ledTiming+0x3c>)
 8000d3e:	f001 f985 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(onTime);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fc2b 	bl	80015a0 <HAL_Delay>
	HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <ledTiming+0x3c>)
 8000d52:	f001 f97b 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(offTime);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fc21 	bl	80015a0 <HAL_Delay>
	return;
 8000d5e:	bf00      	nop
}
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	48000400 	.word	0x48000400

08000d6c <space>:
// PARAMETERS    :
//                 Void
// RETURNS       :
//				   Void

void space() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_Delay(UNIT_TIME);
 8000d70:	20fa      	movs	r0, #250	; 0xfa
 8000d72:	f000 fc15 	bl	80015a0 <HAL_Delay>
	HAL_UART_Transmit(&huart1, "   ", 3, 1000); //Serial output to show user, current state
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	4902      	ldr	r1, [pc, #8]	; (8000d88 <space+0x1c>)
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <space+0x20>)
 8000d80:	f003 f946 	bl	8004010 <HAL_UART_Transmit>
	return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	080056b8 	.word	0x080056b8
 8000d8c:	2000007c 	.word	0x2000007c

08000d90 <ledMorseAlphabet>:
// PARAMETERS    :
//                 input : the character passing through to match.
// RETURNS       :
//				   Void

void ledMorseAlphabet(uint8_t input) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	//HAL_UART_Transmit(&huart1,"in switch case:\r\n %c ",input, 42, 1000);
	//snprintf(str_tmp,100," HUMIDITY = %d.%02d  ", humInt1, humInt2);
	//HAL_UART_Transmit(&huart1,( uint8_t * )input,sizeof(input),1000);
	switch (input) {
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3b41      	subs	r3, #65	; 0x41
 8000d9e:	2b19      	cmp	r3, #25
 8000da0:	f200 8168 	bhi.w	8001074 <ledMorseAlphabet+0x2e4>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <ledMorseAlphabet+0x1c>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000e15 	.word	0x08000e15
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e41 	.word	0x08000e41
 8000db8:	08000e5f 	.word	0x08000e5f
 8000dbc:	08000e79 	.word	0x08000e79
 8000dc0:	08000e7f 	.word	0x08000e7f
 8000dc4:	08000e9d 	.word	0x08000e9d
 8000dc8:	08000eb3 	.word	0x08000eb3
 8000dcc:	08000ed1 	.word	0x08000ed1
 8000dd0:	08000edf 	.word	0x08000edf
 8000dd4:	08000efd 	.word	0x08000efd
 8000dd8:	08000f13 	.word	0x08000f13
 8000ddc:	08000f31 	.word	0x08000f31
 8000de0:	08000f3d 	.word	0x08000f3d
 8000de4:	08000f49 	.word	0x08000f49
 8000de8:	08000f63 	.word	0x08000f63
 8000dec:	08000f81 	.word	0x08000f81
 8000df0:	08000f9f 	.word	0x08000f9f
 8000df4:	08000fb5 	.word	0x08000fb5
 8000df8:	08000fcb 	.word	0x08000fcb
 8000dfc:	08000fd1 	.word	0x08000fd1
 8000e00:	08000fe7 	.word	0x08000fe7
 8000e04:	08001005 	.word	0x08001005
 8000e08:	0800101b 	.word	0x0800101b
 8000e0c:	08001039 	.word	0x08001039
 8000e10:	08001057 	.word	0x08001057
	case 'A':
		dot();space();dash();
 8000e14:	f7ff ff62 	bl	8000cdc <dot>
 8000e18:	f7ff ffa8 	bl	8000d6c <space>
 8000e1c:	f7ff ff72 	bl	8000d04 <dash>
		break;
 8000e20:	e141      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'B':
		dash();space();dot();space();dot();space();dot();
 8000e22:	f7ff ff6f 	bl	8000d04 <dash>
 8000e26:	f7ff ffa1 	bl	8000d6c <space>
 8000e2a:	f7ff ff57 	bl	8000cdc <dot>
 8000e2e:	f7ff ff9d 	bl	8000d6c <space>
 8000e32:	f7ff ff53 	bl	8000cdc <dot>
 8000e36:	f7ff ff99 	bl	8000d6c <space>
 8000e3a:	f7ff ff4f 	bl	8000cdc <dot>
		break;
 8000e3e:	e132      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'C':
		dash();space();dot();space();dash();space();dot();
 8000e40:	f7ff ff60 	bl	8000d04 <dash>
 8000e44:	f7ff ff92 	bl	8000d6c <space>
 8000e48:	f7ff ff48 	bl	8000cdc <dot>
 8000e4c:	f7ff ff8e 	bl	8000d6c <space>
 8000e50:	f7ff ff58 	bl	8000d04 <dash>
 8000e54:	f7ff ff8a 	bl	8000d6c <space>
 8000e58:	f7ff ff40 	bl	8000cdc <dot>
		break;
 8000e5c:	e123      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'D':
		dash();space();dot();space();dot();space();
 8000e5e:	f7ff ff51 	bl	8000d04 <dash>
 8000e62:	f7ff ff83 	bl	8000d6c <space>
 8000e66:	f7ff ff39 	bl	8000cdc <dot>
 8000e6a:	f7ff ff7f 	bl	8000d6c <space>
 8000e6e:	f7ff ff35 	bl	8000cdc <dot>
 8000e72:	f7ff ff7b 	bl	8000d6c <space>
		break;
 8000e76:	e116      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'E':
		dot();
 8000e78:	f7ff ff30 	bl	8000cdc <dot>
		break;
 8000e7c:	e113      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'F':
		dot();space();dot();space();dash();space();dot();
 8000e7e:	f7ff ff2d 	bl	8000cdc <dot>
 8000e82:	f7ff ff73 	bl	8000d6c <space>
 8000e86:	f7ff ff29 	bl	8000cdc <dot>
 8000e8a:	f7ff ff6f 	bl	8000d6c <space>
 8000e8e:	f7ff ff39 	bl	8000d04 <dash>
 8000e92:	f7ff ff6b 	bl	8000d6c <space>
 8000e96:	f7ff ff21 	bl	8000cdc <dot>
		break;
 8000e9a:	e104      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'G':
		dash();space();dash();space();dot();
 8000e9c:	f7ff ff32 	bl	8000d04 <dash>
 8000ea0:	f7ff ff64 	bl	8000d6c <space>
 8000ea4:	f7ff ff2e 	bl	8000d04 <dash>
 8000ea8:	f7ff ff60 	bl	8000d6c <space>
 8000eac:	f7ff ff16 	bl	8000cdc <dot>
		break;
 8000eb0:	e0f9      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'H':
		dot();space();dot();space();dot();space();dot();
 8000eb2:	f7ff ff13 	bl	8000cdc <dot>
 8000eb6:	f7ff ff59 	bl	8000d6c <space>
 8000eba:	f7ff ff0f 	bl	8000cdc <dot>
 8000ebe:	f7ff ff55 	bl	8000d6c <space>
 8000ec2:	f7ff ff0b 	bl	8000cdc <dot>
 8000ec6:	f7ff ff51 	bl	8000d6c <space>
 8000eca:	f7ff ff07 	bl	8000cdc <dot>
		break;
 8000ece:	e0ea      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'I':
		dot();space();dot();
 8000ed0:	f7ff ff04 	bl	8000cdc <dot>
 8000ed4:	f7ff ff4a 	bl	8000d6c <space>
 8000ed8:	f7ff ff00 	bl	8000cdc <dot>
		break;
 8000edc:	e0e3      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'J':
		dot();space();dash();space();dash();space();dash();
 8000ede:	f7ff fefd 	bl	8000cdc <dot>
 8000ee2:	f7ff ff43 	bl	8000d6c <space>
 8000ee6:	f7ff ff0d 	bl	8000d04 <dash>
 8000eea:	f7ff ff3f 	bl	8000d6c <space>
 8000eee:	f7ff ff09 	bl	8000d04 <dash>
 8000ef2:	f7ff ff3b 	bl	8000d6c <space>
 8000ef6:	f7ff ff05 	bl	8000d04 <dash>
		break;
 8000efa:	e0d4      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'K':
		dash();space();dot();space();dash();
 8000efc:	f7ff ff02 	bl	8000d04 <dash>
 8000f00:	f7ff ff34 	bl	8000d6c <space>
 8000f04:	f7ff feea 	bl	8000cdc <dot>
 8000f08:	f7ff ff30 	bl	8000d6c <space>
 8000f0c:	f7ff fefa 	bl	8000d04 <dash>
		break;
 8000f10:	e0c9      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'L':
		dot();space();dash();space();dot();space();dot();
 8000f12:	f7ff fee3 	bl	8000cdc <dot>
 8000f16:	f7ff ff29 	bl	8000d6c <space>
 8000f1a:	f7ff fef3 	bl	8000d04 <dash>
 8000f1e:	f7ff ff25 	bl	8000d6c <space>
 8000f22:	f7ff fedb 	bl	8000cdc <dot>
 8000f26:	f7ff ff21 	bl	8000d6c <space>
 8000f2a:	f7ff fed7 	bl	8000cdc <dot>
		break;
 8000f2e:	e0ba      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'M':
		dash();space();dash();
 8000f30:	f7ff fee8 	bl	8000d04 <dash>
 8000f34:	f7ff ff1a 	bl	8000d6c <space>
 8000f38:	f7ff fee4 	bl	8000d04 <dash>
	case 'N':
		dash();space();dot();
 8000f3c:	f7ff fee2 	bl	8000d04 <dash>
 8000f40:	f7ff ff14 	bl	8000d6c <space>
 8000f44:	f7ff feca 	bl	8000cdc <dot>
	case 'O':
		dash();space();dash();space();dash();space();
 8000f48:	f7ff fedc 	bl	8000d04 <dash>
 8000f4c:	f7ff ff0e 	bl	8000d6c <space>
 8000f50:	f7ff fed8 	bl	8000d04 <dash>
 8000f54:	f7ff ff0a 	bl	8000d6c <space>
 8000f58:	f7ff fed4 	bl	8000d04 <dash>
 8000f5c:	f7ff ff06 	bl	8000d6c <space>
		break;
 8000f60:	e0a1      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'P':
		dot();space();dash();space();dash();space();dot();
 8000f62:	f7ff febb 	bl	8000cdc <dot>
 8000f66:	f7ff ff01 	bl	8000d6c <space>
 8000f6a:	f7ff fecb 	bl	8000d04 <dash>
 8000f6e:	f7ff fefd 	bl	8000d6c <space>
 8000f72:	f7ff fec7 	bl	8000d04 <dash>
 8000f76:	f7ff fef9 	bl	8000d6c <space>
 8000f7a:	f7ff feaf 	bl	8000cdc <dot>
		break;
 8000f7e:	e092      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'Q':
		dash();space();dash();space();dot();space();dash();
 8000f80:	f7ff fec0 	bl	8000d04 <dash>
 8000f84:	f7ff fef2 	bl	8000d6c <space>
 8000f88:	f7ff febc 	bl	8000d04 <dash>
 8000f8c:	f7ff feee 	bl	8000d6c <space>
 8000f90:	f7ff fea4 	bl	8000cdc <dot>
 8000f94:	f7ff feea 	bl	8000d6c <space>
 8000f98:	f7ff feb4 	bl	8000d04 <dash>
		break;
 8000f9c:	e083      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'R':
		dot();space();dash();space();dot();
 8000f9e:	f7ff fe9d 	bl	8000cdc <dot>
 8000fa2:	f7ff fee3 	bl	8000d6c <space>
 8000fa6:	f7ff fead 	bl	8000d04 <dash>
 8000faa:	f7ff fedf 	bl	8000d6c <space>
 8000fae:	f7ff fe95 	bl	8000cdc <dot>
		break;
 8000fb2:	e078      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'S':
		dot();space();dot();space();dot();
 8000fb4:	f7ff fe92 	bl	8000cdc <dot>
 8000fb8:	f7ff fed8 	bl	8000d6c <space>
 8000fbc:	f7ff fe8e 	bl	8000cdc <dot>
 8000fc0:	f7ff fed4 	bl	8000d6c <space>
 8000fc4:	f7ff fe8a 	bl	8000cdc <dot>
		break;
 8000fc8:	e06d      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'T':
		dash();
 8000fca:	f7ff fe9b 	bl	8000d04 <dash>
		break;
 8000fce:	e06a      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'U':
		dot();space();dot();space();dash();
 8000fd0:	f7ff fe84 	bl	8000cdc <dot>
 8000fd4:	f7ff feca 	bl	8000d6c <space>
 8000fd8:	f7ff fe80 	bl	8000cdc <dot>
 8000fdc:	f7ff fec6 	bl	8000d6c <space>
 8000fe0:	f7ff fe90 	bl	8000d04 <dash>
		break;
 8000fe4:	e05f      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'V':
		dot();space();dot();space();dot();space();dash();
 8000fe6:	f7ff fe79 	bl	8000cdc <dot>
 8000fea:	f7ff febf 	bl	8000d6c <space>
 8000fee:	f7ff fe75 	bl	8000cdc <dot>
 8000ff2:	f7ff febb 	bl	8000d6c <space>
 8000ff6:	f7ff fe71 	bl	8000cdc <dot>
 8000ffa:	f7ff feb7 	bl	8000d6c <space>
 8000ffe:	f7ff fe81 	bl	8000d04 <dash>
		break;
 8001002:	e050      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'W':
		dot();space();dash();space();dash();
 8001004:	f7ff fe6a 	bl	8000cdc <dot>
 8001008:	f7ff feb0 	bl	8000d6c <space>
 800100c:	f7ff fe7a 	bl	8000d04 <dash>
 8001010:	f7ff feac 	bl	8000d6c <space>
 8001014:	f7ff fe76 	bl	8000d04 <dash>
		break;
 8001018:	e045      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'X':
		dash();space();dot();space();dot();space();dash();
 800101a:	f7ff fe73 	bl	8000d04 <dash>
 800101e:	f7ff fea5 	bl	8000d6c <space>
 8001022:	f7ff fe5b 	bl	8000cdc <dot>
 8001026:	f7ff fea1 	bl	8000d6c <space>
 800102a:	f7ff fe57 	bl	8000cdc <dot>
 800102e:	f7ff fe9d 	bl	8000d6c <space>
 8001032:	f7ff fe67 	bl	8000d04 <dash>
		break;
 8001036:	e036      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'Y':
		dash();space();dot();space();dash();space();dash();
 8001038:	f7ff fe64 	bl	8000d04 <dash>
 800103c:	f7ff fe96 	bl	8000d6c <space>
 8001040:	f7ff fe4c 	bl	8000cdc <dot>
 8001044:	f7ff fe92 	bl	8000d6c <space>
 8001048:	f7ff fe5c 	bl	8000d04 <dash>
 800104c:	f7ff fe8e 	bl	8000d6c <space>
 8001050:	f7ff fe58 	bl	8000d04 <dash>
		break;
 8001054:	e027      	b.n	80010a6 <ledMorseAlphabet+0x316>
	case 'Z':
		dash();space();dash();space();dot();space();dot();
 8001056:	f7ff fe55 	bl	8000d04 <dash>
 800105a:	f7ff fe87 	bl	8000d6c <space>
 800105e:	f7ff fe51 	bl	8000d04 <dash>
 8001062:	f7ff fe83 	bl	8000d6c <space>
 8001066:	f7ff fe39 	bl	8000cdc <dot>
 800106a:	f7ff fe7f 	bl	8000d6c <space>
 800106e:	f7ff fe35 	bl	8000cdc <dot>
		break;
 8001072:	e018      	b.n	80010a6 <ledMorseAlphabet+0x316>
	default:
		// Error state
		dash();space();dash();space();dash();space();dash();space();dash();space();dash();space();
 8001074:	f7ff fe46 	bl	8000d04 <dash>
 8001078:	f7ff fe78 	bl	8000d6c <space>
 800107c:	f7ff fe42 	bl	8000d04 <dash>
 8001080:	f7ff fe74 	bl	8000d6c <space>
 8001084:	f7ff fe3e 	bl	8000d04 <dash>
 8001088:	f7ff fe70 	bl	8000d6c <space>
 800108c:	f7ff fe3a 	bl	8000d04 <dash>
 8001090:	f7ff fe6c 	bl	8000d6c <space>
 8001094:	f7ff fe36 	bl	8000d04 <dash>
 8001098:	f7ff fe68 	bl	8000d6c <space>
 800109c:	f7ff fe32 	bl	8000d04 <dash>
 80010a0:	f7ff fe64 	bl	8000d6c <space>
	}
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop

080010b0 <checkLetter>:
// PARAMETERS    :
//                 input : the character passing through to match.
// RETURNS       :
//				   Void

void checkLetter(char c) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	//HAL_UART_Transmit(&huart1,( char * )input,sizeof(input),1000);
	HAL_UART_Transmit(&huart1, "check letter function \r\n", 26, 1000);
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	221a      	movs	r2, #26
 80010c0:	491c      	ldr	r1, [pc, #112]	; (8001134 <checkLetter+0x84>)
 80010c2:	481d      	ldr	r0, [pc, #116]	; (8001138 <checkLetter+0x88>)
 80010c4:	f002 ffa4 	bl	8004010 <HAL_UART_Transmit>
	while (1) {
		/*char c;*/
		if (cmdstate == 1) {
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <checkLetter+0x8c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d1fb      	bne.n	80010c8 <checkLetter+0x18>
			for (c = 'A'; c <= 'Z'; ++c) {
 80010d0:	2341      	movs	r3, #65	; 0x41
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e012      	b.n	80010fc <checkLetter+0x4c>
				if (cmd == c) {
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <checkLetter+0x90>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10a      	bne.n	80010f6 <checkLetter+0x46>
					HAL_UART_Transmit(&huart1, " is one of your initials\r\n", 26, 1000);
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	221a      	movs	r2, #26
 80010e6:	4917      	ldr	r1, [pc, #92]	; (8001144 <checkLetter+0x94>)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <checkLetter+0x88>)
 80010ea:	f002 ff91 	bl	8004010 <HAL_UART_Transmit>

					//cmdstate is like control bit of if user typed a input.
					//if it is not this function will be wait inside while loop for user to type input.
					cmdstate = 0;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <checkLetter+0x8c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
					return 0;
 80010f4:	e01a      	b.n	800112c <checkLetter+0x7c>
			for (c = 'A'; c <= 'Z'; ++c) {
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	3301      	adds	r3, #1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b5a      	cmp	r3, #90	; 0x5a
 8001100:	d9e9      	bls.n	80010d6 <checkLetter+0x26>
				}
			}
			HAL_UART_Transmit(&huart1," is not valid. Please select between [A-Z]\r\n", 44, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	222c      	movs	r2, #44	; 0x2c
 8001108:	490f      	ldr	r1, [pc, #60]	; (8001148 <checkLetter+0x98>)
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <checkLetter+0x88>)
 800110c:	f002 ff80 	bl	8004010 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, "----------------------------------------\r\n", 42, 1000);
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	222a      	movs	r2, #42	; 0x2a
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <checkLetter+0x9c>)
 8001118:	4807      	ldr	r0, [pc, #28]	; (8001138 <checkLetter+0x88>)
 800111a:	f002 ff79 	bl	8004010 <HAL_UART_Transmit>
			cmdstate = 0;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <checkLetter+0x8c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
			uart_bfr = '\0';
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <checkLetter+0xa0>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		if (cmdstate == 1) {
 800112a:	e7cd      	b.n	80010c8 <checkLetter+0x18>

		}
	}

}
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080056bc 	.word	0x080056bc
 8001138:	2000007c 	.word	0x2000007c
 800113c:	20000028 	.word	0x20000028
 8001140:	2000014d 	.word	0x2000014d
 8001144:	080056d8 	.word	0x080056d8
 8001148:	080056f4 	.word	0x080056f4
 800114c:	080055b0 	.word	0x080055b0
 8001150:	2000002c 	.word	0x2000002c

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x44>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x44>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	; 0x60
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x44>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x44>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x44>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6593      	str	r3, [r2, #88]	; 0x58
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x44>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c8:	d130      	bne.n	800122c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_TIM_Base_MspInit+0x8c>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011fa:	2308      	movs	r3, #8
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120a:	2301      	movs	r3, #1
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f000 fd6e 	bl	8001cf8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	201c      	movs	r0, #28
 8001222:	f000 fabc 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001226:	201c      	movs	r0, #28
 8001228:	f000 fad5 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ac      	sub	sp, #176	; 0xb0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2288      	movs	r2, #136	; 0x88
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f004 f993 	bl	8005584 <memset>
  if(huart->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a39      	ldr	r2, [pc, #228]	; (8001348 <HAL_UART_MspInit+0x110>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d16b      	bne.n	8001340 <HAL_UART_MspInit+0x108>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800126c:	2300      	movs	r3, #0
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fd75 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001280:	f7ff ff68 	bl	8001154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_UART_MspInit+0x114>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	4a30      	ldr	r2, [pc, #192]	; (800134c <HAL_UART_MspInit+0x114>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128e:	6613      	str	r3, [r2, #96]	; 0x60
 8001290:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_UART_MspInit+0x114>)
 8001292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_UART_MspInit+0x114>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_UART_MspInit+0x114>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_UART_MspInit+0x114>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012cc:	2307      	movs	r3, #7
 80012ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012d6:	4619      	mov	r1, r3
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <HAL_UART_MspInit+0x118>)
 80012da:	f000 fd0d 	bl	8001cf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_UART_MspInit+0x120>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x11c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x11c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_UART_MspInit+0x11c>)
 800130a:	2220      	movs	r2, #32
 800130c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_UART_MspInit+0x11c>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <HAL_UART_MspInit+0x11c>)
 8001316:	f000 fa79 	bl	800180c <HAL_DMA_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8001320:	f7ff ff18 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_UART_MspInit+0x11c>)
 8001328:	671a      	str	r2, [r3, #112]	; 0x70
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_UART_MspInit+0x11c>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2025      	movs	r0, #37	; 0x25
 8001336:	f000 fa32 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800133a:	2025      	movs	r0, #37	; 0x25
 800133c:	f000 fa4b 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001340:	bf00      	nop
 8001342:	37b0      	adds	r7, #176	; 0xb0
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013800 	.word	0x40013800
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400
 8001354:	20000034 	.word	0x20000034
 8001358:	40020058 	.word	0x40020058

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f8da 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <DMA1_Channel5_IRQHandler+0x10>)
 80013b6:	f000 fbc0 	bl	8001b3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000034 	.word	0x20000034

080013c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013c8:	2020      	movs	r0, #32
 80013ca:	f000 fe57 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013ce:	2040      	movs	r0, #64	; 0x40
 80013d0:	f000 fe54 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013d4:	2080      	movs	r0, #128	; 0x80
 80013d6:	f000 fe51 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013de:	f000 fe4d 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM2_IRQHandler+0x10>)
 80013ee:	f002 f9cc 	bl	800378a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000100 	.word	0x20000100

080013fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USART1_IRQHandler+0x10>)
 8001402:	f002 feef 	bl	80041e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000007c 	.word	0x2000007c

08001410 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001414:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001418:	f000 fe30 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800141c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001420:	f000 fe2c 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001424:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001428:	f000 fe28 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800142c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001430:	f000 fe24 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001434:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001438:	f000 fe20 	bl	800207c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800149c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffea 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f004 f853 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff f813 	bl	80004c0 <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a8:	0800577c 	.word	0x0800577c
  ldr r2, =_sbss
 80014ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b0:	20000154 	.word	0x20000154

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>

080014b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f961 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f80e 	bl	80014e8 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e001      	b.n	80014dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d8:	f7ff fe42 	bl	8001160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014dc:	79fb      	ldrb	r3, [r7, #7]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_InitTick+0x70>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_InitTick+0x6c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f96d 	bl	80017f2 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d809      	bhi.n	8001538 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f937 	bl	800179e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0x74>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e007      	b.n	8001548 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e004      	b.n	8001548 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e001      	b.n	8001548 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	20000150 	.word	0x20000150

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000150 	.word	0x20000150

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	; (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e098      	b.n	8001950 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_DMA_Init+0x150>)
 8001826:	429a      	cmp	r2, r3
 8001828:	d80f      	bhi.n	800184a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_DMA_Init+0x154>)
 8001832:	4413      	add	r3, r2
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_DMA_Init+0x158>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	009a      	lsls	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a48      	ldr	r2, [pc, #288]	; (8001968 <HAL_DMA_Init+0x15c>)
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
 8001848:	e00e      	b.n	8001868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b46      	ldr	r3, [pc, #280]	; (800196c <HAL_DMA_Init+0x160>)
 8001852:	4413      	add	r3, r2
 8001854:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_DMA_Init+0x158>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	009a      	lsls	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a42      	ldr	r2, [pc, #264]	; (8001970 <HAL_DMA_Init+0x164>)
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800187e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c2:	d039      	beq.n	8001938 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_DMA_Init+0x15c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11a      	bne.n	8001904 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_DMA_Init+0x168>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f003 031c 	and.w	r3, r3, #28
 80018da:	210f      	movs	r1, #15
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4924      	ldr	r1, [pc, #144]	; (8001974 <HAL_DMA_Init+0x168>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_DMA_Init+0x168>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f003 031c 	and.w	r3, r3, #28
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	491d      	ldr	r1, [pc, #116]	; (8001974 <HAL_DMA_Init+0x168>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	e019      	b.n	8001938 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_DMA_Init+0x16c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f003 031c 	and.w	r3, r3, #28
 8001910:	210f      	movs	r1, #15
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	4917      	ldr	r1, [pc, #92]	; (8001978 <HAL_DMA_Init+0x16c>)
 800191a:	4013      	ands	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_DMA_Init+0x16c>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f003 031c 	and.w	r3, r3, #28
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	4911      	ldr	r1, [pc, #68]	; (8001978 <HAL_DMA_Init+0x16c>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40020407 	.word	0x40020407
 8001960:	bffdfff8 	.word	0xbffdfff8
 8001964:	cccccccd 	.word	0xcccccccd
 8001968:	40020000 	.word	0x40020000
 800196c:	bffdfbf8 	.word	0xbffdfbf8
 8001970:	40020400 	.word	0x40020400
 8001974:	400200a8 	.word	0x400200a8
 8001978:	400204a8 	.word	0x400204a8

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_DMA_Start_IT+0x20>
 8001998:	2302      	movs	r3, #2
 800199a:	e04b      	b.n	8001a34 <HAL_DMA_Start_IT+0xb8>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d13a      	bne.n	8001a26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f95f 	bl	8001c98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 020e 	orr.w	r2, r2, #14
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e00f      	b.n	8001a14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 020a 	orr.w	r2, r2, #10
 8001a12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e005      	b.n	8001a32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d008      	beq.n	8001a66 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e022      	b.n	8001aac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 020e 	bic.w	r2, r2, #14
 8001a74:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 021c 	and.w	r2, r3, #28
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d005      	beq.n	8001adc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e029      	b.n	8001b30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020e 	bic.w	r2, r2, #14
 8001aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f003 021c 	and.w	r2, r3, #28
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
    }
  }
  return status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 031c 	and.w	r3, r3, #28
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d026      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x7a>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0204 	bic.w	r2, r2, #4
 8001b8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f003 021c 	and.w	r2, r3, #28
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d071      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bb2:	e06c      	b.n	8001c8e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f003 031c 	and.w	r3, r3, #28
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d02e      	beq.n	8001c26 <HAL_DMA_IRQHandler+0xec>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d029      	beq.n	8001c26 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020a 	bic.w	r2, r2, #10
 8001bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f003 021c 	and.w	r2, r3, #28
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2102      	movs	r1, #2
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d038      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c24:	e033      	b.n	8001c8e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f003 031c 	and.w	r3, r3, #28
 8001c2e:	2208      	movs	r2, #8
 8001c30:	409a      	lsls	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d02a      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x156>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d025      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020e 	bic.w	r2, r2, #14
 8001c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f003 021c 	and.w	r2, r3, #28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
}
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d108      	bne.n	8001cdc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cda:	e007      	b.n	8001cec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d06:	e17f      	b.n	8002008 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8171 	beq.w	8002002 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d005      	beq.n	8001d38 <HAL_GPIO_Init+0x40>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d130      	bne.n	8001d9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6e:	2201      	movs	r2, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	091b      	lsrs	r3, r3, #4
 8001d84:	f003 0201 	and.w	r2, r3, #1
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d118      	bne.n	8001dd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dac:	2201      	movs	r2, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f003 0201 	and.w	r2, r3, #1
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d017      	beq.n	8001e14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80ac 	beq.w	8002002 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_GPIO_Init+0x330>)
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	4a5e      	ldr	r2, [pc, #376]	; (8002028 <HAL_GPIO_Init+0x330>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <HAL_GPIO_Init+0x330>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_GPIO_Init+0x334>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x242>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x338>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x23e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	; (8002034 <HAL_GPIO_Init+0x33c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x23a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	; (8002038 <HAL_GPIO_Init+0x340>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x236>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	; (800203c <HAL_GPIO_Init+0x344>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x232>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_GPIO_Init+0x348>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x22e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x34c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x22a>
 8001f1e:	2306      	movs	r3, #6
 8001f20:	e00c      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00a      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x244>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4c:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_GPIO_Init+0x350>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa22 f303 	lsr.w	r3, r2, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f ae78 	bne.w	8001d08 <HAL_GPIO_Init+0x10>
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	48001400 	.word	0x48001400
 8002044:	48001800 	.word	0x48001800
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002068:	e002      	b.n	8002070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d006      	beq.n	80020a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f806 	bl	80020ac <HAL_GPIO_EXTI_Callback>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000

080020e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ee:	d130      	bne.n	8002152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d038      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2232      	movs	r2, #50	; 0x32
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0c9b      	lsrs	r3, r3, #18
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002124:	e002      	b.n	800212c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3b01      	subs	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002138:	d102      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f2      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214c:	d110      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e00f      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d007      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e3d4      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	4ba1      	ldr	r3, [pc, #644]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	4b9e      	ldr	r3, [pc, #632]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80e4 	beq.w	8002388 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4a>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f040 808b 	bne.w	80022e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 8087 	bne.w	80022e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d6:	4b93      	ldr	r3, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x62>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3ac      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	4b8c      	ldr	r3, [pc, #560]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_RCC_OscConfig+0x7c>
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002206:	e005      	b.n	8002214 <HAL_RCC_OscConfig+0x88>
 8002208:	4b86      	ldr	r3, [pc, #536]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002214:	4293      	cmp	r3, r2
 8002216:	d223      	bcs.n	8002260 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fd41 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e38d      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222c:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4977      	ldr	r1, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	4972      	ldr	r1, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
 800225e:	e025      	b.n	80022ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002260:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6f      	ldr	r2, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	496a      	ldr	r1, [pc, #424]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227e:	4b69      	ldr	r3, [pc, #420]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	4965      	ldr	r1, [pc, #404]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd01 	bl	8002ca4 <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e34d      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ac:	f000 fc36 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b5c      	ldr	r3, [pc, #368]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	495a      	ldr	r1, [pc, #360]	; (8002428 <HAL_RCC_OscConfig+0x29c>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_OscConfig+0x2a0>)
 80022ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022cc:	4b58      	ldr	r3, [pc, #352]	; (8002430 <HAL_RCC_OscConfig+0x2a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f909 	bl	80014e8 <HAL_InitTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d052      	beq.n	8002386 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	e331      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d032      	beq.n	8002352 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f946 	bl	8001588 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002300:	f7ff f942 	bl	8001588 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e31a      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a40      	ldr	r2, [pc, #256]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	493b      	ldr	r1, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	4936      	ldr	r1, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e01a      	b.n	8002388 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a33      	ldr	r2, [pc, #204]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235e:	f7ff f913 	bl	8001588 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002366:	f7ff f90f 	bl	8001588 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e2e7      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x1da>
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002386:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d074      	beq.n	800247e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b08      	cmp	r3, #8
 8002398:	d005      	beq.n	80023a6 <HAL_RCC_OscConfig+0x21a>
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d10e      	bne.n	80023be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d064      	beq.n	800247c <HAL_RCC_OscConfig+0x2f0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d160      	bne.n	800247c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e2c4      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x24a>
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e01d      	b.n	8002412 <HAL_RCC_OscConfig+0x286>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x26e>
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x286>
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_RCC_OscConfig+0x298>)
 800240c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01c      	beq.n	8002454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff f8b5 	bl	8001588 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	e011      	b.n	8002446 <HAL_RCC_OscConfig+0x2ba>
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	08005724 	.word	0x08005724
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff f8a8 	bl	8001588 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e280      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002446:	4baf      	ldr	r3, [pc, #700]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x2a8>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff f898 	bl	8001588 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff f894 	bl	8001588 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e26c      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246e:	4ba5      	ldr	r3, [pc, #660]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x2d0>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d060      	beq.n	800254c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x310>
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d119      	bne.n	80024ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d116      	bne.n	80024ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249c:	4b99      	ldr	r3, [pc, #612]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x328>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e249      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b93      	ldr	r3, [pc, #588]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	4990      	ldr	r1, [pc, #576]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c8:	e040      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d023      	beq.n	800251a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d2:	4b8c      	ldr	r3, [pc, #560]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a8b      	ldr	r2, [pc, #556]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff f853 	bl	8001588 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7ff f84f 	bl	8001588 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e227      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	4b82      	ldr	r3, [pc, #520]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b7f      	ldr	r3, [pc, #508]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	497c      	ldr	r1, [pc, #496]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e018      	b.n	800254c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b7a      	ldr	r3, [pc, #488]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a79      	ldr	r2, [pc, #484]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7ff f82f 	bl	8001588 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff f82b 	bl	8001588 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e203      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002540:	4b70      	ldr	r3, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d03c      	beq.n	80025d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	4a67      	ldr	r2, [pc, #412]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff f80a 	bl	8001588 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7ff f806 	bl	8001588 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1de      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258a:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800258c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ef      	beq.n	8002578 <HAL_RCC_OscConfig+0x3ec>
 8002598:	e01b      	b.n	80025d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800259c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a0:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f023 0301 	bic.w	r3, r3, #1
 80025a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe ffed 	bl	8001588 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b2:	f7fe ffe9 	bl	8001588 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1c1      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c4:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ef      	bne.n	80025b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80a6 	beq.w	800272c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f0:	4b44      	ldr	r3, [pc, #272]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	4a43      	ldr	r2, [pc, #268]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fa:	6593      	str	r3, [r2, #88]	; 0x58
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002608:	2301      	movs	r3, #1
 800260a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCC_OscConfig+0x57c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d118      	bne.n	800264a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x57c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3a      	ldr	r2, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x57c>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002624:	f7fe ffb0 	bl	8001588 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262c:	f7fe ffac 	bl	8001588 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e184      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263e:	4b32      	ldr	r3, [pc, #200]	; (8002708 <HAL_RCC_OscConfig+0x57c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x4d8>
 8002652:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002662:	e024      	b.n	80026ae <HAL_RCC_OscConfig+0x522>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d110      	bne.n	800268e <HAL_RCC_OscConfig+0x502>
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a24      	ldr	r2, [pc, #144]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a20      	ldr	r2, [pc, #128]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268c:	e00f      	b.n	80026ae <HAL_RCC_OscConfig+0x522>
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe ff67 	bl	8001588 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe ff63 	bl	8001588 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e139      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ed      	beq.n	80026be <HAL_RCC_OscConfig+0x532>
 80026e2:	e01a      	b.n	800271a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe ff50 	bl	8001588 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ea:	e00f      	b.n	800270c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe ff4c 	bl	8001588 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d906      	bls.n	800270c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e122      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270c:	4b90      	ldr	r3, [pc, #576]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e8      	bne.n	80026ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002720:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8108 	beq.w	8002946 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	2b02      	cmp	r3, #2
 800273c:	f040 80d0 	bne.w	80028e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002740:	4b83      	ldr	r3, [pc, #524]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	429a      	cmp	r2, r3
 8002752:	d130      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d127      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002770:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002780:	2a07      	cmp	r2, #7
 8002782:	bf14      	ite	ne
 8002784:	2201      	movne	r2, #1
 8002786:	2200      	moveq	r2, #0
 8002788:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d06e      	beq.n	8002894 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d069      	beq.n	8002890 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027c8:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b7      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5c      	ldr	r2, [pc, #368]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80027de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e4:	f7fe fed0 	bl	8001588 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fecc 	bl	8001588 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0a4      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800280a:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x7c8>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800281a:	3a01      	subs	r2, #1
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002824:	0212      	lsls	r2, r2, #8
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800282c:	0852      	lsrs	r2, r2, #1
 800282e:	3a01      	subs	r2, #1
 8002830:	0552      	lsls	r2, r2, #21
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002838:	0852      	lsrs	r2, r2, #1
 800283a:	3a01      	subs	r2, #1
 800283c:	0652      	lsls	r2, r2, #25
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002844:	0912      	lsrs	r2, r2, #4
 8002846:	0452      	lsls	r2, r2, #17
 8002848:	430a      	orrs	r2, r1
 800284a:	4941      	ldr	r1, [pc, #260]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800285c:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a3b      	ldr	r2, [pc, #236]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002868:	f7fe fe8e 	bl	8001588 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fe8a 	bl	8001588 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e062      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288e:	e05a      	b.n	8002946 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e059      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d152      	bne.n	8002946 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b8:	f7fe fe66 	bl	8001588 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fe62 	bl	8001588 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e03a      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x734>
 80028de:	e032      	b.n	8002946 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d02d      	beq.n	8002942 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002910:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe fe35 	bl	8001588 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe fe31 	bl	8001588 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e009      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x7c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x796>
 8002940:	e001      	b.n	8002946 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	f99d808c 	.word	0xf99d808c

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0c8      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4961      	ldr	r1, [pc, #388]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b5f      	ldr	r3, [pc, #380]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0b0      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d04c      	beq.n	8002a42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b56      	ldr	r3, [pc, #344]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d121      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e09e      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e092      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e086      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e07e      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	493f      	ldr	r1, [pc, #252]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a12:	f7fe fdb9 	bl	8001588 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1a:	f7fe fdb5 	bl	8001588 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e066      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 020c 	and.w	r2, r3, #12
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d1eb      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4e:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	492c      	ldr	r1, [pc, #176]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d210      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_ClockConfig+0x1b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e036      	b.n	8002afe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4918      	ldr	r1, [pc, #96]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4910      	ldr	r1, [pc, #64]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ace:	f000 f825 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <HAL_RCC_ClockConfig+0x1b4>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490c      	ldr	r1, [pc, #48]	; (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fcf8 	bl	80014e8 <HAL_InitTick>
 8002af8:	4603      	mov	r3, r0
 8002afa:	72fb      	strb	r3, [r7, #11]

  return status;
 8002afc:	7afb      	ldrb	r3, [r7, #11]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40022000 	.word	0x40022000
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08005724 	.word	0x08005724
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x34>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d121      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d11e      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b5c:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d102      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	e004      	b.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d134      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d003      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002bc0:	e005      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002bc4:	617b      	str	r3, [r7, #20]
      break;
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bca:	617b      	str	r3, [r7, #20]
      break;
 8002bcc:	e002      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	617b      	str	r3, [r7, #20]
      break;
 8002bd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	3301      	adds	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	fb02 f203 	mul.w	r2, r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	0e5b      	lsrs	r3, r3, #25
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	3301      	adds	r3, #1
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c14:	69bb      	ldr	r3, [r7, #24]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	0800573c 	.word	0x0800573c
 8002c2c:	00f42400 	.word	0x00f42400
 8002c30:	007a1200 	.word	0x007a1200

08002c34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c50:	f7ff fff0 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	4904      	ldr	r1, [pc, #16]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c62:	5ccb      	ldrb	r3, [r1, r3]
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08005734 	.word	0x08005734

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c7c:	f7ff ffda 	bl	8002c34 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0adb      	lsrs	r3, r3, #11
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08005734 	.word	0x08005734

08002ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cbc:	f7ff fa02 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002cc0:	6178      	str	r0, [r7, #20]
 8002cc2:	e014      	b.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cce:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cdc:	f7ff f9f2 	bl	80020c4 <HAL_PWREx_GetVoltageRange>
 8002ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d10b      	bne.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d919      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002d00:	d902      	bls.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d02:	2302      	movs	r3, #2
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e013      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e010      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d902      	bls.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d14:	2303      	movs	r3, #3
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e00a      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d102      	bne.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d20:	2302      	movs	r3, #2
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	e004      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b70      	cmp	r3, #112	; 0x70
 8002d2a:	d101      	bne.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 0207 	bic.w	r2, r3, #7
 8002d38:	4909      	ldr	r1, [pc, #36]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d70:	2300      	movs	r3, #0
 8002d72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d041      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d88:	d02a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d8e:	d824      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d94:	d008      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d9a:	d81e      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002da6:	e018      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da8:	4b86      	ldr	r3, [pc, #536]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a85      	ldr	r2, [pc, #532]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db4:	e015      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fabb 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dc6:	e00c      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3320      	adds	r3, #32
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fba6 	bl	8003520 <RCCEx_PLLSAI2_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd8:	e003      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de8:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df6:	4973      	ldr	r1, [pc, #460]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dfe:	e001      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d041      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e18:	d02a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e1e:	d824      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e2a:	d81e      	bhi.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d010      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e36:	e018      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e38:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a61      	ldr	r2, [pc, #388]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e44:	e015      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa73 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e56:	e00c      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3320      	adds	r3, #32
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb5e 	bl	8003520 <RCCEx_PLLSAI2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e68:	e003      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e86:	494f      	ldr	r1, [pc, #316]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a0 	beq.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fb50 	bl	8001588 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eea:	e009      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fe fb4c 	bl	8001588 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	74fb      	strb	r3, [r7, #19]
        break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d15c      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01f      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f30:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fb0b 	bl	8001588 <HAL_GetTick>
 8002f72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f74:	e00b      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fb07 	bl	8001588 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d902      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ec      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb2:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd0:	7c7b      	ldrb	r3, [r7, #17]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fda:	4a9d      	ldr	r2, [pc, #628]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fee:	4b98      	ldr	r3, [pc, #608]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f023 0203 	bic.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	4994      	ldr	r1, [pc, #592]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003010:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f023 020c 	bic.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301e:	498c      	ldr	r1, [pc, #560]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003032:	4b87      	ldr	r3, [pc, #540]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4983      	ldr	r1, [pc, #524]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003054:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	497b      	ldr	r1, [pc, #492]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	4972      	ldr	r1, [pc, #456]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003098:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	496a      	ldr	r1, [pc, #424]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	4961      	ldr	r1, [pc, #388]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030dc:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4959      	ldr	r1, [pc, #356]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	4950      	ldr	r1, [pc, #320]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	4948      	ldr	r1, [pc, #288]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	493f      	ldr	r1, [pc, #252]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d028      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003172:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003182:	d106      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318e:	60d3      	str	r3, [r2, #12]
 8003190:	e011      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800319a:	d10c      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2101      	movs	r1, #1
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f8c8 	bl	8003338 <RCCEx_PLLSAI1_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	491f      	ldr	r1, [pc, #124]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ec:	60d3      	str	r3, [r2, #12]
 80031ee:	e011      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f899 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a02      	ldr	r2, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324a:	60d3      	str	r3, [r2, #12]
 800324c:	e014      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f867 	bl	8003338 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d02f      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003292:	4928      	ldr	r1, [pc, #160]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a2:	d10d      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f844 	bl	8003338 <RCCEx_PLLSAI1_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d014      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	74bb      	strb	r3, [r7, #18]
 80032be:	e011      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3320      	adds	r3, #32
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f925 	bl	8003520 <RCCEx_PLLSAI2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fe:	490d      	ldr	r1, [pc, #52]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003322:	4904      	ldr	r1, [pc, #16]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800332a:	7cbb      	ldrb	r3, [r7, #18]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000

08003338 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003346:	4b75      	ldr	r3, [pc, #468]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
       ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
       ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d047      	beq.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e044      	b.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d018      	beq.n	80033be <RCCEx_PLLSAI1_Config+0x86>
 800338c:	2b03      	cmp	r3, #3
 800338e:	d825      	bhi.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <RCCEx_PLLSAI1_Config+0x62>
 8003394:	2b02      	cmp	r3, #2
 8003396:	d009      	beq.n	80033ac <RCCEx_PLLSAI1_Config+0x74>
 8003398:	e020      	b.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800339a:	4b60      	ldr	r3, [pc, #384]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11d      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033aa:	e01a      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ac:	4b5b      	ldr	r3, [pc, #364]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e013      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ca:	4b54      	ldr	r3, [pc, #336]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033da:	e006      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e004      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	430b      	orrs	r3, r1
 8003408:	4944      	ldr	r1, [pc, #272]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d17d      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a40      	ldr	r2, [pc, #256]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fe f8b2 	bl	8001588 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003426:	e009      	b.n	800343c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003428:	f7fe f8ae 	bl	8001588 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	73fb      	strb	r3, [r7, #15]
        break;
 800343a:	e005      	b.n	8003448 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ef      	bne.n	8003428 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d160      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800345c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	0211      	lsls	r1, r2, #8
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0912      	lsrs	r2, r2, #4
 800346c:	0452      	lsls	r2, r2, #17
 800346e:	430a      	orrs	r2, r1
 8003470:	492a      	ldr	r1, [pc, #168]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	610b      	str	r3, [r1, #16]
 8003476:	e027      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d112      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003486:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	0211      	lsls	r1, r2, #8
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6912      	ldr	r2, [r2, #16]
 8003494:	0852      	lsrs	r2, r2, #1
 8003496:	3a01      	subs	r2, #1
 8003498:	0552      	lsls	r2, r2, #21
 800349a:	430a      	orrs	r2, r1
 800349c:	491f      	ldr	r1, [pc, #124]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	610b      	str	r3, [r1, #16]
 80034a2:	e011      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a4:	4b1d      	ldr	r3, [pc, #116]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	0211      	lsls	r1, r2, #8
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6952      	ldr	r2, [r2, #20]
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0652      	lsls	r2, r2, #25
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4916      	ldr	r1, [pc, #88]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe f858 	bl	8001588 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034dc:	f7fe f854 	bl	8001588 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
          break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ef      	beq.n	80034dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4904      	ldr	r1, [pc, #16]	; (800351c <RCCEx_PLLSAI1_Config+0x1e4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000

08003520 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800353a:	4b67      	ldr	r3, [pc, #412]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0203 	and.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d10d      	bne.n	8003566 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
       ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003552:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
       ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d047      	beq.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e044      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d018      	beq.n	80035a6 <RCCEx_PLLSAI2_Config+0x86>
 8003574:	2b03      	cmp	r3, #3
 8003576:	d825      	bhi.n	80035c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003578:	2b01      	cmp	r3, #1
 800357a:	d002      	beq.n	8003582 <RCCEx_PLLSAI2_Config+0x62>
 800357c:	2b02      	cmp	r3, #2
 800357e:	d009      	beq.n	8003594 <RCCEx_PLLSAI2_Config+0x74>
 8003580:	e020      	b.n	80035c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003582:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e01a      	b.n	80035ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e013      	b.n	80035ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a6:	4b4c      	ldr	r3, [pc, #304]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c2:	e006      	b.n	80035d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e004      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035da:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	430b      	orrs	r3, r1
 80035f0:	4939      	ldr	r1, [pc, #228]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d167      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a35      	ldr	r2, [pc, #212]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd ffbe 	bl	8001588 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fd ffba 	bl	8001588 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
        break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d14a      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d111      	bne.n	8003660 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800363c:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	0912      	lsrs	r2, r2, #4
 8003654:	0452      	lsls	r2, r2, #17
 8003656:	430a      	orrs	r2, r1
 8003658:	491f      	ldr	r1, [pc, #124]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	614b      	str	r3, [r1, #20]
 800365e:	e011      	b.n	8003684 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003668:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	0211      	lsls	r1, r2, #8
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6912      	ldr	r2, [r2, #16]
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0652      	lsls	r2, r2, #25
 800367c:	430a      	orrs	r2, r1
 800367e:	4916      	ldr	r1, [pc, #88]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd ff7a 	bl	8001588 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003698:	f7fd ff76 	bl	8001588 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
          break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fd50 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fa50 	bl	8003bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d122      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d11b      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0202 	mvn.w	r2, #2
 80037b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f9d8 	bl	8003b82 <HAL_TIM_IC_CaptureCallback>
 80037d2:	e005      	b.n	80037e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f9ca 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9db 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d122      	bne.n	800383a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d11b      	bne.n	800383a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0204 	mvn.w	r2, #4
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9ae 	bl	8003b82 <HAL_TIM_IC_CaptureCallback>
 8003826:	e005      	b.n	8003834 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9a0 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9b1 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d122      	bne.n	800388e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11b      	bne.n	800388e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0208 	mvn.w	r2, #8
 800385e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f984 	bl	8003b82 <HAL_TIM_IC_CaptureCallback>
 800387a:	e005      	b.n	8003888 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f976 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f987 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d122      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d11b      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0210 	mvn.w	r2, #16
 80038b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2208      	movs	r2, #8
 80038b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f95a 	bl	8003b82 <HAL_TIM_IC_CaptureCallback>
 80038ce:	e005      	b.n	80038dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f94c 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f95d 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10e      	bne.n	800390e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0201 	mvn.w	r2, #1
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f926 	bl	8003b5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d10e      	bne.n	800393a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d107      	bne.n	800393a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fb09 	bl	8003f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003948:	d10e      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d107      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fafc 	bl	8003f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f90b 	bl	8003baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0220 	mvn.w	r2, #32
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fabc 	bl	8003f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_ConfigClockSource+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0b6      	b.n	8003b52 <HAL_TIM_ConfigClockSource+0x18a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d03e      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	f200 8087 	bhi.w	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_TIM_ConfigClockSource+0x176>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d87f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a38:	2b70      	cmp	r3, #112	; 0x70
 8003a3a:	d01a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xaa>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d87b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a40:	2b60      	cmp	r3, #96	; 0x60
 8003a42:	d050      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x11e>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d877      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a48:	2b50      	cmp	r3, #80	; 0x50
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xfe>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d873      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d058      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x13e>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d86f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d064      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d86b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d060      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d867      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d05a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15e>
 8003a70:	e062      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f000 f9b1 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
      break;
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f000 f99a 	bl	8003de8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 f90e 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2150      	movs	r1, #80	; 0x50
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f967 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 f92d 	bl	8003d52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2160      	movs	r1, #96	; 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f957 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e01c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 f8ee 	bl	8003cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f947 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e00c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 f93e 	bl	8003db2 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e003      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a40      	ldr	r2, [pc, #256]	; (8003cd4 <TIM_Base_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d00f      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3d      	ldr	r2, [pc, #244]	; (8003cd8 <TIM_Base_SetConfig+0x118>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3c      	ldr	r2, [pc, #240]	; (8003cdc <TIM_Base_SetConfig+0x11c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3b      	ldr	r2, [pc, #236]	; (8003ce0 <TIM_Base_SetConfig+0x120>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <TIM_Base_SetConfig+0x124>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <TIM_Base_SetConfig+0x114>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d01b      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <TIM_Base_SetConfig+0x118>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d017      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	; (8003cdc <TIM_Base_SetConfig+0x11c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <TIM_Base_SetConfig+0x120>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <TIM_Base_SetConfig+0x124>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a28      	ldr	r2, [pc, #160]	; (8003ce8 <TIM_Base_SetConfig+0x128>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <TIM_Base_SetConfig+0x12c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a26      	ldr	r2, [pc, #152]	; (8003cf0 <TIM_Base_SetConfig+0x130>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <TIM_Base_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_Base_SetConfig+0xf8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <TIM_Base_SetConfig+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_Base_SetConfig+0xf8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <TIM_Base_SetConfig+0x128>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_Base_SetConfig+0xf8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <TIM_Base_SetConfig+0x12c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0xf8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <TIM_Base_SetConfig+0x130>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d103      	bne.n	8003cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	615a      	str	r2, [r3, #20]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40013400 	.word	0x40013400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f023 030a 	bic.w	r3, r3, #10
 8003d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b087      	sub	sp, #28
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0210 	bic.w	r2, r3, #16
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	031b      	lsls	r3, r3, #12
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 0307 	orr.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e068      	b.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d108      	bne.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d018      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10c      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40014000 	.word	0x40014000

08003f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e040      	b.n	8004008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f94e 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fc22 	bl	80047fc <UART_SetConfig>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e022      	b.n	8004008 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fea0 	bl	8004d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ff27 	bl	8004e54 <UART_CheckIdleState>
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004024:	2b20      	cmp	r3, #32
 8004026:	f040 8082 	bne.w	800412e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_Transmit+0x26>
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07a      	b.n	8004130 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x38>
 8004044:	2302      	movs	r3, #2
 8004046:	e073      	b.n	8004130 <HAL_UART_Transmit+0x120>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2221      	movs	r2, #33	; 0x21
 800405c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800405e:	f7fd fa93 	bl	8001588 <HAL_GetTick>
 8004062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d108      	bne.n	8004090 <HAL_UART_Transmit+0x80>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040a0:	e02d      	b.n	80040fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2180      	movs	r1, #128	; 0x80
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 ff1a 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e039      	b.n	8004130 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ce:	b292      	uxth	r2, r2
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3302      	adds	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e008      	b.n	80040ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	b292      	uxth	r2, r2
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1cb      	bne.n	80040a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	2140      	movs	r1, #64	; 0x40
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fee6 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e005      	b.n	8004130 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800414a:	2b20      	cmp	r3, #32
 800414c:	d142      	bne.n	80041d4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_UART_Receive_DMA+0x22>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e03b      	b.n	80041d6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_UART_Receive_DMA+0x34>
 8004168:	2302      	movs	r3, #2
 800416a:	e034      	b.n	80041d6 <HAL_UART_Receive_DMA+0x9e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_UART_Receive_DMA+0xa8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01f      	beq.n	80041c4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	613b      	str	r3, [r7, #16]
   return(result);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 ff50 	bl	8005070 <UART_Start_Receive_DMA>
 80041d0:	4603      	mov	r3, r0
 80041d2:	e000      	b.n	80041d6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40008000 	.word	0x40008000

080041e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0ba      	sub	sp, #232	; 0xe8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800420a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800420e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004212:	4013      	ands	r3, r2
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d115      	bne.n	800424c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00f      	beq.n	800424c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 82a6 	beq.w	800478e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
      }
      return;
 800424a:	e2a0      	b.n	800478e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800424c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8117 	beq.w	8004484 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004266:	4b85      	ldr	r3, [pc, #532]	; (800447c <HAL_UART_IRQHandler+0x298>)
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 810a 	beq.w	8004484 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d011      	beq.n	80042a0 <HAL_UART_IRQHandler+0xbc>
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	f043 0201 	orr.w	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d011      	beq.n	80042d0 <HAL_UART_IRQHandler+0xec>
 80042ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2202      	movs	r2, #2
 80042be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c6:	f043 0204 	orr.w	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <HAL_UART_IRQHandler+0x11c>
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2204      	movs	r2, #4
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800431c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004332:	f043 0208 	orr.w	r2, r3, #8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800433c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <HAL_UART_IRQHandler+0x18a>
 8004348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00c      	beq.n	800436e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800435c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 820c 	beq.w	8004792 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d04f      	beq.n	8004466 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 ff1e 	bl	8005208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d141      	bne.n	800445e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004406:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800440a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800441e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1d9      	bne.n	80043da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	2b00      	cmp	r3, #0
 800442c:	d013      	beq.n	8004456 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <HAL_UART_IRQHandler+0x29c>)
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd fb3c 	bl	8001ab8 <HAL_DMA_Abort_IT>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d017      	beq.n	8004476 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004450:	4610      	mov	r0, r2
 8004452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e00f      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9ba 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e00b      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9b6 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	e007      	b.n	8004476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9b2 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004474:	e18d      	b.n	8004792 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	bf00      	nop
    return;
 8004478:	e18b      	b.n	8004792 <HAL_UART_IRQHandler+0x5ae>
 800447a:	bf00      	nop
 800447c:	04000120 	.word	0x04000120
 8004480:	080054a7 	.word	0x080054a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004488:	2b01      	cmp	r3, #1
 800448a:	f040 8146 	bne.w	800471a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 813f 	beq.w	800471a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8138 	beq.w	800471a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2210      	movs	r2, #16
 80044b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	f040 80b4 	bne.w	800462a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 815f 	beq.w	8004796 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f080 8157 	bcs.w	8004796 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 8085 	bne.w	800460e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800452e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004532:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800453a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1da      	bne.n	8004504 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800455e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004572:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004576:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800457a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e1      	bne.n	800454e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800459a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045b6:	e841 2300 	strex	r3, r2, [r1]
 80045ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1e3      	bne.n	800458a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045de:	f023 0310 	bic.w	r3, r3, #16
 80045e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e4      	bne.n	80045ce <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fa17 	bl	8001a3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800461a:	b29b      	uxth	r3, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	b29b      	uxth	r3, r3
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8de 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004628:	e0b5      	b.n	8004796 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004636:	b29b      	uxth	r3, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a7 	beq.w	800479a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800464c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a2 	beq.w	800479a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800466a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
 800467a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800467e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e4      	bne.n	8004656 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3308      	adds	r3, #8
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	623b      	str	r3, [r7, #32]
   return(result);
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3308      	adds	r3, #8
 80046ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046b0:	633a      	str	r2, [r7, #48]	; 0x30
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e3      	bne.n	800468c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	617b      	str	r3, [r7, #20]
   return(result);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e4      	bne.n	80046d6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f866 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004718:	e03f      	b.n	800479a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <HAL_UART_IRQHandler+0x560>
 8004726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800473a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fef2 	bl	8005526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004742:	e02d      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01c      	beq.n	800479e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
    }
    return;
 800476c:	e017      	b.n	800479e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fea3 	bl	80054d2 <UART_EndTransmit_IT>
    return;
 800478c:	e008      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800478e:	bf00      	nop
 8004790:	e006      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004792:	bf00      	nop
 8004794:	e004      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800479e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80047a0:	37e8      	adds	r7, #232	; 0xe8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	4313      	orrs	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4bad      	ldr	r3, [pc, #692]	; (8004adc <UART_SetConfig+0x2e0>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	430b      	orrs	r3, r1
 8004832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4aa2      	ldr	r2, [pc, #648]	; (8004ae0 <UART_SetConfig+0x2e4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	4313      	orrs	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a99      	ldr	r2, [pc, #612]	; (8004ae4 <UART_SetConfig+0x2e8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d121      	bne.n	80048c6 <UART_SetConfig+0xca>
 8004882:	4b99      	ldr	r3, [pc, #612]	; (8004ae8 <UART_SetConfig+0x2ec>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b03      	cmp	r3, #3
 800488e:	d817      	bhi.n	80048c0 <UART_SetConfig+0xc4>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x9c>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048b5 	.word	0x080048b5
 80048a0:	080048af 	.word	0x080048af
 80048a4:	080048bb 	.word	0x080048bb
 80048a8:	2301      	movs	r3, #1
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	e0e7      	b.n	8004a7e <UART_SetConfig+0x282>
 80048ae:	2302      	movs	r3, #2
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e0e4      	b.n	8004a7e <UART_SetConfig+0x282>
 80048b4:	2304      	movs	r3, #4
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	e0e1      	b.n	8004a7e <UART_SetConfig+0x282>
 80048ba:	2308      	movs	r3, #8
 80048bc:	76fb      	strb	r3, [r7, #27]
 80048be:	e0de      	b.n	8004a7e <UART_SetConfig+0x282>
 80048c0:	2310      	movs	r3, #16
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e0db      	b.n	8004a7e <UART_SetConfig+0x282>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a88      	ldr	r2, [pc, #544]	; (8004aec <UART_SetConfig+0x2f0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d132      	bne.n	8004936 <UART_SetConfig+0x13a>
 80048d0:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <UART_SetConfig+0x2ec>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d828      	bhi.n	8004930 <UART_SetConfig+0x134>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0xe8>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004931 	.word	0x08004931
 80048ec:	08004931 	.word	0x08004931
 80048f0:	08004931 	.word	0x08004931
 80048f4:	08004925 	.word	0x08004925
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004931 	.word	0x08004931
 8004904:	0800491f 	.word	0x0800491f
 8004908:	08004931 	.word	0x08004931
 800490c:	08004931 	.word	0x08004931
 8004910:	08004931 	.word	0x08004931
 8004914:	0800492b 	.word	0x0800492b
 8004918:	2300      	movs	r3, #0
 800491a:	76fb      	strb	r3, [r7, #27]
 800491c:	e0af      	b.n	8004a7e <UART_SetConfig+0x282>
 800491e:	2302      	movs	r3, #2
 8004920:	76fb      	strb	r3, [r7, #27]
 8004922:	e0ac      	b.n	8004a7e <UART_SetConfig+0x282>
 8004924:	2304      	movs	r3, #4
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e0a9      	b.n	8004a7e <UART_SetConfig+0x282>
 800492a:	2308      	movs	r3, #8
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e0a6      	b.n	8004a7e <UART_SetConfig+0x282>
 8004930:	2310      	movs	r3, #16
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e0a3      	b.n	8004a7e <UART_SetConfig+0x282>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <UART_SetConfig+0x2f4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <UART_SetConfig+0x186>
 8004940:	4b69      	ldr	r3, [pc, #420]	; (8004ae8 <UART_SetConfig+0x2ec>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d013      	beq.n	8004976 <UART_SetConfig+0x17a>
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d814      	bhi.n	800497c <UART_SetConfig+0x180>
 8004952:	2b20      	cmp	r3, #32
 8004954:	d009      	beq.n	800496a <UART_SetConfig+0x16e>
 8004956:	2b20      	cmp	r3, #32
 8004958:	d810      	bhi.n	800497c <UART_SetConfig+0x180>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <UART_SetConfig+0x168>
 800495e:	2b10      	cmp	r3, #16
 8004960:	d006      	beq.n	8004970 <UART_SetConfig+0x174>
 8004962:	e00b      	b.n	800497c <UART_SetConfig+0x180>
 8004964:	2300      	movs	r3, #0
 8004966:	76fb      	strb	r3, [r7, #27]
 8004968:	e089      	b.n	8004a7e <UART_SetConfig+0x282>
 800496a:	2302      	movs	r3, #2
 800496c:	76fb      	strb	r3, [r7, #27]
 800496e:	e086      	b.n	8004a7e <UART_SetConfig+0x282>
 8004970:	2304      	movs	r3, #4
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e083      	b.n	8004a7e <UART_SetConfig+0x282>
 8004976:	2308      	movs	r3, #8
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e080      	b.n	8004a7e <UART_SetConfig+0x282>
 800497c:	2310      	movs	r3, #16
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	e07d      	b.n	8004a7e <UART_SetConfig+0x282>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5b      	ldr	r2, [pc, #364]	; (8004af4 <UART_SetConfig+0x2f8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d120      	bne.n	80049ce <UART_SetConfig+0x1d2>
 800498c:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <UART_SetConfig+0x2ec>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004996:	2bc0      	cmp	r3, #192	; 0xc0
 8004998:	d013      	beq.n	80049c2 <UART_SetConfig+0x1c6>
 800499a:	2bc0      	cmp	r3, #192	; 0xc0
 800499c:	d814      	bhi.n	80049c8 <UART_SetConfig+0x1cc>
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d009      	beq.n	80049b6 <UART_SetConfig+0x1ba>
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d810      	bhi.n	80049c8 <UART_SetConfig+0x1cc>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <UART_SetConfig+0x1b4>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d006      	beq.n	80049bc <UART_SetConfig+0x1c0>
 80049ae:	e00b      	b.n	80049c8 <UART_SetConfig+0x1cc>
 80049b0:	2300      	movs	r3, #0
 80049b2:	76fb      	strb	r3, [r7, #27]
 80049b4:	e063      	b.n	8004a7e <UART_SetConfig+0x282>
 80049b6:	2302      	movs	r3, #2
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e060      	b.n	8004a7e <UART_SetConfig+0x282>
 80049bc:	2304      	movs	r3, #4
 80049be:	76fb      	strb	r3, [r7, #27]
 80049c0:	e05d      	b.n	8004a7e <UART_SetConfig+0x282>
 80049c2:	2308      	movs	r3, #8
 80049c4:	76fb      	strb	r3, [r7, #27]
 80049c6:	e05a      	b.n	8004a7e <UART_SetConfig+0x282>
 80049c8:	2310      	movs	r3, #16
 80049ca:	76fb      	strb	r3, [r7, #27]
 80049cc:	e057      	b.n	8004a7e <UART_SetConfig+0x282>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a49      	ldr	r2, [pc, #292]	; (8004af8 <UART_SetConfig+0x2fc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d125      	bne.n	8004a24 <UART_SetConfig+0x228>
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <UART_SetConfig+0x2ec>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e6:	d017      	beq.n	8004a18 <UART_SetConfig+0x21c>
 80049e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ec:	d817      	bhi.n	8004a1e <UART_SetConfig+0x222>
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f2:	d00b      	beq.n	8004a0c <UART_SetConfig+0x210>
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f8:	d811      	bhi.n	8004a1e <UART_SetConfig+0x222>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <UART_SetConfig+0x20a>
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d006      	beq.n	8004a12 <UART_SetConfig+0x216>
 8004a04:	e00b      	b.n	8004a1e <UART_SetConfig+0x222>
 8004a06:	2300      	movs	r3, #0
 8004a08:	76fb      	strb	r3, [r7, #27]
 8004a0a:	e038      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	76fb      	strb	r3, [r7, #27]
 8004a10:	e035      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a12:	2304      	movs	r3, #4
 8004a14:	76fb      	strb	r3, [r7, #27]
 8004a16:	e032      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	76fb      	strb	r3, [r7, #27]
 8004a1c:	e02f      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a1e:	2310      	movs	r3, #16
 8004a20:	76fb      	strb	r3, [r7, #27]
 8004a22:	e02c      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <UART_SetConfig+0x2e4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d125      	bne.n	8004a7a <UART_SetConfig+0x27e>
 8004a2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <UART_SetConfig+0x2ec>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3c:	d017      	beq.n	8004a6e <UART_SetConfig+0x272>
 8004a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a42:	d817      	bhi.n	8004a74 <UART_SetConfig+0x278>
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a48:	d00b      	beq.n	8004a62 <UART_SetConfig+0x266>
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d811      	bhi.n	8004a74 <UART_SetConfig+0x278>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <UART_SetConfig+0x260>
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d006      	beq.n	8004a68 <UART_SetConfig+0x26c>
 8004a5a:	e00b      	b.n	8004a74 <UART_SetConfig+0x278>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a62:	2302      	movs	r3, #2
 8004a64:	76fb      	strb	r3, [r7, #27]
 8004a66:	e00a      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e007      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e004      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a74:	2310      	movs	r3, #16
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e001      	b.n	8004a7e <UART_SetConfig+0x282>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <UART_SetConfig+0x2e4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	f040 8087 	bne.w	8004b98 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a8a:	7efb      	ldrb	r3, [r7, #27]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d837      	bhi.n	8004b00 <UART_SetConfig+0x304>
 8004a90:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0x29c>)
 8004a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a96:	bf00      	nop
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004b01 	.word	0x08004b01
 8004aa8:	08004acb 	.word	0x08004acb
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004b01 	.word	0x08004b01
 8004ab4:	08004b01 	.word	0x08004b01
 8004ab8:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe f8c6 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004ac0:	6178      	str	r0, [r7, #20]
        break;
 8004ac2:	e022      	b.n	8004b0a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <UART_SetConfig+0x300>)
 8004ac6:	617b      	str	r3, [r7, #20]
        break;
 8004ac8:	e01f      	b.n	8004b0a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fe f827 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8004ace:	6178      	str	r0, [r7, #20]
        break;
 8004ad0:	e01b      	b.n	8004b0a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ad6:	617b      	str	r3, [r7, #20]
        break;
 8004ad8:	e017      	b.n	8004b0a <UART_SetConfig+0x30e>
 8004ada:	bf00      	nop
 8004adc:	efff69f3 	.word	0xefff69f3
 8004ae0:	40008000 	.word	0x40008000
 8004ae4:	40013800 	.word	0x40013800
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40004400 	.word	0x40004400
 8004af0:	40004800 	.word	0x40004800
 8004af4:	40004c00 	.word	0x40004c00
 8004af8:	40005000 	.word	0x40005000
 8004afc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	76bb      	strb	r3, [r7, #26]
        break;
 8004b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80f1 	beq.w	8004cf4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d305      	bcc.n	8004b2e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d902      	bls.n	8004b34 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	76bb      	strb	r3, [r7, #26]
 8004b32:	e0df      	b.n	8004cf4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	020b      	lsls	r3, r1, #8
 8004b46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b4a:	0202      	lsls	r2, r0, #8
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	6849      	ldr	r1, [r1, #4]
 8004b50:	0849      	lsrs	r1, r1, #1
 8004b52:	4608      	mov	r0, r1
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	1814      	adds	r4, r2, r0
 8004b5a:	eb43 0501 	adc.w	r5, r3, r1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	f7fb fb2c 	bl	80001c8 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b7e:	d308      	bcc.n	8004b92 <UART_SetConfig+0x396>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d204      	bcs.n	8004b92 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	e0b0      	b.n	8004cf4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	76bb      	strb	r3, [r7, #26]
 8004b96:	e0ad      	b.n	8004cf4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba0:	d15b      	bne.n	8004c5a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004ba2:	7efb      	ldrb	r3, [r7, #27]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d828      	bhi.n	8004bfa <UART_SetConfig+0x3fe>
 8004ba8:	a201      	add	r2, pc, #4	; (adr r2, 8004bb0 <UART_SetConfig+0x3b4>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fe f83a 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004bd8:	6178      	str	r0, [r7, #20]
        break;
 8004bda:	e013      	b.n	8004c04 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe f84c 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8004be0:	6178      	str	r0, [r7, #20]
        break;
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <UART_SetConfig+0x510>)
 8004be6:	617b      	str	r3, [r7, #20]
        break;
 8004be8:	e00c      	b.n	8004c04 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fd ff97 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8004bee:	6178      	str	r0, [r7, #20]
        break;
 8004bf0:	e008      	b.n	8004c04 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	617b      	str	r3, [r7, #20]
        break;
 8004bf8:	e004      	b.n	8004c04 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	76bb      	strb	r3, [r7, #26]
        break;
 8004c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d074      	beq.n	8004cf4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	005a      	lsls	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b0f      	cmp	r3, #15
 8004c24:	d916      	bls.n	8004c54 <UART_SetConfig+0x458>
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2c:	d212      	bcs.n	8004c54 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f023 030f 	bic.w	r3, r3, #15
 8004c36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	89fb      	ldrh	r3, [r7, #14]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	89fa      	ldrh	r2, [r7, #14]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	e04f      	b.n	8004cf4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	76bb      	strb	r3, [r7, #26]
 8004c58:	e04c      	b.n	8004cf4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c5a:	7efb      	ldrb	r3, [r7, #27]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d828      	bhi.n	8004cb2 <UART_SetConfig+0x4b6>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x46c>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cb3 	.word	0x08004cb3
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004cb3 	.word	0x08004cb3
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cb3 	.word	0x08004cb3
 8004c88:	08004cab 	.word	0x08004cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fd ffde 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004c90:	6178      	str	r0, [r7, #20]
        break;
 8004c92:	e013      	b.n	8004cbc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7fd fff0 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8004c98:	6178      	str	r0, [r7, #20]
        break;
 8004c9a:	e00f      	b.n	8004cbc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <UART_SetConfig+0x510>)
 8004c9e:	617b      	str	r3, [r7, #20]
        break;
 8004ca0:	e00c      	b.n	8004cbc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca2:	f7fd ff3b 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8004ca6:	6178      	str	r0, [r7, #20]
        break;
 8004ca8:	e008      	b.n	8004cbc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	617b      	str	r3, [r7, #20]
        break;
 8004cb0:	e004      	b.n	8004cbc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	76bb      	strb	r3, [r7, #26]
        break;
 8004cba:	bf00      	nop
    }

    if (pclk != 0U)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	085a      	lsrs	r2, r3, #1
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	441a      	add	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d909      	bls.n	8004cf0 <UART_SetConfig+0x4f4>
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d205      	bcs.n	8004cf0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	e001      	b.n	8004cf4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d00:	7ebb      	ldrb	r3, [r7, #26]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	00f42400 	.word	0x00f42400

08004d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01a      	beq.n	8004e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d10a      	bne.n	8004e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e64:	f7fc fb90 	bl	8001588 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d10e      	bne.n	8004e96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f82d 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e023      	b.n	8004ede <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d10e      	bne.n	8004ec2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f817 	bl	8004ee6 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e00d      	b.n	8004ede <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b09c      	sub	sp, #112	; 0x70
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef6:	e0a5      	b.n	8005044 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	f000 80a1 	beq.w	8005044 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fc fb41 	bl	8001588 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d13e      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e6      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	663b      	str	r3, [r7, #96]	; 0x60
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3308      	adds	r3, #8
 8004f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e067      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d04f      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb2:	d147      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fbc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e6      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	66bb      	str	r3, [r7, #104]	; 0x68
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005010:	623a      	str	r2, [r7, #32]
 8005012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	69f9      	ldr	r1, [r7, #28]
 8005016:	6a3a      	ldr	r2, [r7, #32]
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	61bb      	str	r3, [r7, #24]
   return(result);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e5      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e010      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	f43f af4a 	beq.w	8004ef8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3770      	adds	r7, #112	; 0x70
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b096      	sub	sp, #88	; 0x58
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2222      	movs	r2, #34	; 0x22
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02b      	beq.n	80050fa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	4a42      	ldr	r2, [pc, #264]	; (80051b0 <UART_Start_Receive_DMA+0x140>)
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a41      	ldr	r2, [pc, #260]	; (80051b4 <UART_Start_Receive_DMA+0x144>)
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <UART_Start_Receive_DMA+0x148>)
 80050b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	2200      	movs	r2, #0
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3324      	adds	r3, #36	; 0x24
 80050cc:	4619      	mov	r1, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	461a      	mov	r2, r3
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f7fc fc51 	bl	800197c <HAL_DMA_Start_IT>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00c      	beq.n	80050fa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2210      	movs	r2, #16
 80050e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e055      	b.n	80051a6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	657b      	str	r3, [r7, #84]	; 0x54
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005128:	64bb      	str	r3, [r7, #72]	; 0x48
 800512a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800512e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	653b      	str	r3, [r7, #80]	; 0x50
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800515c:	637a      	str	r2, [r7, #52]	; 0x34
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	613b      	str	r3, [r7, #16]
   return(result);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005190:	623a      	str	r2, [r7, #32]
 8005192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	69f9      	ldr	r1, [r7, #28]
 8005196:	6a3a      	ldr	r2, [r7, #32]
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	61bb      	str	r3, [r7, #24]
   return(result);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3758      	adds	r7, #88	; 0x58
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	080052cf 	.word	0x080052cf
 80051b4:	080053f3 	.word	0x080053f3
 80051b8:	0800542b 	.word	0x0800542b

080051bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051bc:	b480      	push	{r7}
 80051be:	b089      	sub	sp, #36	; 0x24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	613b      	str	r3, [r7, #16]
   return(result);
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80051fc:	bf00      	nop
 80051fe:	3724      	adds	r7, #36	; 0x24
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b095      	sub	sp, #84	; 0x54
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522e:	643b      	str	r3, [r7, #64]	; 0x40
 8005230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	61fb      	str	r3, [r7, #28]
   return(result);
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3308      	adds	r3, #8
 8005260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e5      	bne.n	8005242 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527a:	2b01      	cmp	r3, #1
 800527c:	d118      	bne.n	80052b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	60bb      	str	r3, [r7, #8]
   return(result);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f023 0310 	bic.w	r3, r3, #16
 8005292:	647b      	str	r3, [r7, #68]	; 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	613b      	str	r3, [r7, #16]
   return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e6      	bne.n	800527e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052c2:	bf00      	nop
 80052c4:	3754      	adds	r7, #84	; 0x54
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b09c      	sub	sp, #112	; 0x70
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d170      	bne.n	80053cc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80052ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
 8005308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005310:	65bb      	str	r3, [r7, #88]	; 0x58
 8005312:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800531e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e6      	bne.n	80052f2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	f023 0301 	bic.w	r3, r3, #1
 800533a:	667b      	str	r3, [r7, #100]	; 0x64
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005344:	647a      	str	r2, [r7, #68]	; 0x44
 8005346:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800534a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e5      	bne.n	8005324 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	623b      	str	r3, [r7, #32]
   return(result);
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	663b      	str	r3, [r7, #96]	; 0x60
 8005370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005378:	633a      	str	r2, [r7, #48]	; 0x30
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800538c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005396:	2b01      	cmp	r3, #1
 8005398:	d118      	bne.n	80053cc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	617b      	str	r3, [r7, #20]
   return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e6      	bne.n	800539a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053da:	4619      	mov	r1, r3
 80053dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053de:	f7ff fa01 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053e2:	e002      	b.n	80053ea <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80053e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053e6:	f7fb fbed 	bl	8000bc4 <HAL_UART_RxCpltCallback>
}
 80053ea:	bf00      	nop
 80053ec:	3770      	adds	r7, #112	; 0x70
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	2b01      	cmp	r3, #1
 8005406:	d109      	bne.n	800541c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7ff f9e5 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800541a:	e002      	b.n	8005422 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff f9cd 	bl	80047bc <HAL_UART_RxHalfCpltCallback>
}
 8005422:	bf00      	nop
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800543c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d109      	bne.n	8005466 <UART_DMAError+0x3c>
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b21      	cmp	r3, #33	; 0x21
 8005456:	d106      	bne.n	8005466 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005460:	6978      	ldr	r0, [r7, #20]
 8005462:	f7ff feab 	bl	80051bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d109      	bne.n	8005488 <UART_DMAError+0x5e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b22      	cmp	r3, #34	; 0x22
 8005478:	d106      	bne.n	8005488 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005482:	6978      	ldr	r0, [r7, #20]
 8005484:	f7ff fec0 	bl	8005208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548e:	f043 0210 	orr.w	r2, r3, #16
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005498:	6978      	ldr	r0, [r7, #20]
 800549a:	f7ff f999 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff f983 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b088      	sub	sp, #32
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6979      	ldr	r1, [r7, #20]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	613b      	str	r3, [r7, #16]
   return(result);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff f945 	bl	80047a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 f820 	bl	8005594 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	08005774 	.word	0x08005774
 8005578:	08005774 	.word	0x08005774
 800557c:	08005774 	.word	0x08005774
 8005580:	08005778 	.word	0x08005778

08005584 <memset>:
 8005584:	4402      	add	r2, r0
 8005586:	4603      	mov	r3, r0
 8005588:	4293      	cmp	r3, r2
 800558a:	d100      	bne.n	800558e <memset+0xa>
 800558c:	4770      	bx	lr
 800558e:	f803 1b01 	strb.w	r1, [r3], #1
 8005592:	e7f9      	b.n	8005588 <memset+0x4>

08005594 <_init>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr

080055a0 <_fini>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr

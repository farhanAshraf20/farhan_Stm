
SReceive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f40  08003f40  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f48  08003f48  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000005c  08003fac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003fac  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e49a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca8  00000000  00000000  0002e526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000301d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fa1  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000beee  00000000  00000000  000573f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9b4a  00000000  00000000  000632e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ce31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002634  00000000  00000000  0014ce84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ee0 	.word	0x08003ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08003ee0 	.word	0x08003ee0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);
 80004c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c8:	2220      	movs	r2, #32
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <main+0x98>)
 80004cc:	4823      	ldr	r0, [pc, #140]	; (800055c <main+0x9c>)
 80004ce:	f002 fb8d 	bl	8002bec <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fc22 	bl	8000d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f84b 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8cb 	bl	8000674 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f899 	bl	8000614 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, num, 1, 5000);
 80004e2:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <main+0xa0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4619      	mov	r1, r3
 80004e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80004ec:	2201      	movs	r2, #1
 80004ee:	481b      	ldr	r0, [pc, #108]	; (800055c <main+0x9c>)
 80004f0:	f002 fc10 	bl	8002d14 <HAL_UART_Receive>



	  HAL_UART_Transmit(&huart1, msgRcv, sizeof(msg), 1000);
 80004f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f8:	2220      	movs	r2, #32
 80004fa:	491a      	ldr	r1, [pc, #104]	; (8000564 <main+0xa4>)
 80004fc:	4817      	ldr	r0, [pc, #92]	; (800055c <main+0x9c>)
 80004fe:	f002 fb75 	bl	8002bec <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, num, sizeof(num), 1000);
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0xa0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050c:	2201      	movs	r2, #1
 800050e:	4813      	ldr	r0, [pc, #76]	; (800055c <main+0x9c>)
 8000510:	f002 fb6c 	bl	8002bec <HAL_UART_Transmit>



	  switch(num)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <main+0xa0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10b      	bne.n	8000534 <main+0x74>
	  {
	  case 1:
	  {
	  HAL_UART_Transmit(&huart1, onMsg, sizeof(onMsg), 1000);
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	220b      	movs	r2, #11
 8000522:	4911      	ldr	r1, [pc, #68]	; (8000568 <main+0xa8>)
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x9c>)
 8000526:	f002 fb61 	bl	8002bec <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052e:	f000 fc69 	bl	8000e04 <HAL_Delay>
	  }
	  break;
 8000532:	e00b      	b.n	800054c <main+0x8c>



	  default :
	  { HAL_UART_Transmit(&huart1, defMsg, sizeof(defMsg), 1000);
 8000534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000538:	2210      	movs	r2, #16
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <main+0xac>)
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <main+0x9c>)
 800053e:	f002 fb55 	bl	8002bec <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f000 fc5d 	bl	8000e04 <HAL_Delay>
	  }
	  break;
 800054a:	bf00      	nop
	  }



	  HAL_Delay(2000);
 800054c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000550:	f000 fc58 	bl	8000e04 <HAL_Delay>
	  HAL_UART_Receive(&huart1, num, 1, 5000);
 8000554:	e7c5      	b.n	80004e2 <main+0x22>
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000
 800055c:	2000007c 	.word	0x2000007c
 8000560:	20000078 	.word	0x20000078
 8000564:	20000020 	.word	0x20000020
 8000568:	20000034 	.word	0x20000034
 800056c:	20000040 	.word	0x20000040

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fca6 	bl	8003ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 ffdd 	bl	8001554 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fa92 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	; 0x60
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c0:	2328      	movs	r3, #40	; 0x28
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f813 	bl	8001600 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e0:	f000 fa72 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fbe5 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000608:	f000 fa5e 	bl	8000ac8 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART1_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART1_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USART1_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART1_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART1_UART_Init+0x58>)
 8000658:	f002 fa7a 	bl	8002b50 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 fa31 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c
 8000670:	40013800 	.word	0x40013800

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800068a:	4bbc      	ldr	r3, [pc, #752]	; (800097c <MX_GPIO_Init+0x308>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4abb      	ldr	r2, [pc, #748]	; (800097c <MX_GPIO_Init+0x308>)
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4bb9      	ldr	r3, [pc, #740]	; (800097c <MX_GPIO_Init+0x308>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4bb6      	ldr	r3, [pc, #728]	; (800097c <MX_GPIO_Init+0x308>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4ab5      	ldr	r2, [pc, #724]	; (800097c <MX_GPIO_Init+0x308>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4bb3      	ldr	r3, [pc, #716]	; (800097c <MX_GPIO_Init+0x308>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4bb0      	ldr	r3, [pc, #704]	; (800097c <MX_GPIO_Init+0x308>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4aaf      	ldr	r2, [pc, #700]	; (800097c <MX_GPIO_Init+0x308>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4bad      	ldr	r3, [pc, #692]	; (800097c <MX_GPIO_Init+0x308>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4baa      	ldr	r3, [pc, #680]	; (800097c <MX_GPIO_Init+0x308>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4aa9      	ldr	r2, [pc, #676]	; (800097c <MX_GPIO_Init+0x308>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4ba7      	ldr	r3, [pc, #668]	; (800097c <MX_GPIO_Init+0x308>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	4ba4      	ldr	r3, [pc, #656]	; (800097c <MX_GPIO_Init+0x308>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4aa3      	ldr	r2, [pc, #652]	; (800097c <MX_GPIO_Init+0x308>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4ba1      	ldr	r3, [pc, #644]	; (800097c <MX_GPIO_Init+0x308>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000708:	489d      	ldr	r0, [pc, #628]	; (8000980 <MX_GPIO_Init+0x30c>)
 800070a:	f000 fed9 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f248 1124 	movw	r1, #33060	; 0x8124
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 fed2 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 800071c:	2200      	movs	r2, #0
 800071e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000722:	4898      	ldr	r0, [pc, #608]	; (8000984 <MX_GPIO_Init+0x310>)
 8000724:	f000 fecc 	bl	80014c0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f241 0181 	movw	r1, #4225	; 0x1081
 800072e:	4896      	ldr	r0, [pc, #600]	; (8000988 <MX_GPIO_Init+0x314>)
 8000730:	f000 fec6 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4893      	ldr	r0, [pc, #588]	; (8000988 <MX_GPIO_Init+0x314>)
 800073c:	f000 fec0 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000746:	4891      	ldr	r0, [pc, #580]	; (800098c <MX_GPIO_Init+0x318>)
 8000748:	f000 feba 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2120      	movs	r1, #32
 8000750:	488c      	ldr	r0, [pc, #560]	; (8000984 <MX_GPIO_Init+0x310>)
 8000752:	f000 feb5 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	4889      	ldr	r0, [pc, #548]	; (8000980 <MX_GPIO_Init+0x30c>)
 800075c:	f000 feb0 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000760:	f240 1315 	movw	r3, #277	; 0x115
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4881      	ldr	r0, [pc, #516]	; (8000980 <MX_GPIO_Init+0x30c>)
 800077a:	f000 fcf7 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800077e:	236a      	movs	r3, #106	; 0x6a
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000782:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	487b      	ldr	r0, [pc, #492]	; (8000980 <MX_GPIO_Init+0x30c>)
 8000794:	f000 fcea 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4877      	ldr	r0, [pc, #476]	; (800098c <MX_GPIO_Init+0x318>)
 80007b0:	f000 fcdc 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80007b4:	233f      	movs	r3, #63	; 0x3f
 80007b6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007b8:	230b      	movs	r3, #11
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4871      	ldr	r0, [pc, #452]	; (800098c <MX_GPIO_Init+0x318>)
 80007c8:	f000 fcd0 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80007cc:	2303      	movs	r3, #3
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007dc:	2308      	movs	r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fcbf 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED5_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED5_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80007ee:	f248 1324 	movw	r3, #33060	; 0x8124
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 fcaf 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800081e:	2301      	movs	r3, #1
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 fc9e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000830:	2310      	movs	r3, #16
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000834:	230b      	movs	r3, #11
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f000 fc91 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800084a:	23c0      	movs	r3, #192	; 0xc0
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800085a:	2305      	movs	r3, #5
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 fc80 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800086c:	2301      	movs	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000870:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4840      	ldr	r0, [pc, #256]	; (8000984 <MX_GPIO_Init+0x310>)
 8000882:	f000 fc73 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800088a:	230b      	movs	r3, #11
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	483a      	ldr	r0, [pc, #232]	; (8000984 <MX_GPIO_Init+0x310>)
 800089a:	f000 fc67 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED14_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED14_Pin
 800089e:	f24f 0334 	movw	r3, #61492	; 0xf034
 80008a2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4833      	ldr	r0, [pc, #204]	; (8000984 <MX_GPIO_Init+0x310>)
 80008b8:	f000 fc58 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80008bc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008ce:	2306      	movs	r3, #6
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4829      	ldr	r0, [pc, #164]	; (8000980 <MX_GPIO_Init+0x30c>)
 80008da:	f000 fc47 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80008de:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80008e2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008f0:	230a      	movs	r3, #10
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <MX_GPIO_Init+0x30c>)
 80008fc:	f000 fc36 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000912:	2304      	movs	r3, #4
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4819      	ldr	r0, [pc, #100]	; (8000984 <MX_GPIO_Init+0x310>)
 800091e:	f000 fc25 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000934:	2307      	movs	r3, #7
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_GPIO_Init+0x314>)
 8000940:	f000 fc14 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000944:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000948:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0x314>)
 800095c:	f000 fc06 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000960:	f243 0381 	movw	r3, #12417	; 0x3081
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	e00a      	b.n	8000990 <MX_GPIO_Init+0x31c>
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	48001000 	.word	0x48001000
 8000984:	48000400 	.word	0x48000400
 8000988:	48000c00 	.word	0x48000c00
 800098c:	48000800 	.word	0x48000800
 8000990:	484a      	ldr	r0, [pc, #296]	; (8000abc <MX_GPIO_Init+0x448>)
 8000992:	f000 fbeb 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000996:	f44f 7310 	mov.w	r3, #576	; 0x240
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4844      	ldr	r0, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x44c>)
 80009b0:	f000 fbdc 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80009b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	483d      	ldr	r0, [pc, #244]	; (8000ac0 <MX_GPIO_Init+0x44c>)
 80009cc:	f000 fbce 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80009d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fbc0 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fbae 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000a10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a22:	2306      	movs	r3, #6
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4824      	ldr	r0, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0x44c>)
 8000a2e:	f000 fb9d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481b      	ldr	r0, [pc, #108]	; (8000abc <MX_GPIO_Init+0x448>)
 8000a4e:	f000 fb8d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000a52:	2378      	movs	r3, #120	; 0x78
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0x448>)
 8000a6e:	f000 fb7d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x450>)
 8000a90:	f000 fb6c 	bl	800116c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2017      	movs	r0, #23
 8000a9a:	f000 fab2 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a9e:	2017      	movs	r0, #23
 8000aa0:	f000 facb 	bl	800103a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2028      	movs	r0, #40	; 0x28
 8000aaa:	f000 faaa 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aae:	2028      	movs	r0, #40	; 0x28
 8000ab0:	f000 fac3 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0ac      	sub	sp, #176	; 0xb0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2288      	movs	r2, #136	; 0x88
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 f9c7 	bl	8003ed0 <memset>
  if(huart->Instance==USART1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <HAL_UART_MspInit+0xc0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d142      	bne.n	8000bd2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fb3d 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ffb0 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6613      	str	r3, [r2, #96]	; 0x60
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0xc4>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000b98:	23c0      	movs	r3, #192	; 0xc0
 8000b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_UART_MspInit+0xc8>)
 8000bbe:	f000 fad5 	bl	800116c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2025      	movs	r0, #37	; 0x25
 8000bc8:	f000 fa1b 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bcc:	2025      	movs	r0, #37	; 0x25
 8000bce:	f000 fa34 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	37b0      	adds	r7, #176	; 0xb0
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f8c6 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c40:	2020      	movs	r0, #32
 8000c42:	f000 fc55 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c46:	2040      	movs	r0, #64	; 0x40
 8000c48:	f000 fc52 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c4c:	2080      	movs	r0, #128	; 0x80
 8000c4e:	f000 fc4f 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c56:	f000 fc4b 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f002 f927 	bl	8002eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000007c 	.word	0x2000007c

08000c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c7c:	f000 fc38 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c84:	f000 fc34 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c8c:	f000 fc30 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c94:	f000 fc2c 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c9c:	f000 fc28 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 f8c7 	bl	8003e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fbe1 	bl	80004c0 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d0c:	08003f50 	.word	0x08003f50
  ldr r2, =_sbss
 8000d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d14:	20000104 	.word	0x20000104

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f961 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f80e 	bl	8000d4c <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff feca 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f96d 	bl	8001056 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f937 	bl	8001002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000058 	.word	0x20000058
 8000dbc:	20000050 	.word	0x20000050
 8000dc0:	20000054 	.word	0x20000054

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000058 	.word	0x20000058
 8000de8:	20000100 	.word	0x20000100

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000100 	.word	0x20000100

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000058 	.word	0x20000058

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e022      	b.n	80010de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020e 	bic.w	r2, r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 021c 	and.w	r2, r3, #28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d005      	beq.n	800110e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e029      	b.n	8001162 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 020e 	bic.w	r2, r2, #14
 800111c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 021c 	and.w	r2, r3, #28
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e17f      	b.n	800147c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8171 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d118      	bne.n	800124c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ac 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_GPIO_Init+0x330>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x330>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_GPIO_Init+0x330>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x242>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x338>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x340>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x344>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x348>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x22a>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_GPIO_Init+0x334>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x350>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_GPIO_Init+0x350>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae78 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f806 	bl	8001520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_PWREx_GetVoltageRange+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001562:	d130      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001570:	d038      	beq.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2232      	movs	r2, #50	; 0x32
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001598:	e002      	b.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ac:	d102      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f2      	bne.n	800159a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c0:	d110      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e00f      	b.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d2:	d007      	beq.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015dc:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40007000 	.word	0x40007000
 80015f8:	20000050 	.word	0x20000050
 80015fc:	431bde83 	.word	0x431bde83

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e3d4      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161c:	4b9e      	ldr	r3, [pc, #632]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80e4 	beq.w	80017fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_RCC_OscConfig+0x4a>
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b0c      	cmp	r3, #12
 800163e:	f040 808b 	bne.w	8001758 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2b01      	cmp	r3, #1
 8001646:	f040 8087 	bne.w	8001758 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800164a:	4b93      	ldr	r3, [pc, #588]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x62>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e3ac      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_RCC_OscConfig+0x7c>
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167a:	e005      	b.n	8001688 <HAL_RCC_OscConfig+0x88>
 800167c:	4b86      	ldr	r3, [pc, #536]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	4293      	cmp	r3, r2
 800168a:	d223      	bcs.n	80016d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fd41 	bl	8002118 <RCC_SetFlashLatencyFromMSIRange>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e38d      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a0:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a7c      	ldr	r2, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4977      	ldr	r1, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4972      	ldr	r1, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
 80016d2:	e025      	b.n	8001720 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	496a      	ldr	r1, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f2:	4b69      	ldr	r3, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4965      	ldr	r1, [pc, #404]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d109      	bne.n	8001720 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fd01 	bl	8002118 <RCC_SetFlashLatencyFromMSIRange>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e34d      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001720:	f000 fc36 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b5c      	ldr	r3, [pc, #368]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	495a      	ldr	r1, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x29c>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_OscConfig+0x2a0>)
 800173e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <HAL_RCC_OscConfig+0x2a4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fb01 	bl	8000d4c <HAL_InitTick>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d052      	beq.n	80017fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	e331      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d032      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001760:	4b4d      	ldr	r3, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb3e 	bl	8000dec <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001774:	f7ff fb3a 	bl	8000dec <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e31a      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	493b      	ldr	r1, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	4936      	ldr	r1, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e01a      	b.n	80017fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a33      	ldr	r2, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb0b 	bl	8000dec <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017da:	f7ff fb07 	bl	8000dec <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e2e7      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x1da>
 80017f8:	e000      	b.n	80017fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d074      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b08      	cmp	r3, #8
 800180c:	d005      	beq.n	800181a <HAL_RCC_OscConfig+0x21a>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d10e      	bne.n	8001832 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d064      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d160      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e2c4      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x24a>
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a15      	ldr	r2, [pc, #84]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e01d      	b.n	8001886 <HAL_RCC_OscConfig+0x286>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x26e>
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x286>
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01c      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff faad 	bl	8000dec <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001894:	e011      	b.n	80018ba <HAL_RCC_OscConfig+0x2ba>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	08003ef8 	.word	0x08003ef8
 80018a0:	20000050 	.word	0x20000050
 80018a4:	20000054 	.word	0x20000054
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff faa0 	bl	8000dec <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e280      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	4baf      	ldr	r3, [pc, #700]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2a8>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa90 	bl	8000dec <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fa8c 	bl	8000dec <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e26c      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	4ba5      	ldr	r3, [pc, #660]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2d0>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d060      	beq.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x310>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d119      	bne.n	800193e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d116      	bne.n	800193e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	4b99      	ldr	r3, [pc, #612]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x328>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e249      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b93      	ldr	r3, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4990      	ldr	r1, [pc, #576]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	e040      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d023      	beq.n	800198e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001946:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a8b      	ldr	r2, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa4b 	bl	8000dec <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fa47 	bl	8000dec <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e227      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	497c      	ldr	r1, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e018      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a79      	ldr	r2, [pc, #484]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fa27 	bl	8000dec <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa23 	bl	8000dec <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e203      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff fa02 	bl	8000dec <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff f9fe 	bl	8000dec <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1de      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ef      	beq.n	80019ec <HAL_RCC_OscConfig+0x3ec>
 8001a0c:	e01b      	b.n	8001a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a14:	4a58      	ldr	r2, [pc, #352]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f9e5 	bl	8000dec <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff f9e1 	bl	8000dec <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1c1      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80a6 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a43      	ldr	r2, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a70:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <HAL_RCC_OscConfig+0x57c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d118      	bne.n	8001abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a8c:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_RCC_OscConfig+0x57c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3a      	ldr	r2, [pc, #232]	; (8001b7c <HAL_RCC_OscConfig+0x57c>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a98:	f7ff f9a8 	bl	8000dec <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa0:	f7ff f9a4 	bl	8000dec <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e184      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCC_OscConfig+0x57c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4d8>
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad6:	e024      	b.n	8001b22 <HAL_RCC_OscConfig+0x522>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d110      	bne.n	8001b02 <HAL_RCC_OscConfig+0x502>
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a24      	ldr	r2, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b00:	e00f      	b.n	8001b22 <HAL_RCC_OscConfig+0x522>
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f023 0304 	bic.w	r3, r3, #4
 8001b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f95f 	bl	8000dec <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7ff f95b 	bl	8000dec <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e139      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0ed      	beq.n	8001b32 <HAL_RCC_OscConfig+0x532>
 8001b56:	e01a      	b.n	8001b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff f948 	bl	8000dec <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7ff f944 	bl	8000dec <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d906      	bls.n	8001b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e122      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	4b90      	ldr	r3, [pc, #576]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e8      	bne.n	8001b60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8108 	beq.w	8001dba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	f040 80d0 	bne.w	8001d54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb4:	4b83      	ldr	r3, [pc, #524]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d130      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d127      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf4:	2a07      	cmp	r2, #7
 8001bf6:	bf14      	ite	ne
 8001bf8:	2201      	movne	r2, #1
 8001bfa:	2200      	moveq	r2, #0
 8001bfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d113      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	085b      	lsrs	r3, r3, #1
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d06e      	beq.n	8001d08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	d069      	beq.n	8001d04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c30:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c3c:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b7      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5c      	ldr	r2, [pc, #368]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c58:	f7ff f8c8 	bl	8000dec <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f8c4 	bl	8000dec <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0a4      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c72:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_OscConfig+0x7c8>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c8e:	3a01      	subs	r2, #1
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ca0:	0852      	lsrs	r2, r2, #1
 8001ca2:	3a01      	subs	r2, #1
 8001ca4:	0552      	lsls	r2, r2, #21
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cac:	0852      	lsrs	r2, r2, #1
 8001cae:	3a01      	subs	r2, #1
 8001cb0:	0652      	lsls	r2, r2, #25
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb8:	0912      	lsrs	r2, r2, #4
 8001cba:	0452      	lsls	r2, r2, #17
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	4941      	ldr	r1, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3e      	ldr	r2, [pc, #248]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cdc:	f7ff f886 	bl	8000dec <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f882 	bl	8000dec <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e062      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d02:	e05a      	b.n	8001dba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e059      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d152      	bne.n	8001dba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d2c:	f7ff f85e 	bl	8000dec <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f85a 	bl	8000dec <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e03a      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x734>
 8001d52:	e032      	b.n	8001dba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d02d      	beq.n	8001db6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d64:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d78:	f023 0303 	bic.w	r3, r3, #3
 8001d7c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001d84:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f82d 	bl	8000dec <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f829 	bl	8000dec <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e009      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x796>
 8001db4:	e001      	b.n	8001dba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	f99d808c 	.word	0xf99d808c

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0c8      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4961      	ldr	r1, [pc, #388]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b0      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d04c      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b56      	ldr	r3, [pc, #344]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d121      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e09e      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d115      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e092      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e54:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e086      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e07e      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 0203 	bic.w	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	493f      	ldr	r1, [pc, #252]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e86:	f7fe ffb1 	bl	8000dec <HAL_GetTick>
 8001e8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7fe ffad 	bl	8000dec <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e066      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 020c 	and.w	r2, r3, #12
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d1eb      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	492c      	ldr	r1, [pc, #176]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4924      	ldr	r1, [pc, #144]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_RCC_ClockConfig+0x1b0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e036      	b.n	8001f72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4918      	ldr	r1, [pc, #96]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4910      	ldr	r1, [pc, #64]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f42:	f000 f825 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490c      	ldr	r1, [pc, #48]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fef0 	bl	8000d4c <HAL_InitTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f70:	7afb      	ldrb	r3, [r7, #11]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08003ef8 	.word	0x08003ef8
 8001f88:	20000050 	.word	0x20000050
 8001f8c:	20000054 	.word	0x20000054

08001f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d121      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d11e      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e005      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d102      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e004      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d101      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d134      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0xa6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0xac>
 8002034:	e005      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002038:	617b      	str	r3, [r7, #20]
      break;
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800203e:	617b      	str	r3, [r7, #20]
      break;
 8002040:	e002      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	617b      	str	r3, [r7, #20]
      break;
 8002046:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	3301      	adds	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	fb02 f203 	mul.w	r2, r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	0e5b      	lsrs	r3, r3, #25
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	3301      	adds	r3, #1
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002088:	69bb      	ldr	r3, [r7, #24]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	08003f10 	.word	0x08003f10
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200

080020a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000050 	.word	0x20000050

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020c4:	f7ff fff0 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08003f08 	.word	0x08003f08

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020f0:	f7ff ffda 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0adb      	lsrs	r3, r3, #11
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4904      	ldr	r1, [pc, #16]	; (8002114 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	08003f08 	.word	0x08003f08

08002118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff fa02 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
 8002136:	e014      	b.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002150:	f7ff f9f2 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002168:	d10b      	bne.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b80      	cmp	r3, #128	; 0x80
 800216e:	d919      	bls.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2ba0      	cmp	r3, #160	; 0xa0
 8002174:	d902      	bls.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002176:	2302      	movs	r3, #2
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e013      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e010      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d902      	bls.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002188:	2303      	movs	r3, #3
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e00a      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d102      	bne.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002194:	2302      	movs	r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e004      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b70      	cmp	r3, #112	; 0x70
 800219e:	d101      	bne.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 0207 	bic.w	r2, r3, #7
 80021ac:	4909      	ldr	r1, [pc, #36]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e0:	2300      	movs	r3, #0
 80021e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d041      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021fc:	d02a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002202:	d824      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002208:	d008      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800220a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800220e:	d81e      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002218:	d010      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800221a:	e018      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221c:	4b86      	ldr	r3, [pc, #536]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a85      	ldr	r2, [pc, #532]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002228:	e015      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fabb 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3320      	adds	r3, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fba6 	bl	8002994 <RCCEx_PLLSAI2_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224c:	e003      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	74fb      	strb	r3, [r7, #19]
      break;
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800225c:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226a:	4973      	ldr	r1, [pc, #460]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002272:	e001      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d041      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002288:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800228c:	d02a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800228e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002292:	d824      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800229a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800229e:	d81e      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d010      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022aa:	e018      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ac:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a61      	ldr	r2, [pc, #388]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b8:	e015      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fa73 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ca:	e00c      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3320      	adds	r3, #32
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fb5e 	bl	8002994 <RCCEx_PLLSAI2_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022dc:	e003      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	74fb      	strb	r3, [r7, #19]
      break;
 80022e2:	e000      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ec:	4b52      	ldr	r3, [pc, #328]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fa:	494f      	ldr	r1, [pc, #316]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002302:	e001      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a0 	beq.w	8002456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a40      	ldr	r2, [pc, #256]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
 800233c:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002358:	f7fe fd48 	bl	8000dec <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800235e:	e009      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe fd44 	bl	8000dec <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d902      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	74fb      	strb	r3, [r7, #19]
        break;
 8002372:	e005      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d15c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d019      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fd03 	bl	8000dec <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e8:	e00b      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fcff 	bl	8000dec <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d902      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002400:	e006      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ec      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002426:	4904      	ldr	r1, [pc, #16]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
 8002434:	e006      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002444:	7c7b      	ldrb	r3, [r7, #17]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4b9e      	ldr	r3, [pc, #632]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a9d      	ldr	r2, [pc, #628]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002462:	4b98      	ldr	r3, [pc, #608]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 0203 	bic.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	4994      	ldr	r1, [pc, #592]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002484:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 020c 	bic.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	498c      	ldr	r1, [pc, #560]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024a6:	4b87      	ldr	r3, [pc, #540]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4983      	ldr	r1, [pc, #524]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c8:	4b7e      	ldr	r3, [pc, #504]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	497b      	ldr	r1, [pc, #492]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ea:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f8:	4972      	ldr	r1, [pc, #456]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250c:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	496a      	ldr	r1, [pc, #424]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	4961      	ldr	r1, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	4959      	ldr	r1, [pc, #356]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002572:	4b54      	ldr	r3, [pc, #336]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002580:	4950      	ldr	r1, [pc, #320]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002594:	4b4b      	ldr	r3, [pc, #300]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	4948      	ldr	r1, [pc, #288]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b6:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	493f      	ldr	r1, [pc, #252]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d028      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e6:	4937      	ldr	r1, [pc, #220]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f6:	d106      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e011      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800260e:	d10c      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f8c8 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d028      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	491f      	ldr	r1, [pc, #124]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002654:	d106      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002660:	60d3      	str	r3, [r2, #12]
 8002662:	e011      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f899 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02b      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b2:	d109      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a02      	ldr	r2, [pc, #8]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
 80026c0:	e014      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f867 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	4928      	ldr	r1, [pc, #160]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002716:	d10d      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f844 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3320      	adds	r3, #32
 8002742:	2102      	movs	r1, #2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f925 	bl	8002994 <RCCEx_PLLSAI2_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002772:	490d      	ldr	r1, [pc, #52]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800279e:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ba:	4b75      	ldr	r3, [pc, #468]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
       ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027de:	4b6c      	ldr	r3, [pc, #432]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
       ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d047      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e044      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d018      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x86>
 8002800:	2b03      	cmp	r3, #3
 8002802:	d825      	bhi.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
 8002804:	2b01      	cmp	r3, #1
 8002806:	d002      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x62>
 8002808:	2b02      	cmp	r3, #2
 800280a:	d009      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x74>
 800280c:	e020      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280e:	4b60      	ldr	r3, [pc, #384]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e01a      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002820:	4b5b      	ldr	r3, [pc, #364]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e013      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284e:	e006      	b.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e004      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002866:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	430b      	orrs	r3, r1
 800287c:	4944      	ldr	r1, [pc, #272]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d17d      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002888:	4b41      	ldr	r3, [pc, #260]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a40      	ldr	r2, [pc, #256]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe faaa 	bl	8000dec <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289a:	e009      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800289c:	f7fe faa6 	bl	8000dec <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	73fb      	strb	r3, [r7, #15]
        break;
 80028ae:	e005      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ef      	bne.n	800289c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d160      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	0912      	lsrs	r2, r2, #4
 80028e0:	0452      	lsls	r2, r2, #17
 80028e2:	430a      	orrs	r2, r1
 80028e4:	492a      	ldr	r1, [pc, #168]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]
 80028ea:	e027      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d112      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	0211      	lsls	r1, r2, #8
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6912      	ldr	r2, [r2, #16]
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	430a      	orrs	r2, r1
 8002910:	491f      	ldr	r1, [pc, #124]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
 8002916:	e011      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	0211      	lsls	r1, r2, #8
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6952      	ldr	r2, [r2, #20]
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0652      	lsls	r2, r2, #25
 8002934:	430a      	orrs	r2, r1
 8002936:	4916      	ldr	r1, [pc, #88]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fa50 	bl	8000dec <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294e:	e009      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002950:	f7fe fa4c 	bl	8000dec <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
          break;
 8002962:	e005      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ef      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a2:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
       ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029c6:	4b61      	ldr	r3, [pc, #388]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
       ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d047      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e044      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d018      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x86>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d825      	bhi.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <RCCEx_PLLSAI2_Config+0x62>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d009      	beq.n	8002a08 <RCCEx_PLLSAI2_Config+0x74>
 80029f4:	e020      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f6:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11d      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e01a      	b.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e013      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a36:	e006      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e004      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	430b      	orrs	r3, r1
 8002a64:	4939      	ldr	r1, [pc, #228]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d167      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f9b6 	bl	8000dec <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a82:	e009      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a84:	f7fe f9b2 	bl	8000dec <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	73fb      	strb	r3, [r7, #15]
        break;
 8002a96:	e005      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ef      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14a      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0912      	lsrs	r2, r2, #4
 8002ac8:	0452      	lsls	r2, r2, #17
 8002aca:	430a      	orrs	r2, r1
 8002acc:	491f      	ldr	r1, [pc, #124]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	614b      	str	r3, [r1, #20]
 8002ad2:	e011      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002adc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6912      	ldr	r2, [r2, #16]
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0652      	lsls	r2, r2, #25
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4916      	ldr	r1, [pc, #88]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe f972 	bl	8000dec <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0a:	e009      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b0c:	f7fe f96e 	bl	8000dec <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1e:	e005      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4904      	ldr	r1, [pc, #16]	; (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e040      	b.n	8002be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd ffd2 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fc94 	bl	80034bc <UART_SetConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e022      	b.n	8002be4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 ff12 	bl	80039d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 ff99 	bl	8003b14 <UART_CheckIdleState>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	f040 8082 	bne.w	8002d0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_UART_Transmit+0x26>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e07a      	b.n	8002d0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x38>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e073      	b.n	8002d0c <HAL_UART_Transmit+0x120>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2221      	movs	r2, #33	; 0x21
 8002c38:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f8d7 	bl	8000dec <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d108      	bne.n	8002c6c <HAL_UART_Transmit+0x80>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e003      	b.n	8002c74 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c7c:	e02d      	b.n	8002cda <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 ff8c 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e039      	b.n	8002d0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002caa:	b292      	uxth	r2, r2
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e008      	b.n	8002cc8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1cb      	bne.n	8002c7e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 ff58 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e005      	b.n	8002d0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	f040 80bf 	bne.w	8002eac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_Receive+0x26>
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0b7      	b.n	8002eae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_UART_Receive+0x38>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0b0      	b.n	8002eae <HAL_UART_Receive+0x19a>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2222      	movs	r2, #34	; 0x22
 8002d60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d68:	f7fe f840 	bl	8000dec <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d10e      	bne.n	8002da6 <HAL_UART_Receive+0x92>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_UART_Receive+0x88>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d9a:	e02d      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	22ff      	movs	r2, #255	; 0xff
 8002da0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002da4:	e028      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <HAL_UART_Receive+0xb6>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_UART_Receive+0xac>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dbe:	e01b      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	227f      	movs	r2, #127	; 0x7f
 8002dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dc8:	e016      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd2:	d10d      	bne.n	8002df0 <HAL_UART_Receive+0xdc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_UART_Receive+0xd2>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	227f      	movs	r2, #127	; 0x7f
 8002de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002de4:	e008      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002dee:	e003      	b.n	8002df8 <HAL_UART_Receive+0xe4>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002dfe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Receive+0x108>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002e2c:	e033      	b.n	8002e96 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2120      	movs	r1, #32
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 feb4 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e032      	b.n	8002eae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	8a7b      	ldrh	r3, [r7, #18]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	3302      	adds	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e00d      	b.n	8002e84 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8a7b      	ldrh	r3, [r7, #18]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4013      	ands	r3, r2
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1c5      	bne.n	8002e2e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0ba      	sub	sp, #232	; 0xe8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ee2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d115      	bne.n	8002f20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00f      	beq.n	8002f20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 82a6 	beq.w	8003462 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
      }
      return;
 8002f1e:	e2a0      	b.n	8003462 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8117 	beq.w	8003158 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f3a:	4b85      	ldr	r3, [pc, #532]	; (8003150 <HAL_UART_IRQHandler+0x298>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 810a 	beq.w	8003158 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d011      	beq.n	8002f74 <HAL_UART_IRQHandler+0xbc>
 8002f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d011      	beq.n	8002fa4 <HAL_UART_IRQHandler+0xec>
 8002f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00b      	beq.n	8002fa4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2202      	movs	r2, #2
 8002f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9a:	f043 0204 	orr.w	r2, r3, #4
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d011      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x11c>
 8002fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	f043 0202 	orr.w	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d017      	beq.n	8003010 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	f043 0208 	orr.w	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <HAL_UART_IRQHandler+0x18a>
 800301c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00c      	beq.n	8003042 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 820c 	beq.w	8003466 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800308e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003092:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003096:	2b00      	cmp	r3, #0
 8003098:	d04f      	beq.n	800313a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fe47 	bl	8003d2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d141      	bne.n	8003132 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3308      	adds	r3, #8
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1d9      	bne.n	80030ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d013      	beq.n	800312a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_UART_IRQHandler+0x29c>)
 8003108:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd ffeb 	bl	80010ea <HAL_DMA_Abort_IT>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d017      	beq.n	800314a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003124:	4610      	mov	r0, r2
 8003126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	e00f      	b.n	800314a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9b0 	bl	8003490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	e00b      	b.n	800314a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9ac 	bl	8003490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	e007      	b.n	800314a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f9a8 	bl	8003490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003148:	e18d      	b.n	8003466 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314a:	bf00      	nop
    return;
 800314c:	e18b      	b.n	8003466 <HAL_UART_IRQHandler+0x5ae>
 800314e:	bf00      	nop
 8003150:	04000120 	.word	0x04000120
 8003154:	08003df5 	.word	0x08003df5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8146 	bne.w	80033ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 813f 	beq.w	80033ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8138 	beq.w	80033ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	f040 80b4 	bne.w	80032fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 815f 	beq.w	800346a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031b6:	429a      	cmp	r2, r3
 80031b8:	f080 8157 	bcs.w	800346a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8085 	bne.w	80032e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800320e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800321a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1da      	bne.n	80031d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800324a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800324e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e1      	bne.n	8003222 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3308      	adds	r3, #8
 800327e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e3      	bne.n	800325e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80032c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032cc:	e841 2300 	strex	r3, r2, [r1]
 80032d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e4      	bne.n	80032a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fec6 	bl	800106e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8d4 	bl	80034a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032fc:	e0b5      	b.n	800346a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800330a:	b29b      	uxth	r3, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a7 	beq.w	800346e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a2 	beq.w	800346e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800333e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e4      	bne.n	800332a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	623b      	str	r3, [r7, #32]
   return(result);
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3308      	adds	r3, #8
 8003380:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003384:	633a      	str	r2, [r7, #48]	; 0x30
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800338a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e3      	bne.n	8003360 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	617b      	str	r3, [r7, #20]
   return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e4      	bne.n	80033aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f85c 	bl	80034a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ec:	e03f      	b.n	800346e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <HAL_UART_IRQHandler+0x560>
 80033fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800340e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fd2f 	bl	8003e74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003416:	e02d      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01c      	beq.n	8003472 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
    return;
 8003440:	e017      	b.n	8003472 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_UART_IRQHandler+0x5bc>
 800344e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fce0 	bl	8003e20 <UART_EndTransmit_IT>
    return;
 8003460:	e008      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003462:	bf00      	nop
 8003464:	e006      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003466:	bf00      	nop
 8003468:	e004      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
      return;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
      return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003472:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003474:	37e8      	adds	r7, #232	; 0xe8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b5b0      	push	{r4, r5, r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4bad      	ldr	r3, [pc, #692]	; (800379c <UART_SetConfig+0x2e0>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	69f9      	ldr	r1, [r7, #28]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4aa2      	ldr	r2, [pc, #648]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	4313      	orrs	r3, r2
 8003522:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a99      	ldr	r2, [pc, #612]	; (80037a4 <UART_SetConfig+0x2e8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d121      	bne.n	8003586 <UART_SetConfig+0xca>
 8003542:	4b99      	ldr	r3, [pc, #612]	; (80037a8 <UART_SetConfig+0x2ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b03      	cmp	r3, #3
 800354e:	d817      	bhi.n	8003580 <UART_SetConfig+0xc4>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0x9c>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	08003575 	.word	0x08003575
 8003560:	0800356f 	.word	0x0800356f
 8003564:	0800357b 	.word	0x0800357b
 8003568:	2301      	movs	r3, #1
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	e0e7      	b.n	800373e <UART_SetConfig+0x282>
 800356e:	2302      	movs	r3, #2
 8003570:	76fb      	strb	r3, [r7, #27]
 8003572:	e0e4      	b.n	800373e <UART_SetConfig+0x282>
 8003574:	2304      	movs	r3, #4
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e0e1      	b.n	800373e <UART_SetConfig+0x282>
 800357a:	2308      	movs	r3, #8
 800357c:	76fb      	strb	r3, [r7, #27]
 800357e:	e0de      	b.n	800373e <UART_SetConfig+0x282>
 8003580:	2310      	movs	r3, #16
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e0db      	b.n	800373e <UART_SetConfig+0x282>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a88      	ldr	r2, [pc, #544]	; (80037ac <UART_SetConfig+0x2f0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d132      	bne.n	80035f6 <UART_SetConfig+0x13a>
 8003590:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <UART_SetConfig+0x2ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d828      	bhi.n	80035f0 <UART_SetConfig+0x134>
 800359e:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0xe8>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035f1 	.word	0x080035f1
 80035ac:	080035f1 	.word	0x080035f1
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035e5 	.word	0x080035e5
 80035b8:	080035f1 	.word	0x080035f1
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	080035df 	.word	0x080035df
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080035f1 	.word	0x080035f1
 80035d4:	080035eb 	.word	0x080035eb
 80035d8:	2300      	movs	r3, #0
 80035da:	76fb      	strb	r3, [r7, #27]
 80035dc:	e0af      	b.n	800373e <UART_SetConfig+0x282>
 80035de:	2302      	movs	r3, #2
 80035e0:	76fb      	strb	r3, [r7, #27]
 80035e2:	e0ac      	b.n	800373e <UART_SetConfig+0x282>
 80035e4:	2304      	movs	r3, #4
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e0a9      	b.n	800373e <UART_SetConfig+0x282>
 80035ea:	2308      	movs	r3, #8
 80035ec:	76fb      	strb	r3, [r7, #27]
 80035ee:	e0a6      	b.n	800373e <UART_SetConfig+0x282>
 80035f0:	2310      	movs	r3, #16
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e0a3      	b.n	800373e <UART_SetConfig+0x282>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6d      	ldr	r2, [pc, #436]	; (80037b0 <UART_SetConfig+0x2f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d120      	bne.n	8003642 <UART_SetConfig+0x186>
 8003600:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <UART_SetConfig+0x2ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800360a:	2b30      	cmp	r3, #48	; 0x30
 800360c:	d013      	beq.n	8003636 <UART_SetConfig+0x17a>
 800360e:	2b30      	cmp	r3, #48	; 0x30
 8003610:	d814      	bhi.n	800363c <UART_SetConfig+0x180>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d009      	beq.n	800362a <UART_SetConfig+0x16e>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d810      	bhi.n	800363c <UART_SetConfig+0x180>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <UART_SetConfig+0x168>
 800361e:	2b10      	cmp	r3, #16
 8003620:	d006      	beq.n	8003630 <UART_SetConfig+0x174>
 8003622:	e00b      	b.n	800363c <UART_SetConfig+0x180>
 8003624:	2300      	movs	r3, #0
 8003626:	76fb      	strb	r3, [r7, #27]
 8003628:	e089      	b.n	800373e <UART_SetConfig+0x282>
 800362a:	2302      	movs	r3, #2
 800362c:	76fb      	strb	r3, [r7, #27]
 800362e:	e086      	b.n	800373e <UART_SetConfig+0x282>
 8003630:	2304      	movs	r3, #4
 8003632:	76fb      	strb	r3, [r7, #27]
 8003634:	e083      	b.n	800373e <UART_SetConfig+0x282>
 8003636:	2308      	movs	r3, #8
 8003638:	76fb      	strb	r3, [r7, #27]
 800363a:	e080      	b.n	800373e <UART_SetConfig+0x282>
 800363c:	2310      	movs	r3, #16
 800363e:	76fb      	strb	r3, [r7, #27]
 8003640:	e07d      	b.n	800373e <UART_SetConfig+0x282>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5b      	ldr	r2, [pc, #364]	; (80037b4 <UART_SetConfig+0x2f8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d120      	bne.n	800368e <UART_SetConfig+0x1d2>
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <UART_SetConfig+0x2ec>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003656:	2bc0      	cmp	r3, #192	; 0xc0
 8003658:	d013      	beq.n	8003682 <UART_SetConfig+0x1c6>
 800365a:	2bc0      	cmp	r3, #192	; 0xc0
 800365c:	d814      	bhi.n	8003688 <UART_SetConfig+0x1cc>
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d009      	beq.n	8003676 <UART_SetConfig+0x1ba>
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d810      	bhi.n	8003688 <UART_SetConfig+0x1cc>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <UART_SetConfig+0x1b4>
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d006      	beq.n	800367c <UART_SetConfig+0x1c0>
 800366e:	e00b      	b.n	8003688 <UART_SetConfig+0x1cc>
 8003670:	2300      	movs	r3, #0
 8003672:	76fb      	strb	r3, [r7, #27]
 8003674:	e063      	b.n	800373e <UART_SetConfig+0x282>
 8003676:	2302      	movs	r3, #2
 8003678:	76fb      	strb	r3, [r7, #27]
 800367a:	e060      	b.n	800373e <UART_SetConfig+0x282>
 800367c:	2304      	movs	r3, #4
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e05d      	b.n	800373e <UART_SetConfig+0x282>
 8003682:	2308      	movs	r3, #8
 8003684:	76fb      	strb	r3, [r7, #27]
 8003686:	e05a      	b.n	800373e <UART_SetConfig+0x282>
 8003688:	2310      	movs	r3, #16
 800368a:	76fb      	strb	r3, [r7, #27]
 800368c:	e057      	b.n	800373e <UART_SetConfig+0x282>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <UART_SetConfig+0x2fc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d125      	bne.n	80036e4 <UART_SetConfig+0x228>
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <UART_SetConfig+0x2ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a6:	d017      	beq.n	80036d8 <UART_SetConfig+0x21c>
 80036a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ac:	d817      	bhi.n	80036de <UART_SetConfig+0x222>
 80036ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b2:	d00b      	beq.n	80036cc <UART_SetConfig+0x210>
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d811      	bhi.n	80036de <UART_SetConfig+0x222>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <UART_SetConfig+0x20a>
 80036be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c2:	d006      	beq.n	80036d2 <UART_SetConfig+0x216>
 80036c4:	e00b      	b.n	80036de <UART_SetConfig+0x222>
 80036c6:	2300      	movs	r3, #0
 80036c8:	76fb      	strb	r3, [r7, #27]
 80036ca:	e038      	b.n	800373e <UART_SetConfig+0x282>
 80036cc:	2302      	movs	r3, #2
 80036ce:	76fb      	strb	r3, [r7, #27]
 80036d0:	e035      	b.n	800373e <UART_SetConfig+0x282>
 80036d2:	2304      	movs	r3, #4
 80036d4:	76fb      	strb	r3, [r7, #27]
 80036d6:	e032      	b.n	800373e <UART_SetConfig+0x282>
 80036d8:	2308      	movs	r3, #8
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e02f      	b.n	800373e <UART_SetConfig+0x282>
 80036de:	2310      	movs	r3, #16
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e02c      	b.n	800373e <UART_SetConfig+0x282>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <UART_SetConfig+0x2e4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d125      	bne.n	800373a <UART_SetConfig+0x27e>
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <UART_SetConfig+0x2ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036fc:	d017      	beq.n	800372e <UART_SetConfig+0x272>
 80036fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003702:	d817      	bhi.n	8003734 <UART_SetConfig+0x278>
 8003704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003708:	d00b      	beq.n	8003722 <UART_SetConfig+0x266>
 800370a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370e:	d811      	bhi.n	8003734 <UART_SetConfig+0x278>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <UART_SetConfig+0x260>
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d006      	beq.n	8003728 <UART_SetConfig+0x26c>
 800371a:	e00b      	b.n	8003734 <UART_SetConfig+0x278>
 800371c:	2300      	movs	r3, #0
 800371e:	76fb      	strb	r3, [r7, #27]
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0x282>
 8003722:	2302      	movs	r3, #2
 8003724:	76fb      	strb	r3, [r7, #27]
 8003726:	e00a      	b.n	800373e <UART_SetConfig+0x282>
 8003728:	2304      	movs	r3, #4
 800372a:	76fb      	strb	r3, [r7, #27]
 800372c:	e007      	b.n	800373e <UART_SetConfig+0x282>
 800372e:	2308      	movs	r3, #8
 8003730:	76fb      	strb	r3, [r7, #27]
 8003732:	e004      	b.n	800373e <UART_SetConfig+0x282>
 8003734:	2310      	movs	r3, #16
 8003736:	76fb      	strb	r3, [r7, #27]
 8003738:	e001      	b.n	800373e <UART_SetConfig+0x282>
 800373a:	2310      	movs	r3, #16
 800373c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <UART_SetConfig+0x2e4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	f040 8087 	bne.w	8003858 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800374a:	7efb      	ldrb	r3, [r7, #27]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d837      	bhi.n	80037c0 <UART_SetConfig+0x304>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <UART_SetConfig+0x29c>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800377d 	.word	0x0800377d
 800375c:	080037c1 	.word	0x080037c1
 8003760:	08003785 	.word	0x08003785
 8003764:	080037c1 	.word	0x080037c1
 8003768:	0800378b 	.word	0x0800378b
 800376c:	080037c1 	.word	0x080037c1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037c1 	.word	0x080037c1
 8003778:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377c:	f7fe fca0 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8003780:	6178      	str	r0, [r7, #20]
        break;
 8003782:	e022      	b.n	80037ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <UART_SetConfig+0x300>)
 8003786:	617b      	str	r3, [r7, #20]
        break;
 8003788:	e01f      	b.n	80037ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe fc01 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 800378e:	6178      	str	r0, [r7, #20]
        break;
 8003790:	e01b      	b.n	80037ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	617b      	str	r3, [r7, #20]
        break;
 8003798:	e017      	b.n	80037ca <UART_SetConfig+0x30e>
 800379a:	bf00      	nop
 800379c:	efff69f3 	.word	0xefff69f3
 80037a0:	40008000 	.word	0x40008000
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40004800 	.word	0x40004800
 80037b4:	40004c00 	.word	0x40004c00
 80037b8:	40005000 	.word	0x40005000
 80037bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	76bb      	strb	r3, [r7, #26]
        break;
 80037c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80f1 	beq.w	80039b4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d305      	bcc.n	80037ee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d902      	bls.n	80037f4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	76bb      	strb	r3, [r7, #26]
 80037f2:	e0df      	b.n	80039b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	020b      	lsls	r3, r1, #8
 8003806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800380a:	0202      	lsls	r2, r0, #8
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6849      	ldr	r1, [r1, #4]
 8003810:	0849      	lsrs	r1, r1, #1
 8003812:	4608      	mov	r0, r1
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	1814      	adds	r4, r2, r0
 800381a:	eb43 0501 	adc.w	r5, r3, r1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fc fccc 	bl	80001c8 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383e:	d308      	bcc.n	8003852 <UART_SetConfig+0x396>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003846:	d204      	bcs.n	8003852 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e0b0      	b.n	80039b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	76bb      	strb	r3, [r7, #26]
 8003856:	e0ad      	b.n	80039b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	d15b      	bne.n	800391a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003862:	7efb      	ldrb	r3, [r7, #27]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d828      	bhi.n	80038ba <UART_SetConfig+0x3fe>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <UART_SetConfig+0x3b4>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003895 	.word	0x08003895
 8003874:	0800389d 	.word	0x0800389d
 8003878:	080038a5 	.word	0x080038a5
 800387c:	080038bb 	.word	0x080038bb
 8003880:	080038ab 	.word	0x080038ab
 8003884:	080038bb 	.word	0x080038bb
 8003888:	080038bb 	.word	0x080038bb
 800388c:	080038bb 	.word	0x080038bb
 8003890:	080038b3 	.word	0x080038b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003894:	f7fe fc14 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8003898:	6178      	str	r0, [r7, #20]
        break;
 800389a:	e013      	b.n	80038c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7fe fc26 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 80038a0:	6178      	str	r0, [r7, #20]
        break;
 80038a2:	e00f      	b.n	80038c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a4:	4b49      	ldr	r3, [pc, #292]	; (80039cc <UART_SetConfig+0x510>)
 80038a6:	617b      	str	r3, [r7, #20]
        break;
 80038a8:	e00c      	b.n	80038c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038aa:	f7fe fb71 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 80038ae:	6178      	str	r0, [r7, #20]
        break;
 80038b0:	e008      	b.n	80038c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	617b      	str	r3, [r7, #20]
        break;
 80038b8:	e004      	b.n	80038c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	76bb      	strb	r3, [r7, #26]
        break;
 80038c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d074      	beq.n	80039b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005a      	lsls	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	d916      	bls.n	8003914 <UART_SetConfig+0x458>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d212      	bcs.n	8003914 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f023 030f 	bic.w	r3, r3, #15
 80038f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	b29a      	uxth	r2, r3
 8003904:	89fb      	ldrh	r3, [r7, #14]
 8003906:	4313      	orrs	r3, r2
 8003908:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	89fa      	ldrh	r2, [r7, #14]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e04f      	b.n	80039b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	76bb      	strb	r3, [r7, #26]
 8003918:	e04c      	b.n	80039b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800391a:	7efb      	ldrb	r3, [r7, #27]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d828      	bhi.n	8003972 <UART_SetConfig+0x4b6>
 8003920:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <UART_SetConfig+0x46c>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003955 	.word	0x08003955
 8003930:	0800395d 	.word	0x0800395d
 8003934:	08003973 	.word	0x08003973
 8003938:	08003963 	.word	0x08003963
 800393c:	08003973 	.word	0x08003973
 8003940:	08003973 	.word	0x08003973
 8003944:	08003973 	.word	0x08003973
 8003948:	0800396b 	.word	0x0800396b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe fbb8 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8003950:	6178      	str	r0, [r7, #20]
        break;
 8003952:	e013      	b.n	800397c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe fbca 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 8003958:	6178      	str	r0, [r7, #20]
        break;
 800395a:	e00f      	b.n	800397c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <UART_SetConfig+0x510>)
 800395e:	617b      	str	r3, [r7, #20]
        break;
 8003960:	e00c      	b.n	800397c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003962:	f7fe fb15 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8003966:	6178      	str	r0, [r7, #20]
        break;
 8003968:	e008      	b.n	800397c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	617b      	str	r3, [r7, #20]
        break;
 8003970:	e004      	b.n	800397c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	76bb      	strb	r3, [r7, #26]
        break;
 800397a:	bf00      	nop
    }

    if (pclk != 0U)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085a      	lsrs	r2, r3, #1
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d909      	bls.n	80039b0 <UART_SetConfig+0x4f4>
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a2:	d205      	bcs.n	80039b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	e001      	b.n	80039b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	00f42400 	.word	0x00f42400

080039d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ace:	d10a      	bne.n	8003ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b24:	f7fd f962 	bl	8000dec <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d10e      	bne.n	8003b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f82d 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e023      	b.n	8003b9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d10e      	bne.n	8003b82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f817 	bl	8003ba6 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e00d      	b.n	8003b9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b09c      	sub	sp, #112	; 0x70
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	e0a5      	b.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	f000 80a1 	beq.w	8003d04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd f913 	bl	8000dec <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13e      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bec:	667b      	str	r3, [r7, #100]	; 0x64
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e6      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	663b      	str	r3, [r7, #96]	; 0x60
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e067      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d04f      	beq.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d147      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cd0:	623a      	str	r2, [r7, #32]
 8003cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	6a3a      	ldr	r2, [r7, #32]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e010      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	f43f af4a 	beq.w	8003bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3770      	adds	r7, #112	; 0x70
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b095      	sub	sp, #84	; 0x54
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d54:	643b      	str	r3, [r7, #64]	; 0x40
 8003d56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3308      	adds	r3, #8
 8003d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d118      	bne.n	8003dd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f023 0310 	bic.w	r3, r3, #16
 8003db8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6979      	ldr	r1, [r7, #20]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e6      	bne.n	8003da4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003de8:	bf00      	nop
 8003dea:	3754      	adds	r7, #84	; 0x54
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fb3c 	bl	8003490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6979      	ldr	r1, [r7, #20]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	613b      	str	r3, [r7, #16]
   return(result);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e6      	bne.n	8003e28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fb08 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6c:	bf00      	nop
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <__libc_init_array>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ec0 <__libc_init_array+0x38>)
 8003e8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ec4 <__libc_init_array+0x3c>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	2600      	movs	r6, #0
 8003e94:	42a6      	cmp	r6, r4
 8003e96:	d109      	bne.n	8003eac <__libc_init_array+0x24>
 8003e98:	4d0b      	ldr	r5, [pc, #44]	; (8003ec8 <__libc_init_array+0x40>)
 8003e9a:	4c0c      	ldr	r4, [pc, #48]	; (8003ecc <__libc_init_array+0x44>)
 8003e9c:	f000 f820 	bl	8003ee0 <_init>
 8003ea0:	1b64      	subs	r4, r4, r5
 8003ea2:	10a4      	asrs	r4, r4, #2
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	42a6      	cmp	r6, r4
 8003ea8:	d105      	bne.n	8003eb6 <__libc_init_array+0x2e>
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
 8003eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb0:	4798      	blx	r3
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	e7ee      	b.n	8003e94 <__libc_init_array+0xc>
 8003eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eba:	4798      	blx	r3
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	e7f2      	b.n	8003ea6 <__libc_init_array+0x1e>
 8003ec0:	08003f48 	.word	0x08003f48
 8003ec4:	08003f48 	.word	0x08003f48
 8003ec8:	08003f48 	.word	0x08003f48
 8003ecc:	08003f4c 	.word	0x08003f4c

08003ed0 <memset>:
 8003ed0:	4402      	add	r2, r0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d100      	bne.n	8003eda <memset+0xa>
 8003ed8:	4770      	bx	lr
 8003eda:	f803 1b01 	strb.w	r1, [r3], #1
 8003ede:	e7f9      	b.n	8003ed4 <memset+0x4>

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

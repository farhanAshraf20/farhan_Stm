
F_SP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a4  080050a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050ac  080050ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080050b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f4  20000018  080050cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080050cc  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e53  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5c  00000000  00000000  00039e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003caf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027235  00000000  00000000  0003f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e41  00000000  00000000  000666a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef914  00000000  00000000  0007e4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ddfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b50  00000000  00000000  0016de50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005044 	.word	0x08005044

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005044 	.word	0x08005044

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ff3e 	bl	8001346 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f821 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa27 	bl	8000920 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d2:	f000 f87f 	bl	80005d4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d6:	f000 f8b5 	bl	8000644 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004da:	f000 f8f1 	bl	80006c0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004de:	f000 f953 	bl	8000788 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 f98f 	bl	8000804 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 f9bd 	bl	8000864 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004ea:	f000 f9eb 	bl	80008c4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80004ee:	f000 f90d 	bl	800070c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_TransmitReceive(&hspi1, buffer_tx, buffer_rx, 10, 100);
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	230a      	movs	r3, #10
 80004f8:	4a02      	ldr	r2, [pc, #8]	; (8000504 <main+0x44>)
 80004fa:	4903      	ldr	r1, [pc, #12]	; (8000508 <main+0x48>)
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x4c>)
 80004fe:	f003 fac8 	bl	8003a92 <HAL_SPI_TransmitReceive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x42>
 8000504:	2000056c 	.word	0x2000056c
 8000508:	20000000 	.word	0x20000000
 800050c:	20000660 	.word	0x20000660

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f004 fd88 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f001 fe2f 	bl	8002198 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 fb8c 	bl	8000c5c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f001 fe0a 	bl	800215c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <SystemClock_Config+0xc0>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xc0>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000578:	2328      	movs	r3, #40	; 0x28
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f001 ff25 	bl	80023dc <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000598:	f000 fb60 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 faf7 	bl	8002ba8 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c0:	f000 fb4c 	bl	8000c5c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c4:	f002 ffe0 	bl	8003588 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <MX_DFSDM1_Init+0x6c>)
 80005dc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_DFSDM1_Init+0x68>)
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_DFSDM1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_DFSDM1_Init+0x68>)
 800060c:	2204      	movs	r2, #4
 800060e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_DFSDM1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_DFSDM1_Init+0x68>)
 8000618:	2201      	movs	r2, #1
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_DFSDM1_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_DFSDM1_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_DFSDM1_Init+0x68>)
 800062a:	f001 f837 	bl	800169c <HAL_DFSDM_ChannelInit>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000634:	f000 fb12 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000005c 	.word	0x2000005c
 8000640:	40016020 	.word	0x40016020

08000644 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_I2C2_Init+0x74>)
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_I2C2_Init+0x78>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000650:	f640 6214 	movw	r2, #3604	; 0xe14
 8000654:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_I2C2_Init+0x74>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000682:	f001 fafc 	bl	8001c7e <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 fae6 	bl	8000c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_I2C2_Init+0x74>)
 8000694:	f001 fb82 	bl	8001d9c <HAL_I2CEx_ConfigAnalogFilter>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800069e:	f000 fadd 	bl	8000c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C2_Init+0x74>)
 80006a6:	f001 fbc4 	bl	8001e32 <HAL_I2CEx_ConfigDigitalFilter>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006b0:	f000 fad4 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000520 	.word	0x20000520
 80006bc:	40005800 	.word	0x40005800

080006c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006c6:	4a10      	ldr	r2, [pc, #64]	; (8000708 <MX_QUADSPI_Init+0x48>)
 80006c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006d8:	2210      	movs	r2, #16
 80006da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006de:	2217      	movs	r2, #23
 80006e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_QUADSPI_Init+0x44>)
 80006f0:	f001 fdb8 	bl	8002264 <HAL_QSPI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80006fa:	f000 faaf 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200006c4 	.word	0x200006c4
 8000708:	a0001000 	.word	0xa0001000

0800070c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_SPI1_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_SPI1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_SPI1_Init+0x74>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_SPI1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x74>)
 8000726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800072a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x74>)
 800073a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x74>)
 8000742:	2210      	movs	r2, #16
 8000744:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x74>)
 800075a:	2207      	movs	r2, #7
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x74>)
 8000766:	2208      	movs	r2, #8
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_SPI1_Init+0x74>)
 800076c:	f003 f8ee 	bl	800394c <HAL_SPI_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fa71 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000660 	.word	0x20000660
 8000784:	40013000 	.word	0x40013000

08000788 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_SPI3_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_SPI3_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_SPI3_Init+0x74>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI3_Init+0x74>)
 80007a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI3_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_SPI3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI3_Init+0x74>)
 80007b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI3_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_SPI3_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI3_Init+0x74>)
 80007d6:	2207      	movs	r2, #7
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI3_Init+0x74>)
 80007e2:	2208      	movs	r2, #8
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_SPI3_Init+0x74>)
 80007e8:	f003 f8b0 	bl	800394c <HAL_SPI_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 fa33 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000578 	.word	0x20000578
 8000800:	40003c00 	.word	0x40003c00

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART1_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART1_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x58>)
 8000848:	f003 fc9a 	bl	8004180 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 fa03 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200005dc 	.word	0x200005dc
 8000860:	40013800 	.word	0x40013800

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART3_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MX_USART3_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART3_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART3_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART3_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART3_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART3_UART_Init+0x58>)
 80008a8:	f003 fc6a 	bl	8004180 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f9d3 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000094 	.word	0x20000094
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2202      	movs	r2, #2
 80008da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2202      	movs	r2, #2
 80008e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	f001 fadf 	bl	8001eca <HAL_PCD_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f9a3 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000118 	.word	0x20000118

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	4bbd      	ldr	r3, [pc, #756]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4abc      	ldr	r2, [pc, #752]	; (8000c2c <MX_GPIO_Init+0x30c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4bba      	ldr	r3, [pc, #744]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4bb7      	ldr	r3, [pc, #732]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4ab6      	ldr	r2, [pc, #728]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4bb4      	ldr	r3, [pc, #720]	; (8000c2c <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4bb1      	ldr	r3, [pc, #708]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4ab0      	ldr	r2, [pc, #704]	; (8000c2c <MX_GPIO_Init+0x30c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4bae      	ldr	r3, [pc, #696]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4bab      	ldr	r3, [pc, #684]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4aaa      	ldr	r2, [pc, #680]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4ba8      	ldr	r3, [pc, #672]	; (8000c2c <MX_GPIO_Init+0x30c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4ba5      	ldr	r3, [pc, #660]	; (8000c2c <MX_GPIO_Init+0x30c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4aa4      	ldr	r2, [pc, #656]	; (8000c2c <MX_GPIO_Init+0x30c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4ba2      	ldr	r3, [pc, #648]	; (8000c2c <MX_GPIO_Init+0x30c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009b4:	489e      	ldr	r0, [pc, #632]	; (8000c30 <MX_GPIO_Init+0x310>)
 80009b6:	f001 f927 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f248 1104 	movw	r1, #33028	; 0x8104
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 f920 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009c8:	2200      	movs	r2, #0
 80009ca:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009ce:	4899      	ldr	r0, [pc, #612]	; (8000c34 <MX_GPIO_Init+0x314>)
 80009d0:	f001 f91a 	bl	8001c08 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f241 0181 	movw	r1, #4225	; 0x1081
 80009da:	4897      	ldr	r0, [pc, #604]	; (8000c38 <MX_GPIO_Init+0x318>)
 80009dc:	f001 f914 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	4894      	ldr	r0, [pc, #592]	; (8000c38 <MX_GPIO_Init+0x318>)
 80009e8:	f001 f90e 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009f2:	4892      	ldr	r0, [pc, #584]	; (8000c3c <MX_GPIO_Init+0x31c>)
 80009f4:	f001 f908 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	488d      	ldr	r0, [pc, #564]	; (8000c34 <MX_GPIO_Init+0x314>)
 80009fe:	f001 f903 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	488a      	ldr	r0, [pc, #552]	; (8000c30 <MX_GPIO_Init+0x310>)
 8000a08:	f001 f8fe 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a0c:	f240 1315 	movw	r3, #277	; 0x115
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4882      	ldr	r0, [pc, #520]	; (8000c30 <MX_GPIO_Init+0x310>)
 8000a26:	f000 ff45 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a2a:	236a      	movs	r3, #106	; 0x6a
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	487c      	ldr	r0, [pc, #496]	; (8000c30 <MX_GPIO_Init+0x310>)
 8000a40:	f000 ff38 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4878      	ldr	r0, [pc, #480]	; (8000c3c <MX_GPIO_Init+0x31c>)
 8000a5c:	f000 ff2a 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a60:	233f      	movs	r3, #63	; 0x3f
 8000a62:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a64:	230b      	movs	r3, #11
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4872      	ldr	r0, [pc, #456]	; (8000c3c <MX_GPIO_Init+0x31c>)
 8000a74:	f000 ff1e 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 ff0d 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a9a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fefd 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000aba:	2308      	movs	r3, #8
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 feec 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f000 fedf 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	484a      	ldr	r0, [pc, #296]	; (8000c34 <MX_GPIO_Init+0x314>)
 8000b0c:	f000 fed2 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b14:	230b      	movs	r3, #11
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4844      	ldr	r0, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x314>)
 8000b24:	f000 fec6 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b28:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b2c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483c      	ldr	r0, [pc, #240]	; (8000c34 <MX_GPIO_Init+0x314>)
 8000b42:	f000 feb7 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b46:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b4a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4836      	ldr	r0, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x318>)
 8000b5e:	f000 fea9 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b62:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482f      	ldr	r0, [pc, #188]	; (8000c38 <MX_GPIO_Init+0x318>)
 8000b7c:	f000 fe9a 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4828      	ldr	r0, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x31c>)
 8000b9a:	f000 fe8b 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x31c>)
 8000bb6:	f000 fe7d 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_GPIO_Init+0x318>)
 8000bd6:	f000 fe6d 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bda:	2378      	movs	r3, #120	; 0x78
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4810      	ldr	r0, [pc, #64]	; (8000c38 <MX_GPIO_Init+0x318>)
 8000bf6:	f000 fe5d 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_GPIO_Init+0x314>)
 8000c18:	f000 fe4c 	bl	80018b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2017      	movs	r0, #23
 8000c22:	f000 fd04 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c26:	2017      	movs	r0, #23
 8000c28:	e00a      	b.n	8000c40 <MX_GPIO_Init+0x320>
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48001000 	.word	0x48001000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	f000 fd11 	bl	8001666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2028      	movs	r0, #40	; 0x28
 8000c4a:	f000 fcf0 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4e:	2028      	movs	r0, #40	; 0x28
 8000c50:	f000 fd09 	bl	8001666 <HAL_NVIC_EnableIRQ>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0ac      	sub	sp, #176	; 0xb0
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2288      	movs	r2, #136	; 0x88
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 f9af 	bl	8005034 <memset>
  if(DFSDM1_Init == 0)
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d142      	bne.n	8000d64 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f002 f960 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cfa:	f7ff ffaf 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d2e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d56:	f000 fdad 	bl	80018b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a02      	ldr	r2, [pc, #8]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d62:	6013      	str	r3, [r2, #0]
  }

}
 8000d64:	bf00      	nop
 8000d66:	37b0      	adds	r7, #176	; 0xb0
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000034 	.word	0x20000034
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48001000 	.word	0x48001000

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ac      	sub	sp, #176	; 0xb0
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2288      	movs	r2, #136	; 0x88
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 f94b 	bl	8005034 <memset>
  if(hi2c->Instance==I2C2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <HAL_I2C_MspInit+0xb0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13b      	bne.n	8000e20 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 f8fd 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f7ff ff4c 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e00:	4619      	mov	r1, r3
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000e04:	f000 fd56 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e12:	6593      	str	r3, [r2, #88]	; 0x58
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	37b0      	adds	r7, #176	; 0xb0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400

08000e34 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_QSPI_MspInit+0x7c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d128      	bne.n	8000ea8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e60:	6513      	str	r3, [r2, #80]	; 0x50
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_QSPI_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e86:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e8a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e98:	230a      	movs	r3, #10
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_QSPI_MspInit+0x84>)
 8000ea4:	f000 fd06 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	a0001000 	.word	0xa0001000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48001000 	.word	0x48001000

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	; 0x30
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <HAL_SPI_MspInit+0xdc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d129      	bne.n	8000f32 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f0e:	23e0      	movs	r3, #224	; 0xe0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f000 fcc2 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f30:	e02d      	b.n	8000f8e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_SPI_MspInit+0xe4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d128      	bne.n	8000f8e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f46:	6593      	str	r3, [r2, #88]	; 0x58
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_SPI_MspInit+0xe0>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <HAL_SPI_MspInit+0xe8>)
 8000f8a:	f000 fc93 	bl	80018b4 <HAL_GPIO_Init>
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40013000 	.word	0x40013000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40003c00 	.word	0x40003c00
 8000fa4:	48000800 	.word	0x48000800

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0ae      	sub	sp, #184	; 0xb8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2288      	movs	r2, #136	; 0x88
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f833 	bl	8005034 <memset>
  if(huart->Instance==USART1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_UART_MspInit+0x134>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d13b      	bne.n	8001050 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 ffe5 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ff0:	f7ff fe34 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8001000:	4b37      	ldr	r3, [pc, #220]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_UART_MspInit+0x138>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_UART_MspInit+0x138>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001024:	23c0      	movs	r3, #192	; 0xc0
 8001026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103c:	2307      	movs	r3, #7
 800103e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001046:	4619      	mov	r1, r3
 8001048:	4826      	ldr	r0, [pc, #152]	; (80010e4 <HAL_UART_MspInit+0x13c>)
 800104a:	f000 fc33 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800104e:	e040      	b.n	80010d2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <HAL_UART_MspInit+0x140>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d13b      	bne.n	80010d2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105a:	2304      	movs	r3, #4
 800105c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800105e:	2300      	movs	r3, #0
 8001060:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4618      	mov	r0, r3
 8001068:	f001 ffa4 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001072:	f7ff fdf3 	bl	8000c5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x138>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_UART_MspInit+0x138>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x138>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c0:	2307      	movs	r3, #7
 80010c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <HAL_UART_MspInit+0x144>)
 80010ce:	f000 fbf1 	bl	80018b4 <HAL_GPIO_Init>
}
 80010d2:	bf00      	nop
 80010d4:	37b8      	adds	r7, #184	; 0xb8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	40004800 	.word	0x40004800
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	; 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	; 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f003 ff8f 	bl	8005034 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800111e:	d17c      	bne.n	800121a <HAL_PCD_MspInit+0x12a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001124:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001126:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800112a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001136:	2318      	movs	r3, #24
 8001138:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800113a:	2307      	movs	r3, #7
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001142:	2302      	movs	r3, #2
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001146:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f001 ff2f 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800115c:	f7ff fd7e 	bl	8000c5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_PCD_MspInit+0x134>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <HAL_PCD_MspInit+0x134>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_PCD_MspInit+0x134>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f000 fb8d 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800119a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b4:	230a      	movs	r3, #10
 80011b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f000 fb76 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	4a15      	ldr	r2, [pc, #84]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d114      	bne.n	8001216 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6593      	str	r3, [r2, #88]	; 0x58
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_PCD_MspInit+0x134>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001204:	f001 f81e 	bl	8002244 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_PCD_MspInit+0x134>)
 800120e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001214:	e001      	b.n	800121a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001216:	f001 f815 	bl	8002244 <HAL_PWREx_EnableVddUSB>
}
 800121a:	bf00      	nop
 800121c:	37b0      	adds	r7, #176	; 0xb0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f8bc 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001280:	2020      	movs	r0, #32
 8001282:	f000 fcd9 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001286:	2040      	movs	r0, #64	; 0x40
 8001288:	f000 fcd6 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800128c:	2080      	movs	r0, #128	; 0x80
 800128e:	f000 fcd3 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001296:	f000 fccf 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}

0800129e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012a6:	f000 fcc7 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012ae:	f000 fcc3 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b6:	f000 fcbf 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012be:	f000 fcbb 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012c6:	f000 fcb7 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f003 fe63 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff f8cb 	bl	80004c0 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800132c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001338:	080050b4 	.word	0x080050b4
  ldr r2, =_sbss
 800133c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001340:	2000070c 	.word	0x2000070c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f961 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fc7e 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_InitTick+0x6c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d023      	beq.n	80013d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_InitTick+0x70>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f96d 	bl	8001682 <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d809      	bhi.n	80013c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f937 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_InitTick+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e007      	b.n	80013d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e004      	b.n	80013d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	73fb      	strb	r3, [r7, #15]
 80013d2:	e001      	b.n	80013d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000014 	.word	0x20000014
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	20000010 	.word	0x20000010

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000014 	.word	0x20000014
 8001414:	20000708 	.word	0x20000708

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000708 	.word	0x20000708

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000014 	.word	0x20000014

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0ac      	b.n	8001808 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f8b2 	bl	800181c <DFSDM_GetChannelFromInstance>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_DFSDM_ChannelInit+0x174>)
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e09f      	b.n	8001808 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff faf1 	bl	8000cb0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80016ce:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_DFSDM_ChannelInit+0x178>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_DFSDM_ChannelInit+0x178>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80016d8:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_DFSDM_ChannelInit+0x178>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d125      	bne.n	800172c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 80016e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016ea:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80016ec:	4b4a      	ldr	r3, [pc, #296]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4948      	ldr	r1, [pc, #288]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a46      	ldr	r2, [pc, #280]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 8001700:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001704:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3b01      	subs	r3, #1
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	493f      	ldr	r1, [pc, #252]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a3c      	ldr	r2, [pc, #240]	; (8001818 <HAL_DFSDM_ChannelInit+0x17c>)
 8001726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800172a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800173a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800174a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001750:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 020f 	bic.w	r2, r2, #15
 8001768:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001790:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6899      	ldr	r1, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f002 0207 	and.w	r2, r2, #7
 80017bc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f810 	bl	800181c <DFSDM_GetChannelFromInstance>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4904      	ldr	r1, [pc, #16]	; (8001810 <HAL_DFSDM_ChannelInit+0x174>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000003c 	.word	0x2000003c
 8001814:	20000038 	.word	0x20000038
 8001818:	40016000 	.word	0x40016000

0800181c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <DFSDM_GetChannelFromInstance+0x7c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d102      	bne.n	8001832 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e02b      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <DFSDM_GetChannelFromInstance+0x80>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d102      	bne.n	8001840 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e024      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <DFSDM_GetChannelFromInstance+0x84>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d102      	bne.n	800184e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001848:	2302      	movs	r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e01d      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <DFSDM_GetChannelFromInstance+0x88>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d102      	bne.n	800185c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001856:	2304      	movs	r3, #4
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e016      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <DFSDM_GetChannelFromInstance+0x8c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d102      	bne.n	800186a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001864:	2305      	movs	r3, #5
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e00f      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <DFSDM_GetChannelFromInstance+0x90>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d102      	bne.n	8001878 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001872:	2306      	movs	r3, #6
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	e008      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <DFSDM_GetChannelFromInstance+0x94>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001880:	2307      	movs	r3, #7
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e001      	b.n	800188a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001886:	2303      	movs	r3, #3
 8001888:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40016000 	.word	0x40016000
 800189c:	40016020 	.word	0x40016020
 80018a0:	40016040 	.word	0x40016040
 80018a4:	40016080 	.word	0x40016080
 80018a8:	400160a0 	.word	0x400160a0
 80018ac:	400160c0 	.word	0x400160c0
 80018b0:	400160e0 	.word	0x400160e0

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e17f      	b.n	8001bc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8171 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d118      	bne.n	8001994 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ac 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6613      	str	r3, [r2, #96]	; 0x60
 8001a72:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7e:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa8:	d025      	beq.n	8001af6 <HAL_GPIO_Init+0x242>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4f      	ldr	r2, [pc, #316]	; (8001bec <HAL_GPIO_Init+0x338>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01f      	beq.n	8001af2 <HAL_GPIO_Init+0x23e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_GPIO_Init+0x33c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x23a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_GPIO_Init+0x340>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x236>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <HAL_GPIO_Init+0x344>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x232>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_GPIO_Init+0x348>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x22e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x22a>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b3a:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f ae78 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	48000800 	.word	0x48000800
 8001bf4:	48000c00 	.word	0x48000c00
 8001bf8:	48001000 	.word	0x48001000
 8001bfc:	48001400 	.word	0x48001400
 8001c00:	48001800 	.word	0x48001800
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f806 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e081      	b.n	8001d94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d106      	bne.n	8001caa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff f867 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2224      	movs	r2, #36	; 0x24
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	e006      	b.n	8001d06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d104      	bne.n	8001d18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69d9      	ldr	r1, [r3, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d138      	bne.n	8001e24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e032      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d139      	bne.n	8001ebc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e033      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2224      	movs	r2, #36	; 0x24
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ecc:	b08f      	sub	sp, #60	; 0x3c
 8001ece:	af0a      	add	r7, sp, #40	; 0x28
 8001ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e116      	b.n	800210a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff f8fa 	bl	80010f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f002 fde3 	bl	8004ae6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	687e      	ldr	r6, [r7, #4]
 8001f28:	466d      	mov	r5, sp
 8001f2a:	f106 0410 	add.w	r4, r6, #16
 8001f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3e:	1d33      	adds	r3, r6, #4
 8001f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f002 fda3 	bl	8004a8e <USB_CoreInit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0d7      	b.n	800210a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fdd1 	bl	8004b08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e04a      	b.n	8002002 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	333d      	adds	r3, #61	; 0x3d
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333c      	adds	r3, #60	; 0x3c
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	b298      	uxth	r0, r3
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3342      	adds	r3, #66	; 0x42
 8001fa8:	4602      	mov	r2, r0
 8001faa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	333f      	adds	r3, #63	; 0x3f
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3344      	adds	r3, #68	; 0x44
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3350      	adds	r3, #80	; 0x50
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3af      	bcc.n	8001f6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e044      	b.n	800209c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3301      	adds	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3b5      	bcc.n	8002012 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	687e      	ldr	r6, [r7, #4]
 80020ae:	466d      	mov	r5, sp
 80020b0:	f106 0410 	add.w	r4, r6, #16
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c4:	1d33      	adds	r3, r6, #4
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	f002 fd69 	bl	8004ba0 <USB_DevInit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e014      	b.n	800210a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f80a 	bl	8002112 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f002 ff11 	bl	8004f2a <USB_DevDisconnect>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002112 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	f043 0303 	orr.w	r3, r3, #3
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_PWREx_GetVoltageRange+0x18>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40007000 	.word	0x40007000

08002198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a6:	d130      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d038      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2232      	movs	r2, #50	; 0x32
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	e002      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f0:	d102      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f2      	bne.n	80021de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d110      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e00f      	b.n	800222a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d007      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007000 	.word	0x40007000
 800223c:	2000000c 	.word	0x2000000c
 8002240:	431bde83 	.word	0x431bde83

08002244 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_PWREx_EnableVddUSB+0x1c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_PWREx_EnableVddUSB+0x1c>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002252:	6053      	str	r3, [r2, #4]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40007000 	.word	0x40007000

08002264 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff f8d4 	bl	8001418 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e063      	b.n	8002344 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fe fdcf 	bl	8000e34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002296:	f241 3188 	movw	r1, #5000	; 0x1388
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f858 	bl	8002350 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	021a      	lsls	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2120      	movs	r1, #32
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f850 	bl	800236c <QSPI_WaitFlagStateUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d131      	bne.n	800233a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022e0:	f023 0310 	bic.w	r3, r3, #16
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6852      	ldr	r2, [r2, #4]
 80022e8:	0611      	lsls	r1, r2, #24
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_QSPI_Init+0xe8>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6912      	ldr	r2, [r2, #16]
 8002306:	0411      	lsls	r1, r2, #16
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6952      	ldr	r2, [r2, #20]
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6992      	ldr	r2, [r2, #24]
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002342:	7afb      	ldrb	r3, [r7, #11]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	ffe0f8fe 	.word	0xffe0f8fe

08002350 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800237c:	e01a      	b.n	80023b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d016      	beq.n	80023b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7ff f847 	bl	8001418 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2204      	movs	r2, #4
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e00e      	b.n	80023d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1d6      	bne.n	800237e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e3d4      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	4ba1      	ldr	r3, [pc, #644]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f8:	4b9e      	ldr	r3, [pc, #632]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80e4 	beq.w	80025d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_RCC_OscConfig+0x4a>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	f040 808b 	bne.w	8002534 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	f040 8087 	bne.w	8002534 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002426:	4b93      	ldr	r3, [pc, #588]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x62>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3ac      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1a      	ldr	r2, [r3, #32]
 8002442:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_RCC_OscConfig+0x7c>
 800244e:	4b89      	ldr	r3, [pc, #548]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002456:	e005      	b.n	8002464 <HAL_RCC_OscConfig+0x88>
 8002458:	4b86      	ldr	r3, [pc, #536]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	4293      	cmp	r3, r2
 8002466:	d223      	bcs.n	80024b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fd41 	bl	8002ef4 <RCC_SetFlashLatencyFromMSIRange>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e38d      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800247c:	4b7d      	ldr	r3, [pc, #500]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7c      	ldr	r2, [pc, #496]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4977      	ldr	r1, [pc, #476]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249a:	4b76      	ldr	r3, [pc, #472]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	4972      	ldr	r1, [pc, #456]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
 80024ae:	e025      	b.n	80024fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b0:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a6f      	ldr	r2, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b6d      	ldr	r3, [pc, #436]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	496a      	ldr	r1, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ce:	4b69      	ldr	r3, [pc, #420]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fd01 	bl	8002ef4 <RCC_SetFlashLatencyFromMSIRange>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e34d      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fc:	f000 fc36 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 030f 	and.w	r3, r3, #15
 800250c:	495a      	ldr	r1, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x29c>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x2a0>)
 800251a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800251c:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x2a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff29 	bl	8001378 <HAL_InitTick>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d052      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	e331      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d032      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002548:	f7fe ff66 	bl	8001418 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002550:	f7fe ff62 	bl	8001418 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e31a      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	493b      	ldr	r1, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4936      	ldr	r1, [pc, #216]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e01a      	b.n	80025d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025a2:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a33      	ldr	r2, [pc, #204]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff33 	bl	8001418 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b6:	f7fe ff2f 	bl	8001418 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e2e7      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1da>
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d074      	beq.n	80026ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x21a>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d10e      	bne.n	800260e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d064      	beq.n	80026cc <HAL_RCC_OscConfig+0x2f0>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d160      	bne.n	80026cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e2c4      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x24a>
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	e01d      	b.n	8002662 <HAL_RCC_OscConfig+0x286>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x26e>
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x286>
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_RCC_OscConfig+0x298>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fed5 	bl	8001418 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002670:	e011      	b.n	8002696 <HAL_RCC_OscConfig+0x2ba>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	0800505c 	.word	0x0800505c
 800267c:	2000000c 	.word	0x2000000c
 8002680:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fec8 	bl	8001418 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e280      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002696:	4baf      	ldr	r3, [pc, #700]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x2a8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe feb8 	bl	8001418 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe feb4 	bl	8001418 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e26c      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026be:	4ba5      	ldr	r3, [pc, #660]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x2d0>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d060      	beq.n	800279c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d005      	beq.n	80026ec <HAL_RCC_OscConfig+0x310>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b0c      	cmp	r3, #12
 80026e4:	d119      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d116      	bne.n	800271a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ec:	4b99      	ldr	r3, [pc, #612]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_OscConfig+0x328>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e249      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b93      	ldr	r3, [pc, #588]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	4990      	ldr	r1, [pc, #576]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002718:	e040      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d023      	beq.n	800276a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002722:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a8b      	ldr	r2, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fe73 	bl	8001418 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fe6f 	bl	8001418 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e227      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002748:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	4b7f      	ldr	r3, [pc, #508]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	497c      	ldr	r1, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e018      	b.n	800279c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276a:	4b7a      	ldr	r3, [pc, #488]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a79      	ldr	r2, [pc, #484]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fe4f 	bl	8001418 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe fe4b 	bl	8001418 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e203      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002790:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d03c      	beq.n	8002822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80027b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b6:	4a67      	ldr	r2, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fe2a 	bl	8001418 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c8:	f7fe fe26 	bl	8001418 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1de      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027da:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x3ec>
 80027e8:	e01b      	b.n	8002822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe fe0d 	bl	8001418 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fe09 	bl	8001418 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1c1      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ef      	bne.n	8002802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80a6 	beq.w	800297c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b44      	ldr	r3, [pc, #272]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a43      	ldr	r2, [pc, #268]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
 800284c:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCC_OscConfig+0x57c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <HAL_RCC_OscConfig+0x57c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <HAL_RCC_OscConfig+0x57c>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002874:	f7fe fdd0 	bl	8001418 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fdcc 	bl	8001418 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e184      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_RCC_OscConfig+0x57c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d8>
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b2:	e024      	b.n	80028fe <HAL_RCC_OscConfig+0x522>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d110      	bne.n	80028de <HAL_RCC_OscConfig+0x502>
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a24      	ldr	r2, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d2:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028dc:	e00f      	b.n	80028fe <HAL_RCC_OscConfig+0x522>
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fd87 	bl	8001418 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fd83 	bl	8001418 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e139      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x578>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ed      	beq.n	800290e <HAL_RCC_OscConfig+0x532>
 8002932:	e01a      	b.n	800296a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fd70 	bl	8001418 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fd6c 	bl	8001418 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d906      	bls.n	800295c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e122      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800295c:	4b90      	ldr	r3, [pc, #576]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e8      	bne.n	800293c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002970:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	4a8a      	ldr	r2, [pc, #552]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8108 	beq.w	8002b96 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b02      	cmp	r3, #2
 800298c:	f040 80d0 	bne.w	8002b30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002990:	4b83      	ldr	r3, [pc, #524]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d130      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	3b01      	subs	r3, #1
 80029b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d127      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d0:	2a07      	cmp	r2, #7
 80029d2:	bf14      	ite	ne
 80029d4:	2201      	movne	r2, #1
 80029d6:	2200      	moveq	r2, #0
 80029d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	4293      	cmp	r3, r2
 80029dc:	d113      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d06e      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	d069      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a0c:	4b64      	ldr	r3, [pc, #400]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a18:	4b61      	ldr	r3, [pc, #388]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b7      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a28:	4b5d      	ldr	r3, [pc, #372]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a34:	f7fe fcf0 	bl	8001418 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fcec 	bl	8001418 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0a4      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4e:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCC_OscConfig+0x7c8>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a74:	0212      	lsls	r2, r2, #8
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a7c:	0852      	lsrs	r2, r2, #1
 8002a7e:	3a01      	subs	r2, #1
 8002a80:	0552      	lsls	r2, r2, #21
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0652      	lsls	r2, r2, #25
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a94:	0912      	lsrs	r2, r2, #4
 8002a96:	0452      	lsls	r2, r2, #17
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4941      	ldr	r1, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa0:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aac:	4b3c      	ldr	r3, [pc, #240]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab8:	f7fe fcae 	bl	8001418 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fcaa 	bl	8001418 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e062      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ade:	e05a      	b.n	8002b96 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e059      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d152      	bne.n	8002b96 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b08:	f7fe fc86 	bl	8001418 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fc82 	bl	8001418 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e03a      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x734>
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d02d      	beq.n	8002b92 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a19      	ldr	r2, [pc, #100]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fc55 	bl	8001418 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fe fc51 	bl	8001418 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e009      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f0      	bne.n	8002b72 <HAL_RCC_OscConfig+0x796>
 8002b90:	e001      	b.n	8002b96 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	f99d808c 	.word	0xf99d808c

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0c8      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 0207 	bic.w	r2, r3, #7
 8002bd2:	4961      	ldr	r1, [pc, #388]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0b0      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d04c      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c00:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d121      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e09e      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d115      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e092      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e086      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e07e      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c50:	4b42      	ldr	r3, [pc, #264]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 0203 	bic.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	493f      	ldr	r1, [pc, #252]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c62:	f7fe fbd9 	bl	8001418 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	e00a      	b.n	8002c80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6a:	f7fe fbd5 	bl	8001418 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e066      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 020c 	and.w	r2, r3, #12
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d1eb      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9e:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	492c      	ldr	r1, [pc, #176]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d210      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4924      	ldr	r1, [pc, #144]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e036      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4918      	ldr	r1, [pc, #96]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4910      	ldr	r1, [pc, #64]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d1e:	f000 f825 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d22:	4602      	mov	r2, r0
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	490c      	ldr	r1, [pc, #48]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	5ccb      	ldrb	r3, [r1, r3]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fb18 	bl	8001378 <HAL_InitTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	0800505c 	.word	0x0800505c
 8002d64:	2000000c 	.word	0x2000000c
 8002d68:	20000010 	.word	0x20000010

08002d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d7a:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x34>
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b0c      	cmp	r3, #12
 8002d98:	d121      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d11e      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dac:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e005      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d102      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e004      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002df2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d134      	bne.n	8002e64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d003      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0xac>
 8002e10:	e005      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e14:	617b      	str	r3, [r7, #20]
      break;
 8002e16:	e005      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e1a:	617b      	str	r3, [r7, #20]
      break;
 8002e1c:	e002      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	617b      	str	r3, [r7, #20]
      break;
 8002e22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	3301      	adds	r3, #1
 8002e30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	fb02 f203 	mul.w	r2, r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	0e5b      	lsrs	r3, r3, #25
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	3301      	adds	r3, #1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e64:	69bb      	ldr	r3, [r7, #24]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08005074 	.word	0x08005074
 8002e7c:	00f42400 	.word	0x00f42400
 8002e80:	007a1200 	.word	0x007a1200

08002e84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c

08002e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ea0:	f7ff fff0 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	0800506c 	.word	0x0800506c

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ecc:	f7ff ffda 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0adb      	lsrs	r3, r3, #11
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	0800506c 	.word	0x0800506c

08002ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f0c:	f7ff f936 	bl	800217c <HAL_PWREx_GetVoltageRange>
 8002f10:	6178      	str	r0, [r7, #20]
 8002f12:	e014      	b.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	4a24      	ldr	r2, [pc, #144]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f2c:	f7ff f926 	bl	800217c <HAL_PWREx_GetVoltageRange>
 8002f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f44:	d10b      	bne.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d919      	bls.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f50:	d902      	bls.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f52:	2302      	movs	r3, #2
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	e013      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f58:	2301      	movs	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e010      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d902      	bls.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f64:	2303      	movs	r3, #3
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e00a      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d102      	bne.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f70:	2302      	movs	r3, #2
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e004      	b.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d101      	bne.n	8002f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 0207 	bic.w	r2, r3, #7
 8002f88:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d041      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fd8:	d02a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fde:	d824      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fea:	d81e      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff4:	d010      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ff6:	e018      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ff8:	4b86      	ldr	r3, [pc, #536]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4a85      	ldr	r2, [pc, #532]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003002:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003004:	e015      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 facb 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003016:	e00c      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3320      	adds	r3, #32
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fbb6 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	74fb      	strb	r3, [r7, #19]
      break;
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003038:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003046:	4973      	ldr	r1, [pc, #460]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800304e:	e001      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d041      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003068:	d02a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800306a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800306e:	d824      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800307a:	d81e      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003084:	d010      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003086:	e018      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003088:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a61      	ldr	r2, [pc, #388]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003094:	e015      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fa83 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a6:	e00c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3320      	adds	r3, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fb6e 	bl	8003790 <RCCEx_PLLSAI2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	74fb      	strb	r3, [r7, #19]
      break;
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030c8:	4b52      	ldr	r3, [pc, #328]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d6:	494f      	ldr	r1, [pc, #316]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a0 	beq.w	8003232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003106:	2300      	movs	r3, #0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	4a40      	ldr	r2, [pc, #256]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003116:	6593      	str	r3, [r2, #88]	; 0x58
 8003118:	4b3e      	ldr	r3, [pc, #248]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003124:	2301      	movs	r3, #1
 8003126:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003134:	f7fe f970 	bl	8001418 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800313a:	e009      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fe f96c 	bl	8001418 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d902      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	74fb      	strb	r3, [r7, #19]
        break;
 800314e:	e005      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ef      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d15c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01f      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	429a      	cmp	r2, r3
 800317e:	d019      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a20      	ldr	r2, [pc, #128]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d016      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe f92b 	bl	8001418 <HAL_GetTick>
 80031c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c4:	e00b      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe f927 	bl	8001418 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d902      	bls.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	74fb      	strb	r3, [r7, #19]
            break;
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ec      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800320a:	e009      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003220:	7c7b      	ldrb	r3, [r7, #17]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b9e      	ldr	r3, [pc, #632]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a9d      	ldr	r2, [pc, #628]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800323e:	4b98      	ldr	r3, [pc, #608]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 0203 	bic.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	4994      	ldr	r1, [pc, #592]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 020c 	bic.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	498c      	ldr	r1, [pc, #560]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003282:	4b87      	ldr	r3, [pc, #540]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	4983      	ldr	r1, [pc, #524]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032a4:	4b7e      	ldr	r3, [pc, #504]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	497b      	ldr	r1, [pc, #492]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032c6:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	4972      	ldr	r1, [pc, #456]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e8:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	496a      	ldr	r1, [pc, #424]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	4961      	ldr	r1, [pc, #388]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800332c:	4b5c      	ldr	r3, [pc, #368]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	4959      	ldr	r1, [pc, #356]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334e:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335c:	4950      	ldr	r1, [pc, #320]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337e:	4948      	ldr	r1, [pc, #288]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	493f      	ldr	r1, [pc, #252]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d028      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033b4:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c2:	4937      	ldr	r1, [pc, #220]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d2:	d106      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d4:	4b32      	ldr	r3, [pc, #200]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a31      	ldr	r2, [pc, #196]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033de:	60d3      	str	r3, [r2, #12]
 80033e0:	e011      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ea:	d10c      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f8d8 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d028      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	491f      	ldr	r1, [pc, #124]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003430:	d106      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4a1a      	ldr	r2, [pc, #104]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343c:	60d3      	str	r3, [r2, #12]
 800343e:	e011      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f8a9 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02b      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348e:	d109      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800349a:	60d3      	str	r3, [r2, #12]
 800349c:	e014      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f877 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e2:	4928      	ldr	r1, [pc, #160]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f2:	d10d      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f854 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d014      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	74bb      	strb	r3, [r7, #18]
 800350e:	e011      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003518:	d10c      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3320      	adds	r3, #32
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f935 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354e:	490d      	ldr	r1, [pc, #52]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003572:	4904      	ldr	r1, [pc, #16]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800357a:	7cbb      	ldrb	r3, [r7, #18]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b75      	ldr	r3, [pc, #468]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c2:	4b72      	ldr	r3, [pc, #456]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d10d      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035da:	4b6c      	ldr	r3, [pc, #432]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d047      	beq.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e044      	b.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d018      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x86>
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d825      	bhi.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
 8003600:	2b01      	cmp	r3, #1
 8003602:	d002      	beq.n	800360a <RCCEx_PLLSAI1_Config+0x62>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d009      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x74>
 8003608:	e020      	b.n	800364c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800360a:	4b60      	ldr	r3, [pc, #384]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361a:	e01a      	b.n	8003652 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800361c:	4b5b      	ldr	r3, [pc, #364]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e013      	b.n	8003656 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800362e:	4b57      	ldr	r3, [pc, #348]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800363a:	4b54      	ldr	r3, [pc, #336]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800364a:	e006      	b.n	800365a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      break;
 8003650:	e004      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003652:	bf00      	nop
 8003654:	e002      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365a:	bf00      	nop
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	430b      	orrs	r3, r1
 8003678:	4944      	ldr	r1, [pc, #272]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d17d      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a40      	ldr	r2, [pc, #256]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd fec2 	bl	8001418 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003696:	e009      	b.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003698:	f7fd febe 	bl	8001418 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	73fb      	strb	r3, [r7, #15]
        break;
 80036aa:	e005      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ef      	bne.n	8003698 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d160      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d111      	bne.n	80036e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	0912      	lsrs	r2, r2, #4
 80036dc:	0452      	lsls	r2, r2, #17
 80036de:	430a      	orrs	r2, r1
 80036e0:	492a      	ldr	r1, [pc, #168]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
 80036e6:	e027      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d112      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	0211      	lsls	r1, r2, #8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6912      	ldr	r2, [r2, #16]
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	3a01      	subs	r2, #1
 8003708:	0552      	lsls	r2, r2, #21
 800370a:	430a      	orrs	r2, r1
 800370c:	491f      	ldr	r1, [pc, #124]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
 8003712:	e011      	b.n	8003738 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6952      	ldr	r2, [r2, #20]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0652      	lsls	r2, r2, #25
 8003730:	430a      	orrs	r2, r1
 8003732:	4916      	ldr	r1, [pc, #88]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a13      	ldr	r2, [pc, #76]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fe68 	bl	8001418 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374a:	e009      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374c:	f7fd fe64 	bl	8001418 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	73fb      	strb	r3, [r7, #15]
          break;
 800375e:	e005      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c2:	4b61      	ldr	r3, [pc, #388]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
       ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d047      	beq.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e044      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d018      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x86>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d825      	bhi.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <RCCEx_PLLSAI2_Config+0x62>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d009      	beq.n	8003804 <RCCEx_PLLSAI2_Config+0x74>
 80037f0:	e020      	b.n	8003834 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f2:	4b55      	ldr	r3, [pc, #340]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e01a      	b.n	800383a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003804:	4b50      	ldr	r3, [pc, #320]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e013      	b.n	800383e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003832:	e006      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e004      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003842:	bf00      	nop
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	430b      	orrs	r3, r1
 8003860:	4939      	ldr	r1, [pc, #228]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d167      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800386c:	4b36      	ldr	r3, [pc, #216]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a35      	ldr	r2, [pc, #212]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd fdce 	bl	8001418 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003880:	f7fd fdca 	bl	8001418 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
        break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ef      	bne.n	8003880 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d14a      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0912      	lsrs	r2, r2, #4
 80038c4:	0452      	lsls	r2, r2, #17
 80038c6:	430a      	orrs	r2, r1
 80038c8:	491f      	ldr	r1, [pc, #124]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	614b      	str	r3, [r1, #20]
 80038ce:	e011      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	0211      	lsls	r1, r2, #8
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6912      	ldr	r2, [r2, #16]
 80038e6:	0852      	lsrs	r2, r2, #1
 80038e8:	3a01      	subs	r2, #1
 80038ea:	0652      	lsls	r2, r2, #25
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4916      	ldr	r1, [pc, #88]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fd8a 	bl	8001418 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003906:	e009      	b.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003908:	f7fd fd86 	bl	8001418 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	73fb      	strb	r3, [r7, #15]
          break;
 800391a:	e005      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4904      	ldr	r1, [pc, #16]	; (8003948 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e095      	b.n	8003a8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d009      	beq.n	8003984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	e005      	b.n	8003984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fa8c 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c4:	d902      	bls.n	80039cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e002      	b.n	80039d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039da:	d007      	beq.n	80039ec <HAL_SPI_Init+0xa0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	ea42 0103 	orr.w	r1, r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f003 0204 	and.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08a      	sub	sp, #40	; 0x28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x26>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e1fb      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x41e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac0:	f7fd fcaa 	bl	8001418 <HAL_GetTick>
 8003ac4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003acc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003adc:	7efb      	ldrb	r3, [r7, #27]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d00e      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x6e>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x66>
 8003af2:	7efb      	ldrb	r3, [r7, #27]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d003      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003afe:	e1cd      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x80>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x80>
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b18:	e1c0      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d003      	beq.n	8003b2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2205      	movs	r2, #5
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	887a      	ldrh	r2, [r7, #2]
 8003b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	887a      	ldrh	r2, [r7, #2]
 8003b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	887a      	ldrh	r2, [r7, #2]
 8003b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b70:	d802      	bhi.n	8003b78 <HAL_SPI_TransmitReceive+0xe6>
 8003b72:	8a3b      	ldrh	r3, [r7, #16]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d908      	bls.n	8003b8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	e007      	b.n	8003b9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d007      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bc0:	d97c      	bls.n	8003cbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x13e>
 8003bca:	8a7b      	ldrh	r3, [r7, #18]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d169      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	e056      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d11b      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d113      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	881a      	ldrh	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11c      	bne.n	8003c84 <HAL_SPI_TransmitReceive+0x1f2>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c80:	2301      	movs	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c84:	f7fd fbc8 	bl	8001418 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d807      	bhi.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d003      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ca2:	e0fb      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1a3      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x164>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d19d      	bne.n	8003bf6 <HAL_SPI_TransmitReceive+0x164>
 8003cba:	e0df      	b.n	8003e7c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x23a>
 8003cc4:	8a7b      	ldrh	r3, [r7, #18]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f040 80cb 	bne.w	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d912      	bls.n	8003cfc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	881a      	ldrh	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b02      	subs	r3, #2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfa:	e0b2      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d22:	e09e      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d134      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02f      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d12c      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d912      	bls.n	8003d72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b02      	subs	r3, #2
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d70:	e012      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	7812      	ldrb	r2, [r2, #0]
 8003d7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d148      	bne.n	8003e3c <HAL_SPI_TransmitReceive+0x3aa>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d042      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d923      	bls.n	8003e0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b02      	subs	r3, #2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d81f      	bhi.n	8003e38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e016      	b.n	8003e38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f103 020c 	add.w	r2, r3, #12
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e3c:	f7fd faec 	bl	8001418 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d803      	bhi.n	8003e54 <HAL_SPI_TransmitReceive+0x3c2>
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x3c8>
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e60:	e01c      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f af5b 	bne.w	8003d24 <HAL_SPI_TransmitReceive+0x292>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f47f af54 	bne.w	8003d24 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f937 	bl	80040f4 <SPI_EndRxTxTransaction>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	661a      	str	r2, [r3, #96]	; 0x60
 8003e98:	e000      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3728      	adds	r7, #40	; 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ec8:	f7fd faa6 	bl	8001418 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ed8:	f7fd fa9e 	bl	8001418 <HAL_GetTick>
 8003edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ede:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	015b      	lsls	r3, r3, #5
 8003ee4:	0d1b      	lsrs	r3, r3, #20
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eee:	e054      	b.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d050      	beq.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ef8:	f7fd fa8e 	bl	8001418 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d902      	bls.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d13d      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f26:	d111      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	d004      	beq.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d107      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d10f      	bne.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e017      	b.n	8003fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d19b      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000000c 	.word	0x2000000c

08003fc8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fda:	f7fd fa1d 	bl	8001418 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fea:	f7fd fa15 	bl	8001418 <HAL_GetTick>
 8003fee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00da      	lsls	r2, r3, #3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	0d1b      	lsrs	r3, r3, #20
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004010:	e060      	b.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004018:	d107      	bne.n	800402a <SPI_WaitFifoStateUntilTimeout+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004028:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d050      	beq.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004032:	f7fd f9f1 	bl	8001418 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	429a      	cmp	r2, r3
 8004040:	d902      	bls.n	8004048 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d13d      	bne.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004056:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d111      	bne.n	8004086 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d004      	beq.n	8004076 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d107      	bne.n	8004086 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408e:	d10f      	bne.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e010      	b.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d196      	bne.n	8004012 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	; 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c

080040f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2200      	movs	r2, #0
 8004108:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff ff5b 	bl	8003fc8 <SPI_WaitFifoStateUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e027      	b.n	8004178 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	; 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fec0 	bl	8003eb8 <SPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e014      	b.n	8004178 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7ff ff34 	bl	8003fc8 <SPI_WaitFifoStateUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e000      	b.n	8004178 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e040      	b.n	8004214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc ff00 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	; 0x24
 80041ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f82c 	bl	800421c <UART_SetConfig>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e022      	b.n	8004214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 faaa 	bl	8004730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb31 	bl	8004874 <UART_CheckIdleState>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	b5b0      	push	{r4, r5, r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4bad      	ldr	r3, [pc, #692]	; (80044fc <UART_SetConfig+0x2e0>)
 8004248:	4013      	ands	r3, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	69f9      	ldr	r1, [r7, #28]
 8004250:	430b      	orrs	r3, r1
 8004252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4aa2      	ldr	r2, [pc, #648]	; (8004500 <UART_SetConfig+0x2e4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d004      	beq.n	8004284 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	430a      	orrs	r2, r1
 8004296:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a99      	ldr	r2, [pc, #612]	; (8004504 <UART_SetConfig+0x2e8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d121      	bne.n	80042e6 <UART_SetConfig+0xca>
 80042a2:	4b99      	ldr	r3, [pc, #612]	; (8004508 <UART_SetConfig+0x2ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d817      	bhi.n	80042e0 <UART_SetConfig+0xc4>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <UART_SetConfig+0x9c>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042d5 	.word	0x080042d5
 80042c0:	080042cf 	.word	0x080042cf
 80042c4:	080042db 	.word	0x080042db
 80042c8:	2301      	movs	r3, #1
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e0e7      	b.n	800449e <UART_SetConfig+0x282>
 80042ce:	2302      	movs	r3, #2
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e0e4      	b.n	800449e <UART_SetConfig+0x282>
 80042d4:	2304      	movs	r3, #4
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e0e1      	b.n	800449e <UART_SetConfig+0x282>
 80042da:	2308      	movs	r3, #8
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e0de      	b.n	800449e <UART_SetConfig+0x282>
 80042e0:	2310      	movs	r3, #16
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e0db      	b.n	800449e <UART_SetConfig+0x282>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a88      	ldr	r2, [pc, #544]	; (800450c <UART_SetConfig+0x2f0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d132      	bne.n	8004356 <UART_SetConfig+0x13a>
 80042f0:	4b85      	ldr	r3, [pc, #532]	; (8004508 <UART_SetConfig+0x2ec>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d828      	bhi.n	8004350 <UART_SetConfig+0x134>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0xe8>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004339 	.word	0x08004339
 8004308:	08004351 	.word	0x08004351
 800430c:	08004351 	.word	0x08004351
 8004310:	08004351 	.word	0x08004351
 8004314:	08004345 	.word	0x08004345
 8004318:	08004351 	.word	0x08004351
 800431c:	08004351 	.word	0x08004351
 8004320:	08004351 	.word	0x08004351
 8004324:	0800433f 	.word	0x0800433f
 8004328:	08004351 	.word	0x08004351
 800432c:	08004351 	.word	0x08004351
 8004330:	08004351 	.word	0x08004351
 8004334:	0800434b 	.word	0x0800434b
 8004338:	2300      	movs	r3, #0
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e0af      	b.n	800449e <UART_SetConfig+0x282>
 800433e:	2302      	movs	r3, #2
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e0ac      	b.n	800449e <UART_SetConfig+0x282>
 8004344:	2304      	movs	r3, #4
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e0a9      	b.n	800449e <UART_SetConfig+0x282>
 800434a:	2308      	movs	r3, #8
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e0a6      	b.n	800449e <UART_SetConfig+0x282>
 8004350:	2310      	movs	r3, #16
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e0a3      	b.n	800449e <UART_SetConfig+0x282>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6d      	ldr	r2, [pc, #436]	; (8004510 <UART_SetConfig+0x2f4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0x186>
 8004360:	4b69      	ldr	r3, [pc, #420]	; (8004508 <UART_SetConfig+0x2ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d013      	beq.n	8004396 <UART_SetConfig+0x17a>
 800436e:	2b30      	cmp	r3, #48	; 0x30
 8004370:	d814      	bhi.n	800439c <UART_SetConfig+0x180>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d009      	beq.n	800438a <UART_SetConfig+0x16e>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d810      	bhi.n	800439c <UART_SetConfig+0x180>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x168>
 800437e:	2b10      	cmp	r3, #16
 8004380:	d006      	beq.n	8004390 <UART_SetConfig+0x174>
 8004382:	e00b      	b.n	800439c <UART_SetConfig+0x180>
 8004384:	2300      	movs	r3, #0
 8004386:	76fb      	strb	r3, [r7, #27]
 8004388:	e089      	b.n	800449e <UART_SetConfig+0x282>
 800438a:	2302      	movs	r3, #2
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e086      	b.n	800449e <UART_SetConfig+0x282>
 8004390:	2304      	movs	r3, #4
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e083      	b.n	800449e <UART_SetConfig+0x282>
 8004396:	2308      	movs	r3, #8
 8004398:	76fb      	strb	r3, [r7, #27]
 800439a:	e080      	b.n	800449e <UART_SetConfig+0x282>
 800439c:	2310      	movs	r3, #16
 800439e:	76fb      	strb	r3, [r7, #27]
 80043a0:	e07d      	b.n	800449e <UART_SetConfig+0x282>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5b      	ldr	r2, [pc, #364]	; (8004514 <UART_SetConfig+0x2f8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d120      	bne.n	80043ee <UART_SetConfig+0x1d2>
 80043ac:	4b56      	ldr	r3, [pc, #344]	; (8004508 <UART_SetConfig+0x2ec>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043b6:	2bc0      	cmp	r3, #192	; 0xc0
 80043b8:	d013      	beq.n	80043e2 <UART_SetConfig+0x1c6>
 80043ba:	2bc0      	cmp	r3, #192	; 0xc0
 80043bc:	d814      	bhi.n	80043e8 <UART_SetConfig+0x1cc>
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x1ba>
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d810      	bhi.n	80043e8 <UART_SetConfig+0x1cc>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <UART_SetConfig+0x1b4>
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d006      	beq.n	80043dc <UART_SetConfig+0x1c0>
 80043ce:	e00b      	b.n	80043e8 <UART_SetConfig+0x1cc>
 80043d0:	2300      	movs	r3, #0
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e063      	b.n	800449e <UART_SetConfig+0x282>
 80043d6:	2302      	movs	r3, #2
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e060      	b.n	800449e <UART_SetConfig+0x282>
 80043dc:	2304      	movs	r3, #4
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	e05d      	b.n	800449e <UART_SetConfig+0x282>
 80043e2:	2308      	movs	r3, #8
 80043e4:	76fb      	strb	r3, [r7, #27]
 80043e6:	e05a      	b.n	800449e <UART_SetConfig+0x282>
 80043e8:	2310      	movs	r3, #16
 80043ea:	76fb      	strb	r3, [r7, #27]
 80043ec:	e057      	b.n	800449e <UART_SetConfig+0x282>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a49      	ldr	r2, [pc, #292]	; (8004518 <UART_SetConfig+0x2fc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d125      	bne.n	8004444 <UART_SetConfig+0x228>
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <UART_SetConfig+0x2ec>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004406:	d017      	beq.n	8004438 <UART_SetConfig+0x21c>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440c:	d817      	bhi.n	800443e <UART_SetConfig+0x222>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d00b      	beq.n	800442c <UART_SetConfig+0x210>
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d811      	bhi.n	800443e <UART_SetConfig+0x222>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <UART_SetConfig+0x20a>
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	d006      	beq.n	8004432 <UART_SetConfig+0x216>
 8004424:	e00b      	b.n	800443e <UART_SetConfig+0x222>
 8004426:	2300      	movs	r3, #0
 8004428:	76fb      	strb	r3, [r7, #27]
 800442a:	e038      	b.n	800449e <UART_SetConfig+0x282>
 800442c:	2302      	movs	r3, #2
 800442e:	76fb      	strb	r3, [r7, #27]
 8004430:	e035      	b.n	800449e <UART_SetConfig+0x282>
 8004432:	2304      	movs	r3, #4
 8004434:	76fb      	strb	r3, [r7, #27]
 8004436:	e032      	b.n	800449e <UART_SetConfig+0x282>
 8004438:	2308      	movs	r3, #8
 800443a:	76fb      	strb	r3, [r7, #27]
 800443c:	e02f      	b.n	800449e <UART_SetConfig+0x282>
 800443e:	2310      	movs	r3, #16
 8004440:	76fb      	strb	r3, [r7, #27]
 8004442:	e02c      	b.n	800449e <UART_SetConfig+0x282>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2d      	ldr	r2, [pc, #180]	; (8004500 <UART_SetConfig+0x2e4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d125      	bne.n	800449a <UART_SetConfig+0x27e>
 800444e:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <UART_SetConfig+0x2ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800445c:	d017      	beq.n	800448e <UART_SetConfig+0x272>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004462:	d817      	bhi.n	8004494 <UART_SetConfig+0x278>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004468:	d00b      	beq.n	8004482 <UART_SetConfig+0x266>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446e:	d811      	bhi.n	8004494 <UART_SetConfig+0x278>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x260>
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d006      	beq.n	8004488 <UART_SetConfig+0x26c>
 800447a:	e00b      	b.n	8004494 <UART_SetConfig+0x278>
 800447c:	2300      	movs	r3, #0
 800447e:	76fb      	strb	r3, [r7, #27]
 8004480:	e00d      	b.n	800449e <UART_SetConfig+0x282>
 8004482:	2302      	movs	r3, #2
 8004484:	76fb      	strb	r3, [r7, #27]
 8004486:	e00a      	b.n	800449e <UART_SetConfig+0x282>
 8004488:	2304      	movs	r3, #4
 800448a:	76fb      	strb	r3, [r7, #27]
 800448c:	e007      	b.n	800449e <UART_SetConfig+0x282>
 800448e:	2308      	movs	r3, #8
 8004490:	76fb      	strb	r3, [r7, #27]
 8004492:	e004      	b.n	800449e <UART_SetConfig+0x282>
 8004494:	2310      	movs	r3, #16
 8004496:	76fb      	strb	r3, [r7, #27]
 8004498:	e001      	b.n	800449e <UART_SetConfig+0x282>
 800449a:	2310      	movs	r3, #16
 800449c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a17      	ldr	r2, [pc, #92]	; (8004500 <UART_SetConfig+0x2e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f040 8087 	bne.w	80045b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044aa:	7efb      	ldrb	r3, [r7, #27]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d837      	bhi.n	8004520 <UART_SetConfig+0x304>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x29c>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	08004521 	.word	0x08004521
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	08004521 	.word	0x08004521
 80044c8:	080044eb 	.word	0x080044eb
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004521 	.word	0x08004521
 80044d8:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fcde 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 80044e0:	6178      	str	r0, [r7, #20]
        break;
 80044e2:	e022      	b.n	800452a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <UART_SetConfig+0x300>)
 80044e6:	617b      	str	r3, [r7, #20]
        break;
 80044e8:	e01f      	b.n	800452a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe fc3f 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 80044ee:	6178      	str	r0, [r7, #20]
        break;
 80044f0:	e01b      	b.n	800452a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	617b      	str	r3, [r7, #20]
        break;
 80044f8:	e017      	b.n	800452a <UART_SetConfig+0x30e>
 80044fa:	bf00      	nop
 80044fc:	efff69f3 	.word	0xefff69f3
 8004500:	40008000 	.word	0x40008000
 8004504:	40013800 	.word	0x40013800
 8004508:	40021000 	.word	0x40021000
 800450c:	40004400 	.word	0x40004400
 8004510:	40004800 	.word	0x40004800
 8004514:	40004c00 	.word	0x40004c00
 8004518:	40005000 	.word	0x40005000
 800451c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	76bb      	strb	r3, [r7, #26]
        break;
 8004528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80f1 	beq.w	8004714 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d305      	bcc.n	800454e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	429a      	cmp	r2, r3
 800454c:	d902      	bls.n	8004554 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	76bb      	strb	r3, [r7, #26]
 8004552:	e0df      	b.n	8004714 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4618      	mov	r0, r3
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	020b      	lsls	r3, r1, #8
 8004566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800456a:	0202      	lsls	r2, r0, #8
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	6849      	ldr	r1, [r1, #4]
 8004570:	0849      	lsrs	r1, r1, #1
 8004572:	4608      	mov	r0, r1
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	1814      	adds	r4, r2, r0
 800457a:	eb43 0501 	adc.w	r5, r3, r1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	461a      	mov	r2, r3
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	4620      	mov	r0, r4
 800458a:	4629      	mov	r1, r5
 800458c:	f7fb fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459e:	d308      	bcc.n	80045b2 <UART_SetConfig+0x396>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a6:	d204      	bcs.n	80045b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e0b0      	b.n	8004714 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	76bb      	strb	r3, [r7, #26]
 80045b6:	e0ad      	b.n	8004714 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d15b      	bne.n	800467a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80045c2:	7efb      	ldrb	r3, [r7, #27]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d828      	bhi.n	800461a <UART_SetConfig+0x3fe>
 80045c8:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <UART_SetConfig+0x3b4>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	080045fd 	.word	0x080045fd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	0800460b 	.word	0x0800460b
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800461b 	.word	0x0800461b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7fe fc52 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 80045f8:	6178      	str	r0, [r7, #20]
        break;
 80045fa:	e013      	b.n	8004624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fc64 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8004600:	6178      	str	r0, [r7, #20]
        break;
 8004602:	e00f      	b.n	8004624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <UART_SetConfig+0x510>)
 8004606:	617b      	str	r3, [r7, #20]
        break;
 8004608:	e00c      	b.n	8004624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7fe fbaf 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 800460e:	6178      	str	r0, [r7, #20]
        break;
 8004610:	e008      	b.n	8004624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	617b      	str	r3, [r7, #20]
        break;
 8004618:	e004      	b.n	8004624 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	76bb      	strb	r3, [r7, #26]
        break;
 8004622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d074      	beq.n	8004714 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005a      	lsls	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	d916      	bls.n	8004674 <UART_SetConfig+0x458>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d212      	bcs.n	8004674 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f023 030f 	bic.w	r3, r3, #15
 8004656:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	b29b      	uxth	r3, r3
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	b29a      	uxth	r2, r3
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	4313      	orrs	r3, r2
 8004668:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	89fa      	ldrh	r2, [r7, #14]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e04f      	b.n	8004714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	76bb      	strb	r3, [r7, #26]
 8004678:	e04c      	b.n	8004714 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800467a:	7efb      	ldrb	r3, [r7, #27]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d828      	bhi.n	80046d2 <UART_SetConfig+0x4b6>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <UART_SetConfig+0x46c>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046ad 	.word	0x080046ad
 800468c:	080046b5 	.word	0x080046b5
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046d3 	.word	0x080046d3
 8004698:	080046c3 	.word	0x080046c3
 800469c:	080046d3 	.word	0x080046d3
 80046a0:	080046d3 	.word	0x080046d3
 80046a4:	080046d3 	.word	0x080046d3
 80046a8:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7fe fbf6 	bl	8002e9c <HAL_RCC_GetPCLK1Freq>
 80046b0:	6178      	str	r0, [r7, #20]
        break;
 80046b2:	e013      	b.n	80046dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7fe fc08 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 80046b8:	6178      	str	r0, [r7, #20]
        break;
 80046ba:	e00f      	b.n	80046dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <UART_SetConfig+0x510>)
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e00c      	b.n	80046dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fb53 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 80046c6:	6178      	str	r0, [r7, #20]
        break;
 80046c8:	e008      	b.n	80046dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	617b      	str	r3, [r7, #20]
        break;
 80046d0:	e004      	b.n	80046dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	76bb      	strb	r3, [r7, #26]
        break;
 80046da:	bf00      	nop
    }

    if (pclk != 0U)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	085a      	lsrs	r2, r3, #1
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	441a      	add	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d909      	bls.n	8004710 <UART_SetConfig+0x4f4>
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004702:	d205      	bcs.n	8004710 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	e001      	b.n	8004714 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004720:	7ebb      	ldrb	r3, [r7, #26]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bdb0      	pop	{r4, r5, r7, pc}
 800472a:	bf00      	nop
 800472c:	00f42400 	.word	0x00f42400

08004730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01a      	beq.n	8004846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d10a      	bne.n	8004846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004884:	f7fc fdc8 	bl	8001418 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d10e      	bne.n	80048b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f82d 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e023      	b.n	80048fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d10e      	bne.n	80048e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f817 	bl	8004906 <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e00d      	b.n	80048fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b09c      	sub	sp, #112	; 0x70
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004916:	e0a5      	b.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	f000 80a1 	beq.w	8004a64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fc fd79 	bl	8001418 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <UART_WaitOnFlagUntilTimeout+0x32>
 8004932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004934:	2b00      	cmp	r3, #0
 8004936:	d13e      	bne.n	80049b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800494c:	667b      	str	r3, [r7, #100]	; 0x64
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004958:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800495c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e6      	bne.n	8004938 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	663b      	str	r3, [r7, #96]	; 0x60
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800498a:	64ba      	str	r2, [r7, #72]	; 0x48
 800498c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e5      	bne.n	800496a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e067      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d04f      	beq.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d147      	bne.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
 80049fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e6      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a30:	623a      	str	r2, [r7, #32]
 8004a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6a3a      	ldr	r2, [r7, #32]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e010      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	f43f af4a 	beq.w	8004918 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3770      	adds	r7, #112	; 0x70
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a8e:	b084      	sub	sp, #16
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	f107 001c 	add.w	r0, r7, #28
 8004a9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa6b 	bl	8004f88 <USB_CoreReset>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ac8:	e005      	b.n	8004ad6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae2:	b004      	add	sp, #16
 8004ae4:	4770      	bx	lr

08004ae6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d115      	bne.n	8004b56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b36:	2001      	movs	r0, #1
 8004b38:	f7fc fc7a 	bl	8001430 <HAL_Delay>
      ms++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa12 	bl	8004f6c <USB_GetMode>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d01e      	beq.n	8004b8c <USB_SetCurrentMode+0x84>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b31      	cmp	r3, #49	; 0x31
 8004b52:	d9f0      	bls.n	8004b36 <USB_SetCurrentMode+0x2e>
 8004b54:	e01a      	b.n	8004b8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d115      	bne.n	8004b88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7fc fc61 	bl	8001430 <HAL_Delay>
      ms++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f9f9 	bl	8004f6c <USB_GetMode>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <USB_SetCurrentMode+0x84>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b31      	cmp	r3, #49	; 0x31
 8004b84:	d9f0      	bls.n	8004b68 <USB_SetCurrentMode+0x60>
 8004b86:	e001      	b.n	8004b8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e005      	b.n	8004b98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b32      	cmp	r3, #50	; 0x32
 8004b90:	d101      	bne.n	8004b96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e009      	b.n	8004bd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3340      	adds	r3, #64	; 0x40
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b0e      	cmp	r3, #14
 8004bd8:	d9f2      	bls.n	8004bc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11c      	bne.n	8004c1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e005      	b.n	8004c26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c38:	4619      	mov	r1, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	461a      	mov	r2, r3
 8004c42:	680b      	ldr	r3, [r1, #0]
 8004c44:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c46:	2103      	movs	r1, #3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f955 	bl	8004ef8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c4e:	2110      	movs	r1, #16
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8f1 	bl	8004e38 <USB_FlushTxFifo>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f91b 	bl	8004e9c <USB_FlushRxFifo>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e043      	b.n	8004d22 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb0:	d118      	bne.n	8004ce4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e013      	b.n	8004cf6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e008      	b.n	8004cf6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	461a      	mov	r2, r3
 8004d04:	2300      	movs	r3, #0
 8004d06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3b7      	bcc.n	8004c9a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e043      	b.n	8004db8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d46:	d118      	bne.n	8004d7a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	e013      	b.n	8004d8c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e008      	b.n	8004d8c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	3301      	adds	r3, #1
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d3b7      	bcc.n	8004d30 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004de0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f043 0210 	orr.w	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <USB_DevInit+0x294>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f043 0208 	orr.w	r2, r3, #8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e2e:	b004      	add	sp, #16
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	803c3800 	.word	0x803c3800

08004e38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <USB_FlushTxFifo+0x60>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e01a      	b.n	8004e8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	daf3      	bge.n	8004e46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <USB_FlushTxFifo+0x60>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e006      	b.n	8004e8c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d0f1      	beq.n	8004e6e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	00030d40 	.word	0x00030d40

08004e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4a11      	ldr	r2, [pc, #68]	; (8004ef4 <USB_FlushRxFifo+0x58>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e017      	b.n	8004ee8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	daf3      	bge.n	8004ea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <USB_FlushRxFifo+0x58>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e006      	b.n	8004ee8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d0f1      	beq.n	8004eca <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	00030d40 	.word	0x00030d40

08004ef8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f003 0301 	and.w	r3, r3, #1
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <USB_CoreReset+0x60>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e01a      	b.n	8004fda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	daf3      	bge.n	8004f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <USB_CoreReset+0x60>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d0f1      	beq.n	8004fbc <USB_CoreReset+0x34>

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	00030d40 	.word	0x00030d40

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4d0d      	ldr	r5, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1b64      	subs	r4, r4, r5
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2600      	movs	r6, #0
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4d0b      	ldr	r5, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 f820 	bl	8005044 <_init>
 8005004:	1b64      	subs	r4, r4, r5
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2600      	movs	r6, #0
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	080050ac 	.word	0x080050ac
 8005028:	080050ac 	.word	0x080050ac
 800502c:	080050ac 	.word	0x080050ac
 8005030:	080050b0 	.word	0x080050b0

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
